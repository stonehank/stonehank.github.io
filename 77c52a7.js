(window.webpackJsonp=window.webpackJsonp||[]).push([[881],{1679:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">nums</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{boolean}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> makesquare = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">nums</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(nums.length===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n  <span class=\\"hljs-keyword\\">let</span> sum=nums.reduce(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">a,b</span>)=&gt;</span>a+b)\\n  <span class=\\"hljs-keyword\\">if</span>(sum % <span class=\\"hljs-number\\">4</span>!==<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n  <span class=\\"hljs-keyword\\">let</span> edge=sum / <span class=\\"hljs-number\\">4</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> num <span class=\\"hljs-keyword\\">of</span> nums) <span class=\\"hljs-keyword\\">if</span>(num&gt;edge)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n  <span class=\\"hljs-keyword\\">let</span> visited=<span class=\\"hljs-built_in\\">Array</span>(nums.length).fill(<span class=\\"hljs-literal\\">false</span>)\\n  <span class=\\"hljs-keyword\\">let</span> find=<span class=\\"hljs-literal\\">false</span>\\n\\n  dfs(<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">4</span>)\\n  <span class=\\"hljs-keyword\\">return</span> find\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">dfs</span>(<span class=\\"hljs-params\\">start,len,eNum</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(find)<span class=\\"hljs-keyword\\">return</span>\\n    <span class=\\"hljs-keyword\\">if</span>(eNum===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span> find=<span class=\\"hljs-literal\\">true</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=start;i&lt;nums.length;i++){\\n      <span class=\\"hljs-keyword\\">if</span>(visited[i])<span class=\\"hljs-keyword\\">continue</span>\\n      <span class=\\"hljs-keyword\\">let</span> nxtLen=len+nums[i]\\n      <span class=\\"hljs-keyword\\">if</span>(nxtLen-edge*(<span class=\\"hljs-number\\">4</span>-eNum)&gt;edge)<span class=\\"hljs-keyword\\">continue</span>\\n      visited[i]=<span class=\\"hljs-literal\\">true</span>\\n      <span class=\\"hljs-keyword\\">let</span> nxtID=i+<span class=\\"hljs-number\\">1</span>\\n      <span class=\\"hljs-keyword\\">if</span>(nxtLen % edge===<span class=\\"hljs-number\\">0</span>){\\n        nxtID=<span class=\\"hljs-number\\">0</span>\\n        eNum--\\n      }\\n      dfs(nxtID,nxtLen,eNum)\\n      <span class=\\"hljs-keyword\\">if</span>(nxtLen % edge===<span class=\\"hljs-number\\">0</span>)eNum++\\n      visited[i]=<span class=\\"hljs-literal\\">false</span>\\n    }\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"matchsticks-to-square","created_at":"2019-04-09","timeArr":[2019,3,9,12,54,48,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>回溯，先算出实际的边的长度<code>edge</code>，不断添加边，如果发现当前边的长度<strong>大于</strong><code>edge</code>，跳过，继续添加下一条边，\\n如果当前边<strong>小于</strong><code>edge</code>，可以继续添加边，从<code>i+1</code>开始继续查找；</p>\\n<p>如果存在当前边的长度<strong>等于</strong><code>edge</code>，说明这是一条有效的边，边的个数(初始是<code>4</code>)减一，然后从<code>i=0</code>开始继续找第二条边。</p>\\n","content":"<p>还记得童话《卖火柴的小女孩》吗？现在，你知道小女孩有多少根火柴，请找出一种能使用所有火柴拼成一个正方形的方法。不能折断火柴，可以把火柴连接起来，并且每根火柴都要用到。</p>\\n\\n<p>输入为小女孩拥有火柴的数目，每根火柴用其长度表示。输出即为是否能用所有的火柴拼成正方形。</p>\\n\\n<p><strong>示例&nbsp;1:</strong></p>\\n\\n<pre>\\n<strong>输入:</strong> [1,1,2,2,2]\\n<strong>输出:</strong> true\\n\\n<strong>解释:</strong> 能拼成一个边长为2的正方形，每边两根火柴。\\n</pre>\\n\\n<p><strong>示例&nbsp;2:</strong></p>\\n\\n<pre>\\n<strong>输入:</strong> [3,3,3,3,4]\\n<strong>输出:</strong> false\\n\\n<strong>解释:</strong> 不能用所有火柴拼成一个正方形。\\n</pre>\\n\\n<p><strong>注意:</strong></p>\\n\\n<ol>\\n\\t<li>给定的火柴长度和在&nbsp;<code>0</code>&nbsp;到&nbsp;<code>10^9</code>之间。</li>\\n\\t<li>火柴数组的长度不超过15。</li>\\n</ol>\\n","title":"473. 火柴拼正方形","relatedTags":["位运算","数组","动态规划","回溯","状态压缩"],"difficult":"Middle","lang":["javascript"],"uniqueID":"473","slug":"473-Matchsticks-to-Square"}')}}]);