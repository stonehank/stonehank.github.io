(window.webpackJsonp=window.webpackJsonp||[]).push([[1235],{2033:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">A</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> lenLongestFibSubseq = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">A</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> hash={}\\n  <span class=\\"hljs-keyword\\">let</span> N=A.length\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;N;i++)hash[A[i]]=i\\n  <span class=\\"hljs-keyword\\">let</span> dp=<span class=\\"hljs-built_in\\">Array</span>(N).fill().map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span>=&gt;</span><span class=\\"hljs-built_in\\">Array</span>(N).fill(<span class=\\"hljs-number\\">2</span>))\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;N;i++){\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=i<span class=\\"hljs-number\\">-1</span>;j&gt;=<span class=\\"hljs-number\\">0</span>;j--){\\n      <span class=\\"hljs-keyword\\">let</span> cur=A[i],pre=A[j]\\n      <span class=\\"hljs-keyword\\">if</span>(cur-pre&gt;=pre)<span class=\\"hljs-keyword\\">break</span>\\n      <span class=\\"hljs-keyword\\">if</span>(hash[cur-pre]==<span class=\\"hljs-literal\\">null</span>)<span class=\\"hljs-keyword\\">continue</span>\\n      dp[i][j]=dp[j][hash[cur-pre]]+<span class=\\"hljs-number\\">1</span>\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> maxLen=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;N;i++){\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;N;j++){\\n      <span class=\\"hljs-keyword\\">if</span>(dp[i][j]&gt;<span class=\\"hljs-number\\">2</span>){\\n        maxLen=<span class=\\"hljs-built_in\\">Math</span>.max(maxLen,dp[i][j])\\n      }\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> maxLen\\n};\\n</code></pre>\\n"],"querySlug":"length-of-longest-fibonacci-subsequence","created_at":"2019-03-09","timeArr":[2019,2,9,0,51,42,0],"hasThinking":false,"content":"<p>如果序列 <code>X_1, X_2, ..., X_n</code> 满足下列条件，就说它是 <em>斐波那契式 </em>的：</p>\\n\\n<ul>\\n\\t<li><code>n >= 3</code></li>\\n\\t<li>对于所有 <code>i + 2 <= n</code>，都有 <code>X_i + X_{i+1} = X_{i+2}</code></li>\\n</ul>\\n\\n<p>给定一个<strong>严格递增</strong>的正整数数组形成序列 arr ，找到 <font color=\\"#c7254e\\"><font face=\\"Menlo, Monaco, Consolas, Courier New, monospace\\"><span style=\\"font-size:12.600000381469727px\\"><span style=\\"caret-color:#c7254e\\"><span style=\\"background-color:#f9f2f4\\">arr</span></span></span></font></font> 中最长的斐波那契式的子序列的长度。如果一个不存在，返回  0 。</p>\\n\\n<p><em>（回想一下，子序列是从原序列 <font color=\\"#c7254e\\"><font face=\\"Menlo, Monaco, Consolas, Courier New, monospace\\"><span style=\\"font-size:12.600000381469727px\\"><span style=\\"caret-color:#c7254e\\"><span style=\\"background-color:#f9f2f4\\">arr</span></span></span></font></font> 中派生出来的，它从 <font color=\\"#c7254e\\"><font face=\\"Menlo, Monaco, Consolas, Courier New, monospace\\"><span style=\\"font-size:12.600000381469727px\\"><span style=\\"caret-color:#c7254e\\"><span style=\\"background-color:#f9f2f4\\">arr</span></span></span></font></font> 中删掉任意数量的元素（也可以不删），而不改变其余元素的顺序。例如， <code>[3, 5, 8]</code> 是 <code>[3, 4, 5, 6, 7, 8]</code> 的一个子序列）</em></p>\\n\\n<p> </p>\\n\\n<ul>\\n</ul>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入: </strong>arr =<strong> </strong>[1,2,3,4,5,6,7,8]\\n<strong>输出: </strong>5\\n<strong>解释: </strong>最长的斐波那契式子序列为 [1,2,3,5,8] 。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入: </strong>arr =<strong> </strong>[1,3,7,11,12,14,18]\\n<strong>输出: </strong>3\\n<strong>解释</strong>: 最长的斐波那契式子序列有 [1,11,12]、[3,11,14] 以及 [7,11,18] 。\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>3 <= arr.length <= 1000</code></li>\\n\\t<li>\\n\\t<p><code>1 <= arr[i] < arr[i + 1] <= 10^9</code></p>\\n\\t</li>\\n</ul>\\n","title":"873. 最长的斐波那契子序列的长度","relatedTags":["数组","哈希表","动态规划"],"difficult":"Middle","lang":["javascript"],"uniqueID":"873","slug":"873-Length-of-Longest-Fibonacci-Subsequence"}')}}]);