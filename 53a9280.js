(window.webpackJsonp=window.webpackJsonp||[]).push([[687],{1485:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for singly-linked list.\\n * function ListNode(val) {\\n *     this.val = val;\\n *     this.next = null;\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{ListNode[]}</span> <span class=\\"hljs-variable\\">lists</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{ListNode}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> mergeKLists = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">lists</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(lists.length===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">null</span>\\n  <span class=\\"hljs-keyword\\">while</span>(lists.length&gt;<span class=\\"hljs-number\\">1</span>){\\n    <span class=\\"hljs-keyword\\">let</span> len=<span class=\\"hljs-built_in\\">Math</span>.floor(lists.length/<span class=\\"hljs-number\\">2</span>)\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;len;i++){\\n      <span class=\\"hljs-keyword\\">let</span> list1=lists.shift(),list2=lists.shift()\\n      lists.push(merge(list1,list2))\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> lists[<span class=\\"hljs-number\\">0</span>]\\n  \\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">merge</span>(<span class=\\"hljs-params\\">list1,list2</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> root=<span class=\\"hljs-keyword\\">new</span> ListNode(<span class=\\"hljs-literal\\">null</span>)\\n    <span class=\\"hljs-keyword\\">let</span> res=root\\n    <span class=\\"hljs-keyword\\">let</span> node1=list1,node2=list2\\n    <span class=\\"hljs-keyword\\">while</span>(node1 || node2){\\n      <span class=\\"hljs-keyword\\">if</span>(!node1){\\n        res.next=node2\\n        node2=node2.next\\n      }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(!node2){\\n        res.next=node1\\n        node1=node1.next\\n      }<span class=\\"hljs-keyword\\">else</span>{\\n        <span class=\\"hljs-keyword\\">if</span>(node1.val&gt;node2.val){\\n          res.next=node2\\n          node2=node2.next\\n        }<span class=\\"hljs-keyword\\">else</span>{\\n          res.next=node1\\n          node1=node1.next\\n        }\\n      }\\n      res=res.next\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> root.next\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"merge-k-sorted-lists","created_at":"2019-04-19","timeArr":[2019,3,19,23,54,13,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>好几种方法能解决，</p>\\n<ol>\\n<li>\\n<p>直接排序，将每一个<code>node.val</code>添加到数组，然后排序后重新生成链表。</p>\\n</li>\\n<li>\\n<p>优先队列，将每一个<code>node</code>加入<code>Priority Queue</code>，然后再从小到大导出即可。</p>\\n</li>\\n<li>\\n<p>归并排序(见代码)。</p>\\n</li>\\n<li>\\n<p>多指针(比较慢)，每一次都找出当前每一个<code>list[i]</code>中的最小值，找到的那个节点执行<code>list[i]=list[i].next</code>。</p>\\n</li>\\n</ol>\\n","content":"<p>给你一个链表数组，每个链表都已经按升序排列。</p>\\n\\n<p>请你将所有链表合并到一个升序链表中，返回合并后的链表。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>lists = [[1,4,5],[1,3,4],[2,6]]\\n<strong>输出：</strong>[1,1,2,3,4,4,5,6]\\n<strong>解释：</strong>链表数组如下：\\n[\\n  1-&gt;4-&gt;5,\\n  1-&gt;3-&gt;4,\\n  2-&gt;6\\n]\\n将它们合并到一个有序链表中得到。\\n1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>lists = []\\n<strong>输出：</strong>[]\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>lists = [[]]\\n<strong>输出：</strong>[]\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>k == lists.length</code></li>\\n\\t<li><code>0 &lt;= k &lt;= 10^4</code></li>\\n\\t<li><code>0 &lt;= lists[i].length &lt;= 500</code></li>\\n\\t<li><code>-10^4 &lt;= lists[i][j] &lt;= 10^4</code></li>\\n\\t<li><code>lists[i]</code> 按 <strong>升序</strong> 排列</li>\\n\\t<li><code>lists[i].length</code> 的总和不超过 <code>10^4</code></li>\\n</ul>\\n","title":"23. 合并K个升序链表","relatedTags":["链表","分治","堆（优先队列）","归并排序"],"difficult":"Hard","lang":["javascript"],"uniqueID":"23","slug":"23-Merge-k-Sorted-Lists"}')}}]);