(window.webpackJsonp=window.webpackJsonp||[]).push([[1220],{2018:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for singly-linked list.\\n * function ListNode(val) {\\n *     this.val = val;\\n *     this.next = null;\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{ListNode}</span> <span class=\\"hljs-variable\\">head</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">x</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{ListNode}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> partition = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">head, x</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> node=<span class=\\"hljs-keyword\\">new</span> ListNode(<span class=\\"hljs-number\\">0</span>),less=node,\\n      node2=<span class=\\"hljs-keyword\\">new</span> ListNode(<span class=\\"hljs-number\\">0</span>),greater=node2\\n  <span class=\\"hljs-keyword\\">while</span>(head){\\n    <span class=\\"hljs-keyword\\">let</span> curVal=head.val\\n    <span class=\\"hljs-keyword\\">if</span>(curVal&lt;x){\\n      less.next=head\\n      less=less.next\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      greater.next=head\\n      greater=greater.next\\n    }\\n    head=head.next\\n  }\\n  less.next=node2.next\\n  greater.next=<span class=\\"hljs-literal\\">null</span>\\n  <span class=\\"hljs-keyword\\">return</span> node.next\\n};\\n</code></pre>\\n"],"querySlug":"partition-list","created_at":"2019-04-11","timeArr":[2019,3,11,16,5,44,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>建立一个链表头<code>less</code>和链表头<code>greater</code>，遍历链表<code>head</code>，如果<code>head.val&lt;x</code>，放入<code>less</code>中，如果<code>head.val&gt;=x</code>放入<code>greater</code>中。</p>\\n<p>最后合并<code>less</code>和<code>greater</code>。</p>\\n","content":"<p>给你一个链表的头节点 <code>head</code> 和一个特定值<em> </em><code>x</code> ，请你对链表进行分隔，使得所有 <strong>小于</strong> <code>x</code> 的节点都出现在 <strong>大于或等于</strong> <code>x</code> 的节点之前。</p>\\n\\n<p>你应当 <strong>保留</strong> 两个分区中每个节点的初始相对位置。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2021/01/04/partition.jpg\\" style=\\"width: 662px; height: 222px;\\" />\\n<pre>\\n<strong>输入：</strong>head = [1,4,3,2,5,2], x = 3\\n<strong>输出</strong>：[1,2,2,4,3,5]\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>head = [2,1], x = 2\\n<strong>输出</strong>：[1,2]\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li>链表中节点的数目在范围 <code>[0, 200]</code> 内</li>\\n\\t<li><code>-100 <= Node.val <= 100</code></li>\\n\\t<li><code>-200 <= x <= 200</code></li>\\n</ul>\\n","title":"86. 分隔链表","relatedTags":["链表","双指针"],"difficult":"Middle","lang":["javascript"],"uniqueID":"86","slug":"86-Partition-List"}')}}]);