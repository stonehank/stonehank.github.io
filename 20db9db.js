(window.webpackJsonp=window.webpackJsonp||[]).push([[330],{1128:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * // Definition for a Node.\\n * function Node(val,left,right,next) {\\n *    this.val = val;\\n *    this.left = left;\\n *    this.right = right;\\n *    this.next = next;\\n * };\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{Node}</span> <span class=\\"hljs-variable\\">root</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{Node}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> connect = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">root</span>) </span>{\\n <span class=\\"hljs-keyword\\">if</span>(!root)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">null</span>\\n  makeConnect(root)\\n  <span class=\\"hljs-keyword\\">return</span> root\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">makeConnect</span>(<span class=\\"hljs-params\\">root</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(!root)<span class=\\"hljs-keyword\\">return</span>\\n    <span class=\\"hljs-keyword\\">if</span>(root.left &amp;&amp; root.right){\\n      root.left.next=root.right\\n    }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(root.left &amp;&amp; !root.left.next){\\n      root.left.next=findNext(root.next)\\n    }\\n    <span class=\\"hljs-keyword\\">if</span>(root.right &amp;&amp; !root.right.next){\\n      root.right.next=findNext(root.next)\\n    }\\n    makeConnect(root.right)\\n    makeConnect(root.left)\\n  }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">findNext</span>(<span class=\\"hljs-params\\">root</span>)</span>{\\n    <span class=\\"hljs-keyword\\">while</span>( root &amp;&amp; !root.left &amp;&amp; !root.right)root=root.next\\n    <span class=\\"hljs-keyword\\">if</span>(!root)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">null</span>\\n    <span class=\\"hljs-keyword\\">return</span> root.left || root.right\\n  }   \\n};\\n</code></pre>\\n"],"querySlug":"populating-next-right-pointers-in-each-node-ii","created_at":"2019-03-18","timeArr":[2019,2,18,17,8,13,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<ul>\\n<li>BFS</li>\\n</ul>\\n<p>对于每个<code>root</code>，通过<code>root.next</code>来不断定义它的子树的<code>next</code>，直到<code>root==null</code>，并且通过变量<code>head</code>保存当前<code>root</code>的第一个子树(左优先)，当<code>root==null</code>的时候，设置<code>root=head</code>，从而跳转到它的第一个子树，继续定义这个子树的子树的<code>next</code>。</p>\\n<pre class=\\"hljs\\"><code><span class=\\"hljs-keyword\\">var</span> connect = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">root</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(!root)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">null</span>\\n  <span class=\\"hljs-keyword\\">let</span> cur=root,\\n      pre=<span class=\\"hljs-literal\\">null</span>,\\n      head=<span class=\\"hljs-literal\\">null</span>\\n  <span class=\\"hljs-keyword\\">while</span>(cur!=<span class=\\"hljs-literal\\">null</span>){\\n    <span class=\\"hljs-keyword\\">while</span>(cur!=<span class=\\"hljs-literal\\">null</span>){\\n\\n      <span class=\\"hljs-keyword\\">if</span>(cur.left){\\n        <span class=\\"hljs-keyword\\">if</span>(pre)pre.next=cur.left\\n        <span class=\\"hljs-keyword\\">if</span>(!head)head=cur.left\\n        pre=cur.left\\n      }\\n      \\n      <span class=\\"hljs-keyword\\">if</span>(cur.right){\\n        <span class=\\"hljs-keyword\\">if</span>(!head)head=cur.right\\n        <span class=\\"hljs-keyword\\">if</span>(pre)pre.next=cur.right\\n        pre=cur.right\\n      }\\n      cur=cur.next\\n    }\\n    cur=head\\n    head=<span class=\\"hljs-literal\\">null</span>\\n    pre=<span class=\\"hljs-literal\\">null</span>\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> root    \\n};\\n</code></pre>\\n<ul>\\n<li>DFS</li>\\n</ul>\\n<p>思想和<code>BFS</code>差不多，对于当前<code>root</code>，通过<code>root.next</code>，定义它的子树的<code>next</code>，注意的是，在递归的时候，需要先递归<code>root.right</code>，这时因为不像<code>BFS</code>是一层一层遍历，<code>DFS</code>是先递归到最底端，然后再返回，而<code>findNext</code>是找出节点的最左的子节点；</p>\\n<p>如果先<code>root.left</code>，那么最底端一些节点就无法通过<code>next</code>跳转到它的右侧的节点，因为<code>findNext</code>可能找到了最左的子节点，但没有找到更右边的子节点，因此右边的一些节点可能是还未被连接的。</p>\\n<p>例如：这里由于<code>5</code>和<code>6</code>无法相连，导致<code>7</code>和<code>8</code>无法相连。</p>\\n<pre class=\\"hljs\\"><code>       1  -&gt;   2\\n     /  \\\\     / \\\\\\n    3 -&gt; 4 -&gt;5   6\\n   /              \\\\\\n 7                 8\\n</code></pre>\\n<p>因此，先递归<code>root.right</code>，确保右边都已经连接完毕，再执行<code>root.left</code>。</p>\\n","content":"<p>给定一个二叉树</p>\\n\\n<pre>\\nstruct Node {\\n  int val;\\n  Node *left;\\n  Node *right;\\n  Node *next;\\n}</pre>\\n\\n<p>填充它的每个 next 指针，让这个指针指向其下一个右侧节点。如果找不到下一个右侧节点，则将 next 指针设置为 <code>NULL</code>。</p>\\n\\n<p>初始状态下，所有 next 指针都被设置为 <code>NULL</code>。</p>\\n\\n<p> </p>\\n\\n<p><strong>进阶：</strong></p>\\n\\n<ul>\\n\\t<li>你只能使用常量级额外空间。</li>\\n\\t<li>使用递归解题也符合要求，本题中递归程序占用的栈空间不算做额外的空间复杂度。</li>\\n</ul>\\n\\n<p> </p>\\n\\n<p><strong>示例：</strong></p>\\n\\n<p><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/15/117_sample.png\\" style=\\"height: 218px; width: 640px;\\" /></p>\\n\\n<pre>\\n<strong>输入</strong>：root = [1,2,3,4,5,null,7]\\n<strong>输出：</strong>[1,#,2,3,#,4,5,7,#]\\n<strong>解释：</strong>给定二叉树如图 A 所示，你的函数应该填充它的每个 next 指针，以指向其下一个右侧节点，如图 B 所示。序列化输出按层序遍历顺序（由 next 指针连接），\'#\' 表示每层的末尾。</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li>树中的节点数小于 <code>6000</code></li>\\n\\t<li><code>-100 <= node.val <= 100</code></li>\\n</ul>\\n\\n<p> </p>\\n\\n<ul>\\n</ul>\\n","title":"117. 填充每个节点的下一个右侧节点指针 II","relatedTags":["树","深度优先搜索","广度优先搜索","二叉树"],"difficult":"Middle","lang":["javascript"],"uniqueID":"117","slug":"117-Populating-Next-Right-Pointers-in-Each-Node-II"}')}}]);