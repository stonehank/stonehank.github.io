(window.webpackJsonp=window.webpackJsonp||[]).push([[484],{1282:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">s</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{string}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> reformat = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">str</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> l=[],\\n      n=[]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> s <span class=\\"hljs-keyword\\">of</span> str){\\n    <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-regexp\\">/\\\\d/</span>.test(s)){\\n      n.push(s)\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      l.push(s)\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-built_in\\">Math</span>.abs(l.length-n.length)&gt;=<span class=\\"hljs-number\\">2</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-string\\">\'\'</span>\\n  <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-string\\">\'\'</span>\\n  <span class=\\"hljs-keyword\\">let</span> maxLen,more,less\\n  <span class=\\"hljs-comment\\">// console.log(l,n)</span>\\n  <span class=\\"hljs-keyword\\">if</span>(l.length&gt;n.length){\\n    maxLen=l.length\\n    more=l\\n    less=n\\n  }<span class=\\"hljs-keyword\\">else</span>{\\n    maxLen=n.length\\n    more=n\\n    less=l\\n  }\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;maxLen;i++){\\n    res+=more[i]+(less[i]==<span class=\\"hljs-literal\\">null</span> ? <span class=\\"hljs-string\\">\'\'</span> : less[i])\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"reformat-the-string","created_at":"2020-04-19","timeArr":[2020,3,19,10,35,7,0],"hasThinking":false,"content":"<p>给你一个混合了数字和字母的字符串 <code>s</code>，其中的字母均为小写英文字母。</p>\\n\\n<p>请你将该字符串重新格式化，使得任意两个相邻字符的类型都不同。也就是说，字母后面应该跟着数字，而数字后面应该跟着字母。</p>\\n\\n<p>请你返回 <strong>重新格式化后</strong> 的字符串；如果无法按要求重新格式化，则返回一个 <strong>空字符串</strong> 。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>s = &quot;a0b1c2&quot;\\n<strong>输出：</strong>&quot;0a1b2c&quot;\\n<strong>解释：</strong>&quot;0a1b2c&quot; 中任意两个相邻字符的类型都不同。 &quot;a0b1c2&quot;, &quot;0a1b2c&quot;, &quot;0c2a1b&quot; 也是满足题目要求的答案。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>s = &quot;leetcode&quot;\\n<strong>输出：</strong>&quot;&quot;\\n<strong>解释：</strong>&quot;leetcode&quot; 中只有字母，所以无法满足重新格式化的条件。\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>s = &quot;1229857369&quot;\\n<strong>输出：</strong>&quot;&quot;\\n<strong>解释：</strong>&quot;1229857369&quot; 中只有数字，所以无法满足重新格式化的条件。\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre><strong>输入：</strong>s = &quot;covid2019&quot;\\n<strong>输出：</strong>&quot;c2o0v1i9d&quot;\\n</pre>\\n\\n<p><strong>示例 5：</strong></p>\\n\\n<pre><strong>输入：</strong>s = &quot;ab123&quot;\\n<strong>输出：</strong>&quot;1a2b3&quot;\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= s.length &lt;= 500</code></li>\\n\\t<li><code>s</code> 仅由小写英文字母和/或数字组成。</li>\\n</ul>\\n","title":"1417. 重新格式化字符串","relatedTags":["字符串"],"difficult":"Easy","lang":["javascript"],"uniqueID":"1417","slug":"1417-Reformat-The-String"}')}}]);