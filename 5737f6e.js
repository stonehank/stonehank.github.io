(window.webpackJsonp=window.webpackJsonp||[]).push([[248],{1046:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{TreeNode}</span> <span class=\\"hljs-variable\\">root</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{TreeNode}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> bstToGst = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">root</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(!root)<span class=\\"hljs-keyword\\">return</span> root\\n  <span class=\\"hljs-keyword\\">let</span> aux=[]\\n  inorder(root)\\n  <span class=\\"hljs-keyword\\">let</span> last=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=aux.length<span class=\\"hljs-number\\">-1</span>;i&gt;=<span class=\\"hljs-number\\">0</span>;i--){\\n    aux[i]+=last\\n    last=aux[i]\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> idx=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-comment\\">// console.log(aux)</span>\\n  modi(root)\\n  <span class=\\"hljs-keyword\\">return</span> root\\n  \\n  \\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">modi</span>(<span class=\\"hljs-params\\">root</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(root.left)modi(root.left)\\n    root.val=aux[idx++]\\n    <span class=\\"hljs-keyword\\">if</span>(root.right)modi(root.right)    \\n  }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">inorder</span>(<span class=\\"hljs-params\\">root</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(root.left)inorder(root.left)\\n    aux.push(root.val)\\n    <span class=\\"hljs-keyword\\">if</span>(root.right)inorder(root.right)\\n  }\\n  \\n};\\n</code></pre>\\n"],"querySlug":"binary-search-tree-to-greater-sum-tree","created_at":"2019-05-05","timeArr":[2019,4,5,10,44,0,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>从大到小遍历，每个节点的值增加之前节点和。</p>\\n","content":"<p><span style=\\"font-size:10.5pt\\"><span style=\\"font-family:Calibri\\"><span style=\\"font-size:10.5000pt\\"><span style=\\"font-family:宋体\\"><font face=\\"宋体\\">给定一个二叉搜索树，请将它的每个</font></span></span></span></span>节点<span style=\\"font-size:10.5pt\\"><span style=\\"font-family:Calibri\\"><span style=\\"font-size:10.5000pt\\"><span style=\\"font-family:宋体\\"><font face=\\"宋体\\">的值替换成树中大于或者等于该</font></span></span></span></span>节点<span style=\\"font-size:10.5pt\\"><span style=\\"font-family:Calibri\\"><span style=\\"font-size:10.5000pt\\"><span style=\\"font-family:宋体\\"><font face=\\"宋体\\">值的所有</font></span></span></span></span>节点<span style=\\"font-size:10.5pt\\"><span style=\\"font-family:Calibri\\"><span style=\\"font-size:10.5000pt\\"><span style=\\"font-family:宋体\\"><font face=\\"宋体\\">值之和。</font></span></span></span></span></p>\\n\\n<p>提醒一下，二叉搜索树满足下列约束条件：</p>\\n\\n<ul>\\n\\t<li>节点的左子树仅包含键<strong> 小于 </strong>节点键的节点。</li>\\n\\t<li>节点的右子树仅包含键<strong> 大于</strong> 节点键的节点。</li>\\n\\t<li>左右子树也必须是二叉搜索树。</li>\\n</ul>\\n\\n<p><strong>注意：</strong>该题目与 538: <a href=\\"https://leetcode-cn.com/problems/convert-bst-to-greater-tree/\\">https://leetcode-cn.com/problems/convert-bst-to-greater-tree/  </a>相同</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<p><strong><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/05/03/tree.png\\" style=\\"height: 364px; width: 534px;\\" /></strong></p>\\n\\n<pre>\\n<strong>输入：</strong>[4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]\\n<strong>输出：</strong>[30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>root = [0,null,1]\\n<strong>输出：</strong>[1,null,1]\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>root = [1,0,2]\\n<strong>输出：</strong>[3,3,2]\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>root = [3,2,4,1]\\n<strong>输出：</strong>[7,9,4,10]\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li>树中的节点数介于 <code>1</code> 和 <code>100</code> 之间。</li>\\n\\t<li>每个节点的值介于 <code>0</code> 和 <code>100</code> 之间。</li>\\n\\t<li>树中的所有值 <strong>互不相同</strong> 。</li>\\n\\t<li>给定的树为二叉搜索树。</li>\\n</ul>\\n","title":"1038. 把二叉搜索树转换为累加树","relatedTags":["树","深度优先搜索","二叉搜索树","二叉树"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1038","slug":"1038-Binary-Search-Tree-to-Greater-Sum-Tree"}')}}]);