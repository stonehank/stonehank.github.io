(window.webpackJsonp=window.webpackJsonp||[]).push([[734],{1532:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">num</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{boolean}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> isAdditiveNumber = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">num</span>) </span>{\\n  <span class=\\"hljs-keyword\\">return</span> backtrack(<span class=\\"hljs-number\\">0</span>,[])\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">backtrack</span>(<span class=\\"hljs-params\\">start,arr</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(arr.length&gt;<span class=\\"hljs-number\\">2</span>){\\n      <span class=\\"hljs-keyword\\">if</span>(arr[arr.length<span class=\\"hljs-number\\">-3</span>]+arr[arr.length<span class=\\"hljs-number\\">-2</span>]!==arr[arr.length<span class=\\"hljs-number\\">-1</span>])<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n    }\\n    <span class=\\"hljs-keyword\\">if</span>(start===num.length){\\n      <span class=\\"hljs-comment\\">// console.log(arr)</span>\\n      <span class=\\"hljs-keyword\\">return</span> arr.length&gt;=<span class=\\"hljs-number\\">3</span>\\n    }\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=start;i&lt;num.length;i++){\\n      <span class=\\"hljs-keyword\\">if</span>(i&gt;start &amp;&amp; num[start]===<span class=\\"hljs-string\\">\\"0\\"</span>)<span class=\\"hljs-keyword\\">break</span>\\n      <span class=\\"hljs-keyword\\">let</span> s=+num.substring(start,i+<span class=\\"hljs-number\\">1</span>)\\n      arr.push(s)\\n      <span class=\\"hljs-keyword\\">if</span>(backtrack(i+<span class=\\"hljs-number\\">1</span>,arr))<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n      arr.pop()\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"additive-number","created_at":"2019-04-18","timeArr":[2019,3,18,16,53,45,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>回溯，每次从当前开始的索引<code>start</code>到<code>num.length</code>取出一段字符，添加进<code>arr</code>，尝试是否能作为累加数的一部分。</p>\\n<p>注意，如果检测到<code>arr</code>最后第2，3个相加与最后第1个不相等，立刻返回<code>false</code>。</p>\\n<p>如果当前开始的索引<code>start</code>对应的数字是<code>0</code>，如果<code>0</code>不符合，直接返回<code>false</code>，因为不存在<code>前导0</code>的数字。</p>\\n<p>最后<code>start===num.length</code>，如果<code>arr</code>的长度不足3，返回<code>false</code>。</p>\\n","content":"<p>累加数是一个字符串，组成它的数字可以形成累加序列。</p>\\n\\n<p>一个有效的累加序列必须<strong>至少</strong>包含 3 个数。除了最开始的两个数以外，字符串中的其他数都等于它之前两个数相加的和。</p>\\n\\n<p>给定一个只包含数字&nbsp;<code>&#39;0&#39;-&#39;9&#39;</code>&nbsp;的字符串，编写一个算法来判断给定输入是否是累加数。</p>\\n\\n<p><strong>说明:&nbsp;</strong>累加序列里的数不会以 0 开头，所以不会出现&nbsp;<code>1, 2, 03</code> 或者&nbsp;<code>1, 02, 3</code>&nbsp;的情况。</p>\\n\\n<p><strong>示例 1:</strong></p>\\n\\n<pre><strong>输入:</strong> <code>&quot;112358&quot;</code>\\n<strong>输出:</strong> true \\n<strong>解释: </strong>累加序列为: <code>1, 1, 2, 3, 5, 8 </code>。1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8\\n</pre>\\n\\n<p><strong>示例&nbsp;2:</strong></p>\\n\\n<pre><strong>输入:</strong> <code>&quot;199100199&quot;</code>\\n<strong>输出:</strong> true \\n<strong>解释: </strong>累加序列为: <code>1, 99, 100, 199。</code>1 + 99 = 100, 99 + 100 = 199</pre>\\n\\n<p><strong>进阶:</strong><br>\\n你如何处理一个溢出的过大的整数输入?</p>\\n","title":"306. 累加数","relatedTags":["字符串","回溯"],"difficult":"Middle","lang":["javascript"],"uniqueID":"306","slug":"306-Additive-Number"}')}}]);