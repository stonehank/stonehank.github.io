(window.webpackJsonp=window.webpackJsonp||[]).push([[662],{1460:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">numCourses</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">prerequisites</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{boolean}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> canFinish = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">numCourses, prerequisites</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> graph=<span class=\\"hljs-built_in\\">Array</span>(numCourses).fill().map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span>=&gt;</span>[])\\n  <span class=\\"hljs-keyword\\">let</span> visited=<span class=\\"hljs-built_in\\">Array</span>(numCourses).fill(<span class=\\"hljs-literal\\">false</span>)\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> [to,<span class=\\"hljs-keyword\\">from</span>] <span class=\\"hljs-keyword\\">of</span> prerequisites){\\n    graph[<span class=\\"hljs-keyword\\">from</span>].push(to)\\n  }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">hasCycle</span>(<span class=\\"hljs-params\\">v,marked</span>)</span>{\\n    marked[v]=<span class=\\"hljs-literal\\">true</span>\\n    visited[v]=<span class=\\"hljs-literal\\">true</span>\\n    <span class=\\"hljs-keyword\\">let</span> adj=graph[v]\\n    <span class=\\"hljs-keyword\\">if</span>(adj){\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;adj.length;i++){\\n        <span class=\\"hljs-keyword\\">if</span>(!visited[adj[i]]){\\n          <span class=\\"hljs-keyword\\">if</span>(hasCycle(adj[i],marked))<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n        }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(marked[adj[i]]){\\n          <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n        }\\n      }\\n    }\\n    marked[v]=<span class=\\"hljs-literal\\">false</span>\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n  }\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;numCourses;i++){\\n    <span class=\\"hljs-keyword\\">if</span>(visited[i])<span class=\\"hljs-keyword\\">continue</span>\\n    <span class=\\"hljs-keyword\\">if</span>(hasCycle(i,[]))<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n};\\n</code></pre>\\n"],"querySlug":"course-schedule","created_at":"2019-04-08","timeArr":[2019,3,8,15,53,0,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>对给定的<code>边缘列表</code>构建<code>graph</code>，再使用有向图的查找环算法。(对每一个点都查找，使用<code>visited</code>可以跳过已经查找的点，注意每次查找都需要<code>stack</code>辅助)。</p>\\n","content":"<p>你这个学期必须选修 <code>numCourses</code> 门课程，记为 <code>0</code> 到 <code>numCourses - 1</code> 。</p>\\n\\n<p>在选修某些课程之前需要一些先修课程。 先修课程按数组 <code>prerequisites</code> 给出，其中 <code>prerequisites[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> ，表示如果要学习课程 <code>a<sub>i</sub></code> 则 <strong>必须</strong> 先学习课程  <code>b<sub>i</sub></code><sub> </sub>。</p>\\n\\n<ul>\\n\\t<li>例如，先修课程对 <code>[0, 1]</code> 表示：想要学习课程 <code>0</code> ，你需要先完成课程 <code>1</code> 。</li>\\n</ul>\\n\\n<p>请你判断是否可能完成所有课程的学习？如果可以，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>numCourses = 2, prerequisites = [[1,0]]\\n<strong>输出：</strong>true\\n<strong>解释：</strong>总共有 2 门课程。学习课程 1 之前，你需要完成课程 0 。这是可能的。</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>numCourses = 2, prerequisites = [[1,0],[0,1]]\\n<strong>输出：</strong>false\\n<strong>解释：</strong>总共有 2 门课程。学习课程 1 之前，你需要先完成​课程 0 ；并且学习课程 0 之前，你还应先完成课程 1 。这是不可能的。</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= numCourses <= 10<sup>5</sup></code></li>\\n\\t<li><code>0 <= prerequisites.length <= 5000</code></li>\\n\\t<li><code>prerequisites[i].length == 2</code></li>\\n\\t<li><code>0 <= a<sub>i</sub>, b<sub>i</sub> < numCourses</code></li>\\n\\t<li><code>prerequisites[i]</code> 中的所有课程对 <strong>互不相同</strong></li>\\n</ul>\\n","title":"207. 课程表","relatedTags":["深度优先搜索","广度优先搜索","图","拓扑排序"],"difficult":"Middle","lang":["javascript"],"uniqueID":"207","slug":"207-Course-Schedule"}')}}]);