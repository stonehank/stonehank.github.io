(window.webpackJsonp=window.webpackJsonp||[]).push([[719],{1517:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\"># Below is the interface for Iterator, which is already defined for you.</span>\\n<span class=\\"hljs-comment\\">#</span>\\n<span class=\\"hljs-comment\\"># class Iterator(object):</span>\\n<span class=\\"hljs-comment\\">#     def __init__(self, nums):</span>\\n<span class=\\"hljs-comment\\">#         \\"\\"\\"</span>\\n<span class=\\"hljs-comment\\">#         Initializes an iterator object to the beginning of a list.</span>\\n<span class=\\"hljs-comment\\">#         :type nums: List[int]</span>\\n<span class=\\"hljs-comment\\">#         \\"\\"\\"</span>\\n<span class=\\"hljs-comment\\">#</span>\\n<span class=\\"hljs-comment\\">#     def hasNext(self):</span>\\n<span class=\\"hljs-comment\\">#         \\"\\"\\"</span>\\n<span class=\\"hljs-comment\\">#         Returns true if the iteration has more elements.</span>\\n<span class=\\"hljs-comment\\">#         :rtype: bool</span>\\n<span class=\\"hljs-comment\\">#         \\"\\"\\"</span>\\n<span class=\\"hljs-comment\\">#</span>\\n<span class=\\"hljs-comment\\">#     def next(self):</span>\\n<span class=\\"hljs-comment\\">#         \\"\\"\\"</span>\\n<span class=\\"hljs-comment\\">#         Returns the next element in the iteration.</span>\\n<span class=\\"hljs-comment\\">#         :rtype: int</span>\\n<span class=\\"hljs-comment\\">#         \\"\\"\\"</span>\\n\\n<span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">PeekingIterator</span><span class=\\"hljs-params\\">(object)</span>:</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">__init__</span><span class=\\"hljs-params\\">(self, iterator)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        Initialize your data structure here.\\n        :type iterator: Iterator\\n        \\"\\"\\"</span>\\n        self.first=iterator.next()\\n        self.iterator=iterator\\n\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">peek</span><span class=\\"hljs-params\\">(self)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        Returns the next element in the iteration without advancing the iterator.\\n        :rtype: int\\n        \\"\\"\\"</span>\\n        <span class=\\"hljs-keyword\\">return</span> self.first\\n\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">next</span><span class=\\"hljs-params\\">(self)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :rtype: int\\n        \\"\\"\\"</span>\\n        temp=self.first\\n        self.first=self.iterator.next() <span class=\\"hljs-keyword\\">if</span> self.iterator.hasNext() <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-literal\\">None</span>\\n        <span class=\\"hljs-keyword\\">return</span> temp\\n        \\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">hasNext</span><span class=\\"hljs-params\\">(self)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :rtype: bool\\n        \\"\\"\\"</span>\\n        <span class=\\"hljs-keyword\\">return</span> self.first <span class=\\"hljs-keyword\\">is</span> <span class=\\"hljs-keyword\\">not</span> <span class=\\"hljs-literal\\">None</span>\\n\\n<span class=\\"hljs-comment\\"># Your PeekingIterator object will be instantiated and called as such:</span>\\n<span class=\\"hljs-comment\\"># iter = PeekingIterator(Iterator(nums))</span>\\n<span class=\\"hljs-comment\\"># while iter.hasNext():</span>\\n<span class=\\"hljs-comment\\">#     val = iter.peek()   # Get the next element but not advance the iterator.</span>\\n<span class=\\"hljs-comment\\">#     iter.next()         # Should return the same value as [val].</span>\\n</code></pre>\\n"],"querySlug":"peeking-iterator","created_at":"2019-04-19","timeArr":[2019,3,19,10,10,17,0],"hasThinking":false,"content":"<p>给定一个迭代器类的接口，接口包含两个方法：&nbsp;<code>next()</code>&nbsp;和&nbsp;<code>hasNext()</code>。设计并实现一个支持&nbsp;<code>peek()</code>&nbsp;操作的顶端迭代器 -- 其本质就是把原本应由&nbsp;<code>next()</code>&nbsp;方法返回的元素&nbsp;<code>peek()</code>&nbsp;出来。</p>\\n\\n<p><strong>示例:</strong></p>\\n\\n<pre>假设迭代器被初始化为列表&nbsp;<strong><code>[1,2,3]</code></strong>。\\n\\n调用&nbsp;<strong><code>next() </code></strong>返回 <strong>1</strong>，得到列表中的第一个元素。\\n现在调用&nbsp;<strong><code>peek()</code></strong>&nbsp;返回 <strong>2</strong>，下一个元素。在此之后调用&nbsp;<strong><code>next() </code></strong>仍然返回 <strong>2</strong>。\\n最后一次调用&nbsp;<strong><code>next()</code></strong>&nbsp;返回 <strong>3</strong>，末尾元素。在此之后调用&nbsp;<strong><code>hasNext()</code></strong>&nbsp;应该返回 <strong>false</strong>。\\n</pre>\\n\\n<p><strong>进阶：</strong>你将如何拓展你的设计？使之变得通用化，从而适应所有的类型，而不只是整数型？</p>\\n","title":"284. 顶端迭代器","relatedTags":["设计","数组","迭代器"],"difficult":"Middle","lang":["python"],"uniqueID":"284","slug":"284-Peeking-Iterator"}')}}]);