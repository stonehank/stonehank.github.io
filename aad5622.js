(window.webpackJsonp=window.webpackJsonp||[]).push([[1002],{1800:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{TreeNode}</span> <span class=\\"hljs-variable\\">root</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> averageOfLevels = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">root</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(!root)<span class=\\"hljs-keyword\\">return</span> []\\n  <span class=\\"hljs-keyword\\">let</span> res=[],arr=[root]\\n  <span class=\\"hljs-keyword\\">while</span>(arr.length&gt;<span class=\\"hljs-number\\">0</span>){\\n    <span class=\\"hljs-keyword\\">let</span> len=arr.length,sum=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;len;i++){\\n      <span class=\\"hljs-keyword\\">let</span> node=arr.shift()\\n      sum+=node.val\\n      <span class=\\"hljs-keyword\\">if</span>(node.left)arr.push(node.left)\\n      <span class=\\"hljs-keyword\\">if</span>(node.right)arr.push(node.right)\\n    }\\n    res.push(sum/len)\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"average-of-levels-in-binary-tree","created_at":"2019-03-19","timeArr":[2019,2,19,14,26,38,0],"hasThinking":false,"content":"<p>给定一个非空二叉树, 返回一个由每层节点平均值组成的数组。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>\\n    3\\n   / \\\\\\n  9  20\\n    /  \\\\\\n   15   7\\n<strong>输出：</strong>[3, 14.5, 11]\\n<strong>解释：</strong>\\n第 0 层的平均值是 3 ,  第1层是 14.5 , 第2层是 11 。因此返回 [3, 14.5, 11] 。\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li>节点值的范围在32位有符号整数范围内。</li>\\n</ul>\\n","title":"637. 二叉树的层平均值","relatedTags":["树","深度优先搜索","广度优先搜索","二叉树"],"difficult":"Easy","lang":["javascript"],"uniqueID":"637","slug":"637-Average-of-Levels-in-Binary-Tree"}')}}]);