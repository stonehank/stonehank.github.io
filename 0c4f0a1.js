(window.webpackJsonp=window.webpackJsonp||[]).push([[892],{1690:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Solution</span><span class=\\"hljs-params\\">(object)</span>:</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">getBaseStr</span><span class=\\"hljs-params\\">(self,n,base)</span>:</span>\\n        m=int(n)\\n        x=int(base)\\n        baseStr=<span class=\\"hljs-string\\">\'\'</span>\\n        <span class=\\"hljs-keyword\\">while</span> m&gt;<span class=\\"hljs-number\\">0</span>:\\n          baseStr=str(m%x)+baseStr\\n          m=m//x\\n        <span class=\\"hljs-keyword\\">return</span> baseStr\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">getOriFrombase</span><span class=\\"hljs-params\\">(self,base,l)</span>:</span>\\n        res=<span class=\\"hljs-number\\">0</span>\\n        <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(l<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">-1</span>):\\n          res+=base**i\\n        <span class=\\"hljs-keyword\\">return</span> res\\n      \\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">isValid</span><span class=\\"hljs-params\\">(self,baseStr)</span>:</span>\\n        <span class=\\"hljs-keyword\\">for</span> n <span class=\\"hljs-keyword\\">in</span> baseStr:\\n          <span class=\\"hljs-keyword\\">if</span> <span class=\\"hljs-keyword\\">not</span> n==<span class=\\"hljs-string\\">\\"1\\"</span>:\\n            <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">False</span>\\n        <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">True</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">createValidStr</span><span class=\\"hljs-params\\">(self,len)</span>:</span>\\n        <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-string\\">\'1\'</span>*len\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">smallestGoodBase</span><span class=\\"hljs-params\\">(self, n)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type n: str\\n        :rtype: str\\n        \\"\\"\\"</span>\\n        <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range (<span class=\\"hljs-number\\">2</span>,<span class=\\"hljs-number\\">10</span>):\\n          baseStr=self.getBaseStr(n,i)\\n          isGood=self.isValid(baseStr)\\n          <span class=\\"hljs-keyword\\">if</span> isGood:<span class=\\"hljs-keyword\\">return</span> str(i)\\n        \\n        nn=int(n)\\n        l=len(n)\\n        <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(l,<span class=\\"hljs-number\\">1</span>,<span class=\\"hljs-number\\">-1</span>):\\n          curStr=self.createValidStr(i)\\n          lo,hi=<span class=\\"hljs-number\\">11</span>,nn<span class=\\"hljs-number\\">-1</span>\\n          <span class=\\"hljs-keyword\\">while</span> lo&lt;hi:\\n            mid=(lo+hi)//<span class=\\"hljs-number\\">2</span>\\n            s=self.getOriFrombase(mid,i)\\n            <span class=\\"hljs-keyword\\">if</span> s&lt;nn:\\n              lo=mid+<span class=\\"hljs-number\\">1</span>\\n            <span class=\\"hljs-keyword\\">else</span>:\\n              hi=mid\\n          finalS=self.getBaseStr(n,lo)\\n          <span class=\\"hljs-keyword\\">if</span> self.isValid(finalS):\\n            <span class=\\"hljs-keyword\\">return</span> str(lo)\\n              \\n        \\n\\n</code></pre>\\n"],"querySlug":"smallest-good-base","created_at":"2019-02-26","timeArr":[2019,1,26,10,12,4,0],"hasThinking":false,"content":"<p>对于给定的整数 n, 如果n的k（k&gt;=2）进制数的所有数位全为1，则称&nbsp;k（k&gt;=2）是 n 的一个<em><strong>好进制</strong></em>。</p>\\n\\n<p>以字符串的形式给出 n, 以字符串的形式返回 n 的最小好进制。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>&quot;13&quot;\\n<strong>输出：</strong>&quot;3&quot;\\n<strong>解释：</strong>13 的 3 进制是 111。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>&quot;4681&quot;\\n<strong>输出：</strong>&quot;8&quot;\\n<strong>解释：</strong>4681 的 8 进制是 11111。\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>&quot;1000000000000000000&quot;\\n<strong>输出：</strong>&quot;999999999999999999&quot;\\n<strong>解释：</strong>1000000000000000000 的 999999999999999999 进制是 11。\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ol>\\n\\t<li>n的取值范围是&nbsp;[3, 10^18]。</li>\\n\\t<li>输入总是有效且没有前导 0。</li>\\n</ol>\\n\\n<p>&nbsp;</p>\\n","title":"483. 最小好进制","relatedTags":["数学","二分查找"],"difficult":"Hard","lang":["python"],"uniqueID":"483","slug":"483-Smallest-Good-Base"}')}}]);