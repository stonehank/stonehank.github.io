(window.webpackJsonp=window.webpackJsonp||[]).push([[1347],{2145:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">A</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">K</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> subarraysDivByK = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">A, K</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> hash={},sum=<span class=\\"hljs-number\\">0</span>,res=<span class=\\"hljs-number\\">0</span>\\n  hash[<span class=\\"hljs-number\\">0</span>]=<span class=\\"hljs-number\\">1</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;A.length;i++){\\n    sum+=A[i]\\n    <span class=\\"hljs-keyword\\">let</span> m=(sum % K + K) % K\\n    <span class=\\"hljs-keyword\\">if</span>(hash[m]==<span class=\\"hljs-literal\\">null</span>)hash[m]=<span class=\\"hljs-number\\">1</span>\\n    <span class=\\"hljs-keyword\\">else</span>{\\n      res+=hash[m]\\n      hash[m]++   \\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"subarray-sums-divisible-by-k","created_at":"2019-03-18","timeArr":[2019,2,18,0,37,52,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>被整除也就是用<code>%</code>处理，我们需要保存每一次的<code>%</code>，因为如果当前算出的模，在<code>hash</code>中已经存在，那么说明已经找到了能被K整除的子数组。</p>\\n<p>例如<code>a % K =4 &amp;&amp; (a+b+c) % K =4</code>条件成立，那么可以确保<code>b,c</code>这个子数组是能被<code>K</code>整除的子数组。</p>\\n<p>但是，还需要额外考虑一个因素，那就是负数，如果不对负数的模进行处理，当同时出现正负数，会错过一些正确的值。</p>\\n<p>例如考虑<code>[4,-2,-3]</code> <code>K</code>为5,，如果我们按照上面的办法，那么当计算到<code>index为2(值为-3)</code>的时候，<code>hash</code>为<code>{4:1, 2:1}</code>，\\n这时的<code>sum</code>是<code>4+ -2</code>，现在再加<code>-3</code>，sum为<code>-1</code>，模为<code>-1 % 5 =-1</code>，我们发现，hash中并没有模为 <code>-1</code>的值，但其实<code>-1</code>是一个\\n需要收集的答案，因为<code>-2 + -3</code>能被<code>5</code>整除。</p>\\n<p>因此当<code>sum</code>为负数时，我们需要转换为正数，再去从<code>hash</code>中获取。</p>\\n","content":"<p>给定一个整数数组 <code>A</code>，返回其中元素之和可被 <code>K</code>&nbsp;整除的（连续、非空）子数组的数目。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例：</strong></p>\\n\\n<pre><strong>输入：</strong>A = [4,5,0,-2,-3,1], K = 5\\n<strong>输出：</strong>7\\n<strong>解释：\\n</strong>有 7 个子数组满足其元素之和可被 K = 5 整除：\\n[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ol>\\n\\t<li><code>1 &lt;= A.length &lt;= 30000</code></li>\\n\\t<li><code>-10000 &lt;= A[i] &lt;= 10000</code></li>\\n\\t<li><code>2 &lt;= K &lt;= 10000</code></li>\\n</ol>\\n","title":"974. 和可被 K 整除的子数组","relatedTags":["数组","哈希表","前缀和"],"difficult":"Middle","lang":["javascript"],"uniqueID":"974","slug":"974-Subarray-Sums-Divisible-by-K"}')}}]);