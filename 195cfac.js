(window.webpackJsonp=window.webpackJsonp||[]).push([[459],{1257:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{TreeNode}</span> <span class=\\"hljs-variable\\">root</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{TreeNode}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> balanceBST = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">root</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> arr=[]\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">dfs</span>(<span class=\\"hljs-params\\">root</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(!root)<span class=\\"hljs-keyword\\">return</span>\\n    <span class=\\"hljs-keyword\\">if</span>(root.left)dfs(root.left)\\n    arr.push(root.val)\\n    <span class=\\"hljs-keyword\\">if</span>(root.right)dfs(root.right)\\n  }\\n  dfs(root)\\n  <span class=\\"hljs-keyword\\">let</span> midIdx=<span class=\\"hljs-built_in\\">Math</span>.floor(arr.length/<span class=\\"hljs-number\\">2</span>)\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">create</span>(<span class=\\"hljs-params\\">arr</span>)</span>{\\n    <span class=\\"hljs-comment\\">// console.log(arr)</span>\\n    <span class=\\"hljs-keyword\\">if</span>(arr.length===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">null</span>\\n    <span class=\\"hljs-keyword\\">let</span> idx=<span class=\\"hljs-built_in\\">Math</span>.floor(arr.length/<span class=\\"hljs-number\\">2</span>)\\n    <span class=\\"hljs-keyword\\">let</span> curNode=<span class=\\"hljs-keyword\\">new</span> TreeNode(arr[idx])\\n    \\n    curNode.left=create(arr.slice(<span class=\\"hljs-number\\">0</span>,idx))\\n    curNode.right=create(arr.slice(idx+<span class=\\"hljs-number\\">1</span>))\\n    <span class=\\"hljs-keyword\\">return</span> curNode\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> create(arr)\\n};\\n</code></pre>\\n"],"querySlug":"balance-a-binary-search-tree","created_at":"2020-03-15","timeArr":[2020,2,15,10,57,21,0],"hasThinking":false,"content":"<p>给你一棵二叉搜索树，请你返回一棵&nbsp;<strong>平衡后</strong>&nbsp;的二叉搜索树，新生成的树应该与原来的树有着相同的节点值。</p>\\n\\n<p>如果一棵二叉搜索树中，每个节点的两棵子树高度差不超过 1 ，我们就称这棵二叉搜索树是&nbsp;<strong>平衡的</strong> 。</p>\\n\\n<p>如果有多种构造方法，请你返回任意一种。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例：</strong></p>\\n\\n<p><strong><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/03/15/1515_ex1.png\\" style=\\"height: 248px; width: 250px;\\"><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/03/15/1515_ex1_out.png\\" style=\\"height: 200px; width: 200px;\\"></strong></p>\\n\\n<pre><strong>输入：</strong>root = [1,null,2,null,3,null,4,null,null]\\n<strong>输出：</strong>[2,1,3,null,null,null,4]\\n<strong>解释：</strong>这不是唯一的正确答案，[3,1,4,null,2,null,null] 也是一个可行的构造方案。\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li>树节点的数目在&nbsp;<code>1</code>&nbsp;到&nbsp;<code>10^4</code>&nbsp;之间。</li>\\n\\t<li>树节点的值互不相同，且在&nbsp;<code>1</code>&nbsp;到&nbsp;<code>10^5</code> 之间。</li>\\n</ul>\\n","title":"1382. 将二叉搜索树变平衡","relatedTags":["贪心","树","深度优先搜索","二叉搜索树","分治","二叉树"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1382","slug":"1382-Balance-a-Binary-Search-Tree"}')}}]);