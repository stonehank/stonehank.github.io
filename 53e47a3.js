(window.webpackJsonp=window.webpackJsonp||[]).push([[1173],{1971:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for singly-linked list.\\n * function ListNode(val) {\\n *     this.val = val;\\n *     this.next = null;\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{ListNode}</span> <span class=\\"hljs-variable\\">head</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">G</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> numComponents = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">head, G</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> hash={}\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;G.length;i++){\\n    hash[G[i]]=<span class=\\"hljs-literal\\">true</span>\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> node=head,res=<span class=\\"hljs-number\\">0</span>,start=<span class=\\"hljs-literal\\">true</span>\\n  <span class=\\"hljs-comment\\">// console.log(hash)</span>\\n  <span class=\\"hljs-keyword\\">while</span>(node){\\n    <span class=\\"hljs-comment\\">// console.log(node.val)</span>\\n    <span class=\\"hljs-keyword\\">if</span>(hash[node.val]){\\n      <span class=\\"hljs-keyword\\">if</span>(start)res++\\n      start=<span class=\\"hljs-literal\\">false</span>\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      start=<span class=\\"hljs-literal\\">true</span>\\n    }\\n    node=node.next\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"linked-list-components","created_at":"2019-04-20","timeArr":[2019,3,20,18,37,33,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>题目意思就是如果当前<code>node</code>的<code>val</code>存在<code>G</code>中，并且和上一个也存在<code>G</code>中的<code>node</code>是连续节点，那么它们就是一组的。</p>\\n<p>只需要定义一个变量<code>start</code>，作为表明当前是否一个新的组合的开始，遍历<code>head</code>；</p>\\n<p>如果当前<code>node.val</code>不存在与<code>G</code>中，说明一定需要开始一个新的组合，<code>start=true</code>；</p>\\n<p>如果当前<code>node.val</code>存在<code>G</code>中，检查当前是否<code>start===true</code>，如果是<code>res++</code>，并且更新<code>start=false</code>。</p>\\n","content":"<p>给定链表头结点&nbsp;<code>head</code>，该链表上的每个结点都有一个 <strong>唯一的整型值</strong> 。</p>\\n\\n<p>同时给定列表&nbsp;<code>G</code>，该列表是上述链表中整型值的一个子集。</p>\\n\\n<p>返回列表&nbsp;<code>G</code>&nbsp;中组件的个数，这里对组件的定义为：链表中一段最长连续结点的值（该值必须在列表&nbsp;<code>G</code>&nbsp;中）构成的集合。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例&nbsp;1：</strong></p>\\n\\n<pre><strong>输入:</strong> \\nhead: 0-&gt;1-&gt;2-&gt;3\\nG = [0, 1, 3]\\n<strong>输出:</strong> 2\\n<strong>解释:</strong> \\n链表中,0 和 1 是相连接的，且 G 中不包含 2，所以 [0, 1] 是 G 的一个组件，同理 [3] 也是一个组件，故返回 2。</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入:</strong> \\nhead: 0-&gt;1-&gt;2-&gt;3-&gt;4\\nG = [0, 3, 1, 4]\\n<strong>输出:</strong> 2\\n<strong>解释:</strong> \\n链表中，0 和 1 是相连接的，3 和 4 是相连接的，所以 [0, 1] 和 [3, 4] 是两个组件，故返回 2。</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li>如果&nbsp;<code>N</code>&nbsp;是给定链表&nbsp;<code>head</code>&nbsp;的长度，<code>1 &lt;= N &lt;= 10000</code>。</li>\\n\\t<li>链表中每个结点的值所在范围为&nbsp;<code>[0, N - 1]</code>。</li>\\n\\t<li><code>1 &lt;= G.length &lt;= 10000</code></li>\\n\\t<li><code>G</code> 是链表中所有结点的值的一个子集.</li>\\n</ul>\\n","title":"817. 链表组件","relatedTags":["哈希表","链表"],"difficult":"Middle","lang":["javascript"],"uniqueID":"817","slug":"817-Linked-List-Components"}')}}]);