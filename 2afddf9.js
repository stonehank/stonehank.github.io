(window.webpackJsonp=window.webpackJsonp||[]).push([[941],{1739:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">matrix</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> spiralOrder = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">matrix</span>) </span>{\\n    <span class=\\"hljs-keyword\\">let</span> m=matrix.length\\n    <span class=\\"hljs-keyword\\">let</span> n=matrix[<span class=\\"hljs-number\\">0</span>].length\\n    <span class=\\"hljs-keyword\\">let</span> moves=[[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">1</span>],[<span class=\\"hljs-number\\">1</span>,<span class=\\"hljs-number\\">0</span>],[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">-1</span>],[<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">0</span>]]\\n    <span class=\\"hljs-keyword\\">let</span> reduce=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">let</span> start=[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">-1</span>]\\n    <span class=\\"hljs-keyword\\">let</span> res=[]\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;moves.length;i++){\\n        <span class=\\"hljs-keyword\\">let</span> mx=moves[i][<span class=\\"hljs-number\\">0</span>], my=moves[i][<span class=\\"hljs-number\\">1</span>]\\n        <span class=\\"hljs-keyword\\">let</span> sx=start[<span class=\\"hljs-number\\">0</span>]+mx, sy=start[<span class=\\"hljs-number\\">1</span>]+my\\n        <span class=\\"hljs-keyword\\">let</span> ex=<span class=\\"hljs-literal\\">null</span>, ey=<span class=\\"hljs-literal\\">null</span>\\n        <span class=\\"hljs-keyword\\">if</span>(i===<span class=\\"hljs-number\\">0</span>){\\n            ex=sx\\n            ey=sy+ n-reduce<span class=\\"hljs-number\\">-1</span>\\n        }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(i===<span class=\\"hljs-number\\">1</span>){\\n            reduce++\\n            ey=sy\\n            ex=sx+(m-reduce<span class=\\"hljs-number\\">-1</span>)\\n        }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(i===<span class=\\"hljs-number\\">2</span>){\\n            reduce++\\n            ex=sx\\n            ey=sy-(n-reduce<span class=\\"hljs-number\\">-1</span>)<span class=\\"hljs-number\\">-1</span>\\n        }<span class=\\"hljs-keyword\\">else</span>{\\n            ey=sy\\n            ex=sx-(m-reduce<span class=\\"hljs-number\\">-1</span>)\\n        }\\n        start=[ex,ey]\\n        <span class=\\"hljs-comment\\">// console.log(m,n,reduce,sx,sy,ex,ey)</span>\\n        <span class=\\"hljs-keyword\\">while</span>(sx!==ex || sy!==ey){\\n            res.push(matrix[sx][sy])\\n            sx+=mx\\n            sy+=my\\n        }\\n        res.push(matrix[sx][sy])\\n        <span class=\\"hljs-keyword\\">if</span>(res.length===m*n)<span class=\\"hljs-keyword\\">break</span>\\n        <span class=\\"hljs-keyword\\">if</span>(i===<span class=\\"hljs-number\\">3</span>)i=<span class=\\"hljs-number\\">-1</span>\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"spiral-matrix","created_at":"2021-03-15","timeArr":[2021,2,15,7,45,1,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<ul>\\n<li>模拟+<code>DFS</code></li>\\n</ul>\\n<p>最直观的思路就是模拟这个旋转的过程，定义<code>4</code>个方向，就是顺时针方向，这里我使用<code>dfs</code>，对于当前方向，计算能走的步数<code>limit</code>，走到底，然后换下一个方向，\\n直到当前方向能走的步数<code>limit</code>为0。</p>\\n<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">matrix</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> spiralOrder = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">matrix</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(matrix.length===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span> []\\n  <span class=\\"hljs-keyword\\">let</span> rl=matrix[<span class=\\"hljs-number\\">0</span>].length,cl=matrix.length<span class=\\"hljs-number\\">-1</span>\\n  <span class=\\"hljs-keyword\\">let</span> res=[]\\n  <span class=\\"hljs-keyword\\">let</span> moves=[[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">1</span>],[<span class=\\"hljs-number\\">1</span>,<span class=\\"hljs-number\\">0</span>],[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">-1</span>],[<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">0</span>]]\\n  <span class=\\"hljs-keyword\\">let</span> mID=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">dfs</span>(<span class=\\"hljs-params\\">[x,y]</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> limit\\n    <span class=\\"hljs-keyword\\">if</span>(mID===<span class=\\"hljs-number\\">0</span> || mID===<span class=\\"hljs-number\\">2</span>) limit=rl--\\n    <span class=\\"hljs-keyword\\">else</span> limit=cl--\\n    <span class=\\"hljs-keyword\\">if</span>(limit&lt;=<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span>\\n    <span class=\\"hljs-keyword\\">let</span> [dx,dy]=moves[mID]\\n    <span class=\\"hljs-keyword\\">if</span>(++mID===<span class=\\"hljs-number\\">4</span>)mID=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">let</span> nx=x+dx,ny=y+dy\\n    <span class=\\"hljs-keyword\\">while</span>(limit--&gt;<span class=\\"hljs-number\\">0</span>){\\n      res.push(matrix[nx][ny])\\n      nx+=dx\\n      ny+=dy\\n    }\\n    dfs([nx-dx,ny-dy])\\n  }\\n  dfs([<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">-1</span>])\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n<ul>\\n<li>层叠</li>\\n</ul>\\n<p>官方解答的做法，思路很清晰。</p>\\n<p>就像剥洋葱一样，将当前矩阵一层一层剥掉，例如：</p>\\n<pre class=\\"hljs\\"><code>[[1, 1, 1, 1, 1, 1, 1],\\n [4, 5, 5, 5, 5, 5, 2],\\n [4, 8, 9, 9, 9, 6, 2],\\n [4, 8, 7, 7, 7, 6, 2],\\n [4, 3, 3, 3, 3, 3, 2]]\\n</code></pre>\\n<p>数字代表遍历的顺序，也就是加入结果的顺序，很明了而且很有规律，定义4个变量<code>t,d,l,r</code>，分别表示当前<code>上下左右</code>边界，\\n每剥掉一层对应的<code>t--;d++;l++;r--</code>，直到<code>d&lt;t || r&lt;l</code>。</p>\\n","content":"<p>给你一个 <code>m</code> 行 <code>n</code> 列的矩阵 <code>matrix</code> ，请按照 <strong>顺时针螺旋顺序</strong> ，返回矩阵中的所有元素。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2020/11/13/spiral1.jpg\\" style=\\"width: 242px; height: 242px;\\" />\\n<pre>\\n<strong>输入：</strong>matrix = [[1,2,3],[4,5,6],[7,8,9]]\\n<strong>输出：</strong>[1,2,3,6,9,8,7,4,5]\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2020/11/13/spiral.jpg\\" style=\\"width: 322px; height: 242px;\\" />\\n<pre>\\n<strong>输入：</strong>matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\\n<strong>输出：</strong>[1,2,3,4,8,12,11,10,9,5,6,7]\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>m == matrix.length</code></li>\\n\\t<li><code>n == matrix[i].length</code></li>\\n\\t<li><code>1 <= m, n <= 10</code></li>\\n\\t<li><code>-100 <= matrix[i][j] <= 100</code></li>\\n</ul>\\n","title":"54. 螺旋矩阵","relatedTags":["数组","矩阵","模拟"],"difficult":"Middle","lang":["javascript"],"uniqueID":"54","slug":"54-Spiral-Matrix"}')}}]);