(window.webpackJsonp=window.webpackJsonp||[]).push([[1128],{1926:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">A</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{boolean}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> isIdealPermutation = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">A</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> max=-<span class=\\"hljs-literal\\">Infinity</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">1</span>;i&lt;A.length;i++){\\n    <span class=\\"hljs-keyword\\">if</span>(A[i]&lt;max)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n    max=<span class=\\"hljs-built_in\\">Math</span>.max(max,A[i<span class=\\"hljs-number\\">-1</span>])\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n};\\n</code></pre>\\n"],"querySlug":"global-and-local-inversions","created_at":"2019-03-15","timeArr":[2019,2,15,14,46,4,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<ol>\\n<li>\\n<p>最初看到问题的想法是将全局倒置数量和局部倒置数量都计算出来，最后对比，但是<code>TLE</code>了，这么做时间复杂度是<code>O(N^2)</code>。</p>\\n</li>\\n<li>\\n<p>其实仔细一思考，一旦发现存在全局倒置，就可以立刻返回<code>false</code>了，因此有局部倒置必然有全局倒置，而有全局倒置不一定有局部倒置。</p>\\n</li>\\n<li>\\n<p>遍历的时候将遍历过的最大值保存，一旦发现当前值小于这个最大值，说明存在额外的全局倒置，最终时间复杂度是<code>O(N)</code>。</p>\\n</li>\\n</ol>\\n","content":"<p>给你一个长度为 <code>n</code> 的整数数组 <code>nums</code> ，表示由范围 <code>[0, n - 1]</code> 内所有整数组成的一个排列。</p>\\n\\n<p><strong>全局倒置</strong> 的数目等于满足下述条件不同下标对 <code>(i, j)</code> 的数目：</p>\\n\\n<ul>\\n\\t<li><code>0 <= i < j < n</code></li>\\n\\t<li><code>nums[i] > nums[j]</code></li>\\n</ul>\\n\\n<p><strong>局部倒置</strong> 的数目等于满足下述条件的下标 <code>i</code> 的数目：</p>\\n\\n<ul>\\n\\t<li><code>0 <= i < n - 1</code></li>\\n\\t<li><code>nums[i] > nums[i + 1]</code></li>\\n</ul>\\n\\n<p>当数组 <code>nums</code> 中 <strong>全局倒置</strong> 的数量等于 <strong>局部倒置</strong> 的数量时，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [1,0,2]\\n<strong>输出：</strong>true\\n<strong>解释：</strong>有 1 个全局倒置，和 1 个局部倒置。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [1,2,0]\\n<strong>输出：</strong>false\\n<strong>解释：</strong>有 2 个全局倒置，和 1 个局部倒置。\\n</pre>\\n \\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>n == nums.length</code></li>\\n\\t<li><code>1 <= n <= 5000</code></li>\\n\\t<li><code>0 <= nums[i] < n</code></li>\\n\\t<li><code>nums</code> 中的所有整数 <strong>互不相同</strong></li>\\n\\t<li><code>nums</code> 是范围 <code>[0, n - 1]</code> 内所有数字组成的一个排列</li>\\n</ul>\\n","title":"775. 全局倒置与局部倒置","relatedTags":["数组","数学"],"difficult":"Middle","lang":["javascript"],"uniqueID":"775","slug":"775-Global-and-Local-Inversions"}')}}]);