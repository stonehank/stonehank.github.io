(window.webpackJsonp=window.webpackJsonp||[]).push([[980],{1778:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">m</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">n</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">ops</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> maxCount = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">m, n, ops</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> w=m,h=n\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;ops.length;i++){\\n    w=<span class=\\"hljs-built_in\\">Math</span>.min(w,ops[i][<span class=\\"hljs-number\\">0</span>])\\n    h=<span class=\\"hljs-built_in\\">Math</span>.min(h,ops[i][<span class=\\"hljs-number\\">1</span>])\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> w*h\\n};\\n</code></pre>\\n"],"querySlug":"range-addition-ii","created_at":"2019-04-01","timeArr":[2019,3,1,17,42,8,0],"hasThinking":false,"content":"<p>给定一个初始元素全部为&nbsp;<strong>0</strong>，大小为 m*n 的矩阵&nbsp;<strong>M&nbsp;</strong>以及在&nbsp;<strong>M&nbsp;</strong>上的一系列更新操作。</p>\\n\\n<p>操作用二维数组表示，其中的每个操作用一个含有两个<strong>正整数&nbsp;a</strong> 和 <strong>b</strong> 的数组表示，含义是将所有符合&nbsp;<strong>0 &lt;= i &lt; a</strong> 以及 <strong>0 &lt;= j &lt; b</strong> 的元素&nbsp;<strong>M[i][j]&nbsp;</strong>的值都<strong>增加 1</strong>。</p>\\n\\n<p>在执行给定的一系列操作后，你需要返回矩阵中含有最大整数的元素个数。</p>\\n\\n<p><strong>示例 1:</strong></p>\\n\\n<pre>\\n<strong>输入:</strong> \\nm = 3, n = 3\\noperations = [[2,2],[3,3]]\\n<strong>输出:</strong> 4\\n<strong>解释:</strong> \\n初始状态, M = \\n[[0, 0, 0],\\n [0, 0, 0],\\n [0, 0, 0]]\\n\\n执行完操作 [2,2] 后, M = \\n[[1, 1, 0],\\n [1, 1, 0],\\n [0, 0, 0]]\\n\\n执行完操作 [3,3] 后, M = \\n[[2, 2, 1],\\n [2, 2, 1],\\n [1, 1, 1]]\\n\\nM 中最大的整数是 2, 而且 M 中有4个值为2的元素。因此返回 4。\\n</pre>\\n\\n<p><strong>注意:</strong></p>\\n\\n<ol>\\n\\t<li>m 和 n 的范围是&nbsp;[1,40000]。</li>\\n\\t<li>a 的范围是 [1,m]，b 的范围是 [1,n]。</li>\\n\\t<li>操作数目不超过 10000。</li>\\n</ol>\\n","title":"598. 范围求和 II","relatedTags":["数组","数学"],"difficult":"Easy","lang":["javascript"],"uniqueID":"598","slug":"598-Range-Addition-II"}')}}]);