(window.webpackJsonp=window.webpackJsonp||[]).push([[162],{644:function(n){n.exports=JSON.parse('{"content":"<h2 id=\\"yi-ge-ke-zan-ting-fen-duan-shang-chuan-de-li-zi\\">一个可暂停分段上传的例子</h2>\\n<p><a href=\\"https://gist.github.com/stonehank/5d3dea234ac6bc200bdef9c181c0a645\\">代码位置</a></p>\\n<hr>\\n<p>要点：</p>\\n<ol>\\n<li><p>通过<code>blob.slice()</code>对文件进行分割，再逐个上传</p>\\n<p> <code>blob.slice(start, end, blob.type)</code></p>\\n</li>\\n<li><p>未使用表单，而是通过<code>FormData</code>(方便处理二进制)和<code>xhr</code>发送</p>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code>   <span class=\\"hljs-keyword\\">let</span> fd = <span class=\\"hljs-keyword\\">new</span> FormData()\\n   fd.append(<span class=\\"hljs-string\\">\'name\'</span>, blob.name)\\n   fd.append(<span class=\\"hljs-string\\">\'start\'</span>, start)\\n   fd.append(<span class=\\"hljs-string\\">\'fragments\'</span>, cur);\\n   xhr.open(<span class=\\"hljs-string\\">\'POST\'</span>, <span class=\\"hljs-string\\">\'http://localhost:8080/upload.js\'</span>, <span class=\\"hljs-literal\\">true</span>);\\n   xhr.send(fd)</code></pre></code></pre>\\n</li>\\n<li><p>使用了<code>multiparty</code>，可以解析<code>FormData</code></p>\\n</li>\\n<li><p>通过传递start值和<code>fs.createWriteStream</code>对续传文件进行修改</p>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code> <span class=\\"hljs-comment\\">// r+ 表示修改而不是重写，r+不会自动创建不存在的文件</span>\\n writable=fs.createWriteStream(curFileName,{<span class=\\"hljs-attr\\">flags</span>:<span class=\\"hljs-string\\">\'r+\'</span>,<span class=\\"hljs-attr\\">start</span>:+start})\\n writable.write(content)</code></pre></code></pre>\\n<p> 判断文件是否存在(同步)：</p>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code> <span class=\\"hljs-keyword\\">try</span> {\\n   fs.accessSync(curFileName);\\n } <span class=\\"hljs-keyword\\">catch</span> (err) {\\n   writable=fs.createWriteStream(curFileName)\\n }  </code></pre></code></pre>\\n</li>\\n</ol>\\n<p>遇到的一些问题：</p>\\n<ol>\\n<li><p>php使用环境(本地测试需要架设虚拟服务器)</p>\\n</li>\\n<li><p>xhr对二进制数据不能传递键值对(仅能传单个二进制数据)</p>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code> <span class=\\"hljs-keyword\\">let</span> blob=<span class=\\"hljs-keyword\\">new</span> Blob([someContent])\\n\\n xhr.send(blob)  \\n <span class=\\"hljs-comment\\">// 后台直接写入文件便可，无须转换</span>\\n\\n xhr.send(<span class=\\"hljs-string\\">`name=<span class=\\"hljs-subst\\">${blob.name}</span>&amp;content=<span class=\\"hljs-subst\\">${blob}</span>`</span>)\\n <span class=\\"hljs-comment\\">// 这么传后台就无法解析content，始终是个[object Object]</span></code></pre></code></pre>\\n</li>\\n<li><p>通过FormData传递，有分隔符<code>-----</code>和一些编码，使用<code>querystring</code>无法解析，但使用php\\n作为后端好像不存在兼容问题。</p>\\n</li>\\n<li><p><code>multiparty</code>当解析函数使用了<code>cb</code>则无法监听它的<code>part</code>事件，因为全部说明内容都以键值对形式传递到<code>cb</code>里面了\\n，但是具体数据内容必须用<code>part</code>监听才能获取，数据获取方法和<code>res.on(&#39;data&#39;)</code>&amp;&amp;<code>res.on(&#39;end&#39;)</code>类似</p>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code> <span class=\\"hljs-keyword\\">let</span> form=<span class=\\"hljs-keyword\\">new</span> Multiparty.Form()\\n\\n <span class=\\"hljs-comment\\">// 情况1：数据流入此处，不会再触发底下的监听事件</span>\\n form.parse(req,<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">err, fields, files</span>)</span>{   \\n    <span class=\\"hljs-comment\\">/* ... */</span>   \\n });\\n\\n <span class=\\"hljs-comment\\">// 情况2：数据流入监听事件</span>\\n form.parse(req)\\n\\n form.on(<span class=\\"hljs-string\\">\'part\'</span>, <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">part</span>) </span>{\\n      part.on(<span class=\\"hljs-string\\">\'data\'</span>, <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">chunk</span>)</span>{   \\n        <span class=\\"hljs-comment\\">/* 情况2下，这里的chunk就是传入的分段数据 */</span>\\n      })\\n      part.on(<span class=\\"hljs-string\\">\'end\'</span>, <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>)</span>{\\n        <span class=\\"hljs-comment\\">/* ... */</span>\\n      })\\n })</code></pre></code></pre>\\n</li>\\n<li><p>xhr定义<code>responseType=&#39;json&#39;</code>，会自动将符合格式的回应值转换成json，\\n但不能使用<code>responseText</code>接收，使用<code>response</code>读取json</p>\\n<p>另外还有<code>responseXML</code>读取document</p>\\n</li>\\n</ol>\\n","toc":[{"anchor":"yi-ge-ke-zan-ting-fen-duan-shang-chuan-de-li-zi","level":2,"text":"一个可暂停分段上传的例子"}],"relatedTags":null,"created_at":"2018-07-26","timeArr":[2018,6,26,0,0,0,0],"title":"通过blob实现文件续传记录(nodejs)","uuid":"46e9b0a650dba0fd4351e6b9b36a76775bb0bc76","summary":"<h4>一个可暂停分段上传的例子</h4>\\n<p><a href=\\"https://gist.github.com/stonehank/5d3dea234ac6bc200bdef9c181c0a645\\">代码位置</a></p>","slug":"tong-guo-blob-shi-xian-wen-jian-xu-chuan-ji-lu-(nodejs)","sha":"f3a86b01ae6164f031e648596d9eeafb87fb28f6"}')}}]);