(window.webpackJsonp=window.webpackJsonp||[]).push([[358],{1156:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">grid</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> getMaximumGold = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">grid</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> moves=[[<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">0</span>],[<span class=\\"hljs-number\\">1</span>,<span class=\\"hljs-number\\">0</span>],[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">-1</span>],[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">1</span>]]\\n  <span class=\\"hljs-keyword\\">let</span> m=grid.length,n=grid[<span class=\\"hljs-number\\">0</span>].length\\n  <span class=\\"hljs-keyword\\">let</span> visited=<span class=\\"hljs-built_in\\">Array</span>(m).fill().map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span>=&gt;</span><span class=\\"hljs-built_in\\">Array</span>(n).fill(<span class=\\"hljs-number\\">0</span>))\\n  <span class=\\"hljs-keyword\\">let</span> uniqId=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">let</span> arr=[]\\n  findStart()\\n \\n  <span class=\\"hljs-keyword\\">let</span> collect=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">let</span> maxCollect=<span class=\\"hljs-number\\">0</span>\\n   <span class=\\"hljs-keyword\\">if</span>(arr.length===<span class=\\"hljs-number\\">0</span>){\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;m;i++){\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;n;j++){\\n        maxCollect+=grid[i][j]\\n      }\\n    }\\n   <span class=\\"hljs-keyword\\">return</span> maxCollect\\n  }\\n  \\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> [x,y] <span class=\\"hljs-keyword\\">of</span> arr){\\n    uniqId++\\n    visited[x][y]=uniqId\\n    dfs([x,y],visited,grid[x][y])\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> maxCollect\\n  \\n  \\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">dfs</span>(<span class=\\"hljs-params\\">[x,y],visited,collect</span>)</span>{\\n     maxCollect=<span class=\\"hljs-built_in\\">Math</span>.max(maxCollect,collect)\\n     <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> [dx,dy] <span class=\\"hljs-keyword\\">of</span> moves){\\n      <span class=\\"hljs-keyword\\">let</span> nx=dx+x\\n      <span class=\\"hljs-keyword\\">let</span> ny=dy+y\\n      <span class=\\"hljs-keyword\\">if</span>(nx&lt;<span class=\\"hljs-number\\">0</span> || ny&lt;<span class=\\"hljs-number\\">0</span> || nx&gt;=m || ny&gt;=n)<span class=\\"hljs-keyword\\">continue</span>\\n      <span class=\\"hljs-keyword\\">if</span>(grid[nx][ny]===<span class=\\"hljs-number\\">0</span>) <span class=\\"hljs-keyword\\">continue</span>\\n      <span class=\\"hljs-keyword\\">if</span>(visited[nx][ny]===uniqId)<span class=\\"hljs-keyword\\">continue</span>\\n       visited[nx][ny]=uniqId\\n       dfs([nx,ny],visited,collect+grid[nx][ny])\\n       visited[nx][ny]=uniqId<span class=\\"hljs-number\\">-1</span>\\n    }\\n  }\\n  \\n  \\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">findStart</span>(<span class=\\"hljs-params\\"></span>)</span>{\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;m;i++){\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;n;j++){\\n        <span class=\\"hljs-keyword\\">if</span>(grid[i][j]===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">continue</span>\\n        <span class=\\"hljs-keyword\\">let</span> sibl=<span class=\\"hljs-number\\">0</span>\\n        <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> [dx,dy] <span class=\\"hljs-keyword\\">of</span> moves){\\n          <span class=\\"hljs-keyword\\">let</span> nx=dx+i\\n          <span class=\\"hljs-keyword\\">let</span> ny=dy+j\\n          <span class=\\"hljs-keyword\\">if</span>(nx&lt;<span class=\\"hljs-number\\">0</span> || ny&lt;<span class=\\"hljs-number\\">0</span> || nx&gt;=m || ny&gt;=n)<span class=\\"hljs-keyword\\">continue</span>\\n          <span class=\\"hljs-keyword\\">if</span>(grid[nx][ny]!==<span class=\\"hljs-number\\">0</span>)sibl++\\n          <span class=\\"hljs-keyword\\">if</span>(sibl&gt;<span class=\\"hljs-number\\">1</span>)<span class=\\"hljs-keyword\\">break</span>\\n        }\\n        <span class=\\"hljs-keyword\\">if</span>(sibl&gt;<span class=\\"hljs-number\\">1</span>)<span class=\\"hljs-keyword\\">continue</span>\\n        arr.push([i,j,<span class=\\"hljs-number\\">0</span>])\\n      }\\n    }\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"path-with-maximum-gold","created_at":"2019-10-06","timeArr":[2019,9,6,11,11,26,0],"hasThinking":false,"content":"<p>你要开发一座金矿，地质勘测学家已经探明了这座金矿中的资源分布，并用大小为&nbsp;<code>m * n</code> 的网格 <code>grid</code> 进行了标注。每个单元格中的整数就表示这一单元格中的黄金数量；如果该单元格是空的，那么就是 <code>0</code>。</p>\\n\\n<p>为了使收益最大化，矿工需要按以下规则来开采黄金：</p>\\n\\n<ul>\\n\\t<li>每当矿工进入一个单元，就会收集该单元格中的所有黄金。</li>\\n\\t<li>矿工每次可以从当前位置向上下左右四个方向走。</li>\\n\\t<li>每个单元格只能被开采（进入）一次。</li>\\n\\t<li><strong>不得开采</strong>（进入）黄金数目为 <code>0</code> 的单元格。</li>\\n\\t<li>矿工可以从网格中 <strong>任意一个</strong> 有黄金的单元格出发或者是停止。</li>\\n</ul>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>grid = [[0,6,0],[5,8,7],[0,9,0]]\\n<strong>输出：</strong>24\\n<strong>解释：</strong>\\n[[0,6,0],\\n [5,8,7],\\n [0,9,0]]\\n一种收集最多黄金的路线是：9 -&gt; 8 -&gt; 7。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>grid = [[1,0,7],[2,0,6],[3,4,5],[0,3,0],[9,0,20]]\\n<strong>输出：</strong>28\\n<strong>解释：</strong>\\n[[1,0,7],\\n [2,0,6],\\n [3,4,5],\\n [0,3,0],\\n [9,0,20]]\\n一种收集最多黄金的路线是：1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; 7。\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= grid.length,&nbsp;grid[i].length &lt;= 15</code></li>\\n\\t<li><code>0 &lt;= grid[i][j] &lt;= 100</code></li>\\n\\t<li>最多 <strong>25 </strong>个单元格中有黄金。</li>\\n</ul>\\n","title":"1219. 黄金矿工","relatedTags":["数组","回溯","矩阵"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1219","slug":"1219-Path-with-Maximum-Gold"}')}}]);