(window.webpackJsonp=window.webpackJsonp||[]).push([[376],{1174:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{character[][]}</span> <span class=\\"hljs-variable\\">grid</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> minPushBox = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">grid</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> moves=[[<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">0</span>],[<span class=\\"hljs-number\\">1</span>,<span class=\\"hljs-number\\">0</span>],[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">-1</span>],[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">1</span>]]\\n  <span class=\\"hljs-keyword\\">let</span> boxPos=[]\\n  <span class=\\"hljs-keyword\\">let</span> target=[]\\n  <span class=\\"hljs-keyword\\">let</span> peoplePos=[]\\n  <span class=\\"hljs-keyword\\">let</span> hash={}\\n  <span class=\\"hljs-keyword\\">let</span> peopleHash={}\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;grid.length;i++){\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;grid[<span class=\\"hljs-number\\">0</span>].length;j++){\\n      <span class=\\"hljs-keyword\\">if</span>(grid[i][j]===<span class=\\"hljs-string\\">\\"B\\"</span>)boxPos=[i,j]\\n      <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(grid[i][j]===<span class=\\"hljs-string\\">\'T\'</span>)target=[i,j]\\n      <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(grid[i][j]===<span class=\\"hljs-string\\">\'S\'</span>)peoplePos=[i,j]\\n    }\\n  }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">peopleCanReach</span>(<span class=\\"hljs-params\\">[fromX,fromY],[tarX,tarY]</span>)</span>{\\n    <span class=\\"hljs-comment\\">// console.log(fromX,fromY,tarX,tarY,\'----\')</span>\\n    <span class=\\"hljs-keyword\\">if</span>(fromX===tarX &amp;&amp; fromY===tarY)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n    <span class=\\"hljs-keyword\\">if</span>(tarX&lt;<span class=\\"hljs-number\\">0</span> || tarX&gt;=grid.length || tarY&lt;<span class=\\"hljs-number\\">0</span> || tarY&gt;=grid[<span class=\\"hljs-number\\">0</span>].length)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n    <span class=\\"hljs-keyword\\">if</span>(grid[tarX][tarY]===<span class=\\"hljs-string\\">\'#\'</span>) <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n    peopleHash={}\\n    peopleHash[fromX+<span class=\\"hljs-string\\">\' \'</span>+fromY]=<span class=\\"hljs-literal\\">true</span>\\n    <span class=\\"hljs-keyword\\">let</span> arr=[[fromX,fromY]]\\n    <span class=\\"hljs-keyword\\">while</span>(arr.length&gt;<span class=\\"hljs-number\\">0</span>){\\n      <span class=\\"hljs-keyword\\">let</span> len=arr.length\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;len;i++){\\n        <span class=\\"hljs-keyword\\">let</span> [x,y]=arr.shift()\\n        <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> [dx,dy] <span class=\\"hljs-keyword\\">of</span> moves){\\n          <span class=\\"hljs-keyword\\">let</span> nx=x+dx\\n          <span class=\\"hljs-keyword\\">let</span> ny=y+dy\\n          <span class=\\"hljs-keyword\\">if</span>(nx===tarX &amp;&amp; ny===tarY)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n          <span class=\\"hljs-keyword\\">if</span>(nx&lt;<span class=\\"hljs-number\\">0</span> || nx&gt;=grid.length || ny&lt;<span class=\\"hljs-number\\">0</span> || ny&gt;=grid[<span class=\\"hljs-number\\">0</span>].length)<span class=\\"hljs-keyword\\">continue</span>\\n          <span class=\\"hljs-keyword\\">if</span>(peopleHash[nx+<span class=\\"hljs-string\\">\' \'</span>+ny])<span class=\\"hljs-keyword\\">continue</span>\\n          <span class=\\"hljs-keyword\\">if</span>(grid[nx][ny]===<span class=\\"hljs-string\\">\'#\'</span> || grid[nx][ny]===<span class=\\"hljs-string\\">\'B\'</span>)<span class=\\"hljs-keyword\\">continue</span>\\n          peopleHash[nx+<span class=\\"hljs-string\\">\' \'</span>+ny]=<span class=\\"hljs-literal\\">true</span>\\n          arr.push([nx,ny])\\n        }\\n      }\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n  }\\n  \\n  <span class=\\"hljs-comment\\">// return []</span>\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">boxGoOri</span>(<span class=\\"hljs-params\\">[bx,by],[px,py]</span>)</span>{\\n    <span class=\\"hljs-comment\\">// console.log(bx,by,px,py)</span>\\n    <span class=\\"hljs-keyword\\">let</span> list=[]\\n    <span class=\\"hljs-keyword\\">let</span> last=boxPos\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> [dx,dy] <span class=\\"hljs-keyword\\">of</span> moves){\\n      <span class=\\"hljs-keyword\\">let</span> nxtBoxX=bx+dx\\n      <span class=\\"hljs-keyword\\">let</span> nxtBoxY=by+dy\\n      <span class=\\"hljs-keyword\\">if</span>(nxtBoxX&lt;<span class=\\"hljs-number\\">0</span> || nxtBoxX&gt;=grid.length || nxtBoxY&lt;<span class=\\"hljs-number\\">0</span> || nxtBoxY&gt;=grid[<span class=\\"hljs-number\\">0</span>].length)<span class=\\"hljs-keyword\\">continue</span>\\n      <span class=\\"hljs-keyword\\">if</span>(grid[nxtBoxX][nxtBoxY]===<span class=\\"hljs-string\\">\'#\'</span>)<span class=\\"hljs-keyword\\">continue</span>\\n      <span class=\\"hljs-keyword\\">let</span> tarPx=bx-dx\\n      <span class=\\"hljs-keyword\\">let</span> tarPy=by-dy\\n      <span class=\\"hljs-keyword\\">if</span>(tarPx&lt;<span class=\\"hljs-number\\">0</span> || tarPx&gt;=grid.length || tarPy&lt;<span class=\\"hljs-number\\">0</span> || tarPy&gt;=grid[<span class=\\"hljs-number\\">0</span>].length)<span class=\\"hljs-keyword\\">continue</span>\\n        <span class=\\"hljs-keyword\\">if</span>(grid[tarPx][tarPy]===<span class=\\"hljs-string\\">\'#\'</span>)<span class=\\"hljs-keyword\\">continue</span>    \\n        grid[last[<span class=\\"hljs-number\\">0</span>]][last[<span class=\\"hljs-number\\">1</span>]]=<span class=\\"hljs-string\\">\'.\'</span>\\n        grid[bx][by]=<span class=\\"hljs-string\\">\\"B\\"</span>       \\n        last=[bx,by]\\n        <span class=\\"hljs-keyword\\">if</span>(peopleCanReach([px,py],[tarPx,tarPy])){\\n          list.push([dx,dy,tarPx,tarPy])\\n        }\\n    }\\n    grid[last[<span class=\\"hljs-number\\">0</span>]][last[<span class=\\"hljs-number\\">1</span>]]=<span class=\\"hljs-string\\">\'.\'</span>\\n    grid[boxPos[<span class=\\"hljs-number\\">0</span>]][boxPos[<span class=\\"hljs-number\\">1</span>]]=<span class=\\"hljs-string\\">\\"B\\"</span>\\n    \\n    <span class=\\"hljs-keyword\\">return</span> list\\n  }\\n  <span class=\\"hljs-comment\\">// console.log(boxPos,target,peoplePos)</span>\\n  <span class=\\"hljs-keyword\\">let</span> oriList=boxGoOri(boxPos,peoplePos)\\n  <span class=\\"hljs-keyword\\">let</span> arr=[]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> ori <span class=\\"hljs-keyword\\">of</span> oriList){\\n    arr.push([boxPos[<span class=\\"hljs-number\\">0</span>],boxPos[<span class=\\"hljs-number\\">1</span>],ori[<span class=\\"hljs-number\\">0</span>],ori[<span class=\\"hljs-number\\">1</span>],ori[<span class=\\"hljs-number\\">2</span>],ori[<span class=\\"hljs-number\\">3</span>]])\\n    hash[boxPos[<span class=\\"hljs-number\\">0</span>]+<span class=\\"hljs-string\\">\' \'</span>+boxPos[<span class=\\"hljs-number\\">1</span>]+<span class=\\"hljs-string\\">\' \'</span>+ori[<span class=\\"hljs-number\\">2</span>]+<span class=\\"hljs-string\\">\' \'</span>+ori[<span class=\\"hljs-number\\">3</span>]]=<span class=\\"hljs-literal\\">true</span>\\n  }\\n  \\n  <span class=\\"hljs-keyword\\">let</span> step=<span class=\\"hljs-number\\">1</span>\\n  <span class=\\"hljs-keyword\\">while</span>(arr.length&gt;<span class=\\"hljs-number\\">0</span>){\\n    <span class=\\"hljs-comment\\">// console.log(arr)</span>\\n    <span class=\\"hljs-keyword\\">let</span> len=arr.length\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;len;i++){\\n      <span class=\\"hljs-keyword\\">let</span> [bx,by,dx,dy,px,py]=arr.shift()\\n\\n      bx+=dx\\n      by+=dy\\n      px+=dx\\n      py+=dy\\n            <span class=\\"hljs-comment\\">// console.log(bx,by,dx,dy,px,py)</span>\\n      <span class=\\"hljs-keyword\\">if</span>(bx===target[<span class=\\"hljs-number\\">0</span>] &amp;&amp; by===target[<span class=\\"hljs-number\\">1</span>]){\\n        <span class=\\"hljs-comment\\">// console.log(hash)</span>\\n        <span class=\\"hljs-keyword\\">return</span> step\\n      }\\n    \\n      <span class=\\"hljs-keyword\\">if</span>(hash[bx+<span class=\\"hljs-string\\">\' \'</span>+by+<span class=\\"hljs-string\\">\' \'</span>+px+<span class=\\"hljs-string\\">\' \'</span>+py])<span class=\\"hljs-keyword\\">continue</span>\\n      hash[bx+<span class=\\"hljs-string\\">\' \'</span>+by+<span class=\\"hljs-string\\">\' \'</span>+px+<span class=\\"hljs-string\\">\' \'</span>+py]=<span class=\\"hljs-literal\\">true</span>\\n      <span class=\\"hljs-keyword\\">let</span> nxtGoList=boxGoOri([bx,by],[px,py])\\n      <span class=\\"hljs-comment\\">// console.log(bx,by,nxtGoList)</span>\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> [oriX,oriY,pX,pY] <span class=\\"hljs-keyword\\">of</span> nxtGoList){\\n        arr.push([bx,by,oriX,oriY,pX,pY])\\n      }\\n    }\\n    step++\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">-1</span>\\n};\\n</code></pre>\\n"],"querySlug":"minimum-moves-to-move-a-box-to-their-target-location","created_at":"2019-11-17","timeArr":[2019,10,17,13,24,31,0],"hasThinking":false,"content":"<p>「推箱子」是一款风靡全球的益智小游戏，玩家需要将箱子推到仓库中的目标位置。</p>\\n\\n<p>游戏地图用大小为 <code>n * m</code> 的网格 <code>grid</code> 表示，其中每个元素可以是墙、地板或者是箱子。</p>\\n\\n<p>现在你将作为玩家参与游戏，按规则将箱子&nbsp;<code>&#39;B&#39;</code>&nbsp;移动到目标位置&nbsp;<code>&#39;T&#39;</code> ：</p>\\n\\n<ul>\\n\\t<li>玩家用字符&nbsp;<code>&#39;S&#39;</code>&nbsp;表示，只要他在地板上，就可以在网格中向上、下、左、右四个方向移动。</li>\\n\\t<li>地板用字符&nbsp;<code>&#39;.&#39;</code>&nbsp;表示，意味着可以自由行走。</li>\\n\\t<li>墙用字符&nbsp;<code>&#39;#&#39;</code>&nbsp;表示，意味着障碍物，不能通行。&nbsp;</li>\\n\\t<li>箱子仅有一个，用字符&nbsp;<code>&#39;B&#39;</code>&nbsp;表示。相应地，网格上有一个目标位置&nbsp;<code>&#39;T&#39;</code>。</li>\\n\\t<li>玩家需要站在箱子旁边，然后沿着箱子的方向进行移动，此时箱子会被移动到相邻的地板单元格。记作一次「推动」。</li>\\n\\t<li>玩家无法越过箱子。</li>\\n</ul>\\n\\n<p>返回将箱子推到目标位置的最小 <strong>推动</strong> 次数，如果无法做到，请返回&nbsp;<code>-1</code>。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<p><strong><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/11/16/sample_1_1620.png\\" style=\\"height: 349px; width: 520px;\\"></strong></p>\\n\\n<pre><strong>输入：</strong>grid = [[&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;],\\n             [&quot;#&quot;,&quot;T&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;],\\n&nbsp;            [&quot;#&quot;,&quot;.&quot;,&quot;.&quot;,&quot;B&quot;,&quot;.&quot;,&quot;#&quot;],\\n&nbsp;            [&quot;#&quot;,&quot;.&quot;,&quot;#&quot;,&quot;#&quot;,&quot;.&quot;,&quot;#&quot;],\\n&nbsp;            [&quot;#&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;S&quot;,&quot;#&quot;],\\n&nbsp;            [&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;]]\\n<strong>输出：</strong>3\\n<strong>解释：</strong>我们只需要返回推箱子的次数。</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>grid = [[&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;],\\n             [&quot;#&quot;,&quot;T&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;],\\n&nbsp;            [&quot;#&quot;,&quot;.&quot;,&quot;.&quot;,&quot;B&quot;,&quot;.&quot;,&quot;#&quot;],\\n&nbsp;            [&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;.&quot;,&quot;#&quot;],\\n&nbsp;            [&quot;#&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;S&quot;,&quot;#&quot;],\\n&nbsp;            [&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;]]\\n<strong>输出：</strong>-1\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>grid = [[&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;],\\n&nbsp;            [&quot;#&quot;,&quot;T&quot;,&quot;.&quot;,&quot;.&quot;,&quot;#&quot;,&quot;#&quot;],\\n&nbsp;            [&quot;#&quot;,&quot;.&quot;,&quot;#&quot;,&quot;B&quot;,&quot;.&quot;,&quot;#&quot;],\\n&nbsp;            [&quot;#&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;#&quot;],\\n&nbsp;            [&quot;#&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;S&quot;,&quot;#&quot;],\\n&nbsp;            [&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;]]\\n<strong>输出：</strong>5\\n<strong>解释：</strong>向下、向左、向左、向上再向上。\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre><strong>输入：</strong>grid = [[&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;],\\n&nbsp;            [&quot;#&quot;,&quot;S&quot;,&quot;#&quot;,&quot;.&quot;,&quot;B&quot;,&quot;T&quot;,&quot;#&quot;],\\n&nbsp;            [&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;,&quot;#&quot;]]\\n<strong>输出：</strong>-1\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= grid.length &lt;= 20</code></li>\\n\\t<li><code>1 &lt;= grid[i].length &lt;= 20</code></li>\\n\\t<li><code>grid</code> 仅包含字符&nbsp;<code>&#39;.&#39;</code>, <code>&#39;#&#39;</code>,&nbsp; <code>&#39;S&#39;</code> , <code>&#39;T&#39;</code>, 以及&nbsp;<code>&#39;B&#39;</code>。</li>\\n\\t<li><code>grid</code>&nbsp;中&nbsp;<code>&#39;S&#39;</code>, <code>&#39;B&#39;</code>&nbsp;和&nbsp;<code>&#39;T&#39;</code>&nbsp;各只能出现一个。</li>\\n</ul>\\n","title":"1263. 推箱子","relatedTags":["广度优先搜索","数组","矩阵","堆（优先队列）"],"difficult":"Hard","lang":["javascript"],"uniqueID":"1263","slug":"1263-Minimum-Moves-to-Move-a-Box-to-Their-Target-Location"}')}}]);