(window.webpackJsonp=window.webpackJsonp||[]).push([[641],{1439:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for a binary tree node.\\n * function TreeNode(val, left, right) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.left = (left===undefined ? null : left)\\n *     this.right = (right===undefined ? null : right)\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{TreeNode}</span> <span class=\\"hljs-variable\\">root</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> BSTIterator = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">root</span>) </span>{\\n    <span class=\\"hljs-keyword\\">this</span>.stack=[]\\n    <span class=\\"hljs-keyword\\">let</span> node=root\\n    <span class=\\"hljs-keyword\\">while</span>(node){\\n        <span class=\\"hljs-keyword\\">this</span>.stack.push(node)\\n        node=node.left\\n    }\\n};\\n\\n<span class=\\"hljs-comment\\">/**\\n * @return {number}\\n */</span>\\nBSTIterator.prototype.next = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{\\n    <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-keyword\\">this</span>.stack.pop()\\n    <span class=\\"hljs-keyword\\">let</span> node=res.right\\n    <span class=\\"hljs-keyword\\">while</span>(node){\\n        <span class=\\"hljs-keyword\\">this</span>.stack.push(node)\\n        node=node.left\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> res.val\\n};\\n\\n<span class=\\"hljs-comment\\">/**\\n * @return {boolean}\\n */</span>\\nBSTIterator.prototype.hasNext = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-keyword\\">this</span>.stack.length&gt;<span class=\\"hljs-number\\">0</span>\\n};\\n\\n<span class=\\"hljs-comment\\">/**\\n * Your BSTIterator object will be instantiated and called as such:\\n * var obj = new BSTIterator(root)\\n * var param_1 = obj.next()\\n * var param_2 = obj.hasNext()\\n */</span>\\n</code></pre>\\n"],"querySlug":"binary-search-tree-iterator","created_at":"2021-03-28","timeArr":[2021,2,28,11,13,30,0],"hasThinking":false,"content":"实现一个二叉搜索树迭代器类<code>BSTIterator</code> ，表示一个按中序遍历二叉搜索树（BST）的迭代器：\\n<div class=\\"original__bRMd\\">\\n<div>\\n<ul>\\n\\t<li><code>BSTIterator(TreeNode root)</code> 初始化 <code>BSTIterator</code> 类的一个对象。BST 的根节点 <code>root</code> 会作为构造函数的一部分给出。指针应初始化为一个不存在于 BST 中的数字，且该数字小于 BST 中的任何元素。</li>\\n\\t<li><code>boolean hasNext()</code> 如果向指针右侧遍历存在数字，则返回 <code>true</code> ；否则返回 <code>false</code> 。</li>\\n\\t<li><code>int next()</code>将指针向右移动，然后返回指针处的数字。</li>\\n</ul>\\n\\n<p>注意，指针初始化为一个不存在于 BST 中的数字，所以对 <code>next()</code> 的首次调用将返回 BST 中的最小元素。</p>\\n</div>\\n</div>\\n\\n<p>你可以假设 <code>next()</code> 调用总是有效的，也就是说，当调用 <code>next()</code> 时，BST 的中序遍历中至少存在一个下一个数字。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2018/12/25/bst-tree.png\\" style=\\"width: 189px; height: 178px;\\" />\\n<pre>\\n<strong>输入</strong>\\n[\\"BSTIterator\\", \\"next\\", \\"next\\", \\"hasNext\\", \\"next\\", \\"hasNext\\", \\"next\\", \\"hasNext\\", \\"next\\", \\"hasNext\\"]\\n[[[7, 3, 15, null, null, 9, 20]], [], [], [], [], [], [], [], [], []]\\n<strong>输出</strong>\\n[null, 3, 7, true, 9, true, 15, true, 20, false]\\n\\n<strong>解释</strong>\\nBSTIterator bSTIterator = new BSTIterator([7, 3, 15, null, null, 9, 20]);\\nbSTIterator.next();    // 返回 3\\nbSTIterator.next();    // 返回 7\\nbSTIterator.hasNext(); // 返回 True\\nbSTIterator.next();    // 返回 9\\nbSTIterator.hasNext(); // 返回 True\\nbSTIterator.next();    // 返回 15\\nbSTIterator.hasNext(); // 返回 True\\nbSTIterator.next();    // 返回 20\\nbSTIterator.hasNext(); // 返回 False\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li>树中节点的数目在范围 <code>[1, 10<sup>5</sup>]</code> 内</li>\\n\\t<li><code>0 <= Node.val <= 10<sup>6</sup></code></li>\\n\\t<li>最多调用 <code>10<sup>5</sup></code> 次 <code>hasNext</code> 和 <code>next</code> 操作</li>\\n</ul>\\n\\n<p> </p>\\n\\n<p><strong>进阶：</strong></p>\\n\\n<ul>\\n\\t<li>你可以设计一个满足下述条件的解决方案吗？<code>next()</code> 和 <code>hasNext()</code> 操作均摊时间复杂度为 <code>O(1)</code> ，并使用 <code>O(h)</code> 内存。其中 <code>h</code> 是树的高度。</li>\\n</ul>\\n","title":"173. 二叉搜索树迭代器","relatedTags":["栈","树","设计","二叉搜索树","二叉树","迭代器"],"difficult":"Middle","lang":["javascript"],"uniqueID":"173","slug":"173-Binary-Search-Tree-Iterator"}')}}]);