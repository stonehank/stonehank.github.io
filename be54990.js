(window.webpackJsonp=window.webpackJsonp||[]).push([[777],{1575:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Solution</span><span class=\\"hljs-params\\">(object)</span>:</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">maxSumSubmatrix</span><span class=\\"hljs-params\\">(self, matrix, k)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type matrix: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        \\"\\"\\"</span>\\n        rows = len(matrix)\\n        cols = len(matrix[<span class=\\"hljs-number\\">0</span>])\\n\\n        ans = float(<span class=\\"hljs-string\\">\'-inf\'</span>)\\n        <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(cols):\\n            colsum = [<span class=\\"hljs-number\\">0</span>] * rows\\n            <span class=\\"hljs-keyword\\">for</span> j <span class=\\"hljs-keyword\\">in</span> range(i, cols):\\n                curlist = [<span class=\\"hljs-number\\">0</span>]\\n                rowsum = <span class=\\"hljs-number\\">0</span>\\n                <span class=\\"hljs-keyword\\">for</span> r <span class=\\"hljs-keyword\\">in</span> range(rows):\\n                    colsum[r] += matrix[r][j]\\n                    rowsum += colsum[r]\\n                    idx = bisect.bisect_left(curlist, rowsum - k)\\n                    <span class=\\"hljs-keyword\\">if</span> idx &gt;= <span class=\\"hljs-number\\">0</span> <span class=\\"hljs-keyword\\">and</span> idx &lt; len(curlist):\\n                        ans = max(ans, rowsum - curlist[idx])\\n                    bisect.insort(curlist, rowsum)\\n\\n        <span class=\\"hljs-keyword\\">return</span> ans  \\n</code></pre>\\n"],"querySlug":"max-sum-of-rectangle-no-larger-than-k","created_at":"2019-02-25","timeArr":[2019,1,25,18,3,50,0],"hasThinking":false,"content":"<p>给你一个 <code>m x n</code> 的矩阵 <code>matrix</code> 和一个整数 <code>k</code> ，找出并返回矩阵内部矩形区域的不超过 <code>k</code> 的最大数值和。</p>\\n\\n<p>题目数据保证总会存在一个数值和不超过 <code>k</code> 的矩形区域。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2021/03/18/sum-grid.jpg\\" style=\\"width: 255px; height: 176px;\\" />\\n<pre>\\n<strong>输入：</strong>matrix = [[1,0,1],[0,-2,3]], k = 2\\n<strong>输出：</strong>2\\n<strong>解释：</strong>蓝色边框圈出来的矩形区域 <code>[[0, 1], [-2, 3]]</code> 的数值和是 2，且 2 是不超过 k 的最大数字（k = 2）。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>matrix = [[2,2,-1]], k = 3\\n<strong>输出：</strong>3\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>m == matrix.length</code></li>\\n\\t<li><code>n == matrix[i].length</code></li>\\n\\t<li><code>1 <= m, n <= 100</code></li>\\n\\t<li><code>-100 <= matrix[i][j] <= 100</code></li>\\n\\t<li><code>-10<sup>5</sup> <= k <= 10<sup>5</sup></code></li>\\n</ul>\\n\\n<p> </p>\\n\\n<p><strong>进阶：</strong>如果行数远大于列数，该如何设计解决方案？</p>\\n","title":"363. 矩形区域不超过 K 的最大数值和","relatedTags":["数组","二分查找","动态规划","矩阵","有序集合"],"difficult":"Hard","lang":["python"],"uniqueID":"363","slug":"363-Max-Sum-of-Rectangle-No-Larger-Than-K"}')}}]);