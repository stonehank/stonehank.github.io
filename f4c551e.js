(window.webpackJsonp=window.webpackJsonp||[]).push([[598],{1396:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">n</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">k</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{string}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> getSmallestString = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">n, k</span>) </span>{\\n    <span class=\\"hljs-keyword\\">return</span> resolve(n,k)\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">resolve</span>(<span class=\\"hljs-params\\">n,k</span>)</span>{\\n        <span class=\\"hljs-keyword\\">if</span>(n===<span class=\\"hljs-number\\">1</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-built_in\\">String</span>.fromCharCode(k+<span class=\\"hljs-number\\">96</span>)\\n        <span class=\\"hljs-keyword\\">let</span> last=<span class=\\"hljs-number\\">26</span>\\n        <span class=\\"hljs-keyword\\">let</span> current=<span class=\\"hljs-number\\">1</span>\\n        <span class=\\"hljs-comment\\">// if(k-current &lt;=26){</span>\\n        <span class=\\"hljs-comment\\">//     return \'a\'+resolve(n-1,k-1)</span>\\n        <span class=\\"hljs-comment\\">// }</span>\\n        <span class=\\"hljs-keyword\\">if</span>(k-current &gt; (n<span class=\\"hljs-number\\">-1</span>) * last){\\n            current= k - (n<span class=\\"hljs-number\\">-1</span>)*last\\n        }\\n        <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-built_in\\">String</span>.fromCharCode(current+<span class=\\"hljs-number\\">96</span>) + resolve(n<span class=\\"hljs-number\\">-1</span>,k-current)\\n    }\\n};\\n</code></pre>\\n"],"querySlug":"smallest-string-with-a-given-numeric-value","created_at":"2020-11-23","timeArr":[2020,10,23,22,54,9,0],"hasThinking":false,"content":"<p><strong>小写字符 </strong>的 <strong>数值</strong> 是它在字母表中的位置（从 <code>1</code> 开始），因此 <code>a</code> 的数值为 <code>1</code> ，<code>b</code> 的数值为 <code>2</code> ，<code>c</code> 的数值为 <code>3</code> ，以此类推。</p>\\n\\n<p>字符串由若干小写字符组成，<strong>字符串的数值</strong> 为各字符的数值之和。例如，字符串 <code>\\"abe\\"</code> 的数值等于 <code>1 + 2 + 5 = 8</code> 。</p>\\n\\n<p>给你两个整数 <code>n</code> 和 <code>k</code> 。返回 <strong>长度</strong> 等于 <code>n</code> 且 <strong>数值</strong> 等于 <code>k</code> 的 <strong>字典序最小</strong> 的字符串。</p>\\n\\n<p>注意，如果字符串 <code>x</code> 在字典排序中位于 <code>y</code> 之前，就认为 <code>x</code> 字典序比 <code>y</code> 小，有以下两种情况：</p>\\n\\n<ul>\\n\\t<li><code>x</code> 是 <code>y</code> 的一个前缀；</li>\\n\\t<li>如果 <code>i</code> 是 <code>x[i] != y[i]</code> 的第一个位置，且 <code>x[i]</code> 在字母表中的位置比 <code>y[i]</code> 靠前。</li>\\n</ul>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>n = 3, k = 27\\n<strong>输出：</strong>\\"aay\\"\\n<strong>解释：</strong>字符串的数值为 1 + 1 + 25 = 27，它是数值满足要求且长度等于 3 字典序最小的字符串。</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>n = 5, k = 73\\n<strong>输出：</strong>\\"aaszz\\"\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= n <= 10<sup>5</sup></code></li>\\n\\t<li><code>n <= k <= 26 * n</code></li>\\n</ul>\\n","title":"1663. 具有给定数值的最小字符串","relatedTags":["贪心","字符串"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1663","slug":"1663-Smallest-String-With-A-Given-Numeric-Value"}')}}]);