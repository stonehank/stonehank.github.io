(window.webpackJsonp=window.webpackJsonp||[]).push([[519],{1317:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for a point.\\n * function Point(x, y) {\\n *     this.x = x;\\n *     this.y = y;\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{Point[]}</span> <span class=\\"hljs-variable\\">points</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> maxPoints = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">points</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> maxLen=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;points.length;i++){\\n    <span class=\\"hljs-comment\\">// 确定第一个点</span>\\n    <span class=\\"hljs-keyword\\">let</span> first=points[i]\\n    <span class=\\"hljs-keyword\\">let</span> count=<span class=\\"hljs-number\\">1</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;points.length;j++){\\n      <span class=\\"hljs-keyword\\">if</span>(i===j)<span class=\\"hljs-keyword\\">continue</span>\\n      count++\\n      <span class=\\"hljs-comment\\">// 确定第二个点，如果第二个点和第一个点相同，则继续选择下一个第二个点</span>\\n      <span class=\\"hljs-keyword\\">let</span> sec=points[j]\\n      <span class=\\"hljs-keyword\\">let</span> dx=sec.x-first.x,dy=sec.y-first.y\\n      <span class=\\"hljs-keyword\\">if</span>(dx===<span class=\\"hljs-number\\">0</span> &amp;&amp; dy===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">continue</span>\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> k=j+<span class=\\"hljs-number\\">1</span>;k&lt;points.length;k++){\\n        <span class=\\"hljs-comment\\">// 通过前面2个点的间隔，筛选后面的点</span>\\n        <span class=\\"hljs-keyword\\">if</span>(k===i)<span class=\\"hljs-keyword\\">continue</span>\\n        <span class=\\"hljs-keyword\\">let</span> o=points[k]\\n        <span class=\\"hljs-keyword\\">let</span> deltX=o.x-first.x,\\n            deltY=o.y-first.y\\n        <span class=\\"hljs-keyword\\">if</span>(dx===<span class=\\"hljs-number\\">0</span> &amp;&amp; deltX===<span class=\\"hljs-number\\">0</span>)count++\\n        <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(dy===<span class=\\"hljs-number\\">0</span> &amp;&amp; deltY===<span class=\\"hljs-number\\">0</span>)count++\\n        <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(deltX/deltY===dx/dy)count++\\n      }\\n      maxLen=<span class=\\"hljs-built_in\\">Math</span>.max(maxLen,count)\\n      count=<span class=\\"hljs-number\\">1</span>\\n    }\\n    <span class=\\"hljs-comment\\">// 如果不存在第二个点，这里也需要Math.max</span>\\n    maxLen=<span class=\\"hljs-built_in\\">Math</span>.max(maxLen,count)\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> maxLen\\n};\\n</code></pre>\\n"],"querySlug":"max-points-on-a-line","created_at":"2019-03-29","timeArr":[2019,2,29,13,2,32,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>原理：两点确定一条直线。</p>\\n<ol>\\n<li>\\n<p>确定第一个点。</p>\\n</li>\\n<li>\\n<p>确定第二个点，如果第二个点和第一个点相同，则继续选择下一个第二个点。</p>\\n<p>注意：</p>\\n<ul>\\n<li>相同的时候，<code>count++</code>也要执行。</li>\\n</ul>\\n</li>\\n<li>\\n<p>根据前面亮点的<code>dx=p2.x-p1.x</code>和<code>dy=p2.y-p1.y</code>，确定后续的其他点。</p>\\n<p>注意：</p>\\n<ul>\\n<li>当存在<code>dx===0</code>或者<code>dy===0</code>，直接判断<code>p3.x-p1.x</code>或者<code>p3.y-p1.y</code>是否为<code>0</code>。</li>\\n</ul>\\n</li>\\n</ol>\\n","content":"<p>给你一个数组 <code>points</code> ，其中 <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> 表示 <strong>X-Y</strong> 平面上的一个点。求最多有多少个点在同一条直线上。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2021/02/25/plane1.jpg\\" style=\\"width: 300px; height: 294px;\\" />\\n<pre>\\n<strong>输入：</strong>points = [[1,1],[2,2],[3,3]]\\n<strong>输出：</strong>3\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2021/02/25/plane2.jpg\\" style=\\"width: 300px; height: 294px;\\" />\\n<pre>\\n<strong>输入：</strong>points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]\\n<strong>输出：</strong>4\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= points.length <= 300</code></li>\\n\\t<li><code>points[i].length == 2</code></li>\\n\\t<li><code>-10<sup>4</sup> <= x<sub>i</sub>, y<sub>i</sub> <= 10<sup>4</sup></code></li>\\n\\t<li><code>points</code> 中的所有点 <strong>互不相同</strong></li>\\n</ul>\\n","title":"149. 直线上最多的点数","relatedTags":["几何","哈希表","数学"],"difficult":"Hard","lang":["javascript"],"uniqueID":"149","slug":"149-Max-Points-on-a-Line"}')}}]);