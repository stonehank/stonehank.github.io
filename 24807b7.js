(window.webpackJsonp=window.webpackJsonp||[]).push([[618],{1416:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">nums</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> maximumUniqueSubarray = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">nums</span>) </span>{\\n    <span class=\\"hljs-keyword\\">let</span> cache={}\\n    <span class=\\"hljs-keyword\\">let</span> l=<span class=\\"hljs-number\\">0</span>,r=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-number\\">-1</span>\\n    <span class=\\"hljs-keyword\\">let</span> sumArr=[nums[<span class=\\"hljs-number\\">0</span>]]\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">1</span>;i&lt;nums.length;i++){\\n        sumArr[i]=sumArr[i<span class=\\"hljs-number\\">-1</span>]+nums[i]\\n    }\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;nums.length;i++){\\n        <span class=\\"hljs-keyword\\">let</span> n=nums[i]\\n        <span class=\\"hljs-keyword\\">if</span>(cache[n]!=<span class=\\"hljs-literal\\">null</span> &amp;&amp; cache[n]&gt;=l){\\n            res=<span class=\\"hljs-built_in\\">Math</span>.max(res,getSum(l,r))\\n            l=cache[n]+<span class=\\"hljs-number\\">1</span>\\n        }\\n        cache[n]=i\\n        r++\\n    }\\n  \\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-built_in\\">Math</span>.max(res,getSum(l,r))\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">getSum</span>(<span class=\\"hljs-params\\">l,r</span>)</span>{\\n        <span class=\\"hljs-keyword\\">return</span> nums[l]+sumArr[r<span class=\\"hljs-number\\">-1</span>]-sumArr[l]\\n    }\\n};\\n</code></pre>\\n"],"querySlug":"maximum-erasure-value","created_at":"2020-12-25","timeArr":[2020,11,25,20,44,22,0],"hasThinking":false,"content":"<p>给你一个正整数数组 <code>nums</code> ，请你从中删除一个含有 <strong>若干不同元素</strong> 的子数组<strong>。</strong>删除子数组的 <strong>得分</strong> 就是子数组各元素之 <strong>和</strong> 。</p>\\n\\n<p>返回 <strong>只删除一个</strong> 子数组可获得的 <strong>最大得分</strong><em> 。</em></p>\\n\\n<p>如果数组 <code>b</code> 是数组 <code>a</code> 的一个连续子序列，即如果它等于 <code>a[l],a[l+1],...,a[r]</code> ，那么它就是 <code>a</code> 的一个子数组。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [4,2,4,5,6]\\n<strong>输出：</strong>17\\n<strong>解释：</strong>最优子数组是 [2,4,5,6]\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [5,2,1,2,5,2,1,2,5]\\n<strong>输出：</strong>8\\n<strong>解释：</strong>最优子数组是 [5,2,1] 或 [1,2,5]\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= nums.length <= 10<sup>5</sup></code></li>\\n\\t<li><code>1 <= nums[i] <= 10<sup>4</sup></code></li>\\n</ul>\\n","title":"1695. 删除子数组的最大得分","relatedTags":["数组","哈希表","滑动窗口"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1695","slug":"1695-Maximum-Erasure-Value"}')}}]);