(window.webpackJsonp=window.webpackJsonp||[]).push([[762],{1560:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Solution</span><span class=\\"hljs-params\\">(object)</span>:</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">searchRange</span><span class=\\"hljs-params\\">(self, nums, target)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: List[int]\\n        \\"\\"\\"</span>\\n        <span class=\\"hljs-keyword\\">if</span> <span class=\\"hljs-keyword\\">not</span> nums:<span class=\\"hljs-keyword\\">return</span> [<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">-1</span>]\\n        \\n        <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">findStart</span><span class=\\"hljs-params\\">(arr,n)</span>:</span>\\n            lo,hi=<span class=\\"hljs-number\\">0</span>,len(arr)<span class=\\"hljs-number\\">-1</span>\\n            <span class=\\"hljs-keyword\\">while</span> lo&lt;hi:\\n                mid=(lo+hi) // <span class=\\"hljs-number\\">2</span>\\n                <span class=\\"hljs-keyword\\">if</span> arr[mid]&lt;n: lo=mid+<span class=\\"hljs-number\\">1</span>\\n                <span class=\\"hljs-keyword\\">else</span>: hi=mid\\n            <span class=\\"hljs-keyword\\">return</span> hi\\n        \\n        <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">findEnd</span><span class=\\"hljs-params\\">(arr,n)</span>:</span>\\n            lo,hi=<span class=\\"hljs-number\\">0</span>,len(arr)<span class=\\"hljs-number\\">-1</span>\\n            <span class=\\"hljs-keyword\\">while</span> lo&lt;hi:\\n                mid=(lo+hi+<span class=\\"hljs-number\\">1</span>) // <span class=\\"hljs-number\\">2</span>\\n                <span class=\\"hljs-keyword\\">if</span> arr[mid]&gt;n: hi=mid<span class=\\"hljs-number\\">-1</span>\\n                <span class=\\"hljs-keyword\\">else</span>: lo=mid\\n            <span class=\\"hljs-keyword\\">return</span> lo\\n        \\n        start=findStart(nums,target)\\n        <span class=\\"hljs-keyword\\">if</span> nums[start]!=target: <span class=\\"hljs-keyword\\">return</span> [<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">-1</span>]\\n        end=findEnd(nums,target)\\n        <span class=\\"hljs-keyword\\">return</span> [start,end]\\n</code></pre>\\n"],"querySlug":"find-first-and-last-position-of-element-in-sorted-array","created_at":"2019-02-23","timeArr":[2019,1,23,13,51,8,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>两个<code>二分查找</code>的变形。</p>\\n<p>在升序排列中：</p>\\n<p><code>bsTail</code>的作用是，如果存在数字<code>n</code>，找出当前数字最后一个的位置；如果不存在数字<code>n</code>，找出比当前数字小的最大的数字。</p>\\n<p><code>bsHead</code>的作用是，如果存在数字<code>n</code>，找出当前数字的第一个出现的位置；如果不存在，找出比当前数字大的最小的数字。</p>\\n","content":"<p>给定一个按照升序排列的整数数组 <code>nums</code>，和一个目标值 <code>target</code>。找出给定目标值在数组中的开始位置和结束位置。</p>\\n\\n<p>如果数组中不存在目标值 <code>target</code>，返回 <code>[-1, -1]</code>。</p>\\n\\n<p><strong>进阶：</strong></p>\\n\\n<ul>\\n\\t<li>你可以设计并实现时间复杂度为 <code>O(log n)</code> 的算法解决此问题吗？</li>\\n</ul>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [<code>5,7,7,8,8,10]</code>, target = 8\\n<strong>输出：</strong>[3,4]</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [<code>5,7,7,8,8,10]</code>, target = 6\\n<strong>输出：</strong>[-1,-1]</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [], target = 0\\n<strong>输出：</strong>[-1,-1]</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>0 <= nums.length <= 10<sup>5</sup></code></li>\\n\\t<li><code>-10<sup>9</sup> <= nums[i] <= 10<sup>9</sup></code></li>\\n\\t<li><code>nums</code> 是一个非递减数组</li>\\n\\t<li><code>-10<sup>9</sup> <= target <= 10<sup>9</sup></code></li>\\n</ul>\\n","title":"34. 在排序数组中查找元素的第一个和最后一个位置","relatedTags":["数组","二分查找"],"difficult":"Middle","lang":["python"],"uniqueID":"34","slug":"34-Find-First-and-Last-Position-of-Element-in-Sorted-Array"}')}}]);