(window.webpackJsonp=window.webpackJsonp||[]).push([[434],{1232:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">ratings</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> candy = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">ratings</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-built_in\\">Array</span>(ratings.length).fill(<span class=\\"hljs-number\\">1</span>)\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;ratings.length<span class=\\"hljs-number\\">-1</span>;i++){\\n    <span class=\\"hljs-keyword\\">if</span>(ratings[i+<span class=\\"hljs-number\\">1</span>]&gt;ratings[i]){\\n      res[i+<span class=\\"hljs-number\\">1</span>]=<span class=\\"hljs-built_in\\">Math</span>.max(res[i+<span class=\\"hljs-number\\">1</span>],res[i]+<span class=\\"hljs-number\\">1</span>)\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=ratings.length<span class=\\"hljs-number\\">-1</span>;i&gt;=<span class=\\"hljs-number\\">1</span>;i--){\\n    <span class=\\"hljs-keyword\\">if</span>(ratings[i<span class=\\"hljs-number\\">-1</span>]&gt;ratings[i]){\\n      res[i<span class=\\"hljs-number\\">-1</span>]=<span class=\\"hljs-built_in\\">Math</span>.max(res[i<span class=\\"hljs-number\\">-1</span>],res[i]+<span class=\\"hljs-number\\">1</span>)\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res.reduce(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">a,b</span>)=&gt;</span>a+b)\\n};\\n</code></pre>\\n"],"querySlug":"candy","created_at":"2019-04-12","timeArr":[2019,3,12,23,22,28,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>如果想用一边扫描，可以先排序，再从小到大扫描，否则如果遇到<strong>两头小中间大</strong>的情况，容易顾头不顾尾。</p>\\n<p>另外<code>O(N)</code>的解法是2遍扫描，一次前扫，一次后扫，前扫只顾当前<code>i</code>的后面那一个，后扫只顾当前<code>i</code>前面那一个。</p>\\n<p>遇到<code>ratings[i+1]&gt;ratings[i]</code>的情况，应该将<code>res[i+1]</code>(<code>res</code>为记录糖果数量的数组)设置为<code>Math.max(res[i+1],res[i]+1)</code>，因为至少需要<code>res[i]+1</code>，但如果\\n<code>res[i+1]</code>更大，则选择更大的。</p>\\n","content":"<p>老师想给孩子们分发糖果，有 <em>N</em> 个孩子站成了一条直线，老师会根据每个孩子的表现，预先给他们评分。</p>\\n\\n<p>你需要按照以下要求，帮助老师给这些孩子分发糖果：</p>\\n\\n<ul>\\n\\t<li>每个孩子至少分配到 1 个糖果。</li>\\n\\t<li>评分更高的孩子必须比他两侧的邻位孩子获得更多的糖果。</li>\\n</ul>\\n\\n<p>那么这样下来，老师至少需要准备多少颗糖果呢？</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>[1,0,2]\\n<strong>输出：</strong>5\\n<strong>解释：</strong>你可以分别给这三个孩子分发 2、1、2 颗糖果。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>[1,2,2]\\n<strong>输出：</strong>4\\n<strong>解释：</strong>你可以分别给这三个孩子分发 1、2、1 颗糖果。\\n     第三个孩子只得到 1 颗糖果，这已满足上述两个条件。</pre>\\n","title":"135. 分发糖果","relatedTags":["贪心","数组"],"difficult":"Hard","lang":["javascript"],"uniqueID":"135","slug":"135-Candy"}')}}]);