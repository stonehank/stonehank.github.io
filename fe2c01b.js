(window.webpackJsonp=window.webpackJsonp||[]).push([[1201],{1999:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">S</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> splitIntoFibonacci = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">S</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-literal\\">null</span>,limit=<span class=\\"hljs-built_in\\">Math</span>.pow(<span class=\\"hljs-number\\">2</span>,<span class=\\"hljs-number\\">31</span>)<span class=\\"hljs-number\\">-1</span>\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">backtrack</span>(<span class=\\"hljs-params\\">start,arr</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(res)<span class=\\"hljs-keyword\\">return</span>\\n    <span class=\\"hljs-keyword\\">if</span>(start===S.length &amp;&amp; arr.length&gt;=<span class=\\"hljs-number\\">3</span>){\\n      <span class=\\"hljs-keyword\\">return</span> res=arr.slice()\\n    }\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=start+<span class=\\"hljs-number\\">1</span>;i&lt;=S.length;i++){\\n      <span class=\\"hljs-keyword\\">let</span> cur=S.substring(start,i),\\n          curN=+cur\\n      <span class=\\"hljs-keyword\\">if</span>(cur.length&gt;<span class=\\"hljs-number\\">1</span> &amp;&amp; cur.startsWith(<span class=\\"hljs-string\\">\'0\'</span>))<span class=\\"hljs-keyword\\">return</span>\\n      <span class=\\"hljs-keyword\\">if</span>(arr.length&gt;=<span class=\\"hljs-number\\">2</span>){\\n        <span class=\\"hljs-keyword\\">let</span> preS=arr[arr.length<span class=\\"hljs-number\\">-2</span>]+arr[arr.length<span class=\\"hljs-number\\">-1</span>]\\n        <span class=\\"hljs-keyword\\">if</span>(preS&lt;curN)<span class=\\"hljs-keyword\\">return</span>\\n        <span class=\\"hljs-keyword\\">if</span>(preS&gt;curN)<span class=\\"hljs-keyword\\">continue</span>\\n      }\\n      <span class=\\"hljs-keyword\\">if</span>(curN&gt;limit)<span class=\\"hljs-keyword\\">return</span>\\n      arr.push(curN)\\n      backtrack(i,arr)\\n      arr.pop()\\n    }\\n  }\\n  backtrack(<span class=\\"hljs-number\\">0</span>,[])\\n  <span class=\\"hljs-keyword\\">return</span> res || []\\n};\\n</code></pre>\\n"],"querySlug":"split-array-into-fibonacci-sequence","created_at":"2019-03-28","timeArr":[2019,2,28,15,56,5,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>使用回溯法解决。</p>\\n<p>几个关键地方的剪枝能让算法更快：</p>\\n<ol>\\n<li>如果当前的<code>String(数字).length&gt;1 &amp;&amp; startsWith(&quot;0&quot;)</code>，可以直接<code>return</code>，因为后续的也还是以&quot;0&quot;开头。</li>\\n<li>如果当前序列存在2个以上，并且 <code>F[-1]+F[-2] &lt; 当前数字</code>，可以直接<code>return</code>，因为后续的数字只会越来越大；如果<code>F[-1]+F[-2] &gt; 当前数字</code>，则是<code>continue</code>，直接继续检查下一项。</li>\\n<li>如果当前数字超过了 <code>2^31-1</code>，可以直接<code>return</code>，因为已经不合法了。</li>\\n</ol>\\n","content":"<p>给定一个数字字符串 <code>S</code>，比如 <code>S = &quot;123456579&quot;</code>，我们可以将它分成斐波那契式的序列 <code>[123, 456, 579]</code>。</p>\\n\\n<p>形式上，斐波那契式序列是一个非负整数列表 <code>F</code>，且满足：</p>\\n\\n<ul>\\n\\t<li><code>0 &lt;= F[i] &lt;= 2^31 - 1</code>，（也就是说，每个整数都符合 32 位有符号整数类型）；</li>\\n\\t<li><code>F.length &gt;= 3</code>；</li>\\n\\t<li>对于所有的<code>0 &lt;= i &lt; F.length - 2</code>，都有 <code>F[i] + F[i+1] = F[i+2]</code> 成立。</li>\\n</ul>\\n\\n<p>另外，请注意，将字符串拆分成小块时，每个块的数字一定不要以零开头，除非这个块是数字 0 本身。</p>\\n\\n<p>返回从 <code>S</code> 拆分出来的任意一组斐波那契式的序列块，如果不能拆分则返回 <code>[]</code>。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>&quot;123456579&quot;\\n<strong>输出：</strong>[123,456,579]\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入: </strong>&quot;11235813&quot;\\n<strong>输出: </strong>[1,1,2,3,5,8,13]\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入: </strong>&quot;112358130&quot;\\n<strong>输出: </strong>[]\\n<strong>解释: </strong>这项任务无法完成。\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre><strong>输入：</strong>&quot;0123&quot;\\n<strong>输出：</strong>[]\\n<strong>解释：</strong>每个块的数字不能以零开头，因此 &quot;01&quot;，&quot;2&quot;，&quot;3&quot; 不是有效答案。\\n</pre>\\n\\n<p><strong>示例 5：</strong></p>\\n\\n<pre><strong>输入: </strong>&quot;1101111&quot;\\n<strong>输出: </strong>[110, 1, 111]\\n<strong>解释: </strong>输出 [11,0,11,11] 也同样被接受。\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ol>\\n\\t<li><code>1 &lt;= S.length&nbsp;&lt;= 200</code></li>\\n\\t<li>字符串 <code>S</code> 中只含有数字。</li>\\n</ol>\\n","title":"842. 将数组拆分成斐波那契序列","relatedTags":["字符串","回溯"],"difficult":"Middle","lang":["javascript"],"uniqueID":"842","slug":"842-Split-Array-into-Fibonacci-Sequence"}')}}]);