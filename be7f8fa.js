(window.webpackJsonp=window.webpackJsonp||[]).push([[852],{1650:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-keyword\\">var</span> compress = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">chars</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> count=<span class=\\"hljs-number\\">1</span>,j=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">1</span>;i&lt;=chars.length;i++){\\n    <span class=\\"hljs-keyword\\">if</span>(i===chars.length || chars[i] !==chars[i<span class=\\"hljs-number\\">-1</span>]){\\n      chars[j++]=chars[i<span class=\\"hljs-number\\">-1</span>]\\n      <span class=\\"hljs-keyword\\">if</span>(count&gt;<span class=\\"hljs-number\\">1</span>){\\n        <span class=\\"hljs-keyword\\">let</span> s=count+<span class=\\"hljs-string\\">\'\'</span>\\n        <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> k=<span class=\\"hljs-number\\">0</span>;k&lt;s.length;k++){\\n          chars[k+j]=s[k]\\n        }\\n        j+=s.length\\n      }\\n      count=<span class=\\"hljs-number\\">1</span>\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      count++\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> j\\n};\\n</code></pre>\\n"],"querySlug":"string-compression","created_at":"2019-03-25","timeArr":[2019,2,25,11,9,28,0],"hasThinking":false,"content":"<p>给你一个字符数组 <code>chars</code> ，请使用下述算法压缩：</p>\\n\\n<p>从一个空字符串 <code>s</code> 开始。对于 <code>chars</code> 中的每组 <strong>连续重复字符</strong> ：</p>\\n\\n<ul>\\n\\t<li>如果这一组长度为 <code>1</code> ，则将字符追加到 <code>s</code> 中。</li>\\n\\t<li>否则，需要向 <code>s</code> 追加字符，后跟这一组的长度。</li>\\n</ul>\\n\\n<p>压缩后得到的字符串 <code>s</code> <strong>不应该直接返回</strong> ，需要转储到字符数组 <code>chars</code> 中。需要注意的是，如果组长度为 <code>10</code> 或 <code>10</code> 以上，则在 <code>chars</code> 数组中会被拆分为多个字符。</p>\\n\\n<p>请在 <strong>修改完输入数组后</strong> ，返回该数组的新长度。</p>\\n\\n<p>你必须设计并实现一个只使用常量额外空间的算法来解决此问题。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>chars = [\\"a\\",\\"a\\",\\"b\\",\\"b\\",\\"c\\",\\"c\\",\\"c\\"]\\n<strong>输出：</strong>返回 6 ，输入数组的前 6 个字符应该是：[\\"a\\",\\"2\\",\\"b\\",\\"2\\",\\"c\\",\\"3\\"]\\n<strong>解释：</strong>\\n\\"aa\\" 被 \\"a2\\" 替代。\\"bb\\" 被 \\"b2\\" 替代。\\"ccc\\" 被 \\"c3\\" 替代。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>chars = [\\"a\\"]\\n<strong>输出：</strong>返回 1 ，输入数组的前 1 个字符应该是：[\\"a\\"]\\n<strong>解释：</strong>\\n没有任何字符串被替代。\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>chars = [\\"a\\",\\"b\\",\\"b\\",\\"b\\",\\"b\\",\\"b\\",\\"b\\",\\"b\\",\\"b\\",\\"b\\",\\"b\\",\\"b\\",\\"b\\"]\\n<strong>输出：</strong>返回 4 ，输入数组的前 4 个字符应该是：[\\"a\\",\\"b\\",\\"1\\",\\"2\\"]。\\n<strong>解释：</strong>\\n由于字符 \\"a\\" 不重复，所以不会被压缩。\\"bbbbbbbbbbbb\\" 被 “b12” 替代。\\n注意每个数字在数组中都有它自己的位置。\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= chars.length &lt;= 2000</code></li>\\n\\t<li><code>chars[i]</code> 可以是小写英文字母、大写英文字母、数字或符号</li>\\n</ul>\\n","title":"443. 压缩字符串","relatedTags":["双指针","字符串"],"difficult":"Middle","lang":["javascript"],"uniqueID":"443","slug":"443-String-Compression"}')}}]);