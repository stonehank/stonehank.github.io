(window.webpackJsonp=window.webpackJsonp||[]).push([[384],{1182:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">matrix</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> countSquares = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">matrix</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> m=matrix.length\\n  <span class=\\"hljs-keyword\\">let</span> n=matrix[<span class=\\"hljs-number\\">0</span>].length\\n  <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">let</span> counts=<span class=\\"hljs-built_in\\">Array</span>(m).fill().map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span>=&gt;</span><span class=\\"hljs-built_in\\">Array</span>(n).fill(<span class=\\"hljs-number\\">0</span>))\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;m;i++){\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;n;j++){\\n      <span class=\\"hljs-keyword\\">let</span> min=<span class=\\"hljs-literal\\">Infinity</span>\\n      <span class=\\"hljs-keyword\\">if</span>(matrix[i][j]===<span class=\\"hljs-number\\">0</span>){\\n        counts[i][j]=<span class=\\"hljs-number\\">0</span>\\n      }<span class=\\"hljs-keyword\\">else</span>{\\n        <span class=\\"hljs-keyword\\">if</span>(i&gt;=<span class=\\"hljs-number\\">1</span>)min=<span class=\\"hljs-built_in\\">Math</span>.min(min,counts[i<span class=\\"hljs-number\\">-1</span>][j])\\n        <span class=\\"hljs-keyword\\">if</span>(j&gt;=<span class=\\"hljs-number\\">1</span>)min=<span class=\\"hljs-built_in\\">Math</span>.min(min,counts[i][j<span class=\\"hljs-number\\">-1</span>])\\n        <span class=\\"hljs-keyword\\">if</span>(i&gt;=<span class=\\"hljs-number\\">1</span> &amp;&amp; j&gt;=<span class=\\"hljs-number\\">1</span>)min=<span class=\\"hljs-built_in\\">Math</span>.min(min,counts[i<span class=\\"hljs-number\\">-1</span>][j<span class=\\"hljs-number\\">-1</span>])\\n        <span class=\\"hljs-keyword\\">if</span>(i&lt;<span class=\\"hljs-number\\">1</span> || j&lt;<span class=\\"hljs-number\\">1</span> || min===<span class=\\"hljs-literal\\">Infinity</span> || min===<span class=\\"hljs-number\\">0</span>)min=-<span class=\\"hljs-literal\\">Infinity</span>\\n        counts[i][j]=<span class=\\"hljs-built_in\\">Math</span>.max(matrix[i][j],min+<span class=\\"hljs-number\\">1</span>)        \\n      }\\n      res+=counts[i][j]\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n  \\n};\\n</code></pre>\\n"],"querySlug":"count-square-submatrices-with-all-ones","created_at":"2019-12-01","timeArr":[2019,11,1,11,29,1,0],"hasThinking":false,"content":"<p>给你一个&nbsp;<code>m * n</code>&nbsp;的矩阵，矩阵中的元素不是 <code>0</code> 就是 <code>1</code>，请你统计并返回其中完全由 <code>1</code> 组成的 <strong>正方形</strong> 子矩阵的个数。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>matrix =\\n[\\n&nbsp; [0,1,1,1],\\n&nbsp; [1,1,1,1],\\n&nbsp; [0,1,1,1]\\n]\\n<strong>输出：</strong>15\\n<strong>解释：</strong> \\n边长为 1 的正方形有 <strong>10</strong> 个。\\n边长为 2 的正方形有 <strong>4</strong> 个。\\n边长为 3 的正方形有 <strong>1</strong> 个。\\n正方形的总数 = 10 + 4 + 1 = <strong>15</strong>.\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>matrix = \\n[\\n  [1,0,1],\\n  [1,1,0],\\n  [1,1,0]\\n]\\n<strong>输出：</strong>7\\n<strong>解释：</strong>\\n边长为 1 的正方形有 <strong>6</strong> 个。 \\n边长为 2 的正方形有 <strong>1</strong> 个。\\n正方形的总数 = 6 + 1 = <strong>7</strong>.\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= arr.length&nbsp;&lt;= 300</code></li>\\n\\t<li><code>1 &lt;= arr[0].length&nbsp;&lt;= 300</code></li>\\n\\t<li><code>0 &lt;= arr[i][j] &lt;= 1</code></li>\\n</ul>\\n","title":"1277. 统计全为 1 的正方形子矩阵","relatedTags":["数组","动态规划","矩阵"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1277","slug":"1277-Count-Square-Submatrices-with-All-Ones"}')}}]);