(window.webpackJsonp=window.webpackJsonp||[]).push([[153],{635:function(e){e.exports=JSON.parse('{"content":"<p>service worker和cache</p>\\n<p>客户端：register</p>\\n<p>服务端：install, activate, fetch</p>\\n<ul>\\n<li><code>install</code></li>\\n</ul>\\n<p>主要作用是内部回调中的参数<code>event</code>的方法<code>event.waitUntil</code>中缓存本次的资源。</p>\\n<ul>\\n<li><code>activate</code></li>\\n</ul>\\n<p>主要作用是在内部回调中的参数<code>event</code>的方法<code>event.waitUntil</code>中清除当前不需要的缓存，并且通知当前已经准备好接受控制。</p>\\n<ul>\\n<li><code>fetch</code></li>\\n</ul>\\n<p>控制阶段，在内部回调参数<code>event</code>的方法<code>event.reponseWith</code>中可以修改响应值</p>\\n<hr>\\n<p>额外：</p>\\n<ul>\\n<li><p><code>waitUntil</code>可以延长promise的生命周期</p>\\n</li>\\n<li><p><code>caches</code>是cacheStorage的调用值，<code>promise</code>的形式</p>\\n</li>\\n</ul>\\n<p>主要用于缓存response(同源)</p>\\n<p><code>caches.open</code> 打开缓存，如果没有就创建，返回promise</p>\\n<p>例如：<code>caches.open(...).then(cache=&gt;cache.add(&quot;url&quot;)</code></p>\\n<p><code>caches.keys</code> 遍历缓存，返回一个数组promise</p>\\n<p><code>caches.match(url)</code> 找到并且返回一个resolve这个匹配的url的promise，找不到返回undefined</p>\\n<p><code>caches.has</code> 查找是否存在Cache对象，找到返回true的promise，否则返回false的promise</p>\\n<p><code>caches.delete</code> 找到Cache对象则删除，返回true的promise，否则返回false的promise</p>\\n","toc":[],"relatedTags":null,"created_at":"2018-09-26","timeArr":[2018,8,26,0,0,0,0],"title":"service-worker要点概括","uuid":"39277c1a6e1a6c2280d116793ed086ee2507fa7e","summary":"<p>service worker和cache</p>\\n<p>客户端：register</p>\\n<p>服务端：install, activate, fetch</p>\\n<ul>\\n<li><code>install</code></li>\\n</ul>\\n<p>主要作用是内部回调中的参数<code>event</code>的方法<code>event.waitUntil</code>中缓存本次的资源。</p>\\n<ul>\\n<li><code>activate</code></li>\\n</ul>\\n<p>主要作用是在内部回调中的参数`e...</p>","slug":"service-worker-yao-dian-gai-kuo","sha":"e35e017c1e99651fcf6cabf2e7873c3ad59e795c"}')}}]);