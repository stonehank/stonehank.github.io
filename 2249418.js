(window.webpackJsonp=window.webpackJsonp||[]).push([[547],{1345:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">grid</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> minSwaps = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">grid</span>) </span>{\\n    <span class=\\"hljs-keyword\\">let</span> m=grid.length,n=grid[<span class=\\"hljs-number\\">0</span>].length\\n    <span class=\\"hljs-keyword\\">let</span> a=<span class=\\"hljs-built_in\\">Array</span>(m).fill(<span class=\\"hljs-number\\">0</span>)\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;m;i++){\\n        <span class=\\"hljs-keyword\\">let</span> c=<span class=\\"hljs-number\\">0</span>\\n        <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=n<span class=\\"hljs-number\\">-1</span>;j&gt;=<span class=\\"hljs-number\\">0</span>;j--){\\n            <span class=\\"hljs-keyword\\">if</span>(grid[i][j]===<span class=\\"hljs-number\\">0</span>)c++\\n            <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">break</span>\\n        }\\n        a[i]=c\\n    }\\n    <span class=\\"hljs-comment\\">// console.log(a)</span>\\n    <span class=\\"hljs-keyword\\">let</span> step=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;a.length;i++){\\n        <span class=\\"hljs-keyword\\">if</span>(a[i]&gt;=n<span class=\\"hljs-number\\">-1</span>-i){\\n            <span class=\\"hljs-keyword\\">continue</span>\\n        }<span class=\\"hljs-keyword\\">else</span>{\\n            <span class=\\"hljs-keyword\\">let</span> find=<span class=\\"hljs-literal\\">false</span>\\n            <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=i+<span class=\\"hljs-number\\">1</span>;j&lt;m;j++){\\n                <span class=\\"hljs-keyword\\">if</span>(a[j]&gt;=n<span class=\\"hljs-number\\">-1</span>-i){\\n                    find=<span class=\\"hljs-literal\\">true</span>\\n                }\\n                <span class=\\"hljs-comment\\">// console.log(i,j,a)</span>\\n                swap(a,i,j)\\n                step++\\n                <span class=\\"hljs-keyword\\">if</span>(find)<span class=\\"hljs-keyword\\">break</span>\\n            }\\n            <span class=\\"hljs-keyword\\">if</span>(!find)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">-1</span>\\n        }\\n        <span class=\\"hljs-comment\\">// console.log(i,step)</span>\\n    }\\n    \\n    <span class=\\"hljs-keyword\\">return</span> step\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">swap</span>(<span class=\\"hljs-params\\">arr,i,j</span>)</span>{\\n        <span class=\\"hljs-keyword\\">let</span> x=arr[i]\\n        arr[i]=arr[j]\\n        arr[j]=x\\n    }\\n};\\n</code></pre>\\n"],"querySlug":"minimum-swaps-to-arrange-a-binary-grid","created_at":"2020-08-02","timeArr":[2020,7,2,17,25,9,0],"hasThinking":false,"content":"<p>给你一个&nbsp;<code>n&nbsp;x n</code>&nbsp;的二进制网格&nbsp;<code>grid</code>，每一次操作中，你可以选择网格的&nbsp;<strong>相邻两行</strong>&nbsp;进行交换。</p>\\n\\n<p>一个符合要求的网格需要满足主对角线以上的格子全部都是 <strong>0</strong>&nbsp;。</p>\\n\\n<p>请你返回使网格满足要求的最少操作次数，如果无法使网格符合要求，请你返回 <strong>-1</strong>&nbsp;。</p>\\n\\n<p>主对角线指的是从&nbsp;<code>(1, 1)</code>&nbsp;到&nbsp;<code>(n, n)</code>&nbsp;的这些格子。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<p><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/08/02/fw.jpg\\" style=\\"height: 141px; width: 750px;\\"></p>\\n\\n<pre><strong>输入：</strong>grid = [[0,0,1],[1,1,0],[1,0,0]]\\n<strong>输出：</strong>3\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<p><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/08/02/e2.jpg\\" style=\\"height: 270px; width: 270px;\\"></p>\\n\\n<pre><strong>输入：</strong>grid = [[0,1,1,0],[0,1,1,0],[0,1,1,0],[0,1,1,0]]\\n<strong>输出：</strong>-1\\n<strong>解释：</strong>所有行都是一样的，交换相邻行无法使网格符合要求。\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<p><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/08/02/e3.jpg\\" style=\\"height: 210px; width: 210px;\\"></p>\\n\\n<pre><strong>输入：</strong>grid = [[1,0,0],[1,1,0],[1,1,1]]\\n<strong>输出：</strong>0\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>n == grid.length</code></li>\\n\\t<li><code>n == grid[i].length</code></li>\\n\\t<li><code>1 &lt;= n&nbsp;&lt;= 200</code></li>\\n\\t<li><code>grid[i][j]</code>&nbsp;要么是&nbsp;<code>0</code>&nbsp;要么是&nbsp;<code>1</code>&nbsp;。</li>\\n</ul>\\n","title":"1536. 排布二进制网格的最少交换次数","relatedTags":["贪心","数组","矩阵"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1536","slug":"1536-Minimum-Swaps-to-Arrange-a-Binary-Grid"}')}}]);