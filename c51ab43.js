(window.webpackJsonp=window.webpackJsonp||[]).push([[918],{1716:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Solution</span><span class=\\"hljs-params\\">(object)</span>:</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">findRotateSteps</span><span class=\\"hljs-params\\">(self, ring, key)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type ring: str\\n        :type key: str\\n        :rtype: int\\n        \\"\\"\\"</span>\\n        m=len(key)\\n        n=len(ring)\\n        dp=[[float(<span class=\\"hljs-string\\">\\"inf\\"</span>)]*n <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(m+<span class=\\"hljs-number\\">1</span>)]\\n        dp[<span class=\\"hljs-number\\">0</span>][<span class=\\"hljs-number\\">0</span>]=<span class=\\"hljs-number\\">0</span>\\n        <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(<span class=\\"hljs-number\\">1</span>,m+<span class=\\"hljs-number\\">1</span>):\\n          <span class=\\"hljs-keyword\\">for</span> j <span class=\\"hljs-keyword\\">in</span> range(n):\\n            <span class=\\"hljs-keyword\\">if</span> ring[j]==key[i<span class=\\"hljs-number\\">-1</span>]:\\n              <span class=\\"hljs-keyword\\">for</span> k <span class=\\"hljs-keyword\\">in</span> range(n):\\n                <span class=\\"hljs-keyword\\">if</span> dp[i<span class=\\"hljs-number\\">-1</span>][k]!=float(<span class=\\"hljs-string\\">\\"inf\\"</span>):\\n                  gap=abs(j-k)\\n                  dp[i][j]=min(dp[i][j],min(gap,n-gap)+dp[i<span class=\\"hljs-number\\">-1</span>][k]+<span class=\\"hljs-number\\">1</span>)\\n        <span class=\\"hljs-comment\\"># print dp</span>\\n        <span class=\\"hljs-keyword\\">return</span> min(dp[<span class=\\"hljs-number\\">-1</span>])\\n</code></pre>\\n"],"querySlug":"freedom-trail","created_at":"2019-03-04","timeArr":[2019,2,4,21,46,18,0],"hasThinking":false,"content":"<p>电子游戏“辐射4”中，任务“通向自由”要求玩家到达名为“Freedom Trail Ring”的金属表盘，并使用表盘拼写特定关键词才能开门。</p>\\n\\n<p>给定一个字符串 <strong>ring</strong>，表示刻在外环上的编码；给定另一个字符串 <strong>key</strong>，表示需要拼写的关键词。您需要算出能够拼写关键词中所有字符的<strong>最少</strong>步数。</p>\\n\\n<p>最初，<strong>ring </strong>的第一个字符与12:00方向对齐。您需要顺时针或逆时针旋转 ring 以使 <strong>key </strong>的一个字符在 12:00 方向对齐，然后按下中心按钮，以此逐个拼写完 <strong>key </strong>中的所有字符。</p>\\n\\n<p>旋转 <strong>ring </strong>拼出 key 字符 <strong>key[i] </strong>的阶段中：</p>\\n\\n<ol>\\n\\t<li>您可以将 <strong>ring </strong>顺时针或逆时针旋转<strong>一个位置</strong>，计为1步。旋转的最终目的是将字符串 <strong>ring </strong>的一个字符与 12:00 方向对齐，并且这个字符必须等于字符 <strong>key[i] 。</strong></li>\\n\\t<li>如果字符 <strong>key[i] </strong>已经对齐到12:00方向，您需要按下中心按钮进行拼写，这也将算作 <strong>1 步</strong>。按完之后，您可以开始拼写 <strong>key </strong>的下一个字符（下一阶段）, 直至完成所有拼写。</li>\\n</ol>\\n\\n<p><strong>示例：</strong></p>\\n\\n<p> </p>\\n\\n<center><img src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/ring.jpg\\" style=\\"width: 26%;\\" /></center>\\n \\n\\n<pre>\\n<strong>输入:</strong> ring = \\"godding\\", key = \\"gd\\"\\n<strong>输出:</strong> 4\\n<strong>解释:</strong>\\n 对于 key 的第一个字符 \'g\'，已经在正确的位置, 我们只需要1步来拼写这个字符。 \\n 对于 key 的第二个字符 \'d\'，我们需要逆时针旋转 ring \\"godding\\" 2步使它变成 \\"ddinggo\\"。\\n 当然, 我们还需要1步进行拼写。\\n 因此最终的输出是 4。\\n</pre>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ol>\\n\\t<li><strong>ring</strong> 和 <strong>key</strong> 的字符串长度取值范围均为 1 至 100；</li>\\n\\t<li>两个字符串中都只有小写字符，并且均可能存在重复字符；</li>\\n\\t<li>字符串 <strong>key</strong> 一定可以由字符串 <strong>ring</strong> 旋转拼出。</li>\\n</ol>\\n","title":"514. 自由之路","relatedTags":["深度优先搜索","广度优先搜索","字符串","动态规划"],"difficult":"Hard","lang":["python"],"uniqueID":"514","slug":"514-Freedom-Trail"}')}}]);