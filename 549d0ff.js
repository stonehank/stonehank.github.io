(window.webpackJsonp=window.webpackJsonp||[]).push([[919],{1717:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{TreeNode}</span> <span class=\\"hljs-variable\\">root</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> largestValues = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">root</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(!root)<span class=\\"hljs-keyword\\">return</span> []\\n  <span class=\\"hljs-keyword\\">let</span> ans=[]\\n  <span class=\\"hljs-keyword\\">let</span> arr=[root]\\n  <span class=\\"hljs-keyword\\">while</span>(arr.length&gt;<span class=\\"hljs-number\\">0</span>){\\n    <span class=\\"hljs-keyword\\">let</span> len=arr.length\\n    <span class=\\"hljs-keyword\\">let</span> maxV=-<span class=\\"hljs-literal\\">Infinity</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;len;i++){\\n      <span class=\\"hljs-keyword\\">let</span> node=arr.shift()\\n      maxV=<span class=\\"hljs-built_in\\">Math</span>.max(maxV,node.val)\\n      <span class=\\"hljs-keyword\\">if</span>(node.left)arr.push(node.left)\\n      <span class=\\"hljs-keyword\\">if</span>(node.right)arr.push(node.right)\\n    }\\n    ans.push(maxV)\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> ans\\n};\\n</code></pre>\\n"],"querySlug":"find-largest-value-in-each-tree-row","created_at":"2019-03-19","timeArr":[2019,2,19,10,53,28,0],"hasThinking":false,"content":"<p>给定一棵二叉树的根节点 <code>root</code> ，请找出该二叉树中每一层的最大值。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例1：</strong></p>\\n\\n<pre>\\n<strong>输入: </strong>root = [1,3,2,5,3,null,9]\\n<strong>输出: </strong>[1,3,9]\\n<strong>解释:</strong>\\n          1\\n         / \\\\\\n        3   2\\n       / \\\\   \\\\  \\n      5   3   9 \\n</pre>\\n\\n<p><strong>示例2：</strong></p>\\n\\n<pre>\\n<strong>输入: </strong>root = [1,2,3]\\n<strong>输出: </strong>[1,3]\\n<strong>解释:</strong>\\n          1\\n         / \\\\\\n        2   3\\n</pre>\\n\\n<p><strong>示例3：</strong></p>\\n\\n<pre>\\n<strong>输入: </strong>root = [1]\\n<strong>输出: </strong>[1]\\n</pre>\\n\\n<p><strong>示例4：</strong></p>\\n\\n<pre>\\n<strong>输入: </strong>root = [1,null,2]\\n<strong>输出: </strong>[1,2]\\n<strong>解释:</strong>      \\n           1 \\n            \\\\\\n             2     \\n</pre>\\n\\n<p><strong>示例5：</strong></p>\\n\\n<pre>\\n<strong>输入: </strong>root = []\\n<strong>输出: </strong>[]\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li>二叉树的节点个数的范围是 <code>[0,10<sup>4</sup>]</code></li>\\n\\t<li><meta charset=\\"UTF-8\\" /><code>-2<sup>31</sup> <= Node.val <= 2<sup>31</sup> - 1</code></li>\\n</ul>\\n","title":"515. 在每个树行中找最大值","relatedTags":["树","深度优先搜索","广度优先搜索","二叉树"],"difficult":"Middle","lang":["javascript"],"uniqueID":"515","slug":"515-Find-Largest-Value-in-Each-Tree-Row"}')}}]);