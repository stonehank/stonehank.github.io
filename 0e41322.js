(window.webpackJsonp=window.webpackJsonp||[]).push([[446],{1244:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">digits</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{string}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> largestMultipleOfThree = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">digits</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> sum=digits.reduce(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">a,b</span>)=&gt;</span>a+b)\\n  <span class=\\"hljs-keyword\\">let</span> aux={\\n    <span class=\\"hljs-number\\">0</span>:[],\\n    <span class=\\"hljs-number\\">1</span>:[],\\n    <span class=\\"hljs-number\\">2</span>:[]\\n  }\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;digits.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> n=digits[i]\\n    <span class=\\"hljs-keyword\\">let</span> mod=n % <span class=\\"hljs-number\\">3</span>\\n    aux[mod].push([n,i])\\n  }\\n  aux[<span class=\\"hljs-number\\">0</span>].sort(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">a,b</span>)=&gt;</span>a[<span class=\\"hljs-number\\">0</span>]-b[<span class=\\"hljs-number\\">0</span>])\\n  aux[<span class=\\"hljs-number\\">1</span>].sort(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">a,b</span>)=&gt;</span>a[<span class=\\"hljs-number\\">0</span>]-b[<span class=\\"hljs-number\\">0</span>])\\n  aux[<span class=\\"hljs-number\\">2</span>].sort(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">a,b</span>)=&gt;</span>a[<span class=\\"hljs-number\\">0</span>]-b[<span class=\\"hljs-number\\">0</span>])\\n  <span class=\\"hljs-keyword\\">let</span> delMod=sum % <span class=\\"hljs-number\\">3</span>\\n  <span class=\\"hljs-keyword\\">let</span> delNum={}\\n  <span class=\\"hljs-keyword\\">let</span> hasSolve=<span class=\\"hljs-literal\\">true</span>\\n  <span class=\\"hljs-keyword\\">if</span>(delMod===<span class=\\"hljs-number\\">0</span>){\\n    hasSolve=<span class=\\"hljs-literal\\">true</span>\\n  }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(aux[delMod].length!==<span class=\\"hljs-number\\">0</span>){\\n    delNum[aux[delMod][<span class=\\"hljs-number\\">0</span>][<span class=\\"hljs-number\\">1</span>]]=<span class=\\"hljs-literal\\">true</span>\\n  }<span class=\\"hljs-keyword\\">else</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(delMod===<span class=\\"hljs-number\\">2</span>){\\n      <span class=\\"hljs-keyword\\">if</span>(aux[<span class=\\"hljs-number\\">1</span>].length&lt;<span class=\\"hljs-number\\">2</span>){\\n        hasSolve=<span class=\\"hljs-literal\\">false</span>\\n      }<span class=\\"hljs-keyword\\">else</span>{\\n        delNum[aux[<span class=\\"hljs-number\\">1</span>][<span class=\\"hljs-number\\">0</span>][<span class=\\"hljs-number\\">1</span>]]=<span class=\\"hljs-literal\\">true</span>\\n        delNum[aux[<span class=\\"hljs-number\\">1</span>][<span class=\\"hljs-number\\">1</span>][<span class=\\"hljs-number\\">1</span>]]=<span class=\\"hljs-literal\\">true</span>        \\n      }\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      <span class=\\"hljs-keyword\\">if</span>(aux[<span class=\\"hljs-number\\">2</span>].length&lt;<span class=\\"hljs-number\\">2</span>){\\n        hasSolve=<span class=\\"hljs-literal\\">false</span> \\n      }<span class=\\"hljs-keyword\\">else</span>{\\n        delNum[aux[<span class=\\"hljs-number\\">2</span>][<span class=\\"hljs-number\\">0</span>][<span class=\\"hljs-number\\">1</span>]]=<span class=\\"hljs-literal\\">true</span>\\n        delNum[aux[<span class=\\"hljs-number\\">2</span>][<span class=\\"hljs-number\\">1</span>][<span class=\\"hljs-number\\">1</span>]]=<span class=\\"hljs-literal\\">true</span>       \\n      }\\n\\n    }\\n  }\\n  <span class=\\"hljs-comment\\">// console.log(delNum)</span>\\n  <span class=\\"hljs-keyword\\">let</span> res=[]\\n  <span class=\\"hljs-keyword\\">if</span>(hasSolve){\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;digits.length;i++){\\n      <span class=\\"hljs-keyword\\">if</span>(delNum[i]){\\n        delNum[i]=<span class=\\"hljs-literal\\">false</span>\\n        <span class=\\"hljs-keyword\\">continue</span>\\n      }\\n      res.push(digits[i])\\n    }  \\n  }\\n\\n  res.sort(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">a,b</span>)=&gt;</span>b-a)\\n  <span class=\\"hljs-keyword\\">return</span> removeLead(res).join(<span class=\\"hljs-string\\">\'\'</span>)\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">removeLead</span>(<span class=\\"hljs-params\\">arr</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(arr.length&lt;=<span class=\\"hljs-number\\">1</span>)<span class=\\"hljs-keyword\\">return</span> arr\\n    <span class=\\"hljs-keyword\\">let</span> res=[]\\n    <span class=\\"hljs-keyword\\">let</span> lead=<span class=\\"hljs-literal\\">true</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;arr.length;i++){\\n      <span class=\\"hljs-keyword\\">if</span>(lead &amp;&amp; arr[i]===<span class=\\"hljs-number\\">0</span>){\\n        <span class=\\"hljs-keyword\\">continue</span>\\n      }<span class=\\"hljs-keyword\\">else</span>{\\n        lead=<span class=\\"hljs-literal\\">false</span>\\n      }\\n      res.push(arr[i])\\n    }\\n    <span class=\\"hljs-keyword\\">if</span>(res.length===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span> [<span class=\\"hljs-number\\">0</span>]\\n    <span class=\\"hljs-keyword\\">return</span> res\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"largest-multiple-of-three","created_at":"2020-02-23","timeArr":[2020,1,23,11,29,25,0],"hasThinking":false,"content":"<p>给你一个整数数组&nbsp;<code>digits</code>，你可以通过按任意顺序连接其中某些数字来形成 <strong>3</strong> 的倍数，请你返回所能得到的最大的 3 的倍数。</p>\\n\\n<p>由于答案可能不在整数数据类型范围内，请以字符串形式返回答案。</p>\\n\\n<p>如果无法得到答案，请返回一个空字符串。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>digits = [8,1,9]\\n<strong>输出：</strong>&quot;981&quot;\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>digits = [8,6,7,1,0]\\n<strong>输出：</strong>&quot;8760&quot;\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>digits = [1]\\n<strong>输出：</strong>&quot;&quot;\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre><strong>输入：</strong>digits = [0,0,0,0,0,0]\\n<strong>输出：</strong>&quot;0&quot;\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= digits.length &lt;= 10^4</code></li>\\n\\t<li><code>0 &lt;= digits[i] &lt;= 9</code></li>\\n\\t<li>返回的结果不应包含不必要的前导零。</li>\\n</ul>\\n","title":"1363. 形成三的最大倍数","relatedTags":["贪心","数组","动态规划"],"difficult":"Hard","lang":["javascript"],"uniqueID":"1363","slug":"1363-Largest-Multiple-of-Three"}')}}]);