(window.webpackJsonp=window.webpackJsonp||[]).push([[763],{1561:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * // This is the interface that allows for creating nested lists.\\n * // You should not implement it, or speculate about its implementation\\n * function NestedInteger() {\\n *\\n *     Return true if this NestedInteger holds a single integer, rather than a nested list.\\n *     <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{boolean}</span></span>\\n *     this.isInteger = function() {\\n *         ...\\n *     };\\n *\\n *     Return the single integer that this NestedInteger holds, if it holds a single integer\\n *     Return null if this NestedInteger holds a nested list\\n *     <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{integer}</span></span>\\n *     this.getInteger = function() {\\n *         ...\\n *     };\\n *\\n *     Return the nested list that this NestedInteger holds, if it holds a nested list\\n *     Return null if this NestedInteger holds a single integer\\n *     <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{NestedInteger[]}</span></span>\\n *     this.getList = function() {\\n *         ...\\n *     };\\n * };\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@constructor</span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{NestedInteger[]}</span> <span class=\\"hljs-variable\\">nestedList</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> NestedIterator = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">nestedList</span>) </span>{\\n    <span class=\\"hljs-keyword\\">this</span>.idx=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">let</span> flatList=[]\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">dfs</span>(<span class=\\"hljs-params\\">list</span>)</span>{\\n        <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;list.length;i++){\\n            <span class=\\"hljs-keyword\\">if</span>(list[i].isInteger()){\\n                flatList.push(list[i].getInteger()) \\n            }<span class=\\"hljs-keyword\\">else</span>{\\n                dfs(list[i].getList())\\n            }\\n        }\\n    }\\n    dfs(nestedList)\\n    <span class=\\"hljs-keyword\\">this</span>.flatList=flatList\\n    <span class=\\"hljs-comment\\">// console.log(flatList)</span>\\n};\\n\\n\\n<span class=\\"hljs-comment\\">/**\\n * @this NestedIterator\\n * @returns {boolean}\\n */</span>\\nNestedIterator.prototype.hasNext = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-keyword\\">this</span>.idx!==<span class=\\"hljs-keyword\\">this</span>.flatList.length\\n};\\n\\n<span class=\\"hljs-comment\\">/**\\n * @this NestedIterator\\n * @returns {integer}\\n */</span>\\nNestedIterator.prototype.next = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-keyword\\">this</span>.flatList[<span class=\\"hljs-keyword\\">this</span>.idx++]\\n};\\n\\n<span class=\\"hljs-comment\\">/**\\n * Your NestedIterator will be called like this:\\n * var i = new NestedIterator(nestedList), a = [];\\n * while (i.hasNext()) a.push(i.next());\\n*/</span>\\n</code></pre>\\n"],"querySlug":"flatten-nested-list-iterator","created_at":"2021-03-23","timeArr":[2021,2,23,7,17,22,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>只需要将<code>nestedList</code>转换成<code>Array&lt;number&gt;</code>后，<code>hasNext</code>和<code>next</code>对数组来说都是很简单的。</p>\\n<p>转换方式可以选择2种方法，递归或者循环。</p>\\n<p>递归很好理解，遇到是整数，添加到<code>arr</code>，非数字，继续递归。</p>\\n<p>遍历需要定义一个<code>stack</code>，先将<code>nestedList</code>所有内容压栈，然后一个一个出栈并且判断，如果是整数，放进<code>arr</code>，如果是列表，继续压栈。</p>\\n","content":"<p>给你一个嵌套的整数列表 <code>nestedList</code> 。每个元素要么是一个整数，要么是一个列表；该列表的元素也可能是整数或者是其他列表。请你实现一个迭代器将其扁平化，使之能够遍历这个列表中的所有整数。</p>\\n\\n<p>实现扁平迭代器类 <code>NestedIterator</code> ：</p>\\n\\n<ul>\\n\\t<li><code>NestedIterator(List&lt;NestedInteger&gt; nestedList)</code> 用嵌套列表 <code>nestedList</code> 初始化迭代器。</li>\\n\\t<li><code>int next()</code> 返回嵌套列表的下一个整数。</li>\\n\\t<li><code>boolean hasNext()</code> 如果仍然存在待迭代的整数，返回 <code>true</code> ；否则，返回 <code>false</code> 。</li>\\n</ul>\\n\\n<p>你的代码将会用下述伪代码检测：</p>\\n\\n<pre>\\ninitialize iterator with nestedList\\nres = []\\nwhile iterator.hasNext()\\n    append iterator.next() to the end of res\\nreturn res</pre>\\n\\n<p>如果 <code>res</code> 与预期的扁平化列表匹配，那么你的代码将会被判为正确。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nestedList = [[1,1],2,[1,1]]\\n<strong>输出：</strong>[1,1,2,1,1]\\n<strong>解释：</strong>通过重复调用&nbsp;<em>next </em>直到&nbsp;<em>hasNex</em>t 返回 false，<em>next&nbsp;</em>返回的元素的顺序应该是: <code>[1,1,2,1,1]</code>。</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nestedList = [1,[4,[6]]]\\n<strong>输出：</strong>[1,4,6]\\n<strong>解释：</strong>通过重复调用&nbsp;<em>next&nbsp;</em>直到&nbsp;<em>hasNex</em>t 返回 false，<em>next&nbsp;</em>返回的元素的顺序应该是: <code>[1,4,6]</code>。\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= nestedList.length &lt;= 500</code></li>\\n\\t<li>嵌套列表中的整数值在范围 <code>[-10<sup>6</sup>, 10<sup>6</sup>]</code> 内</li>\\n</ul>\\n","title":"341. 扁平化嵌套列表迭代器","relatedTags":["栈","树","深度优先搜索","设计","队列","迭代器"],"difficult":"Middle","lang":["javascript"],"uniqueID":"341","slug":"341-Flatten-Nested-List-Iterator"}')}}]);