(window.webpackJsonp=window.webpackJsonp||[]).push([[1026],{1824:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Solution</span><span class=\\"hljs-params\\">(object)</span>:</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">strangePrinter</span><span class=\\"hljs-params\\">(self, s)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type s: str\\n        :rtype: int\\n        \\"\\"\\"</span>\\n        <span class=\\"hljs-keyword\\">if</span> s==<span class=\\"hljs-string\\">\'\'</span>:<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>\\n        n=len(s)\\n        dp=[[<span class=\\"hljs-number\\">0</span>]*n <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(n)]\\n        <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(n):\\n          dp[i][i]=<span class=\\"hljs-number\\">1</span>\\n          \\n        <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(<span class=\\"hljs-number\\">1</span>,n):\\n          <span class=\\"hljs-keyword\\">for</span> j <span class=\\"hljs-keyword\\">in</span> range(n-i):\\n            k=j+i\\n            dp[j][k]=min(dp[j][k<span class=\\"hljs-number\\">-1</span>],dp[j+<span class=\\"hljs-number\\">1</span>][k])\\n            <span class=\\"hljs-keyword\\">if</span> s[j]!=s[k]:\\n              dp[j][k]+=<span class=\\"hljs-number\\">1</span>\\n              <span class=\\"hljs-keyword\\">for</span> m <span class=\\"hljs-keyword\\">in</span> range(j+<span class=\\"hljs-number\\">1</span>,k):\\n                <span class=\\"hljs-keyword\\">if</span> s[m]==s[k]:\\n                  dp[j][k]=min(dp[j][k],dp[m][k]+dp[j][m<span class=\\"hljs-number\\">-1</span>])\\n        <span class=\\"hljs-comment\\"># print dp</span>\\n        <span class=\\"hljs-keyword\\">return</span> dp[<span class=\\"hljs-number\\">0</span>][<span class=\\"hljs-number\\">-1</span>]\\n</code></pre>\\n"],"querySlug":"strange-printer","created_at":"2019-03-06","timeArr":[2019,2,6,15,36,44,0],"hasThinking":false,"content":"<p>有台奇怪的打印机有以下两个特殊要求：</p>\\n\\n<ul>\\n\\t<li>打印机每次只能打印由 <strong>同一个字符</strong> 组成的序列。</li>\\n\\t<li>每次可以在任意起始和结束位置打印新字符，并且会覆盖掉原来已有的字符。</li>\\n</ul>\\n\\n<p>给你一个字符串 <code>s</code> ，你的任务是计算这个打印机打印它需要的最少打印次数。</p>\\n \\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = \\"aaabbb\\"\\n<strong>输出：</strong>2\\n<strong>解释：</strong>首先打印 \\"aaa\\" 然后打印 \\"bbb\\"。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = \\"aba\\"\\n<strong>输出：</strong>2\\n<strong>解释：</strong>首先打印 \\"aaa\\" 然后在第二个位置打印 \\"b\\" 覆盖掉原来的字符 \'a\'。\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= s.length <= 100</code></li>\\n\\t<li><code>s</code> 由小写英文字母组成</li>\\n</ul>\\n","title":"664. 奇怪的打印机","relatedTags":["字符串","动态规划"],"difficult":"Hard","lang":["python"],"uniqueID":"664","slug":"664-Strange-Printer"}')}}]);