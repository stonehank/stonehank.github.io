(window.webpackJsonp=window.webpackJsonp||[]).push([[842],{1640:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">start</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">end</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string[]}</span> <span class=\\"hljs-variable\\">bank</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> minMutation = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">start, end, bank</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(start===end)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">let</span> hash={}\\n  <span class=\\"hljs-keyword\\">let</span> c=[<span class=\\"hljs-string\\">\\"A\\"</span>,<span class=\\"hljs-string\\">\\"C\\"</span>,<span class=\\"hljs-string\\">\\"T\\"</span>,<span class=\\"hljs-string\\">\\"G\\"</span>]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> s <span class=\\"hljs-keyword\\">of</span> bank)hash[s]=<span class=\\"hljs-literal\\">true</span>\\n  <span class=\\"hljs-keyword\\">if</span>(!hash[end])<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">-1</span>\\n  <span class=\\"hljs-keyword\\">let</span> arr=[start]\\n  <span class=\\"hljs-keyword\\">let</span> step=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">while</span>(arr.length&gt;<span class=\\"hljs-number\\">0</span>){\\n    <span class=\\"hljs-keyword\\">let</span> len=arr.length\\n    step++\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;len;i++){\\n      <span class=\\"hljs-keyword\\">let</span> curS=arr.shift()\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;curS.length;j++){\\n        <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> k=<span class=\\"hljs-number\\">0</span>;k&lt;c.length;k++){\\n          <span class=\\"hljs-keyword\\">if</span>(curS[j]===c[k])<span class=\\"hljs-keyword\\">continue</span>\\n          <span class=\\"hljs-keyword\\">let</span> newS=curS.substring(<span class=\\"hljs-number\\">0</span>,j)+c[k]+curS.substring(j+<span class=\\"hljs-number\\">1</span>)\\n          <span class=\\"hljs-keyword\\">if</span>(hash[newS]){\\n            <span class=\\"hljs-keyword\\">if</span>(newS===end)<span class=\\"hljs-keyword\\">return</span> step\\n            arr.push(newS)\\n            hash[newS]=<span class=\\"hljs-literal\\">null</span>\\n          }\\n        }\\n      }\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">-1</span>\\n};\\n</code></pre>\\n"],"querySlug":"minimum-genetic-mutation","created_at":"2019-04-29","timeArr":[2019,3,29,16,57,46,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>类似<code>NO.127</code>。</p>\\n<p>将<code>start</code>添加到<code>arr</code>中，对<code>arr</code>内部的每个字符串的每个字母，不断替换它为另外的其他<code>3</code>个字母，然后查看<code>hash</code>(bank)中是否存在，\\n如果存在，添加到<code>arr</code>并且删除当前字符串的<code>hash</code>，因为不需要再次使用。</p>\\n<p>因为每个字符最多替换<code>4</code>次，最多<code>8</code>个字符，因此时间复杂度是<code>O(32*n)==O(n)</code>，其中<code>n</code>是<code>bank</code>的长度。</p>\\n","content":"<p>一条基因序列由一个带有8个字符的字符串表示，其中每个字符都属于 <code>\\"A\\"</code>, <code>\\"C\\"</code>, <code>\\"G\\"</code>, <code>\\"T\\"</code>中的任意一个。</p>\\n\\n<p>假设我们要调查一个基因序列的变化。<strong>一次</strong>基因变化意味着这个基因序列中的<strong>一个</strong>字符发生了变化。</p>\\n\\n<p>例如，基因序列由<code>\\"AACCGGTT\\"</code> 变化至 <code>\\"AACCGGTA\\" </code>即发生了一次基因变化。</p>\\n\\n<p>与此同时，每一次基因变化的结果，都需要是一个合法的基因串，即该结果属于一个基因库。</p>\\n\\n<p>现在给定3个参数 — start, end, bank，分别代表起始基因序列，目标基因序列及基因库，请找出能够使起始基因序列变化为目标基因序列所需的最少变化次数。如果无法实现目标变化，请返回 -1。</p>\\n\\n<p><strong>注意：</strong></p>\\n\\n<ol>\\n\\t<li>起始基因序列默认是合法的，但是它并不一定会出现在基因库中。</li>\\n\\t<li>如果一个起始基因序列需要多次变化，那么它每一次变化之后的基因序列都必须是合法的。</li>\\n\\t<li>假定起始基因序列与目标基因序列是不一样的。</li>\\n</ol>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\nstart: \\"AACCGGTT\\"\\nend:   \\"AACCGGTA\\"\\nbank: [\\"AACCGGTA\\"]\\n\\n返回值: 1\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\nstart: \\"AACCGGTT\\"\\nend:   \\"AAACGGTA\\"\\nbank: [\\"AACCGGTA\\", \\"AACCGCTA\\", \\"AAACGGTA\\"]\\n\\n返回值: 2\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\nstart: \\"AAAAACCC\\"\\nend:   \\"AACCCCCC\\"\\nbank: [\\"AAAACCCC\\", \\"AAACCCCC\\", \\"AACCCCCC\\"]\\n\\n返回值: 3\\n</pre>\\n","title":"433. 最小基因变化","relatedTags":["广度优先搜索","哈希表","字符串"],"difficult":"Middle","lang":["javascript"],"uniqueID":"433","slug":"433-Minimum-Genetic-Mutation"}')}}]);