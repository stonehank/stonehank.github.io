(window.webpackJsonp=window.webpackJsonp||[]).push([[586],{1384:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">heights</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">bricks</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">ladders</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> furthestBuilding = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">heights, bricks, ladders</span>) </span>{\\n    <span class=\\"hljs-keyword\\">let</span> ladderUse=[]\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">insert</span>(<span class=\\"hljs-params\\">num</span>)</span>{\\n        <span class=\\"hljs-keyword\\">if</span>(ladderUse.length===<span class=\\"hljs-number\\">0</span> || ladderUse[ladderUse.length<span class=\\"hljs-number\\">-1</span>]&lt;=num){\\n            ladderUse.push(num)\\n        }<span class=\\"hljs-keyword\\">else</span>{\\n            <span class=\\"hljs-keyword\\">let</span> idx=bsEnd(ladderUse,num)\\n            ladderUse.splice(idx,<span class=\\"hljs-number\\">0</span>,num)\\n        }\\n    }\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">bsEnd</span>(<span class=\\"hljs-params\\">arr,n</span>)</span>{\\n        <span class=\\"hljs-keyword\\">let</span> lo=<span class=\\"hljs-number\\">0</span>,hi=arr.length<span class=\\"hljs-number\\">-1</span>\\n        <span class=\\"hljs-keyword\\">while</span>(lo&lt;hi){\\n            <span class=\\"hljs-keyword\\">let</span> mid=<span class=\\"hljs-built_in\\">Math</span>.floor((lo+hi)/<span class=\\"hljs-number\\">2</span>)\\n            <span class=\\"hljs-keyword\\">if</span>(arr[mid]&lt;n)lo=mid+<span class=\\"hljs-number\\">1</span>\\n            <span class=\\"hljs-keyword\\">else</span> hi=mid\\n        }\\n        <span class=\\"hljs-keyword\\">return</span> hi\\n    }\\n\\n\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">1</span>;i&lt;heights.length;i++){\\n        <span class=\\"hljs-keyword\\">let</span> lastH=heights[i<span class=\\"hljs-number\\">-1</span>]\\n        <span class=\\"hljs-keyword\\">let</span> curH=heights[i]\\n        <span class=\\"hljs-keyword\\">let</span> gap=curH-lastH\\n        <span class=\\"hljs-keyword\\">if</span>(gap&gt;<span class=\\"hljs-number\\">0</span>){\\n            <span class=\\"hljs-keyword\\">if</span>(ladders&gt;<span class=\\"hljs-number\\">0</span>){\\n                ladders--\\n                insert(gap)\\n                <span class=\\"hljs-keyword\\">continue</span>\\n            }<span class=\\"hljs-keyword\\">else</span>{\\n                <span class=\\"hljs-keyword\\">let</span> minGap=ladderUse[<span class=\\"hljs-number\\">0</span>]\\n                <span class=\\"hljs-keyword\\">if</span>(minGap&lt;gap){\\n                    ladderUse.shift()\\n                    insert(gap)\\n                }<span class=\\"hljs-keyword\\">else</span>{\\n                    minGap=gap\\n                }\\n                bricks -= minGap\\n                <span class=\\"hljs-keyword\\">if</span>(bricks&lt;<span class=\\"hljs-number\\">0</span>){\\n                    <span class=\\"hljs-keyword\\">return</span> i<span class=\\"hljs-number\\">-1</span>\\n                }\\n            }\\n        }\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> heights.length<span class=\\"hljs-number\\">-1</span>\\n};\\n</code></pre>\\n"],"querySlug":"furthest-building-you-can-reach","created_at":"2021-03-04","timeArr":[2021,2,4,12,22,45,0],"hasThinking":false,"content":"<p>给你一个整数数组 <code>heights</code> ，表示建筑物的高度。另有一些砖块 <code>bricks</code> 和梯子 <code>ladders</code> 。</p>\\n\\n<p>你从建筑物 <code>0</code> 开始旅程，不断向后面的建筑物移动，期间可能会用到砖块或梯子。</p>\\n\\n<p>当从建筑物 <code>i</code> 移动到建筑物 <code>i+1</code>（下标<strong> 从 0 开始 </strong>）时：</p>\\n\\n<ul>\\n\\t<li>如果当前建筑物的高度 <strong>大于或等于</strong> 下一建筑物的高度，则不需要梯子或砖块</li>\\n\\t<li>如果当前建筑的高度 <strong>小于</strong> 下一个建筑的高度，您可以使用 <strong>一架梯子</strong> 或 <strong><code>(h[i+1] - h[i])</code> 个砖块</strong></li>\\n</ul>\\n如果以最佳方式使用给定的梯子和砖块，返回你可以到达的最远建筑物的下标（下标<strong> 从 0 开始 </strong>）。\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/10/31/q4.gif\\" style=\\"width: 562px; height: 561px;\\" />\\n<pre>\\n<strong>输入：</strong>heights = [4,2,7,6,9,14,12], bricks = 5, ladders = 1\\n<strong>输出：</strong>4\\n<strong>解释：</strong>从建筑物 0 出发，你可以按此方案完成旅程：\\n- 不使用砖块或梯子到达建筑物 1 ，因为 4 >= 2\\n- 使用 5 个砖块到达建筑物 2 。你必须使用砖块或梯子，因为 2 < 7\\n- 不使用砖块或梯子到达建筑物 3 ，因为 7 >= 6\\n- 使用唯一的梯子到达建筑物 4 。你必须使用砖块或梯子，因为 6 < 9\\n无法越过建筑物 4 ，因为没有更多砖块或梯子。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>heights = [4,12,2,7,3,18,20,3,19], bricks = 10, ladders = 2\\n<strong>输出：</strong>7\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>heights = [14,3,19,3], bricks = 17, ladders = 0\\n<strong>输出：</strong>3\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= heights.length <= 10<sup>5</sup></code></li>\\n\\t<li><code>1 <= heights[i] <= 10<sup>6</sup></code></li>\\n\\t<li><code>0 <= bricks <= 10<sup>9</sup></code></li>\\n\\t<li><code>0 <= ladders <= heights.length</code></li>\\n</ul>\\n","title":"1642. 可以到达的最远建筑","relatedTags":["贪心","数组","堆（优先队列）"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1642","slug":"1642-Furthest-Building-You-Can-Reach"}')}}]);