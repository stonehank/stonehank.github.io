(window.webpackJsonp=window.webpackJsonp||[]).push([[1248],{2046:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">R</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">C</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">r0</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">c0</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[][]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> spiralMatrixIII = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">R, C, r0, c0</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> res=[[r0,c0]]\\n  <span class=\\"hljs-keyword\\">let</span> moves=[[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">1</span>],[<span class=\\"hljs-number\\">1</span>,<span class=\\"hljs-number\\">0</span>],[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">-1</span>],[<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">0</span>]]\\n  <span class=\\"hljs-keyword\\">let</span> idx=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">let</span> steps=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">let</span> len=R*C\\n  dfs([r0,c0],len<span class=\\"hljs-number\\">-1</span>)\\n  <span class=\\"hljs-keyword\\">return</span> res\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">dfs</span>(<span class=\\"hljs-params\\">[x,y],rest</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(rest&lt;=<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span>\\n    <span class=\\"hljs-keyword\\">if</span>(idx % <span class=\\"hljs-number\\">2</span>===<span class=\\"hljs-number\\">0</span>)steps++\\n    <span class=\\"hljs-keyword\\">let</span> [dx,dy]=moves[idx++]\\n    <span class=\\"hljs-keyword\\">if</span>(idx===<span class=\\"hljs-number\\">4</span>)idx=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">let</span> nx=x,ny=y\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;steps;i++){\\n      nx+=dx\\n      ny+=dy\\n      <span class=\\"hljs-keyword\\">if</span>(nx&gt;=<span class=\\"hljs-number\\">0</span> &amp;&amp; ny&gt;=<span class=\\"hljs-number\\">0</span> &amp;&amp; nx&lt;R &amp;&amp; ny&lt;C &amp;&amp; rest--&gt;<span class=\\"hljs-number\\">0</span>){\\n        res.push([nx,ny])\\n      }\\n      <span class=\\"hljs-keyword\\">if</span>(rest&lt;=<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span>\\n    }\\n    dfs([nx,ny],rest)\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"spiral-matrix-iii","created_at":"2019-04-03","timeArr":[2019,3,3,15,52,58,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p><code>dfs</code>解决，这种螺旋问题一般会设置一个<code>moves=[[0,1],[1,0],[0,-1],[-1,0]]</code>，初始<code>idx=0</code>，当<code>idx</code>不断循环增加时，就是走顺时针。</p>\\n<p>在<code>dfs</code>内部，需要注意：</p>\\n<ul>\\n<li>每当<code>idx</code>是偶数时，走的步数<code>steps</code>需要增加一步。</li>\\n<li>每次都让方向索引<code>idx++</code>，当<code>idx===4</code>，需要设置<code>idx=0</code>。</li>\\n<li>在当前方向确定，开始执行走<code>steps</code>时，如果一旦发现所有格子都走完，立刻<code>return</code>。</li>\\n<li>只有在当前走的范围在<code>R*C</code>内，才能添加进最终输出的数组。</li>\\n</ul>\\n","content":"<p>在&nbsp;<code>R</code>&nbsp;行&nbsp;<code>C</code>&nbsp;列的矩阵上，我们从&nbsp;<code>(r0, c0)</code>&nbsp;面朝东面开始</p>\\n\\n<p>这里，网格的西北角位于第一行第一列，网格的东南角位于最后一行最后一列。</p>\\n\\n<p>现在，我们以顺时针按螺旋状行走，访问此网格中的每个位置。</p>\\n\\n<p>每当我们移动到网格的边界之外时，我们会继续在网格之外行走（但稍后可能会返回到网格边界）。</p>\\n\\n<p>最终，我们到过网格的所有&nbsp;<code>R * C</code>&nbsp;个空间。</p>\\n\\n<p>按照访问顺序返回表示网格位置的坐标列表。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>R = 1, C = 4, r0 = 0, c0 = 0\\n<strong>输出：</strong>[[0,0],[0,1],[0,2],[0,3]]\\n\\n<img alt=\\"\\" src=\\"https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/08/24/example_1.png\\" style=\\"height: 99px; width: 174px;\\">\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>R = 5, C = 6, r0 = 1, c0 = 4\\n<strong>输出：</strong>[[1,4],[1,5],[2,5],[2,4],[2,3],[1,3],[0,3],[0,4],[0,5],[3,5],[3,4],[3,3],[3,2],[2,2],[1,2],[0,2],[4,5],[4,4],[4,3],[4,2],[4,1],[3,1],[2,1],[1,1],[0,1],[4,0],[3,0],[2,0],[1,0],[0,0]]\\n\\n<img alt=\\"\\" src=\\"https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/08/24/example_2.png\\" style=\\"height: 142px; width: 202px;\\">\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ol>\\n\\t<li><code>1 &lt;= R &lt;= 100</code></li>\\n\\t<li><code>1 &lt;= C &lt;= 100</code></li>\\n\\t<li><code>0 &lt;= r0 &lt; R</code></li>\\n\\t<li><code>0 &lt;= c0 &lt; C</code></li>\\n</ol>\\n","title":"885. 螺旋矩阵 III","relatedTags":["数组","矩阵","模拟"],"difficult":"Middle","lang":["javascript"],"uniqueID":"885","slug":"885-Spiral-Matrix-III"}')}}]);