(window.webpackJsonp=window.webpackJsonp||[]).push([[1151],{1949:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">graph</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[][]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> allPathsSourceTarget = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">graph</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> n=graph.length\\n  <span class=\\"hljs-keyword\\">let</span> res=[]\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">dfs</span>(<span class=\\"hljs-params\\">v,stack</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(v===n<span class=\\"hljs-number\\">-1</span>){\\n      <span class=\\"hljs-keyword\\">return</span> res.push(stack.slice())\\n    }\\n    <span class=\\"hljs-keyword\\">let</span> adj=graph[v]\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;adj.length;i++){\\n      stack.push(adj[i])\\n      dfs(adj[i],stack)\\n      stack.pop()\\n    }\\n  }\\n  dfs(<span class=\\"hljs-number\\">0</span>,[<span class=\\"hljs-number\\">0</span>])\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"all-paths-from-source-to-target","created_at":"2019-04-25","timeArr":[2019,3,25,16,23,11,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p><code>dfs</code>遍历，使用一个数组<code>stack</code>保存当前<code>dfs</code>的路径。</p>\\n","content":"<p>给你一个有&nbsp;<code>n</code>&nbsp;个节点的 <strong>有向无环图（DAG）</strong>，请你找出所有从节点 <code>0</code>&nbsp;到节点 <code>n-1</code>&nbsp;的路径并输出（<strong>不要求按特定顺序</strong>）</p>\\n\\n<p>二维数组的第 <code>i</code> 个数组中的单元都表示有向图中 <code>i</code> 号节点所能到达的下一些节点，空就是没有下一个结点了。</p>\\n\\n<p>译者注：有向图是有方向的，即规定了 a→b 你就不能从 b→a 。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<p><img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2020/09/28/all_1.jpg\\" style=\\"height: 242px; width: 242px;\\" /></p>\\n\\n<pre>\\n<strong>输入：</strong>graph = [[1,2],[3],[3],[]]\\n<strong>输出：</strong>[[0,1,3],[0,2,3]]\\n<strong>解释：</strong>有两条路径 0 -&gt; 1 -&gt; 3 和 0 -&gt; 2 -&gt; 3\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<p><img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2020/09/28/all_2.jpg\\" style=\\"height: 301px; width: 423px;\\" /></p>\\n\\n<pre>\\n<strong>输入：</strong>graph = [[4,3,1],[3,2,4],[3],[4],[]]\\n<strong>输出：</strong>[[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>graph = [[1],[]]\\n<strong>输出：</strong>[[0,1]]\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>graph = [[1,2,3],[2],[3],[]]\\n<strong>输出：</strong>[[0,1,2,3],[0,2,3],[0,3]]\\n</pre>\\n\\n<p><strong>示例 5：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>graph = [[1,3],[2],[3],[]]\\n<strong>输出：</strong>[[0,1,2,3],[0,3]]\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>n == graph.length</code></li>\\n\\t<li><code>2 &lt;= n &lt;= 15</code></li>\\n\\t<li><code>0 &lt;= graph[i][j] &lt; n</code></li>\\n\\t<li><code>graph[i][j] != i</code>（即，不存在自环）</li>\\n\\t<li><code>graph[i]</code> 中的所有元素 <strong>互不相同</strong></li>\\n\\t<li>保证输入为 <strong>有向无环图（DAG）</strong></li>\\n</ul>\\n","title":"797. 所有可能的路径","relatedTags":["深度优先搜索","广度优先搜索","图","回溯"],"difficult":"Middle","lang":["javascript"],"uniqueID":"797","slug":"797-All-Paths-From-Source-to-Target"}')}}]);