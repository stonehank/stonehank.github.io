(window.webpackJsonp=window.webpackJsonp||[]).push([[1019],{1817:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{TreeNode}</span> <span class=\\"hljs-variable\\">root</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{string[][]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> printTree = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">root</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(!root)<span class=\\"hljs-keyword\\">return</span> []\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">getH</span>(<span class=\\"hljs-params\\">root</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(!root)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-built_in\\">Math</span>.max(getH(root.left),getH(root.right))+<span class=\\"hljs-number\\">1</span>\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> h=getH(root)\\n  <span class=\\"hljs-keyword\\">let</span> width=<span class=\\"hljs-built_in\\">Math</span>.pow(<span class=\\"hljs-number\\">2</span>,h)<span class=\\"hljs-number\\">-1</span>\\n  <span class=\\"hljs-keyword\\">let</span> arr=[root],\\n      res=<span class=\\"hljs-built_in\\">Array</span>(h).fill().map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span>=&gt;</span><span class=\\"hljs-built_in\\">Array</span>(width).fill(<span class=\\"hljs-string\\">\'\'</span>))\\n  <span class=\\"hljs-keyword\\">while</span>(h&gt;<span class=\\"hljs-number\\">0</span>){\\n    <span class=\\"hljs-keyword\\">let</span> len=arr.length\\n    <span class=\\"hljs-keyword\\">let</span> gap=<span class=\\"hljs-built_in\\">Math</span>.pow(<span class=\\"hljs-number\\">2</span>,h<span class=\\"hljs-number\\">-1</span>),prevGap=<span class=\\"hljs-built_in\\">Math</span>.pow(<span class=\\"hljs-number\\">2</span>,h)\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;len;i++){\\n      <span class=\\"hljs-keyword\\">let</span> node=arr.shift()\\n      <span class=\\"hljs-keyword\\">if</span>(!node){\\n        arr.push(<span class=\\"hljs-literal\\">null</span>,<span class=\\"hljs-literal\\">null</span>)\\n        <span class=\\"hljs-keyword\\">continue</span>\\n      }\\n      res[res.length-h][gap<span class=\\"hljs-number\\">-1</span>+prevGap*i]=node.val+<span class=\\"hljs-string\\">\'\'</span>\\n      arr.push(node.left)\\n      arr.push(node.right)\\n    }\\n    h--\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"print-binary-tree","created_at":"2019-03-19","timeArr":[2019,2,19,16,9,13,0],"hasThinking":false,"content":"<p>在一个 m*n 的二维字符串数组中输出二叉树，并遵守以下规则：</p>\\n\\n<ol>\\n\\t<li>行数&nbsp;<code>m</code>&nbsp;应当等于给定二叉树的高度。</li>\\n\\t<li>列数&nbsp;<code>n</code>&nbsp;应当总是奇数。</li>\\n\\t<li>根节点的值（以字符串格式给出）应当放在可放置的第一行正中间。根节点所在的行与列会将剩余空间划分为两部分（<strong>左下部分和右下部分</strong>）。你应该将左子树输出在左下部分，右子树输出在右下部分。左下和右下部分应当有相同的大小。即使一个子树为空而另一个非空，你不需要为空的子树输出任何东西，但仍需要为另一个子树留出足够的空间。然而，如果两个子树都为空则不需要为它们留出任何空间。</li>\\n\\t<li>每个未使用的空间应包含一个空的字符串<code>&quot;&quot;</code>。</li>\\n\\t<li>使用相同的规则输出子树。</li>\\n</ol>\\n\\n<p><strong>示例 1:</strong></p>\\n\\n<pre>\\n<strong>输入:</strong>\\n     1\\n    /\\n   2\\n<strong>输出:</strong>\\n[[&quot;&quot;, &quot;1&quot;, &quot;&quot;],\\n [&quot;2&quot;, &quot;&quot;, &quot;&quot;]]\\n</pre>\\n\\n<p><strong>示例 2:</strong></p>\\n\\n<pre>\\n<strong>输入:</strong>\\n     1\\n    / \\\\\\n   2   3\\n    \\\\\\n     4\\n<strong>输出:</strong>\\n[[&quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;1&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;],\\n [&quot;&quot;, &quot;2&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;3&quot;, &quot;&quot;],\\n [&quot;&quot;, &quot;&quot;, &quot;4&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;]]\\n</pre>\\n\\n<p><strong>示例 3:</strong></p>\\n\\n<pre>\\n<strong>输入:</strong>\\n      1\\n     / \\\\\\n    2   5\\n   / \\n  3 \\n / \\n4 \\n<strong>输出:</strong>\\n[[&quot;&quot;,  &quot;&quot;,  &quot;&quot;, &quot;&quot;,  &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;1&quot;, &quot;&quot;,  &quot;&quot;,  &quot;&quot;,  &quot;&quot;,  &quot;&quot;, &quot;&quot;, &quot;&quot;]\\n [&quot;&quot;,  &quot;&quot;,  &quot;&quot;, &quot;2&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;,  &quot;&quot;,  &quot;&quot;,  &quot;&quot;,  &quot;5&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;]\\n [&quot;&quot;,  &quot;3&quot;, &quot;&quot;, &quot;&quot;,  &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;,  &quot;&quot;,  &quot;&quot;,  &quot;&quot;,  &quot;&quot;,  &quot;&quot;, &quot;&quot;, &quot;&quot;]\\n [&quot;4&quot;, &quot;&quot;,  &quot;&quot;, &quot;&quot;,  &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;,  &quot;&quot;,  &quot;&quot;,  &quot;&quot;,  &quot;&quot;,  &quot;&quot;, &quot;&quot;, &quot;&quot;]]\\n</pre>\\n\\n<p><strong>注意:</strong> 二叉树的高度在范围 [1, 10] 中。</p>\\n","title":"655. 输出二叉树","relatedTags":["树","深度优先搜索","广度优先搜索","二叉树"],"difficult":"Middle","lang":["javascript"],"uniqueID":"655","slug":"655-Print-Binary-Tree"}')}}]);