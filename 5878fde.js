(window.webpackJsonp=window.webpackJsonp||[]).push([[1036],{1834:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">nums</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> findLengthOfLCIS = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">nums</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> maxLen=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">let</span> tempLen=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;nums.length;i++){\\n    <span class=\\"hljs-keyword\\">if</span>(i===<span class=\\"hljs-number\\">0</span> || nums[i]&gt;nums[i<span class=\\"hljs-number\\">-1</span>])tempLen++\\n    <span class=\\"hljs-keyword\\">else</span>{\\n      maxLen=<span class=\\"hljs-built_in\\">Math</span>.max(maxLen,tempLen)\\n      tempLen=<span class=\\"hljs-number\\">1</span>\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-built_in\\">Math</span>.max(maxLen,tempLen)\\n};\\n</code></pre>\\n"],"querySlug":"longest-continuous-increasing-subsequence","created_at":"2019-03-14","timeArr":[2019,2,14,20,2,51,0],"hasThinking":false,"content":"<p>给定一个未经排序的整数数组，找到最长且<strong> 连续递增的子序列</strong>，并返回该序列的长度。</p>\\n\\n<p><strong>连续递增的子序列</strong> 可以由两个下标 <code>l</code> 和 <code>r</code>（<code>l < r</code>）确定，如果对于每个 <code>l <= i < r</code>，都有 <code>nums[i] < nums[i + 1]</code> ，那么子序列 <code>[nums[l], nums[l + 1], ..., nums[r - 1], nums[r]]</code> 就是连续递增子序列。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [1,3,5,4,7]\\n<strong>输出：</strong>3\\n<strong>解释：</strong>最长连续递增序列是 [1,3,5], 长度为3。\\n尽管 [1,3,5,7] 也是升序的子序列, 但它不是连续的，因为 5 和 7 在原数组里被 4 隔开。 \\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [2,2,2,2,2]\\n<strong>输出：</strong>1\\n<strong>解释：</strong>最长连续递增序列是 [2], 长度为1。\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= nums.length <= 10<sup>4</sup></code></li>\\n\\t<li><code>-10<sup>9</sup> <= nums[i] <= 10<sup>9</sup></code></li>\\n</ul>\\n","title":"674. 最长连续递增序列","relatedTags":["数组"],"difficult":"Easy","lang":["javascript"],"uniqueID":"674","slug":"674-Longest-Continuous-Increasing-Subsequence"}')}}]);