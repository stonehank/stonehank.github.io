(window.webpackJsonp=window.webpackJsonp||[]).push([[678],{1476:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Solution</span><span class=\\"hljs-params\\">(object)</span>:</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">maximalSquare</span><span class=\\"hljs-params\\">(self, matrix)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type matrix: List[List[str]]\\n        :rtype: int\\n        \\"\\"\\"</span>\\n        <span class=\\"hljs-keyword\\">if</span> <span class=\\"hljs-keyword\\">not</span> matrix:<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>\\n        m=len(matrix)\\n        n=len(matrix[<span class=\\"hljs-number\\">0</span>])\\n        maxArea=<span class=\\"hljs-number\\">0</span>\\n\\n        dp=[[<span class=\\"hljs-number\\">0</span>]*(n+<span class=\\"hljs-number\\">1</span>) <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(m+<span class=\\"hljs-number\\">1</span>)]\\n        <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(<span class=\\"hljs-number\\">1</span>,m+<span class=\\"hljs-number\\">1</span>):\\n          <span class=\\"hljs-keyword\\">for</span> j <span class=\\"hljs-keyword\\">in</span> range(<span class=\\"hljs-number\\">1</span>,n+<span class=\\"hljs-number\\">1</span>):\\n            <span class=\\"hljs-keyword\\">if</span> matrix[i<span class=\\"hljs-number\\">-1</span>][j<span class=\\"hljs-number\\">-1</span>]==<span class=\\"hljs-string\\">\'1\'</span>:\\n              dp[i][j]=<span class=\\"hljs-number\\">1</span>+min(dp[i<span class=\\"hljs-number\\">-1</span>][j<span class=\\"hljs-number\\">-1</span>], dp[i<span class=\\"hljs-number\\">-1</span>][j], dp[i][j<span class=\\"hljs-number\\">-1</span>])\\n              maxArea=max(maxArea,dp[i][j]**<span class=\\"hljs-number\\">2</span>)\\n\\n        <span class=\\"hljs-keyword\\">return</span> maxArea\\n</code></pre>\\n"],"querySlug":"maximal-square","created_at":"2019-03-01","timeArr":[2019,2,1,15,9,37,0],"hasThinking":false,"content":"<p>在一个由 <code>\'0\'</code> 和 <code>\'1\'</code> 组成的二维矩阵内，找到只包含 <code>\'1\'</code> 的最大正方形，并返回其面积。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2020/11/26/max1grid.jpg\\" style=\\"width: 400px; height: 319px;\\" />\\n<pre>\\n<strong>输入：</strong>matrix = [[\\"1\\",\\"0\\",\\"1\\",\\"0\\",\\"0\\"],[\\"1\\",\\"0\\",\\"1\\",\\"1\\",\\"1\\"],[\\"1\\",\\"1\\",\\"1\\",\\"1\\",\\"1\\"],[\\"1\\",\\"0\\",\\"0\\",\\"1\\",\\"0\\"]]\\n<strong>输出：</strong>4\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2020/11/26/max2grid.jpg\\" style=\\"width: 165px; height: 165px;\\" />\\n<pre>\\n<strong>输入：</strong>matrix = [[\\"0\\",\\"1\\"],[\\"1\\",\\"0\\"]]\\n<strong>输出：</strong>1\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>matrix = [[\\"0\\"]]\\n<strong>输出：</strong>0\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>m == matrix.length</code></li>\\n\\t<li><code>n == matrix[i].length</code></li>\\n\\t<li><code>1 <= m, n <= 300</code></li>\\n\\t<li><code>matrix[i][j]</code> 为 <code>\'0\'</code> 或 <code>\'1\'</code></li>\\n</ul>\\n","title":"221. 最大正方形","relatedTags":["数组","动态规划","矩阵"],"difficult":"Middle","lang":["python"],"uniqueID":"221","slug":"221-Maximal-Square"}')}}]);