(window.webpackJsonp=window.webpackJsonp||[]).push([[1096],{1894:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">N</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> monotoneIncreasingDigits = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">N</span>) </span>{\\n    <span class=\\"hljs-keyword\\">let</span> str=N+<span class=\\"hljs-string\\">\'\'</span>\\n    <span class=\\"hljs-keyword\\">let</span> len=str.length\\n    <span class=\\"hljs-keyword\\">let</span> bit=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">let</span> res=+(str[bit]<span class=\\"hljs-number\\">-1</span>+<span class=\\"hljs-string\\">\'9\'</span>.repeat(len-bit<span class=\\"hljs-number\\">-1</span>))\\n    <span class=\\"hljs-comment\\">// console.log(res)</span>\\n    <span class=\\"hljs-keyword\\">while</span>(res&lt;N){\\n      <span class=\\"hljs-comment\\">// console.log(res)</span>\\n      bit++\\n      <span class=\\"hljs-keyword\\">let</span> times=len-bit<span class=\\"hljs-number\\">-1</span>\\n      <span class=\\"hljs-keyword\\">let</span> pre=str.substr(<span class=\\"hljs-number\\">0</span>,bit),\\n          mid=(+str[bit])<span class=\\"hljs-number\\">-1</span>,\\n          next=<span class=\\"hljs-string\\">\'9\'</span>.repeat(times&gt;<span class=\\"hljs-number\\">0</span>?times:<span class=\\"hljs-number\\">0</span>)\\n      <span class=\\"hljs-comment\\">// console.log(pre,mid,next)</span>\\n      <span class=\\"hljs-keyword\\">let</span> midBefore=+(pre[pre.length<span class=\\"hljs-number\\">-1</span>])\\n      <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-built_in\\">Number</span>.isNaN(mid))<span class=\\"hljs-keyword\\">return</span> +pre\\n      <span class=\\"hljs-keyword\\">if</span>(mid&lt;midBefore<span class=\\"hljs-number\\">-1</span>)<span class=\\"hljs-keyword\\">break</span>\\n      <span class=\\"hljs-keyword\\">if</span>(mid&lt;midBefore)<span class=\\"hljs-keyword\\">continue</span>\\n      res=+(pre+mid+next)\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"monotone-increasing-digits","created_at":"2019-04-14","timeArr":[2019,3,14,9,47,45,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>要找出<code>单调递增</code>的最大数，将数字转换成字符串后，从前往后找，找到不符合<code>单调递增</code>的立刻修改，并且后面添加<code>999...</code>即是最大值。</p>\\n<p>因此这里一旦发现当前数字比上一个数字更小，递归处理上一个数字和之前的字符串。</p>\\n","content":"<p>给定一个非负整数&nbsp;<code>N</code>，找出小于或等于&nbsp;<code>N</code>&nbsp;的最大的整数，同时这个整数需要满足其各个位数上的数字是单调递增。</p>\\n\\n<p>（当且仅当每个相邻位数上的数字&nbsp;<code>x</code>&nbsp;和&nbsp;<code>y</code>&nbsp;满足&nbsp;<code>x &lt;= y</code>&nbsp;时，我们称这个整数是单调递增的。）</p>\\n\\n<p><strong>示例 1:</strong></p>\\n\\n<pre><strong>输入:</strong> N = 10\\n<strong>输出:</strong> 9\\n</pre>\\n\\n<p><strong>示例 2:</strong></p>\\n\\n<pre><strong>输入:</strong> N = 1234\\n<strong>输出:</strong> 1234\\n</pre>\\n\\n<p><strong>示例 3:</strong></p>\\n\\n<pre><strong>输入:</strong> N = 332\\n<strong>输出:</strong> 299\\n</pre>\\n\\n<p><strong>说明:</strong> <code>N</code>&nbsp;是在&nbsp;<code>[0, 10^9]</code>&nbsp;范围内的一个整数。</p>\\n","title":"738. 单调递增的数字","relatedTags":["贪心","数学"],"difficult":"Middle","lang":["javascript"],"uniqueID":"738","slug":"738-Monotone-Increasing-Digits"}')}}]);