(window.webpackJsonp=window.webpackJsonp||[]).push([[1299],{2097:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">A</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">S</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> numSubarraysWithSum = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">A, S</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> hash={},sums=[<span class=\\"hljs-number\\">0</span>]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;A.length;i++){\\n    sums[i+<span class=\\"hljs-number\\">1</span>]=sums[i]+A[i]\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;sums.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> t=sums[i]-S\\n    <span class=\\"hljs-keyword\\">if</span>(t&gt;=<span class=\\"hljs-number\\">0</span>)res+=hash[t] || <span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">if</span>(hash[sums[i]]==<span class=\\"hljs-literal\\">null</span>)hash[sums[i]]=<span class=\\"hljs-number\\">1</span>\\n    <span class=\\"hljs-keyword\\">else</span> hash[sums[i]]++\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"binary-subarrays-with-sum","created_at":"2019-04-08","timeArr":[2019,3,8,1,10,23,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>遍历数组<code>A</code>，不断求出当前位置之前的和<code>preSum</code>，并且保存进<code>hash</code>，如果发现<code>preSum&gt;=S</code>，\\n说明有可能存在一组连续的子数组的和为<code>S</code>，这时检查<code>hash[preSum-S]</code>，如果发现存在，\\n说明之前存在<code>hash[preSum-S]</code>个位置，与当前位置的差值为<code>S</code>。</p>\\n","content":"<p>给你一个二元数组 <code>nums</code> ，和一个整数 <code>goal</code> ，请你统计并返回有多少个和为 <code>goal</code> 的<strong> 非空</strong> 子数组。</p>\\n\\n<p><strong>子数组</strong> 是数组的一段连续部分。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [1,0,1,0,1], goal = 2\\n<strong>输出：</strong>4\\n<strong>解释：</strong>\\n有 4 个满足题目要求的子数组：[1,0,1]、[1,0,1,0]、[0,1,0,1]、[1,0,1]\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [0,0,0,0,0], goal = 0\\n<strong>输出：</strong>15\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= nums.length <= 3 * 10<sup>4</sup></code></li>\\n\\t<li><code>nums[i]</code> 不是 <code>0</code> 就是 <code>1</code></li>\\n\\t<li><code>0 <= goal <= nums.length</code></li>\\n</ul>\\n","title":"930. 和相同的二元子数组","relatedTags":["数组","哈希表","前缀和","滑动窗口"],"difficult":"Middle","lang":["javascript"],"uniqueID":"930","slug":"930-Binary-Subarrays-With-Sum"}')}}]);