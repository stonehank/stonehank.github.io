(window.webpackJsonp=window.webpackJsonp||[]).push([[939],{1737:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{TreeNode}</span> <span class=\\"hljs-variable\\">root</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{TreeNode}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> convertBST = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">root</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(!root)<span class=\\"hljs-keyword\\">return</span> root\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">dfs</span>(<span class=\\"hljs-params\\">root,sum</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(root.right) sum=dfs(root.right,sum)\\n    root.val+=sum\\n    sum=root.val\\n    <span class=\\"hljs-keyword\\">if</span>(root.left) sum=dfs(root.left,sum)\\n    <span class=\\"hljs-keyword\\">return</span> sum\\n  }\\n  dfs(root,<span class=\\"hljs-number\\">0</span>)\\n  <span class=\\"hljs-keyword\\">return</span> root\\n};\\n</code></pre>\\n"],"querySlug":"convert-bst-to-greater-tree","created_at":"2019-03-19","timeArr":[2019,2,19,11,5,10,0],"hasThinking":false,"content":"<p>给出二叉<strong> 搜索 </strong>树的根节点，该树的节点值各不相同，请你将其转换为累加树（Greater Sum Tree），使每个节点 <code>node</code>&nbsp;的新值等于原树中大于或等于&nbsp;<code>node.val</code>&nbsp;的值之和。</p>\\n\\n<p>提醒一下，二叉搜索树满足下列约束条件：</p>\\n\\n<ul>\\n\\t<li>节点的左子树仅包含键<strong> 小于 </strong>节点键的节点。</li>\\n\\t<li>节点的右子树仅包含键<strong> 大于</strong> 节点键的节点。</li>\\n\\t<li>左右子树也必须是二叉搜索树。</li>\\n</ul>\\n\\n<p><strong>注意：</strong>本题和 1038:&nbsp;<a href=\\"https://leetcode-cn.com/problems/binary-search-tree-to-greater-sum-tree/\\">https://leetcode-cn.com/problems/binary-search-tree-to-greater-sum-tree/</a> 相同</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<p><strong><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/05/03/tree.png\\" style=\\"height: 364px; width: 534px;\\"></strong></p>\\n\\n<pre><strong>输入：</strong>[4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]\\n<strong>输出：</strong>[30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>root = [0,null,1]\\n<strong>输出：</strong>[1,null,1]\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>root = [1,0,2]\\n<strong>输出：</strong>[3,3,2]\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre><strong>输入：</strong>root = [3,2,4,1]\\n<strong>输出：</strong>[7,9,4,10]\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li>树中的节点数介于 <code>0</code>&nbsp;和 <code>10<sup>4</sup></code><sup>&nbsp;</sup>之间。</li>\\n\\t<li>每个节点的值介于 <code>-10<sup>4</sup></code>&nbsp;和&nbsp;<code>10<sup>4</sup></code>&nbsp;之间。</li>\\n\\t<li>树中的所有值 <strong>互不相同</strong> 。</li>\\n\\t<li>给定的树为二叉搜索树。</li>\\n</ul>\\n","title":"538. 把二叉搜索树转换为累加树","relatedTags":["树","深度优先搜索","二叉搜索树","二叉树"],"difficult":"Middle","lang":["javascript"],"uniqueID":"538","slug":"538-Convert-BST-to-Greater-Tree"}')}}]);