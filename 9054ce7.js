(window.webpackJsonp=window.webpackJsonp||[]).push([[1011],{1809:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Solution</span><span class=\\"hljs-params\\">(object)</span>:</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">countSubstrings</span><span class=\\"hljs-params\\">(self, s)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type s: str\\n        :rtype: int\\n        \\"\\"\\"</span>\\n        n=len(s)\\n        <span class=\\"hljs-keyword\\">if</span> n==<span class=\\"hljs-number\\">0</span>:<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>\\n        aux=[[<span class=\\"hljs-literal\\">False</span>]*n <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(n)]\\n        dp=[[<span class=\\"hljs-number\\">0</span>]*n <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(n)]\\n        \\n        <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(n):\\n          aux[i][i]=<span class=\\"hljs-literal\\">True</span>\\n          dp[i][i]=<span class=\\"hljs-number\\">1</span>\\n        <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(<span class=\\"hljs-number\\">1</span>,n):\\n          <span class=\\"hljs-keyword\\">for</span> j <span class=\\"hljs-keyword\\">in</span> range(n-i):\\n            k=j+i\\n            dp[j][k]=dp[j+<span class=\\"hljs-number\\">1</span>][k]+dp[j][k<span class=\\"hljs-number\\">-1</span>]-dp[j+<span class=\\"hljs-number\\">1</span>][k<span class=\\"hljs-number\\">-1</span>]\\n            <span class=\\"hljs-keyword\\">if</span> s[j]==s[k]:\\n              <span class=\\"hljs-keyword\\">if</span> aux[j+<span class=\\"hljs-number\\">1</span>][k<span class=\\"hljs-number\\">-1</span>] <span class=\\"hljs-keyword\\">or</span> j+<span class=\\"hljs-number\\">1</span>&gt;k<span class=\\"hljs-number\\">-1</span>:\\n                dp[j][k]+=<span class=\\"hljs-number\\">1</span>\\n                aux[j][k]=<span class=\\"hljs-literal\\">True</span>\\n        <span class=\\"hljs-keyword\\">return</span> dp[<span class=\\"hljs-number\\">0</span>][<span class=\\"hljs-number\\">-1</span>]\\n        \\n        \\n</code></pre>\\n"],"querySlug":"palindromic-substrings","created_at":"2019-03-06","timeArr":[2019,2,6,10,47,48,0],"hasThinking":false,"content":"<p>给定一个字符串，你的任务是计算这个字符串中有多少个回文子串。</p>\\n\\n<p>具有不同开始位置或结束位置的子串，即使是由相同的字符组成，也会被视作不同的子串。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>&quot;abc&quot;\\n<strong>输出：</strong>3\\n<strong>解释：</strong>三个回文子串: &quot;a&quot;, &quot;b&quot;, &quot;c&quot;\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>&quot;aaa&quot;\\n<strong>输出：</strong>6\\n<strong>解释：</strong>6个回文子串: &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;aa&quot;, &quot;aa&quot;, &quot;aaa&quot;</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li>输入的字符串长度不会超过 1000 。</li>\\n</ul>\\n","title":"647. 回文子串","relatedTags":["字符串","动态规划"],"difficult":"Middle","lang":["python"],"uniqueID":"647","slug":"647-Palindromic-Substrings"}')}}]);