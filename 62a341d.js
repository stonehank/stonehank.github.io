(window.webpackJsonp=window.webpackJsonp||[]).push([[795],{1593:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">nums</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> Solution = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">nums</span>) </span>{\\n  <span class=\\"hljs-keyword\\">this</span>.initNums=nums\\n  <span class=\\"hljs-keyword\\">this</span>.swap=<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">arr,i,j</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> t=arr[i]\\n    arr[i]=arr[j]\\n    arr[j]=t\\n  }\\n};\\n\\n<span class=\\"hljs-comment\\">/**\\n * Resets the array to its original configuration and return it.\\n * @return {number[]}\\n */</span>\\nSolution.prototype.reset = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-keyword\\">this</span>.initNums\\n};\\n\\n<span class=\\"hljs-comment\\">/**\\n * Returns a random shuffling of the array.\\n * @return {number[]}\\n */</span>\\nSolution.prototype.shuffle = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> nums=<span class=\\"hljs-keyword\\">this</span>.initNums.slice()\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=nums.length;i&gt;=<span class=\\"hljs-number\\">1</span>;i--){\\n    <span class=\\"hljs-keyword\\">let</span> rd=<span class=\\"hljs-built_in\\">Math</span>.floor(<span class=\\"hljs-built_in\\">Math</span>.random()*i)\\n    <span class=\\"hljs-keyword\\">this</span>.swap(nums,rd,i<span class=\\"hljs-number\\">-1</span>)\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> nums\\n};\\n\\n<span class=\\"hljs-comment\\">/** \\n * Your Solution object will be instantiated and called as such:\\n * var obj = new Solution(nums)\\n * var param_1 = obj.reset()\\n * var param_2 = obj.shuffle()\\n */</span>\\n</code></pre>\\n"],"querySlug":"shuffle-an-array","created_at":"2019-04-26","timeArr":[2019,3,26,19,39,9,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p><code>Fisher Yates</code>洗牌算法，对于一个数组，长度为<code>N</code>，首先随机从<code>N</code>中抽取1个，将它与最后一个交换；接着从<code>N-1</code>随机抽取一个，与倒数第二个交换....</p>\\n","content":"<p>给你一个整数数组 nums ，设计算法来打乱一个没有重复元素的数组。</p>\\n\\n<p>实现 <code>Solution</code> class:</p>\\n\\n<ul>\\n\\t<li><code>Solution(int[] nums)</code> 使用整数数组 <code>nums</code> 初始化对象</li>\\n\\t<li><code>int[] reset()</code> 重设数组到它的初始状态并返回</li>\\n\\t<li><code>int[] shuffle()</code> 返回数组随机打乱后的结果</li>\\n</ul>\\n\\n<p> </p>\\n\\n<p><strong>示例：</strong></p>\\n\\n<pre>\\n<strong>输入</strong>\\n[\\"Solution\\", \\"shuffle\\", \\"reset\\", \\"shuffle\\"]\\n[[[1, 2, 3]], [], [], []]\\n<strong>输出</strong>\\n[null, [3, 1, 2], [1, 2, 3], [1, 3, 2]]\\n\\n<strong>解释</strong>\\nSolution solution = new Solution([1, 2, 3]);\\nsolution.shuffle();    // 打乱数组 [1,2,3] 并返回结果。任何 [1,2,3]的排列返回的概率应该相同。例如，返回 [3, 1, 2]\\nsolution.reset();      // 重设数组到它的初始状态 [1, 2, 3] 。返回 [1, 2, 3]\\nsolution.shuffle();    // 随机返回数组 [1, 2, 3] 打乱后的结果。例如，返回 [1, 3, 2]\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= nums.length <= 200</code></li>\\n\\t<li><code>-10<sup>6</sup> <= nums[i] <= 10<sup>6</sup></code></li>\\n\\t<li><code>nums</code> 中的所有元素都是 <strong>唯一的</strong></li>\\n\\t<li>最多可以调用 <code>5 * 10<sup>4</sup></code> 次 <code>reset</code> 和 <code>shuffle</code></li>\\n</ul>\\n","title":"384. 打乱数组","relatedTags":["数组","数学","随机化"],"difficult":"Middle","lang":["javascript"],"uniqueID":"384","slug":"384-Shuffle-an-Array"}')}}]);