(window.webpackJsonp=window.webpackJsonp||[]).push([[357],{1155:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">arr</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">difference</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> longestSubsequence = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">arr, difference</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> hash={}\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> n <span class=\\"hljs-keyword\\">of</span> arr){\\n    <span class=\\"hljs-keyword\\">let</span> continus=<span class=\\"hljs-number\\">1</span>\\n    <span class=\\"hljs-keyword\\">if</span>(hash[n]!=<span class=\\"hljs-literal\\">null</span>){\\n      continus=<span class=\\"hljs-built_in\\">Math</span>.max(continus,hash[n]+<span class=\\"hljs-number\\">1</span>)\\n    }\\n    <span class=\\"hljs-keyword\\">let</span> t=n+difference\\n    <span class=\\"hljs-keyword\\">if</span>(hash[t]!=<span class=\\"hljs-literal\\">null</span>){\\n      hash[t]=<span class=\\"hljs-built_in\\">Math</span>.max(hash[t],continus)\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      hash[t]=continus\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> max=-<span class=\\"hljs-literal\\">Infinity</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> k <span class=\\"hljs-keyword\\">in</span> hash){\\n    max=<span class=\\"hljs-built_in\\">Math</span>.max(max,hash[k])\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> max\\n};\\n</code></pre>\\n"],"querySlug":"longest-arithmetic-subsequence-of-given-difference","created_at":"2019-10-06","timeArr":[2019,9,6,10,46,59,0],"hasThinking":false,"content":"<p>给你一个整数数组 <code>arr</code> 和一个整数 <code>difference</code>，请你找出并返回 <code>arr</code> 中最长等差子序列的长度，该子序列中相邻元素之间的差等于 <code>difference</code> 。</p>\\n\\n<p><strong>子序列</strong> 是指在不改变其余元素顺序的情况下，通过删除一些元素或不删除任何元素而从 <code>arr</code> 派生出来的序列。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>arr = [1,2,3,4], difference = 1\\n<strong>输出：</strong>4\\n<strong>解释：</strong>最长的等差子序列是 [1,2,3,4]。</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>arr = [1,3,5,7], difference = 1\\n<strong>输出：</strong>1\\n<strong>解释：</strong>最长的等差子序列是任意单个元素。\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>arr = [1,5,7,8,5,3,4,2,1], difference = -2\\n<strong>输出：</strong>4\\n<strong>解释：</strong>最长的等差子序列是 [7,5,3,1]。\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= arr.length <= 10<sup>5</sup></code></li>\\n\\t<li><code>-10<sup>4</sup> <= arr[i], difference <= 10<sup>4</sup></code></li>\\n</ul>\\n","title":"1218. 最长定差子序列","relatedTags":["数组","哈希表","动态规划"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1218","slug":"1218-Longest-Arithmetic-Subsequence-of-Given-Difference"}')}}]);