(window.webpackJsonp=window.webpackJsonp||[]).push([[884],{1682:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">num</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> findComplement = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">num</span>) </span>{\\n  <span class=\\"hljs-keyword\\">return</span> num ^ (<span class=\\"hljs-built_in\\">Math</span>.pow(<span class=\\"hljs-number\\">2</span>,<span class=\\"hljs-built_in\\">Math</span>.floor(<span class=\\"hljs-built_in\\">Math</span>.log2(num))+<span class=\\"hljs-number\\">1</span>)<span class=\\"hljs-number\\">-1</span>)\\n};\\n</code></pre>\\n"],"querySlug":"number-complement","created_at":"2019-04-22","timeArr":[2019,3,22,12,46,19,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<ol>\\n<li>\\n<p>转换成二进制，然后反转<code>0</code>和<code>1</code>。</p>\\n</li>\\n<li>\\n<p>对一个数<code>num</code>，只要求出当前它的位数的最大值<code>n</code>，它的补数就是<code>num ^ n</code>。</p>\\n</li>\\n</ol>\\n<p>例如：<code>num:5</code>，它的位数是<code>3(101)</code>，那么3位的最大值就是<code>7(111)</code>，它的补数就是<code>5^7</code>。</p>\\n","content":"<p>给你一个 <strong>正</strong> 整数 <code>num</code> ，输出它的补数。补数是对该数的二进制表示取反。</p>\\n\\n<p> </p>\\n\\n<ol>\\n</ol>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>num = 5\\n<strong>输出：</strong>2\\n<strong>解释：</strong>5 的二进制表示为 101（没有前导零位），其补数为 010。所以你需要输出 2 。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>num = 1\\n<strong>输出：</strong>0\\n<strong>解释：</strong>1 的二进制表示为 1（没有前导零位），其补数为 0。所以你需要输出 0 。\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li>给定的整数 <code>num</code> 保证在 32 位带符号整数的范围内。</li>\\n\\t<li><code>num >= 1</code></li>\\n\\t<li>你可以假定二进制数不包含前导零位。</li>\\n\\t<li>本题与 1009 <a href=\\"https://leetcode-cn.com/problems/complement-of-base-10-integer/\\">https://leetcode-cn.com/problems/complement-of-base-10-integer/</a> 相同</li>\\n</ul>\\n","title":"476. 数字的补数","relatedTags":["位运算"],"difficult":"Easy","lang":["javascript"],"uniqueID":"476","slug":"476-Number-Complement"}')}}]);