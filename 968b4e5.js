(window.webpackJsonp=window.webpackJsonp||[]).push([[550],{1348:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">n</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">k</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{character}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> findKthBit = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">n, k</span>) </span>{\\n\\n    <span class=\\"hljs-keyword\\">return</span> find(n,k)+<span class=\\"hljs-string\\">\'\'</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">find</span>(<span class=\\"hljs-params\\">level,count</span>)</span>{\\n        <span class=\\"hljs-keyword\\">if</span>(level===<span class=\\"hljs-number\\">1</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>\\n        <span class=\\"hljs-keyword\\">let</span> allLen=<span class=\\"hljs-number\\">1</span>\\n        <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">2</span>;i&lt;=level;i++){\\n            allLen=allLen*<span class=\\"hljs-number\\">2</span>+<span class=\\"hljs-number\\">1</span>\\n        }        \\n\\n        <span class=\\"hljs-keyword\\">let</span> half=<span class=\\"hljs-built_in\\">Math</span>.floor(allLen/<span class=\\"hljs-number\\">2</span>)\\n        <span class=\\"hljs-keyword\\">let</span> mid=<span class=\\"hljs-built_in\\">Math</span>.ceil(allLen/<span class=\\"hljs-number\\">2</span>)\\n        <span class=\\"hljs-keyword\\">if</span>(count===mid)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">1</span>\\n        <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(count&lt;mid)<span class=\\"hljs-keyword\\">return</span> find(level<span class=\\"hljs-number\\">-1</span>,count)\\n        <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">return</span> invert(find(level<span class=\\"hljs-number\\">-1</span>,mid-(count-mid)))\\n    }\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">invert</span>(<span class=\\"hljs-params\\">num</span>)</span>{\\n        <span class=\\"hljs-keyword\\">return</span> num===<span class=\\"hljs-number\\">0</span> ? <span class=\\"hljs-number\\">1</span> : <span class=\\"hljs-number\\">0</span>\\n    }\\n};\\n</code></pre>\\n"],"querySlug":"find-kth-bit-in-nth-binary-string","created_at":"2020-08-09","timeArr":[2020,7,9,12,34,49,0],"hasThinking":false,"content":"<p>给你两个正整数 <code>n</code> 和 <code>k</code>，二进制字符串  <code>S<sub>n</sub></code> 的形成规则如下：</p>\\n\\n<ul>\\n\\t<li><code>S<sub>1</sub> = \\"0\\"</code></li>\\n\\t<li>当 <code>i > 1</code> 时，<code>S<sub>i</sub> = S<sub>i-1</sub> + \\"1\\" + reverse(invert(S<sub>i-1</sub>))</code></li>\\n</ul>\\n\\n<p>其中 <code>+</code> 表示串联操作，<code>reverse(x)</code> 返回反转 <code>x</code> 后得到的字符串，而 <code>invert(x)</code> 则会翻转 x 中的每一位（0 变为 1，而 1 变为 0）。</p>\\n\\n<p>例如，符合上述描述的序列的前 4 个字符串依次是：</p>\\n\\n<ul>\\n\\t<li><code>S<sub>1 </sub>= \\"0\\"</code></li>\\n\\t<li><code>S<sub>2 </sub>= \\"0<strong>1</strong>1\\"</code></li>\\n\\t<li><code>S<sub>3 </sub>= \\"011<strong>1</strong>001\\"</code></li>\\n\\t<li><code>S<sub>4</sub> = \\"0111001<strong>1</strong>0110001\\"</code></li>\\n</ul>\\n\\n<p>请你返回  <code>S<sub>n</sub></code> 的 <strong>第 <code>k</code> 位字符</strong> ，题目数据保证 <code>k</code> 一定在 <code>S<sub>n</sub></code> 长度范围以内。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>n = 3, k = 1\\n<strong>输出：</strong>\\"0\\"\\n<strong>解释：</strong>S<sub>3</sub> 为 \\"<strong>0</strong>111001\\"，其第 1 位为 \\"0\\" 。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>n = 4, k = 11\\n<strong>输出：</strong>\\"1\\"\\n<strong>解释：</strong>S<sub>4</sub> 为 \\"0111001101<strong>1</strong>0001\\"，其第 11 位为 \\"1\\" 。\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>n = 1, k = 1\\n<strong>输出：</strong>\\"0\\"\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>n = 2, k = 3\\n<strong>输出：</strong>\\"1\\"\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= n <= 20</code></li>\\n\\t<li><code>1 <= k <= 2<sup>n</sup> - 1</code></li>\\n</ul>\\n","title":"1545. 找出第 N 个二进制字符串中的第 K 位","relatedTags":["递归","字符串"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1545","slug":"1545-Find-Kth-Bit-in-Nth-Binary-String"}')}}]);