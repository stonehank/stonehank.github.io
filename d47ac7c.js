(window.webpackJsonp=window.webpackJsonp||[]).push([[1165],{1963:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">nums</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">target</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{boolean}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> search = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">nums, target</span>) </span>{\\n    <span class=\\"hljs-keyword\\">let</span> lo=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">let</span> hi=nums.length<span class=\\"hljs-number\\">-1</span>\\n    <span class=\\"hljs-keyword\\">while</span>(lo&lt;=hi){\\n        <span class=\\"hljs-keyword\\">let</span> mid=<span class=\\"hljs-built_in\\">Math</span>.floor((lo+hi)/<span class=\\"hljs-number\\">2</span>)\\n        <span class=\\"hljs-keyword\\">let</span> mV=nums[mid]\\n        <span class=\\"hljs-keyword\\">let</span> lV=nums[lo]\\n        <span class=\\"hljs-keyword\\">let</span> hV=nums[hi]\\n        <span class=\\"hljs-keyword\\">if</span>(mV===target)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n        <span class=\\"hljs-keyword\\">if</span>(lV===mV &amp;&amp; mV===hV){\\n            lo+=<span class=\\"hljs-number\\">1</span>\\n            hi-=<span class=\\"hljs-number\\">1</span>\\n        }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(lV&lt;=mV){\\n            <span class=\\"hljs-keyword\\">if</span>(lV&lt;=target &amp;&amp; target&lt;mV){\\n                hi=mid<span class=\\"hljs-number\\">-1</span>\\n            }<span class=\\"hljs-keyword\\">else</span>{\\n                lo=mid+<span class=\\"hljs-number\\">1</span>\\n            }\\n        }<span class=\\"hljs-keyword\\">else</span>{\\n            <span class=\\"hljs-keyword\\">if</span>(mV&lt;target &amp;&amp; target&lt;=hV){\\n                lo=mid+<span class=\\"hljs-number\\">1</span>\\n            }<span class=\\"hljs-keyword\\">else</span>{\\n                hi=mid<span class=\\"hljs-number\\">-1</span>\\n            }\\n        }\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n};\\n</code></pre>\\n","<pre class=\\"hljs\\"><code><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Solution</span><span class=\\"hljs-params\\">(object)</span>:</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">search</span><span class=\\"hljs-params\\">(self, nums, target)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: bool\\n        \\"\\"\\"</span>\\n        lo,hi=<span class=\\"hljs-number\\">0</span>,len(nums)<span class=\\"hljs-number\\">-1</span>\\n        <span class=\\"hljs-keyword\\">while</span> lo&lt;=hi:\\n            mid=(lo+hi) // <span class=\\"hljs-number\\">2</span>\\n            <span class=\\"hljs-keyword\\">if</span> nums[mid]==target:<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">True</span>\\n            <span class=\\"hljs-keyword\\">if</span> nums[lo]==nums[mid]==nums[hi]:\\n                lo+=<span class=\\"hljs-number\\">1</span>\\n                hi-=<span class=\\"hljs-number\\">1</span>\\n            <span class=\\"hljs-keyword\\">elif</span> nums[lo]&lt;=nums[mid]:\\n                <span class=\\"hljs-keyword\\">if</span> nums[lo]&lt;=target&lt;nums[mid]:\\n                    hi=mid<span class=\\"hljs-number\\">-1</span>\\n                <span class=\\"hljs-keyword\\">else</span>:\\n                    lo=mid+<span class=\\"hljs-number\\">1</span>\\n            <span class=\\"hljs-keyword\\">else</span>:\\n                <span class=\\"hljs-keyword\\">if</span> nums[mid]&lt;target&lt;=nums[hi]:\\n                    lo=mid+<span class=\\"hljs-number\\">1</span>\\n                <span class=\\"hljs-keyword\\">else</span>:\\n                    hi=mid<span class=\\"hljs-number\\">-1</span>\\n        <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">False</span>\\n                \\n        \\n</code></pre>\\n"],"querySlug":"search-in-rotated-sorted-array-ii","hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>参考<code>NO.33</code>，最大的不同点在于这道题在找出旋转点<code>rotateIdx</code>后，还需要检查是否有重复的旋转点；</p>\\n<p>检查重复：</p>\\n<pre class=\\"hljs\\"><code>while(nums[rotateIdx]&gt;=nums[rotateIdx-1]){\\n  rotateIdx=rotateIdx-1\\n}\\n</code></pre>\\n<p>如果有重复的旋转点，需要跳转到第一个旋转点的位置，才能开始二分搜索。</p>\\n","content":"<p>已知存在一个按非降序排列的整数数组 <code>nums</code> ，数组中的值不必互不相同。</p>\\n\\n<p>在传递给函数之前，<code>nums</code> 在预先未知的某个下标 <code>k</code>（<code>0 <= k < nums.length</code>）上进行了 <strong>旋转 </strong>，使数组变为 <code>[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]</code>（下标 <strong>从 0 开始</strong> 计数）。例如， <code>[0,1,2,4,4,4,5,6,6,7]</code> 在下标 <code>5</code> 处经旋转后可能变为 <code>[4,5,6,6,7,0,1,2,4,4]</code> 。</p>\\n\\n<p>给你 <strong>旋转后</strong> 的数组 <code>nums</code> 和一个整数 <code>target</code> ，请你编写一个函数来判断给定的目标值是否存在于数组中。如果 <code>nums</code> 中存在这个目标值 <code>target</code> ，则返回 <code>true</code> ，否则返回 <code>false</code> 。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [2<code>,5,6,0,0,1,2]</code>, target = 0\\n<strong>输出：</strong>true\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [2<code>,5,6,0,0,1,2]</code>, target = 3\\n<strong>输出：</strong>false</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= nums.length <= 5000</code></li>\\n\\t<li><code>-10<sup>4</sup> <= nums[i] <= 10<sup>4</sup></code></li>\\n\\t<li>题目数据保证 <code>nums</code> 在预先未知的某个下标上进行了旋转</li>\\n\\t<li><code>-10<sup>4</sup> <= target <= 10<sup>4</sup></code></li>\\n</ul>\\n\\n<p> </p>\\n\\n<p><strong>进阶：</strong></p>\\n\\n<ul>\\n\\t<li>这是 <a href=\\"https://leetcode-cn.com/problems/search-in-rotated-sorted-array/description/\\">搜索旋转排序数组</a> 的延伸题目，本题中的 <code>nums</code>  可能包含重复元素。</li>\\n\\t<li>这会影响到程序的时间复杂度吗？会有怎样的影响，为什么？</li>\\n</ul>\\n","title":"81. 搜索旋转排序数组 II","relatedTags":["数组","二分查找"],"difficult":"Middle","lang":["javascript","python"],"uniqueID":"81","slug":"81-Search-in-Rotated-Sorted-Array-II"}')}}]);