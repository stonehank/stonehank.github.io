(window.webpackJsonp=window.webpackJsonp||[]).push([[698],{1496:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for singly-linked list.\\n * function ListNode(val) {\\n *     this.val = val;\\n *     this.next = null;\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{ListNode}</span> <span class=\\"hljs-variable\\">head</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{ListNode}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> swapPairs = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">head</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(!head)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">null</span>\\n  <span class=\\"hljs-keyword\\">let</span> root=<span class=\\"hljs-keyword\\">new</span> ListNode(<span class=\\"hljs-literal\\">null</span>)\\n  root.next=head\\n  <span class=\\"hljs-keyword\\">let</span> startNode=root\\n  <span class=\\"hljs-keyword\\">let</span> node=root.next\\n  <span class=\\"hljs-keyword\\">while</span>(node &amp;&amp; node.next){\\n    <span class=\\"hljs-keyword\\">let</span> nxt=node.next\\n    node.next=nxt.next\\n    startNode.next=nxt\\n    nxt.next=node\\n    startNode=node\\n    node=node.next\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> root.next\\n};\\n</code></pre>\\n"],"querySlug":"swap-nodes-in-pairs","created_at":"2019-04-20","timeArr":[2019,3,20,10,42,20,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>假设一组内含有2个节点，定义一个<code>startNode</code>为每一组的前一个节点(方便两两交换)，初始为一个空节点<code>new ListNode(null)</code>。</p>\\n<p>每次检查<code>node</code>和<code>node.next</code>都存在，说明当前组有效的，是不缺少节点的。</p>\\n<p>例如<code>[1,2,3]</code>，初始<code>startNode</code>为额外空节点，第一次检查<code>Node(1)</code>和<code>Node(2)</code>都存在，只需要将两个交换后得到<code>[2,1,3]</code>；</p>\\n<p>接着，更新<code>startNode</code>为<code>Node(2)</code>，第二次检查只有<code>Node(3)</code>存在，当前组只有1个节点，退出循环。</p>\\n","content":"<p>给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。</p>\\n\\n<p><strong>你不能只是单纯的改变节点内部的值</strong>，而是需要实际的进行节点交换。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2020/10/03/swap_ex1.jpg\\" style=\\"width: 422px; height: 222px;\\" />\\n<pre>\\n<strong>输入：</strong>head = [1,2,3,4]\\n<strong>输出：</strong>[2,1,4,3]\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>head = []\\n<strong>输出：</strong>[]\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>head = [1]\\n<strong>输出：</strong>[1]\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li>链表中节点的数目在范围 <code>[0, 100]</code> 内</li>\\n\\t<li><code>0 <= Node.val <= 100</code></li>\\n</ul>\\n\\n<p> </p>\\n\\n<p><strong>进阶：</strong>你能在不修改链表节点值的情况下解决这个问题吗?（也就是说，仅修改节点本身。）</p>\\n","title":"24. 两两交换链表中的节点","relatedTags":["递归","链表"],"difficult":"Middle","lang":["javascript"],"uniqueID":"24","slug":"24-Swap-Nodes-in-Pairs"}')}}]);