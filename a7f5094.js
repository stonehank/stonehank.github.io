(window.webpackJsonp=window.webpackJsonp||[]).push([[1010],{1808:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Solution</span><span class=\\"hljs-params\\">(object)</span>:</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">findLongestChain</span><span class=\\"hljs-params\\">(self, pairs)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type pairs: List[List[int]]\\n        :rtype: int\\n        \\"\\"\\"</span>\\n        n=len(pairs)\\n        pairs.sort(key=<span class=\\"hljs-keyword\\">lambda</span> x:x[<span class=\\"hljs-number\\">0</span>])\\n        <span class=\\"hljs-comment\\"># print pairs</span>\\n        count=<span class=\\"hljs-number\\">1</span>\\n        head=pairs[<span class=\\"hljs-number\\">0</span>][<span class=\\"hljs-number\\">1</span>]\\n        <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(<span class=\\"hljs-number\\">1</span>,n):\\n          <span class=\\"hljs-keyword\\">if</span> pairs[i][<span class=\\"hljs-number\\">0</span>]&gt;head:\\n            count+=<span class=\\"hljs-number\\">1</span>\\n            head=pairs[i][<span class=\\"hljs-number\\">1</span>]\\n          <span class=\\"hljs-keyword\\">elif</span> pairs[i][<span class=\\"hljs-number\\">1</span>]&lt;head:\\n            head=pairs[i][<span class=\\"hljs-number\\">1</span>]\\n            \\n        <span class=\\"hljs-keyword\\">return</span> count\\n</code></pre>\\n"],"querySlug":"maximum-length-of-pair-chain","created_at":"2019-03-06","timeArr":[2019,2,6,10,24,5,0],"hasThinking":false,"content":"<p>给出 <code>n</code> 个数对。 在每一个数对中，第一个数字总是比第二个数字小。</p>\\n\\n<p>现在，我们定义一种跟随关系，当且仅当 <code>b < c</code> 时，数对<code>(c, d)</code> 才可以跟在 <code>(a, b)</code> 后面。我们用这种形式来构造一个数对链。</p>\\n\\n<p>给定一个数对集合，找出能够形成的最长数对链的长度。你不需要用到所有的数对，你可以以任何顺序选择其中的一些数对来构造。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>[[1,2], [2,3], [3,4]]\\n<strong>输出：</strong>2\\n<strong>解释：</strong>最长的数对链是 [1,2] -> [3,4]\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li>给出数对的个数在 <code>[1, 1000]</code> 范围内。</li>\\n</ul>\\n","title":"646. 最长数对链","relatedTags":["贪心","数组","动态规划","排序"],"difficult":"Middle","lang":["python"],"uniqueID":"646","slug":"646-Maximum-Length-of-Pair-Chain"}')}}]);