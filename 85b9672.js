(window.webpackJsonp=window.webpackJsonp||[]).push([[1266],{2064:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">A</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> RLEIterator = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">A</span>) </span>{\\n  <span class=\\"hljs-keyword\\">this</span>.start=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">this</span>.A=A\\n};\\n\\n<span class=\\"hljs-comment\\">/** \\n * @param {number} n\\n * @return {number}\\n */</span>\\nRLEIterator.prototype.next = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">n</span>) </span>{\\n  <span class=\\"hljs-keyword\\">while</span>(<span class=\\"hljs-keyword\\">this</span>.start&lt;<span class=\\"hljs-keyword\\">this</span>.A.length &amp;&amp; n&gt;<span class=\\"hljs-keyword\\">this</span>.A[<span class=\\"hljs-keyword\\">this</span>.start]){\\n    n-=<span class=\\"hljs-keyword\\">this</span>.A[<span class=\\"hljs-keyword\\">this</span>.start]\\n    <span class=\\"hljs-keyword\\">this</span>.start+=<span class=\\"hljs-number\\">2</span>\\n  }\\n  <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-keyword\\">this</span>.start&gt;=<span class=\\"hljs-keyword\\">this</span>.A.length)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">-1</span>\\n  <span class=\\"hljs-keyword\\">this</span>.A[<span class=\\"hljs-keyword\\">this</span>.start]-=n\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-keyword\\">this</span>.A[<span class=\\"hljs-keyword\\">this</span>.start+<span class=\\"hljs-number\\">1</span>]\\n};\\n\\n<span class=\\"hljs-comment\\">/** \\n * Your RLEIterator object will be instantiated and called as such:\\n * var obj = Object.create(RLEIterator).createNew(A)\\n * var param_1 = obj.next(n)\\n */</span>\\n</code></pre>\\n"],"querySlug":"rle-iterator","created_at":"2019-03-16","timeArr":[2019,2,16,17,35,37,0],"hasThinking":false,"content":"<p>编写一个遍历游程编码序列的迭代器。</p>\\n\\n<p>迭代器由 <code>RLEIterator(int[] A)</code> 初始化，其中&nbsp;<code>A</code>&nbsp;是某个序列的游程编码。更具体地，对于所有偶数 <code>i</code>，<code>A[i]</code> 告诉我们在序列中重复非负整数值 <code>A[i + 1]</code> 的次数。</p>\\n\\n<p>迭代器支持一个函数：<code>next(int n)</code>，它耗尽接下来的&nbsp; <code>n</code> 个元素（<code>n &gt;= 1</code>）并返回以这种方式耗去的最后一个元素。如果没有剩余的元素可供耗尽，则&nbsp; <code>next</code>&nbsp;返回&nbsp;<code>-1</code> 。</p>\\n\\n<p>例如，我们以&nbsp;<code>A = [3,8,0,9,2,5]</code>&nbsp;开始，这是序列&nbsp;<code>[8,8,8,5,5]</code>&nbsp;的游程编码。这是因为该序列可以读作 &ldquo;三个八，零个九，两个五&rdquo;。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例：</strong></p>\\n\\n<pre><strong>输入：</strong>[&quot;RLEIterator&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;], [[[3,8,0,9,2,5]],[2],[1],[1],[2]]\\n<strong>输出：</strong>[null,8,8,5,-1]\\n<strong>解释：</strong>\\nRLEIterator 由 RLEIterator([3,8,0,9,2,5]) 初始化。\\n这映射到序列 [8,8,8,5,5]。\\n然后调用 RLEIterator.next 4次。\\n\\n.next(2) 耗去序列的 2 个项，返回 8。现在剩下的序列是 [8, 5, 5]。\\n\\n.next(1) 耗去序列的 1 个项，返回 8。现在剩下的序列是 [5, 5]。\\n\\n.next(1) 耗去序列的 1 个项，返回 5。现在剩下的序列是 [5]。\\n\\n.next(2) 耗去序列的 2 个项，返回 -1。 这是由于第一个被耗去的项是 5，\\n但第二个项并不存在。由于最后一个要耗去的项不存在，我们返回 -1。\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ol>\\n\\t<li><code>0 &lt;= A.length &lt;= 1000</code></li>\\n\\t<li><code>A.length</code>&nbsp;是偶数。</li>\\n\\t<li><code>0 &lt;= A[i] &lt;= 10^9</code></li>\\n\\t<li>每个测试用例最多调用&nbsp;<code>1000</code>&nbsp;次&nbsp;<code>RLEIterator.next(int n)</code>。</li>\\n\\t<li>每次调用&nbsp;<code>RLEIterator.next(int n)</code>&nbsp;都有&nbsp;<code>1 &lt;= n &lt;= 10^9</code>&nbsp;。</li>\\n</ol>\\n","title":"900. RLE 迭代器","relatedTags":["设计","数组","计数","迭代器"],"difficult":"Middle","lang":["javascript"],"uniqueID":"900","slug":"900-RLE-Iterator"}')}}]);