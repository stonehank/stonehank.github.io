(window.webpackJsonp=window.webpackJsonp||[]).push([[246],{1044:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">blocked</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">source</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">target</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{boolean}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> isEscapePossible = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">blocked, source, target</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(blocked.length===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n  <span class=\\"hljs-keyword\\">let</span> m=blocked.length,n=blocked[<span class=\\"hljs-number\\">0</span>].length\\n  <span class=\\"hljs-keyword\\">let</span> used=<span class=\\"hljs-built_in\\">Array</span>(m).fill().map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span>=&gt;</span><span class=\\"hljs-built_in\\">Array</span>(n).fill(<span class=\\"hljs-literal\\">false</span>))\\n  <span class=\\"hljs-keyword\\">let</span> moved=[[<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">0</span>],[<span class=\\"hljs-number\\">1</span>,<span class=\\"hljs-number\\">0</span>],[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">-1</span>],[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">1</span>]]\\n  <span class=\\"hljs-keyword\\">let</span> result=<span class=\\"hljs-literal\\">null</span>\\n  <span class=\\"hljs-keyword\\">let</span> blockedHash={}\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> [x,y] <span class=\\"hljs-keyword\\">of</span> blocked){\\n    blockedHash[x+<span class=\\"hljs-string\\">\' \'</span>+y]=<span class=\\"hljs-literal\\">true</span>\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> r1=connect(source,target),\\n      r2=connect(target,source)\\n  <span class=\\"hljs-comment\\">// console.log(r1,r2)</span>\\n  <span class=\\"hljs-keyword\\">return</span> r1 &amp;&amp; r2\\n\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">connect</span>(<span class=\\"hljs-params\\">point,tar</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> arr=[point],limit=<span class=\\"hljs-number\\">50</span>\\n    <span class=\\"hljs-keyword\\">let</span> hash={}\\n    hash[point[<span class=\\"hljs-number\\">0</span>]+<span class=\\"hljs-string\\">\' \'</span>+point[<span class=\\"hljs-number\\">1</span>]]=<span class=\\"hljs-literal\\">true</span>\\n    <span class=\\"hljs-keyword\\">while</span>(arr.length&gt;<span class=\\"hljs-number\\">0</span>){\\n      limit--\\n      <span class=\\"hljs-keyword\\">let</span> len=arr.length\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;len;i++){\\n        <span class=\\"hljs-keyword\\">let</span> [x,y]=arr.shift()\\n        <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> [dx,dy] <span class=\\"hljs-keyword\\">of</span> moved){\\n          <span class=\\"hljs-keyword\\">let</span> nx=x+dx,ny=y+dy\\n          <span class=\\"hljs-keyword\\">if</span>(nx&lt;<span class=\\"hljs-number\\">0</span> || ny&lt;<span class=\\"hljs-number\\">0</span> || nx&gt;=<span class=\\"hljs-number\\">1e6</span> || ny&gt;=<span class=\\"hljs-number\\">1e6</span>)<span class=\\"hljs-keyword\\">continue</span>\\n          <span class=\\"hljs-keyword\\">if</span>(blockedHash[nx+<span class=\\"hljs-string\\">\' \'</span>+ny])<span class=\\"hljs-keyword\\">continue</span>\\n          <span class=\\"hljs-keyword\\">if</span>(hash[nx+<span class=\\"hljs-string\\">\' \'</span>+ny])<span class=\\"hljs-keyword\\">continue</span>\\n          hash[nx+<span class=\\"hljs-string\\">\' \'</span>+ny]=<span class=\\"hljs-literal\\">true</span>\\n          <span class=\\"hljs-keyword\\">if</span>(limit===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n          <span class=\\"hljs-keyword\\">if</span>(nx===tar[<span class=\\"hljs-number\\">0</span>] &amp;&amp; ny===tar[<span class=\\"hljs-number\\">1</span>])<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n          arr.push([nx,ny])\\n        }\\n      }\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"escape-a-large-maze","created_at":"2019-04-28","timeArr":[2019,3,28,13,18,59,0],"hasThinking":false,"content":"<p>在一个 10<sup>6</sup> x 10<sup>6</sup> 的网格中，每个网格上方格的坐标为 <code>(x, y)</code> 。</p>\\n\\n<p>现在从源方格 <code>source = [s<sub>x</sub>, s<sub>y</sub>]</code> 开始出发，意图赶往目标方格 <code>target = [t<sub>x</sub>, t<sub>y</sub>]</code> 。数组 <code>blocked</code> 是封锁的方格列表，其中每个 <code>blocked[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> 表示坐标为 <code>(x<sub>i</sub>, y<sub>i</sub>)</code> 的方格是禁止通行的。</p>\\n\\n<p>每次移动，都可以走到网格中在四个方向上相邻的方格，只要该方格 <strong>不</strong> 在给出的封锁列表 <code>blocked</code> 上。同时，不允许走出网格。</p>\\n\\n<p>只有在可以通过一系列的移动从源方格 <code>source</code> 到达目标方格 <code>target</code> 时才返回 <code>true</code>。否则，返回 <code>false</code>。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>blocked = [[0,1],[1,0]], source = [0,0], target = [0,2]\\n<strong>输出：</strong>false\\n<strong>解释：</strong>\\n从源方格无法到达目标方格，因为我们无法在网格中移动。\\n无法向北或者向东移动是因为方格禁止通行。\\n无法向南或者向西移动是因为不能走出网格。</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>blocked = [], source = [0,0], target = [999999,999999]\\n<strong>输出：</strong>true\\n<strong>解释：</strong>\\n因为没有方格被封锁，所以一定可以到达目标方格。\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>0 <= blocked.length <= 200</code></li>\\n\\t<li><code>blocked[i].length == 2</code></li>\\n\\t<li><code>0 <= x<sub>i</sub>, y<sub>i</sub> < 10<sup>6</sup></code></li>\\n\\t<li><code>source.length == target.length == 2</code></li>\\n\\t<li><code>0 <= s<sub>x</sub>, s<sub>y</sub>, t<sub>x</sub>, t<sub>y</sub> < 10<sup>6</sup></code></li>\\n\\t<li><code>source != target</code></li>\\n\\t<li>题目数据保证 <code>source</code> 和 <code>target</code> 不在封锁列表内</li>\\n</ul>\\n","title":"1036. 逃离大迷宫","relatedTags":["深度优先搜索","广度优先搜索","数组","哈希表"],"difficult":"Hard","lang":["javascript"],"uniqueID":"1036","slug":"1036-Escape-a-Large-Maze"}')}}]);