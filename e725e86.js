(window.webpackJsonp=window.webpackJsonp||[]).push([[566],{1364:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">points</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> minCostConnectPoints = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">points</span>) </span>{\\n    <span class=\\"hljs-keyword\\">let</span> n=points.length\\n    <span class=\\"hljs-keyword\\">let</span> edges=[]\\n    <span class=\\"hljs-keyword\\">let</span> pq=<span class=\\"hljs-keyword\\">new</span> PriorityQueue(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">a,b</span>)=&gt;</span>a[<span class=\\"hljs-number\\">2</span>]-b[<span class=\\"hljs-number\\">2</span>])\\n    <span class=\\"hljs-keyword\\">let</span> uf=<span class=\\"hljs-built_in\\">Array</span>(n).fill().map(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">e,i</span>)=&gt;</span>i)\\n    <span class=\\"hljs-keyword\\">let</span> cost=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;n;i++){\\n        <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;n;j++){\\n            <span class=\\"hljs-keyword\\">if</span>(i===j)<span class=\\"hljs-keyword\\">continue</span>\\n            <span class=\\"hljs-keyword\\">let</span> obj=[i,j,dis(i,j)]\\n            edges.push(obj)\\n            pq.insert(obj)\\n        }\\n    }\\n    <span class=\\"hljs-comment\\">// console.log(edges)</span>\\n    <span class=\\"hljs-keyword\\">while</span> (!pq.isEmpty()) {\\n        <span class=\\"hljs-keyword\\">let</span> min = pq.pop()\\n        <span class=\\"hljs-keyword\\">let</span> v = min[<span class=\\"hljs-number\\">0</span>], w = min[<span class=\\"hljs-number\\">1</span>]\\n        <span class=\\"hljs-keyword\\">if</span> (connected(v, w)) <span class=\\"hljs-keyword\\">continue</span>\\n        <span class=\\"hljs-comment\\">// console.log(min)</span>\\n        cost += min[<span class=\\"hljs-number\\">2</span>]\\n        union(v, w)\\n    }\\n\\n    <span class=\\"hljs-keyword\\">return</span> cost\\n    \\n    \\n    \\n    \\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">find</span>(<span class=\\"hljs-params\\">i</span>)</span>{\\n      <span class=\\"hljs-keyword\\">if</span>(i!==uf[i]){\\n        uf[i]=find(uf[i])\\n      }\\n      <span class=\\"hljs-keyword\\">return</span> uf[i]\\n    }\\n\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">union</span>(<span class=\\"hljs-params\\">a,b</span>)</span>{\\n      <span class=\\"hljs-keyword\\">let</span> i=find(a),\\n        j=find(b)\\n      <span class=\\"hljs-keyword\\">if</span>(i===j)<span class=\\"hljs-keyword\\">return</span>\\n      uf[i]=j\\n    }\\n\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">connected</span>(<span class=\\"hljs-params\\">a,b</span>)</span>{\\n      <span class=\\"hljs-keyword\\">let</span> i=find(a),\\n        j=find(b)\\n      <span class=\\"hljs-keyword\\">return</span> i===j\\n    }\\n\\n    \\n    \\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">dis</span>(<span class=\\"hljs-params\\">x,y</span>)</span>{\\n        <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-built_in\\">Math</span>.abs(points[x][<span class=\\"hljs-number\\">0</span>]-points[y][<span class=\\"hljs-number\\">0</span>])+<span class=\\"hljs-built_in\\">Math</span>.abs(points[x][<span class=\\"hljs-number\\">1</span>]-points[y][<span class=\\"hljs-number\\">1</span>])\\n    }\\n    \\n};\\n\\n\\n<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">PriorityQueue</span>(<span class=\\"hljs-params\\">compareFunction</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span> (!compareFunction) {\\n    compareFunction = <span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">a, b</span>) =&gt;</span> a - b\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> heap = [<span class=\\"hljs-literal\\">null</span>]\\n\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">swim</span>(<span class=\\"hljs-params\\">idx</span>) </span>{\\n    <span class=\\"hljs-keyword\\">if</span> (idx &lt; <span class=\\"hljs-number\\">2</span>) <span class=\\"hljs-keyword\\">return</span>\\n    <span class=\\"hljs-keyword\\">let</span> k = <span class=\\"hljs-built_in\\">Math</span>.floor(idx / <span class=\\"hljs-number\\">2</span>)\\n    <span class=\\"hljs-keyword\\">if</span> (compareFunction(heap[idx], heap[k]) &lt; <span class=\\"hljs-number\\">0</span>) {\\n      swap(heap, idx, k)\\n      idx = k\\n      swim(idx)\\n    }\\n  }\\n\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">sink</span>(<span class=\\"hljs-params\\">idx</span>) </span>{\\n    <span class=\\"hljs-keyword\\">let</span> k = <span class=\\"hljs-built_in\\">Math</span>.floor(idx * <span class=\\"hljs-number\\">2</span>)\\n    <span class=\\"hljs-keyword\\">if</span> (k &gt;= heap.length) <span class=\\"hljs-keyword\\">return</span>\\n    <span class=\\"hljs-keyword\\">if</span> (k &lt; heap.length &amp;&amp; heap[k + <span class=\\"hljs-number\\">1</span>] &amp;&amp; compareFunction(heap[k + <span class=\\"hljs-number\\">1</span>], heap[k]) &lt; <span class=\\"hljs-number\\">0</span>) k++\\n    <span class=\\"hljs-keyword\\">if</span> (compareFunction(heap[k], heap[idx]) &lt; <span class=\\"hljs-number\\">0</span>) {\\n      swap(heap, idx, k)\\n      idx = k\\n      sink(idx)\\n    }\\n  }\\n\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">swap</span>(<span class=\\"hljs-params\\">arr, i, j</span>) </span>{\\n    <span class=\\"hljs-keyword\\">let</span> temp = arr[i]\\n    arr[i] = arr[j]\\n    arr[j] = temp\\n  }\\n\\n  <span class=\\"hljs-keyword\\">this</span>.insert = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">v</span>) </span>{\\n    heap.push(v)\\n    swim(heap.length - <span class=\\"hljs-number\\">1</span>)\\n  }\\n  <span class=\\"hljs-keyword\\">this</span>.pop = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\"></span>) </span>{\\n    swap(heap, <span class=\\"hljs-number\\">1</span>, heap.length - <span class=\\"hljs-number\\">1</span>)\\n    <span class=\\"hljs-keyword\\">let</span> v = heap.pop()\\n    sink(<span class=\\"hljs-number\\">1</span>)\\n    <span class=\\"hljs-keyword\\">return</span> v\\n  }\\n  <span class=\\"hljs-keyword\\">this</span>.peek = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\"></span>) </span>{\\n    <span class=\\"hljs-keyword\\">return</span> heap[<span class=\\"hljs-number\\">1</span>]\\n  }\\n  <span class=\\"hljs-keyword\\">this</span>.size = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\"></span>) </span>{\\n    <span class=\\"hljs-keyword\\">return</span> heap.length - <span class=\\"hljs-number\\">1</span>\\n  }\\n  <span class=\\"hljs-keyword\\">this</span>.isEmpty = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\"></span>) </span>{\\n    <span class=\\"hljs-keyword\\">return</span> heap.length === <span class=\\"hljs-number\\">1</span>\\n  }\\n}\\n\\n</code></pre>\\n"],"querySlug":"min-cost-to-connect-all-points","created_at":"2020-09-13","timeArr":[2020,8,13,11,53,54,0],"hasThinking":false,"content":"<p>给你一个<code>points</code>&nbsp;数组，表示 2D 平面上的一些点，其中&nbsp;<code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code>&nbsp;。</p>\\n\\n<p>连接点&nbsp;<code>[x<sub>i</sub>, y<sub>i</sub>]</code> 和点&nbsp;<code>[x<sub>j</sub>, y<sub>j</sub>]</code>&nbsp;的费用为它们之间的 <strong>曼哈顿距离</strong>&nbsp;：<code>|x<sub>i</sub> - x<sub>j</sub>| + |y<sub>i</sub> - y<sub>j</sub>|</code>&nbsp;，其中&nbsp;<code>|val|</code>&nbsp;表示&nbsp;<code>val</code>&nbsp;的绝对值。</p>\\n\\n<p>请你返回将所有点连接的最小总费用。只有任意两点之间 <strong>有且仅有</strong>&nbsp;一条简单路径时，才认为所有点都已连接。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<p><img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2020/08/26/d.png\\" style=\\"height:268px; width:214px\\" /></p>\\n\\n<pre>\\n<strong>输入：</strong>points = [[0,0],[2,2],[3,10],[5,2],[7,0]]\\n<strong>输出：</strong>20\\n<strong>解释：\\n</strong><img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2020/08/26/c.png\\" style=\\"height:268px; width:214px\\" />\\n我们可以按照上图所示连接所有点得到最小总费用，总费用为 20 。\\n注意到任意两个点之间只有唯一一条路径互相到达。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>points = [[3,12],[-2,5],[-4,1]]\\n<strong>输出：</strong>18\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>points = [[0,0],[1,1],[1,0],[-1,1]]\\n<strong>输出：</strong>4\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>points = [[-1000000,-1000000],[1000000,1000000]]\\n<strong>输出：</strong>4000000\\n</pre>\\n\\n<p><strong>示例 5：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>points = [[0,0]]\\n<strong>输出：</strong>0\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= points.length &lt;= 1000</code></li>\\n\\t<li><code>-10<sup>6</sup>&nbsp;&lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 10<sup>6</sup></code></li>\\n\\t<li>所有点&nbsp;<code>(x<sub>i</sub>, y<sub>i</sub>)</code>&nbsp;两两不同。</li>\\n</ul>\\n","title":"1584. 连接所有点的最小费用","relatedTags":["并查集","数组","最小生成树"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1584","slug":"1584-Min-Cost-to-Connect-All-Points"}')}}]);