(window.webpackJsonp=window.webpackJsonp||[]).push([[1146],{1944:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">S</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string[]}</span> <span class=\\"hljs-variable\\">words</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> numMatchingSubseq = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">S, words</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> aux=<span class=\\"hljs-built_in\\">Array</span>(<span class=\\"hljs-number\\">26</span>).fill().map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span>=&gt;</span>[])\\n  <span class=\\"hljs-keyword\\">let</span> acode=<span class=\\"hljs-string\\">\'a\'</span>.charCodeAt(<span class=\\"hljs-number\\">0</span>)\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;S.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> code=S.charCodeAt(i)-acode\\n    aux[code].push(i)\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;words.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> nxt=<span class=\\"hljs-number\\">-1</span>\\n    <span class=\\"hljs-keyword\\">let</span> valid=<span class=\\"hljs-literal\\">true</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;words[i].length;j++){\\n      <span class=\\"hljs-keyword\\">let</span> cur=words[i].charCodeAt(j)-acode\\n      <span class=\\"hljs-keyword\\">let</span> len=aux[cur].length\\n      <span class=\\"hljs-keyword\\">if</span>(len===<span class=\\"hljs-number\\">0</span> || aux[cur][len<span class=\\"hljs-number\\">-1</span>]&lt;nxt){\\n        valid=<span class=\\"hljs-literal\\">false</span>\\n        <span class=\\"hljs-keyword\\">break</span>\\n      }\\n      <span class=\\"hljs-keyword\\">let</span> idx=bsEnd(aux[cur],nxt)\\n      nxt=aux[cur][idx]+<span class=\\"hljs-number\\">1</span>\\n    }\\n    <span class=\\"hljs-keyword\\">if</span>(valid)res++\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n    \\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">bsEnd</span>(<span class=\\"hljs-params\\">arr,n</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> lo=<span class=\\"hljs-number\\">0</span>,hi=arr.length<span class=\\"hljs-number\\">-1</span>\\n    <span class=\\"hljs-keyword\\">while</span>(lo&lt;hi){\\n      <span class=\\"hljs-keyword\\">let</span> mid=<span class=\\"hljs-built_in\\">Math</span>.floor((lo+hi)/<span class=\\"hljs-number\\">2</span>)\\n      <span class=\\"hljs-keyword\\">if</span>(arr[mid]&lt;n)lo=mid+<span class=\\"hljs-number\\">1</span>\\n      <span class=\\"hljs-keyword\\">else</span> hi=mid\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> hi\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"number-of-matching-subsequences","created_at":"2019-03-15","timeArr":[2019,2,15,16,13,12,0],"hasThinking":false,"content":"<p>给定字符串 <code>S</code> 和单词字典 <code>words</code>, 求&nbsp;<code>words[i]</code>&nbsp;中是&nbsp;<code>S</code>&nbsp;的子序列的单词个数。</p>\\n\\n<pre>\\n<strong>示例:</strong>\\n<strong>输入:</strong> \\nS = &quot;abcde&quot;\\nwords = [&quot;a&quot;, &quot;bb&quot;, &quot;acd&quot;, &quot;ace&quot;]\\n<strong>输出:</strong> 3\\n<strong>解释:</strong> 有三个是&nbsp;S 的子序列的单词: &quot;a&quot;, &quot;acd&quot;, &quot;ace&quot;。\\n</pre>\\n\\n<p><strong>注意:</strong></p>\\n\\n<ul>\\n\\t<li>所有在<code>words</code>和&nbsp;<code>S</code>&nbsp;里的单词都只由小写字母组成。</li>\\n\\t<li><code>S</code> 的长度在&nbsp;<code>[1, 50000]</code>。</li>\\n\\t<li><code>words</code>&nbsp;的长度在&nbsp;<code>[1, 5000]</code>。</li>\\n\\t<li><code>words[i]</code>的长度在<code>[1, 50]</code>。</li>\\n</ul>\\n","title":"792. 匹配子序列的单词数","relatedTags":["字典树","哈希表","字符串","排序"],"difficult":"Middle","lang":["javascript"],"uniqueID":"792","slug":"792-Number-of-Matching-Subsequences"}')}}]);