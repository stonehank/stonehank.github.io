(window.webpackJsonp=window.webpackJsonp||[]).push([[367],{1165:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">n</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">start</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> circularPermutation = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">n, start</span>) </span>{\\n   <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">compute</span>(<span class=\\"hljs-params\\">n</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(n===<span class=\\"hljs-number\\">1</span>)<span class=\\"hljs-keyword\\">return</span> [<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">1</span>]\\n    <span class=\\"hljs-keyword\\">let</span> arr=compute(n<span class=\\"hljs-number\\">-1</span>)\\n    <span class=\\"hljs-comment\\">// console.log(arr)</span>\\n    <span class=\\"hljs-keyword\\">let</span> newArr=[]\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;arr.length;i++){\\n      newArr.push(<span class=\\"hljs-string\\">\\"0\\"</span>+arr[i])\\n    }\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=arr.length<span class=\\"hljs-number\\">-1</span>;i&gt;=<span class=\\"hljs-number\\">0</span>;i--){\\n      newArr.push(<span class=\\"hljs-string\\">\\"1\\"</span>+arr[i])\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> newArr\\n  }\\n  <span class=\\"hljs-keyword\\">if</span>(n===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span> [<span class=\\"hljs-number\\">0</span>]\\n  <span class=\\"hljs-keyword\\">let</span> num= compute(n).map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">n</span>=&gt;</span><span class=\\"hljs-built_in\\">parseInt</span>(n,<span class=\\"hljs-number\\">2</span>))\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;num.length;i++){\\n    <span class=\\"hljs-keyword\\">if</span>(num[i]===start){\\n      <span class=\\"hljs-keyword\\">return</span> num.slice(i).concat(num.slice(<span class=\\"hljs-number\\">0</span>,i))\\n    }\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"circular-permutation-in-binary-representation","created_at":"2019-10-27","timeArr":[2019,9,27,12,42,39,0],"hasThinking":false,"content":"<p>给你两个整数&nbsp;<code>n</code> 和 <code>start</code>。你的任务是返回任意 <code>(0,1,2,,...,2^n-1)</code> 的排列 <code>p</code>，并且满足：</p>\\n\\n<ul>\\n\\t<li><code>p[0] = start</code></li>\\n\\t<li><code>p[i]</code> 和 <code>p[i+1]</code>&nbsp;的二进制表示形式只有一位不同</li>\\n\\t<li><code>p[0]</code> 和 <code>p[2^n -1]</code>&nbsp;的二进制表示形式也只有一位不同</li>\\n</ul>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>n = 2, start = 3\\n<strong>输出：</strong>[3,2,0,1]\\n<strong>解释：</strong>这个排列的二进制表示是 (11,10,00,01)\\n     所有的相邻元素都有一位是不同的，另一个有效的排列是 [3,1,0,2]\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输出：</strong>n = 3, start = 2\\n<strong>输出：</strong>[2,6,7,5,4,0,1,3]\\n<strong>解释：</strong>这个排列的二进制表示是 (010,110,111,101,100,000,001,011)\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= n &lt;= 16</code></li>\\n\\t<li><code>0 &lt;= start&nbsp;&lt;&nbsp;2^n</code></li>\\n</ul>\\n","title":"1238. 循环码排列","relatedTags":["位运算","数学","回溯"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1238","slug":"1238-Circular-Permutation-in-Binary-Representation"}')}}]);