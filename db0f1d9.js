(window.webpackJsonp=window.webpackJsonp||[]).push([[336],{1134:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string[]}</span> <span class=\\"hljs-variable\\">words</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string[]}</span> <span class=\\"hljs-variable\\">puzzles</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> findNumOfValidWords = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">words, puzzles</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> cp=[]\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">compress</span>(<span class=\\"hljs-params\\">words</span>)</span>{\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> s <span class=\\"hljs-keyword\\">of</span> words){\\n      <span class=\\"hljs-keyword\\">let</span> bit=<span class=\\"hljs-number\\">0</span>\\n      <span class=\\"hljs-keyword\\">let</span> <span class=\\"hljs-keyword\\">set</span>=new Set()\\n      // 构建words集合压缩\\n      for(let i=0;i&lt;s.length;i++){\\n        <span class=\\"hljs-keyword\\">let</span> code=s.charCodeAt(i)<span class=\\"hljs-number\\">-97</span>\\n        <span class=\\"hljs-keyword\\">set</span>.add(code)\\n        bit=bit | (1&lt;&lt;code)\\n      }\\n      if(<span class=\\"hljs-keyword\\">set</span>.size&gt;7)continue\\n      cp.push(bit)\\n    }\\n  }\\n  compress(words)\\n  let res=Array(puzzles.length).fill(0)\\n  for(let i=0;i&lt;puzzles.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> bit=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-comment\\">// 构建puzzles集合压缩</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;puzzles[i].length;j++){\\n      <span class=\\"hljs-keyword\\">let</span> code=puzzles[i].charCodeAt(j)<span class=\\"hljs-number\\">-97</span>\\n      bit=bit|(<span class=\\"hljs-number\\">1</span>&lt;&lt;code)\\n    }\\n    <span class=\\"hljs-keyword\\">let</span> num=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">let</span> firstBit=<span class=\\"hljs-number\\">1</span>&lt;&lt;(puzzles[i].charCodeAt(<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-number\\">-97</span>)\\n    <span class=\\"hljs-comment\\">// 比较集合压缩</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;cp.length;j++){\\n      <span class=\\"hljs-keyword\\">if</span>(((cp[j] &amp; bit)===cp[j]) &amp;&amp; ((firstBit &amp; cp[j])===firstBit)){\\n        num++\\n      }\\n    }\\n    res[i]=num\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"number-of-valid-words-for-each-puzzle","created_at":"2019-09-01","timeArr":[2019,8,1,13,7,16,0],"hasThinking":false,"content":"<p>外国友人仿照中国字谜设计了一个英文版猜字谜小游戏，请你来猜猜看吧。</p>\\n\\n<p>字谜的迷面 <code>puzzle</code> 按字符串形式给出，如果一个单词 <code>word</code> 符合下面两个条件，那么它就可以算作谜底：</p>\\n\\n<ul>\\n\\t<li>单词 <code>word</code> 中包含谜面 <code>puzzle</code> 的第一个字母。</li>\\n\\t<li>单词 <code>word</code> 中的每一个字母都可以在谜面 <code>puzzle</code> 中找到。<br />\\n\\t例如，如果字谜的谜面是 \\"abcdefg\\"，那么可以作为谜底的单词有 \\"faced\\", \\"cabbage\\", 和 \\"baggage\\"；而 \\"beefed\\"（不含字母 \\"a\\"）以及 \\"based\\"（其中的 \\"s\\" 没有出现在谜面中）都不能作为谜底。</li>\\n</ul>\\n\\n<p>返回一个答案数组 <code>answer</code>，数组中的每个元素 <code>answer[i]</code> 是在给出的单词列表 <code>words</code> 中可以作为字谜迷面 <code>puzzles[i]</code> 所对应的谜底的单词数目。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>\\nwords = [\\"aaaa\\",\\"asas\\",\\"able\\",\\"ability\\",\\"actt\\",\\"actor\\",\\"access\\"], \\npuzzles = [\\"aboveyz\\",\\"abrodyz\\",\\"abslute\\",\\"absoryz\\",\\"actresz\\",\\"gaswxyz\\"]\\n<strong>输出：</strong>[1,1,3,2,4,0]\\n<strong>解释：</strong>\\n1 个单词可以作为 \\"aboveyz\\" 的谜底 : \\"aaaa\\" \\n1 个单词可以作为 \\"abrodyz\\" 的谜底 : \\"aaaa\\"\\n3 个单词可以作为 \\"abslute\\" 的谜底 : \\"aaaa\\", \\"asas\\", \\"able\\"\\n2 个单词可以作为 \\"absoryz\\" 的谜底 : \\"aaaa\\", \\"asas\\"\\n4 个单词可以作为 \\"actresz\\" 的谜底 : \\"aaaa\\", \\"asas\\", \\"actt\\", \\"access\\"\\n没有单词可以作为 \\"gaswxyz\\" 的谜底，因为列表中的单词都不含字母 \'g\'。\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= words.length <= 10^5</code></li>\\n\\t<li><code>4 <= words[i].length <= 50</code></li>\\n\\t<li><code>1 <= puzzles.length <= 10^4</code></li>\\n\\t<li><code>puzzles[i].length == 7</code></li>\\n\\t<li><code>words[i][j]</code>, <code>puzzles[i][j]</code> 都是小写英文字母。</li>\\n\\t<li>每个 <code>puzzles[i]</code> 所包含的字符都不重复。</li>\\n</ul>\\n","title":"1178. 猜字谜","relatedTags":["位运算","字典树","数组","哈希表","字符串"],"difficult":"Hard","lang":["javascript"],"uniqueID":"1178","slug":"1178-Number-of-Valid-Words-for-Each-Puzzle"}')}}]);