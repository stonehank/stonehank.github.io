(window.webpackJsonp=window.webpackJsonp||[]).push([[743],{1541:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string[]}</span> <span class=\\"hljs-variable\\">words</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> maxProduct = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">words</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> hash={}\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> word <span class=\\"hljs-keyword\\">of</span> words){\\n    <span class=\\"hljs-keyword\\">let</span> arr=<span class=\\"hljs-built_in\\">Array</span>(<span class=\\"hljs-number\\">26</span>).fill(<span class=\\"hljs-number\\">0</span>)\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;word.length;i++){\\n      <span class=\\"hljs-keyword\\">let</span> code=word.charCodeAt(i)<span class=\\"hljs-number\\">-97</span>\\n      arr[code]++\\n    }\\n    hash[word]=arr\\n  }\\n  <span class=\\"hljs-comment\\">// console.log(hash)</span>\\n  <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;words.length<span class=\\"hljs-number\\">-1</span>;i++){\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=i+<span class=\\"hljs-number\\">1</span>;j&lt;words.length;j++){\\n      <span class=\\"hljs-keyword\\">let</span> valid=<span class=\\"hljs-literal\\">true</span>\\n      <span class=\\"hljs-keyword\\">let</span> hashI=hash[words[i]],\\n          hashJ=hash[words[j]]\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> k=<span class=\\"hljs-number\\">0</span>;k&lt;<span class=\\"hljs-number\\">26</span>;k++){\\n        <span class=\\"hljs-keyword\\">if</span>(hashI[k]&gt;<span class=\\"hljs-number\\">0</span> &amp;&amp; hashJ[k]&gt;<span class=\\"hljs-number\\">0</span>){\\n\\n          valid=<span class=\\"hljs-literal\\">false</span>\\n          <span class=\\"hljs-keyword\\">break</span>\\n\\n        }\\n      }\\n      <span class=\\"hljs-comment\\">// console.log(i,j,valid)</span>\\n      <span class=\\"hljs-keyword\\">if</span>(valid)res=<span class=\\"hljs-built_in\\">Math</span>.max(res,words[i].length*words[j].length)\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"maximum-product-of-word-lengths","created_at":"2019-04-21","timeArr":[2019,3,21,14,16,21,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>首先对<code>words</code>中每一个单词记录它内部出现过的单词，这个记录可以用数组<code>Array(26)</code>，也可以用二进制表示，</p>\\n<p>例如：<code>abcad</code>可以表示为<code>111100000...</code>26位，说明前4个字母都存在。</p>\\n<p>接着双重遍历<code>words</code>，分别检查<code>i</code>和<code>j</code>索引相对的单词是否有相同的字母。</p>\\n<p>这里数组的话就遍历检查，二进制就可以只解<code>bit[i] &amp; bit[j]===0</code>。</p>\\n<p>检查通过的筛选长度最大乘积。</p>\\n","content":"<p>给定一个字符串数组 <code>words</code>，找到 <code>length(word[i]) * length(word[j])</code> 的最大值，并且这两个单词不含有公共字母。你可以认为每个单词只包含小写字母。如果不存在这样的两个单词，返回 0。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1:</strong></p>\\n\\n<pre>\\n<strong>输入:</strong> <code>[\\"abcw\\",\\"baz\\",\\"foo\\",\\"bar\\",\\"xtfn\\",\\"abcdef\\"]</code>\\n<strong>输出: </strong><code>16 \\n<strong>解释:</strong> 这两个单词为<strong> </strong></code><code>\\"abcw\\", \\"xtfn\\"</code>。</pre>\\n\\n<p><strong>示例 2:</strong></p>\\n\\n<pre>\\n<strong>输入:</strong> <code>[\\"a\\",\\"ab\\",\\"abc\\",\\"d\\",\\"cd\\",\\"bcd\\",\\"abcd\\"]</code>\\n<strong>输出: </strong><code>4 \\n<strong>解释: </strong></code>这两个单词为 <code>\\"ab\\", \\"cd\\"</code>。</pre>\\n\\n<p><strong>示例 3:</strong></p>\\n\\n<pre>\\n<strong>输入:</strong> <code>[\\"a\\",\\"aa\\",\\"aaa\\",\\"aaaa\\"]</code>\\n<strong>输出: </strong><code>0 \\n<strong>解释: </strong>不存在这样的两个单词。</code>\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>2 <= words.length <= 1000</code></li>\\n\\t<li><code>1 <= words[i].length <= 1000</code></li>\\n\\t<li><code>words[i]</code> 仅包含小写字母</li>\\n</ul>\\n","title":"318. 最大单词长度乘积","relatedTags":["位运算","数组","字符串"],"difficult":"Middle","lang":["javascript"],"uniqueID":"318","slug":"318-Maximum-Product-of-Word-Lengths"}')}}]);