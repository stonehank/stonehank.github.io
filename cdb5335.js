(window.webpackJsonp=window.webpackJsonp||[]).push([[891],{1689:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">S</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">K</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{string}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> licenseKeyFormatting = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">S, K</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> validS=<span class=\\"hljs-string\\">\'\'</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> s <span class=\\"hljs-keyword\\">of</span> S.toUpperCase()){\\n    <span class=\\"hljs-keyword\\">if</span>(s!==<span class=\\"hljs-string\\">\'-\'</span>){\\n      validS+=s\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> first=validS.length % K\\n  <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-string\\">\'\'</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;first;i++){\\n    res+=validS[i]\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> i=first\\n  <span class=\\"hljs-keyword\\">while</span>(i&lt;validS.length){\\n    <span class=\\"hljs-keyword\\">if</span>(res!==<span class=\\"hljs-string\\">\'\'</span>)res+=<span class=\\"hljs-string\\">\'-\'</span>\\n    <span class=\\"hljs-keyword\\">let</span> end=i+K\\n    <span class=\\"hljs-keyword\\">while</span>(i&lt;end){\\n      res+=validS[i++]\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"license-key-formatting","created_at":"2019-04-29","timeArr":[2019,3,29,16,9,13,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>先将<code>S</code>转换为大写<code>uS</code>，接着<strong>倒序遍历</strong>，每隔<code>K</code>个加一个破折号。</p>\\n","content":"<p>有一个密钥字符串 S ，只包含字母，数字以及 &#39;-&#39;（破折号）。其中， N 个 &#39;-&#39; 将字符串分成了 N+1 组。</p>\\n\\n<p>给你一个数字 K，请你重新格式化字符串，使每个分组恰好包含 K 个字符。特别地，第一个分组包含的字符个数必须小于等于 K，但至少要包含 1 个字符。两个分组之间需要用 &#39;-&#39;（破折号）隔开，并且将所有的小写字母转换为大写字母。</p>\\n\\n<p>给定非空字符串 S 和数字 K，按照上面描述的规则进行格式化。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>S = &quot;5F3Z-2e-9-w&quot;, K = 4\\n<strong>输出：</strong>&quot;5F3Z-2E9W&quot;\\n<strong>解释：</strong>字符串 S 被分成了两个部分，每部分 4 个字符；\\n&nbsp;    注意，两个额外的破折号需要删掉。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>S = &quot;2-5g-3-J&quot;, K = 2\\n<strong>输出：</strong>&quot;2-5G-3J&quot;\\n<strong>解释：</strong>字符串 S 被分成了 3 个部分，按照前面的规则描述，第一部分的字符可以少于给定的数量，其余部分皆为 2 个字符。\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示:</strong></p>\\n\\n<ol>\\n\\t<li>S 的长度可能很长，请按需分配大小。K 为正整数。</li>\\n\\t<li>S 只包含字母数字（a-z，A-Z，0-9）以及破折号&#39;-&#39;</li>\\n\\t<li>S 非空</li>\\n</ol>\\n\\n<p>&nbsp;</p>\\n","title":"482. 密钥格式化","relatedTags":["字符串"],"difficult":"Easy","lang":["javascript"],"uniqueID":"482","slug":"482-License-Key-Formatting"}')}}]);