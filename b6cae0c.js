(window.webpackJsonp=window.webpackJsonp||[]).push([[697],{1495:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">nums</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">k</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> maxSlidingWindow = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">nums, k</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> res=[],stack=[],start=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;nums.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> cur=nums[i]\\n    <span class=\\"hljs-keyword\\">while</span>(stack.length&gt;<span class=\\"hljs-number\\">0</span> &amp;&amp; i-stack[<span class=\\"hljs-number\\">0</span>]===k){\\n      stack.shift()\\n    }\\n    <span class=\\"hljs-keyword\\">while</span>(stack.length&gt;<span class=\\"hljs-number\\">0</span> &amp;&amp; nums[stack[stack.length<span class=\\"hljs-number\\">-1</span>]]&lt;=nums[i]){\\n      stack.pop()\\n    }\\n    stack.push(i)\\n    <span class=\\"hljs-keyword\\">if</span>(i-start+<span class=\\"hljs-number\\">1</span>===k){\\n      start++\\n      res.push(nums[stack[<span class=\\"hljs-number\\">0</span>]])\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"sliding-window-maximum","created_at":"2019-04-22","timeArr":[2019,3,22,16,49,51,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>最直观的思路是不断求解当前窗口的最大值，时间复杂度是<code>O(N*k)</code>。</p>\\n<p><code>O(N)</code>的方法：</p>\\n<p>定义一个单调递减的序列<code>stack</code>，内部保存递减序列的索引，</p>\\n<p>如果当前<code>nums[i]&gt;=nums[stack[stack.length-1]]</code>，说明当前<code>nums[i]</code>更大，需要往前移动，因此<code>stack.pop()</code>；</p>\\n<p>单调递减的特性保证<code>stack[0]</code>是当前滑动范围的最大值，但是题目有<code>k</code>的限制，因此如果发现当前序列的跨度<code>i-stack[0]===k</code>了，\\n那么序列第一个范围最大值就无效了，需要<code>stack.shift()</code>。</p>\\n<p>每次遍历的时候，检查当前是否一个完整的窗口，如果是，将<code>nums[stack[0]]</code>这个当前范围最大值添加到结果。</p>\\n","content":"<p>给你一个整数数组 <code>nums</code>，有一个大小为 <code>k</code><em> </em>的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 <code>k</code> 个数字。滑动窗口每次只向右移动一位。</p>\\n\\n<p>返回滑动窗口中的最大值。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<b>输入：</b>nums = [1,3,-1,-3,5,3,6,7], k = 3\\n<b>输出：</b>[3,3,5,5,6,7]\\n<b>解释：</b>\\n滑动窗口的位置                最大值\\n---------------               -----\\n[1  3  -1] -3  5  3  6  7       <strong>3</strong>\\n 1 [3  -1  -3] 5  3  6  7       <strong>3</strong>\\n 1  3 [-1  -3  5] 3  6  7      <strong> 5</strong>\\n 1  3  -1 [-3  5  3] 6  7       <strong>5</strong>\\n 1  3  -1  -3 [5  3  6] 7       <strong>6</strong>\\n 1  3  -1  -3  5 [3  6  7]      <strong>7</strong>\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<b>输入：</b>nums = [1], k = 1\\n<b>输出：</b>[1]\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<b>输入：</b>nums = [1,-1], k = 1\\n<b>输出：</b>[1,-1]\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre>\\n<b>输入：</b>nums = [9,11], k = 2\\n<b>输出：</b>[11]\\n</pre>\\n\\n<p><strong>示例 5：</strong></p>\\n\\n<pre>\\n<b>输入：</b>nums = [4,-2], k = 2\\n<b>输出：</b>[4]</pre>\\n\\n<p> </p>\\n\\n<p><b>提示：</b></p>\\n\\n<ul>\\n\\t<li><code>1 <= nums.length <= 10<sup>5</sup></code></li>\\n\\t<li><code>-10<sup>4</sup> <= nums[i] <= 10<sup>4</sup></code></li>\\n\\t<li><code>1 <= k <= nums.length</code></li>\\n</ul>\\n","title":"239. 滑动窗口最大值","relatedTags":["队列","数组","滑动窗口","单调队列","堆（优先队列）"],"difficult":"Hard","lang":["javascript"],"uniqueID":"239","slug":"239-Sliding-Window-Maximum"}')}}]);