(window.webpackJsonp=window.webpackJsonp||[]).push([[483],{1281:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">s</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">k</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> numberOfArrays = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">s, k</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> MOD=<span class=\\"hljs-number\\">1e9</span>+<span class=\\"hljs-number\\">7</span>\\n  <span class=\\"hljs-keyword\\">let</span> dp=<span class=\\"hljs-built_in\\">Array</span>(s.length).fill(<span class=\\"hljs-number\\">0</span>)\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=dp.length<span class=\\"hljs-number\\">-1</span>;i&gt;=<span class=\\"hljs-number\\">0</span>;i--){\\n    <span class=\\"hljs-keyword\\">if</span>(s[i]===<span class=\\"hljs-string\\">\'0\'</span>)<span class=\\"hljs-keyword\\">continue</span>\\n    <span class=\\"hljs-keyword\\">let</span> num=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=i;j&lt;dp.length;j++){\\n      num=num*<span class=\\"hljs-number\\">10</span>+ <span class=\\"hljs-built_in\\">Number</span>(s[j])\\n      <span class=\\"hljs-keyword\\">if</span>(num&gt;k)<span class=\\"hljs-keyword\\">break</span>\\n      <span class=\\"hljs-keyword\\">if</span>(j===dp.length<span class=\\"hljs-number\\">-1</span>)dp[i]=(dp[i]+<span class=\\"hljs-number\\">1</span>) % MOD\\n      <span class=\\"hljs-keyword\\">else</span> dp[i]=(dp[i]+dp[j+<span class=\\"hljs-number\\">1</span>]) % MOD\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> dp[<span class=\\"hljs-number\\">0</span>]\\n  \\n  \\n  \\n    <span class=\\"hljs-comment\\">// let hash={}</span>\\n    <span class=\\"hljs-comment\\">// let MOD=1e9+7</span>\\n    <span class=\\"hljs-comment\\">// function dfs(str,idx){</span>\\n    <span class=\\"hljs-comment\\">//   if(idx&gt;=str.length)return 1</span>\\n    <span class=\\"hljs-comment\\">//   if(str[idx]===\'0\')return 0</span>\\n    <span class=\\"hljs-comment\\">//   if(hash[idx]!=null)return hash[idx]</span>\\n    <span class=\\"hljs-comment\\">//   let num=0</span>\\n    <span class=\\"hljs-comment\\">//   let count=0</span>\\n    <span class=\\"hljs-comment\\">//   for(let i=idx;i&lt;str.length;i++){</span>\\n    <span class=\\"hljs-comment\\">//     num=num * 10 + Number(str[i])</span>\\n    <span class=\\"hljs-comment\\">//     if(num&gt;k)break</span>\\n    <span class=\\"hljs-comment\\">//     count+=dfs(str,i+1) % MOD</span>\\n    <span class=\\"hljs-comment\\">//   }</span>\\n    <span class=\\"hljs-comment\\">//   let ans=count % MOD</span>\\n    <span class=\\"hljs-comment\\">//   hash[idx]=ans</span>\\n    <span class=\\"hljs-comment\\">//   return ans</span>\\n    <span class=\\"hljs-comment\\">// }</span>\\n    <span class=\\"hljs-comment\\">// return dfs(s,0)</span>\\n};\\n</code></pre>\\n"],"querySlug":"restore-the-array","created_at":"2020-04-19","timeArr":[2020,3,19,0,38,39,0],"hasThinking":false,"content":"<p>某个程序本来应该输出一个整数数组。但是这个程序忘记输出空格了以致输出了一个数字字符串，我们所知道的信息只有：数组中所有整数都在 <code>[1, k]</code>&nbsp;之间，且数组中的数字都没有前导 0 。</p>\\n\\n<p>给你字符串&nbsp;<code>s</code>&nbsp;和整数&nbsp;<code>k</code>&nbsp;。可能会有多种不同的数组恢复结果。</p>\\n\\n<p>按照上述程序，请你返回所有可能输出字符串&nbsp;<code>s</code>&nbsp;的数组方案数。</p>\\n\\n<p>由于数组方案数可能会很大，请你返回它对&nbsp;<code>10^9 + 7</code>&nbsp;<strong>取余</strong>&nbsp;后的结果。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>s = &quot;1000&quot;, k = 10000\\n<strong>输出：</strong>1\\n<strong>解释：</strong>唯一一种可能的数组方案是 [1000]\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>s = &quot;1000&quot;, k = 10\\n<strong>输出：</strong>0\\n<strong>解释：</strong>不存在任何数组方案满足所有整数都 &gt;= 1 且 &lt;= 10 同时输出结果为 s 。\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>s = &quot;1317&quot;, k = 2000\\n<strong>输出：</strong>8\\n<strong>解释：</strong>可行的数组方案为 [1317]，[131,7]，[13,17]，[1,317]，[13,1,7]，[1,31,7]，[1,3,17]，[1,3,1,7]\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre><strong>输入：</strong>s = &quot;2020&quot;, k = 30\\n<strong>输出：</strong>1\\n<strong>解释：</strong>唯一可能的数组方案是 [20,20] 。 [2020] 不是可行的数组方案，原因是 2020 &gt; 30 。 [2,020] 也不是可行的数组方案，因为 020 含有前导 0 。\\n</pre>\\n\\n<p><strong>示例 5：</strong></p>\\n\\n<pre><strong>输入：</strong>s = &quot;1234567890&quot;, k = 90\\n<strong>输出：</strong>34\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= s.length &lt;= 10^5</code>.</li>\\n\\t<li><code>s</code>&nbsp;只包含数字且不包含前导 0 。</li>\\n\\t<li><code>1 &lt;= k &lt;= 10^9</code>.</li>\\n</ul>\\n","title":"1416. 恢复数组","relatedTags":["字符串","动态规划"],"difficult":"Hard","lang":["javascript"],"uniqueID":"1416","slug":"1416-Restore-The-Array"}')}}]);