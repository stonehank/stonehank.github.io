(window.webpackJsonp=window.webpackJsonp||[]).push([[1117],{1915:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">S</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> partitionLabels = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">S</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> lastIdx={}\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;S.length;i++){\\n    lastIdx[S[i]]=i\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> res=[],curLen=<span class=\\"hljs-number\\">0</span>,lastR=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;S.length;i++){\\n    curLen=<span class=\\"hljs-built_in\\">Math</span>.max(lastIdx[S[i]],curLen)\\n    <span class=\\"hljs-keyword\\">if</span>(i===curLen){\\n      res.push(curLen-lastR+<span class=\\"hljs-number\\">1</span>)\\n      lastR=curLen+<span class=\\"hljs-number\\">1</span>\\n      <span class=\\"hljs-comment\\">// curLen=0</span>\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"partition-labels","created_at":"2019-04-12","timeArr":[2019,3,12,0,12,26,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>首先找到每一个<code>S[i]</code>的最后的位置，存放到一个<code>hash</code>中。</p>\\n<p>再次遍历<code>S</code>，维护一个变量<code>curLen</code>记录当前最少要到达哪一个索引(每种字母只能出现在一段内)，\\n如果<code>i===curLen</code>，说明当前<code>i</code>之前的所有字母，后面都不会存在了，达到了要求，记录当前的长度。</p>\\n","content":"<p>字符串 <code>S</code> 由小写字母组成。我们要把这个字符串划分为尽可能多的片段，同一字母最多出现在一个片段中。返回一个表示每个字符串片段的长度的列表。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>S = \\"ababcbacadefegdehijhklij\\"\\n<strong>输出：</strong>[9,7,8]\\n<strong>解释：</strong>\\n划分结果为 \\"ababcbaca\\", \\"defegde\\", \\"hijhklij\\"。\\n每个字母最多出现在一个片段中。\\n像 \\"ababcbacadefegde\\", \\"hijhklij\\" 的划分是错误的，因为划分的片段数较少。\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>S</code>的长度在<code>[1, 500]</code>之间。</li>\\n\\t<li><code>S</code>只包含小写字母 <code>\'a\'</code> 到 <code>\'z\'</code> 。</li>\\n</ul>\\n","title":"763. 划分字母区间","relatedTags":["贪心","哈希表","双指针","字符串"],"difficult":"Middle","lang":["javascript"],"uniqueID":"763","slug":"763-Partition-Labels"}')}}]);