(window.webpackJsonp=window.webpackJsonp||[]).push([[1080],{1878:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Solution</span><span class=\\"hljs-params\\">(object)</span>:</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">minDistance</span><span class=\\"hljs-params\\">(self, word1, word2)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type word1: str\\n        :type word2: str\\n        :rtype: int\\n        \\"\\"\\"</span>\\n        r=len(word1)\\n        c=len(word2)\\n        dp=[[<span class=\\"hljs-number\\">0</span>]*(c+<span class=\\"hljs-number\\">1</span>) <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(r+<span class=\\"hljs-number\\">1</span>)]\\n        <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(c+<span class=\\"hljs-number\\">1</span>):\\n          dp[<span class=\\"hljs-number\\">0</span>][i]=i\\n        <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(r+<span class=\\"hljs-number\\">1</span>):\\n          dp[i][<span class=\\"hljs-number\\">0</span>]=i\\n        <span class=\\"hljs-comment\\"># print dp</span>\\n        <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(<span class=\\"hljs-number\\">1</span>,r+<span class=\\"hljs-number\\">1</span>):\\n          <span class=\\"hljs-keyword\\">for</span> j <span class=\\"hljs-keyword\\">in</span> range(<span class=\\"hljs-number\\">1</span>,c+<span class=\\"hljs-number\\">1</span>):\\n            <span class=\\"hljs-keyword\\">if</span> word1[i<span class=\\"hljs-number\\">-1</span>]==word2[j<span class=\\"hljs-number\\">-1</span>]:\\n              dp[i][j]=dp[i<span class=\\"hljs-number\\">-1</span>][j<span class=\\"hljs-number\\">-1</span>]\\n            <span class=\\"hljs-keyword\\">else</span>:\\n              dp[i][j]=min(dp[i<span class=\\"hljs-number\\">-1</span>][j<span class=\\"hljs-number\\">-1</span>],dp[i<span class=\\"hljs-number\\">-1</span>][j],dp[i][j<span class=\\"hljs-number\\">-1</span>])+<span class=\\"hljs-number\\">1</span>\\n        <span class=\\"hljs-keyword\\">return</span> dp[r][c]\\n</code></pre>\\n"],"querySlug":"edit-distance","created_at":"2019-02-28","timeArr":[2019,1,28,11,2,50,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p><code>DP</code>，定义<code>dp[i][j]</code>为<code>word1[0,i)</code>和<code>word2[0,j)</code>的最小编辑距离。</p>\\n<p>为了比较<code>dp[i][j]</code>，如果当前<code>i</code>和<code>j</code>对应的字母相等，那么<code>dp[i][j]=dp[i-1][j-1]</code>；</p>\\n<p>如果不相等，则需要考虑以下3种情况：</p>\\n<ul>\\n<li>替换</li>\\n</ul>\\n<p>替换当前字母，说明当前<code>i</code>和<code>j</code>对应的字母替换后能相等，只需要在<code>dp[i-1][j-1]</code>的基础上增加一次操作，转移方程为<code>dp[i][j]=dp[i-1][j-1]+1</code>。</p>\\n<ul>\\n<li>删除</li>\\n</ul>\\n<p>删除当前<code>word1[i]</code>，需要比较的是<code>word1[0,i-1)</code>和<code>word2[0,j)</code>，也就是说要在<code>dp[i-1][j]</code>的基础上增加一次操作，转义方程<code>dp[i][j]=dp[i-1][j]+1</code>。</p>\\n<ul>\\n<li>增加</li>\\n</ul>\\n<p>增加当前<code>word1[i]</code>，说明增加的字母一定与<code>j</code>对应的字母相等，需要比较的是<code>word1[0,i)</code>和<code>word2[0,j-1)</code>，转义方程为<code>dp[i][j]=dp[i][j-1]+1</code></p>\\n","content":"<p>给你两个单词 <code>word1</code> 和 <code>word2</code>，请你计算出将 <code>word1</code> 转换成 <code>word2</code><em> </em>所使用的最少操作数 。</p>\\n\\n<p>你可以对一个单词进行如下三种操作：</p>\\n\\n<ul>\\n\\t<li>插入一个字符</li>\\n\\t<li>删除一个字符</li>\\n\\t<li>替换一个字符</li>\\n</ul>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>word1 = \\"horse\\", word2 = \\"ros\\"\\n<strong>输出：</strong>3\\n<strong>解释：</strong>\\nhorse -> rorse (将 \'h\' 替换为 \'r\')\\nrorse -> rose (删除 \'r\')\\nrose -> ros (删除 \'e\')\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>word1 = \\"intention\\", word2 = \\"execution\\"\\n<strong>输出：</strong>5\\n<strong>解释：</strong>\\nintention -> inention (删除 \'t\')\\ninention -> enention (将 \'i\' 替换为 \'e\')\\nenention -> exention (将 \'n\' 替换为 \'x\')\\nexention -> exection (将 \'n\' 替换为 \'c\')\\nexection -> execution (插入 \'u\')\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>0 <= word1.length, word2.length <= 500</code></li>\\n\\t<li><code>word1</code> 和 <code>word2</code> 由小写英文字母组成</li>\\n</ul>\\n","title":"72. 编辑距离","relatedTags":["字符串","动态规划"],"difficult":"Hard","lang":["python"],"uniqueID":"72","slug":"72-Edit-Distance"}')}}]);