(window.webpackJsonp=window.webpackJsonp||[]).push([[1106],{1904:function(o){o.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">licensePlate</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string[]}</span> <span class=\\"hljs-variable\\">words</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{string}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> shortestCompletingWord = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">licensePlate, words</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> hash=<span class=\\"hljs-built_in\\">Array</span>(<span class=\\"hljs-number\\">26</span>).fill(<span class=\\"hljs-number\\">0</span>)\\n  <span class=\\"hljs-keyword\\">let</span> kind=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">let</span> lowerLicense=licensePlate.toLowerCase()\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;lowerLicense.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> cur=lowerLicense[i]\\n    <span class=\\"hljs-keyword\\">if</span>(!<span class=\\"hljs-regexp\\">/[a-z]/</span>.test(cur))<span class=\\"hljs-keyword\\">continue</span>\\n    <span class=\\"hljs-keyword\\">let</span> code=cur.charCodeAt(<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-number\\">-97</span>\\n    <span class=\\"hljs-keyword\\">if</span>(hash[code]===<span class=\\"hljs-number\\">0</span>)kind++\\n    hash[code]++\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> minLen=<span class=\\"hljs-literal\\">Infinity</span>,res=<span class=\\"hljs-literal\\">null</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;words.length;i++){\\n    <span class=\\"hljs-keyword\\">if</span>(words[i]&gt;=minLen)<span class=\\"hljs-keyword\\">continue</span>\\n    <span class=\\"hljs-keyword\\">let</span> k=kind,memo=<span class=\\"hljs-built_in\\">Array</span>(<span class=\\"hljs-number\\">26</span>).fill(<span class=\\"hljs-number\\">0</span>)\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;words[i].length;j++){\\n      <span class=\\"hljs-keyword\\">let</span> code=words[i].charCodeAt(j)<span class=\\"hljs-number\\">-97</span>\\n      memo[code]++\\n      <span class=\\"hljs-keyword\\">if</span>(memo[code]===hash[code])k--\\n    }\\n    <span class=\\"hljs-keyword\\">if</span>(k===<span class=\\"hljs-number\\">0</span>){\\n      <span class=\\"hljs-keyword\\">if</span>(words[i].length&lt;minLen){\\n        minLen=words[i].length\\n        res=words[i]\\n      }\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"shortest-completing-word","created_at":"2019-04-06","timeArr":[2019,3,6,22,18,11,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>首先对<code>licensePlate</code>全部转换为小写，并且构建<code>hash</code>，并且记录出现字母的种类数<code>k</code>。</p>\\n<p>接着遍历<code>words[i]</code>，每次遍历构建一个临时<code>memo</code>，如果存在<code>memo[code]===hash[code]</code>，说明存在这个字母的数量，<code>k--</code>；</p>\\n<p>每次遍历，如果发现<code>k===0</code>，说明满足要求，可以判断当前单词是否更短。</p>\\n","content":"<p>给定一个字符串牌照 <code>licensePlate</code> 和一个字符串数组 <code>words</code> ，请你找出并返回 <code>words</code> 中的 <strong>最短补全词</strong> 。</p>\\n\\n<p>如果单词列表（<code>words</code>）中的一个单词包含牌照（<code>licensePlate</code>）中所有的字母，那么我们称之为 <strong>补全词</strong> 。在所有完整词中，最短的单词我们称之为 <strong>最短补全词</strong> 。</p>\\n\\n<p>单词在匹配牌照中的字母时要：</p>\\n\\n<ul>\\n\\t<li>忽略牌照中的数字和空格。</li>\\n\\t<li>不区分大小写，比如牌照中的&nbsp;<code>&quot;P&quot;</code>&nbsp;依然可以匹配单词中的&nbsp;<code>&quot;p&quot;</code>&nbsp;字母。</li>\\n\\t<li>如果某个字母在牌照中出现不止一次，那么该字母在补全词中的出现次数应当一致或者更多。</li>\\n</ul>\\n\\n<p>例如：<code>licensePlate</code><code> = &quot;aBc 12c&quot;</code>，那么它由字母 <code>&#39;a&#39;</code>、<code>&#39;b&#39;</code> （忽略大写）和两个 <code>&#39;c&#39;</code> 。可能的 <strong>补全词</strong> 是 <code>&quot;abccdef&quot;</code>、<code>&quot;caaacab&quot;</code> 以及 <code>&quot;cbca&quot;</code> 。</p>\\n\\n<p>题目数据保证一定存在一个最短补全词。当有多个单词都符合最短补全词的匹配条件时取单词列表中最靠前的一个。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>licensePlate = &quot;1s3 PSt&quot;, words = [&quot;step&quot;, &quot;steps&quot;, &quot;stripe&quot;, &quot;stepple&quot;]\\n<strong>输出：</strong>&quot;steps&quot;\\n<strong>说明：</strong>最短补全词应该包括 &quot;s&quot;、&quot;p&quot;、&quot;s&quot; 以及 &quot;t&quot;。在匹配过程中我们忽略牌照中的大小写。\\n&quot;step&quot; 包含 &quot;t&quot;、&quot;p&quot;，但只包含一个 &quot;s&quot;，所以它不符合条件。\\n&quot;steps&quot; 包含 &quot;t&quot;、&quot;p&quot; 和两个 &quot;s&quot;。\\n&quot;stripe&quot; 缺一个 &quot;s&quot;。\\n&quot;stepple&quot; 缺一个 &quot;s&quot;。\\n因此，&quot;steps&quot; 是唯一一个包含所有字母的单词，也是本样例的答案。</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>licensePlate = &quot;1s3 456&quot;, words = [&quot;looks&quot;, &quot;pest&quot;, &quot;stew&quot;, &quot;show&quot;]\\n<strong>输出：</strong>&quot;pest&quot;\\n<strong>说明：</strong>存在 3 个包含字母 &quot;s&quot; 且有着最短长度的补全词，&quot;pest&quot;、&quot;stew&quot;、和 &quot;show&quot; 三者长度相同，但我们返回最先出现的补全词 &quot;pest&quot; 。\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>licensePlate = &quot;Ah71752&quot;, words = [&quot;suggest&quot;,&quot;letter&quot;,&quot;of&quot;,&quot;husband&quot;,&quot;easy&quot;,&quot;education&quot;,&quot;drug&quot;,&quot;prevent&quot;,&quot;writer&quot;,&quot;old&quot;]\\n<strong>输出：</strong>&quot;husband&quot;\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre><strong>输入：</strong>licensePlate = &quot;OgEu755&quot;, words = [&quot;enough&quot;,&quot;these&quot;,&quot;play&quot;,&quot;wide&quot;,&quot;wonder&quot;,&quot;box&quot;,&quot;arrive&quot;,&quot;money&quot;,&quot;tax&quot;,&quot;thus&quot;]\\n<strong>输出：</strong>&quot;enough&quot;\\n</pre>\\n\\n<p><strong>示例 5：</strong></p>\\n\\n<pre><strong>输入：</strong>licensePlate = &quot;iMSlpe4&quot;, words = [&quot;claim&quot;,&quot;consumer&quot;,&quot;student&quot;,&quot;camera&quot;,&quot;public&quot;,&quot;never&quot;,&quot;wonder&quot;,&quot;simple&quot;,&quot;thought&quot;,&quot;use&quot;]\\n<strong>输出：</strong>&quot;simple&quot;\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= licensePlate.length &lt;= 7</code></li>\\n\\t<li><code>licensePlate</code> 由数字、大小写字母或空格 <code>&#39; &#39;</code> 组成</li>\\n\\t<li><code>1 &lt;= words.length &lt;= 1000</code></li>\\n\\t<li><code>1 &lt;= words[i].length &lt;= 15</code></li>\\n\\t<li><code>words[i]</code> 由小写英文字母组成</li>\\n</ul>\\n","title":"748. 最短补全词","relatedTags":["哈希表","字符串"],"difficult":"Easy","lang":["javascript"],"uniqueID":"748","slug":"748-Shortest-Completing-Word"}')}}]);