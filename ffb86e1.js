(window.webpackJsonp=window.webpackJsonp||[]).push([[601],{1399:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{ListNode}</span> <span class=\\"hljs-variable\\">list1</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">a</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">b</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{ListNode}</span> <span class=\\"hljs-variable\\">list2</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{ListNode}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> mergeInBetween = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">list1, a, b, list2</span>) </span>{\\n    <span class=\\"hljs-keyword\\">let</span> preList1=list1\\n    <span class=\\"hljs-keyword\\">let</span> afxList1=list1\\n    <span class=\\"hljs-keyword\\">let</span> tailList2=list2\\n    <span class=\\"hljs-keyword\\">let</span> step=<span class=\\"hljs-number\\">1</span>\\n    <span class=\\"hljs-keyword\\">while</span>(tailList2.next){\\n        tailList2=tailList2.next\\n    }\\n    <span class=\\"hljs-keyword\\">while</span>(step&lt;a){\\n        preList1=preList1.next\\n        afxList1=afxList1.next\\n        step++\\n    }\\n    <span class=\\"hljs-keyword\\">while</span>(step&lt;=b+<span class=\\"hljs-number\\">1</span>){\\n        afxList1=afxList1.next\\n        step++\\n    }\\n    <span class=\\"hljs-comment\\">// console.log(preList1,afxList1)</span>\\n    preList1.next=list2\\n\\n    tailList2.next=afxList1\\n    <span class=\\"hljs-keyword\\">return</span> list1\\n    \\n\\n};\\n</code></pre>\\n"],"querySlug":"merge-in-between-linked-lists","created_at":"2020-12-05","timeArr":[2020,11,5,16,34,53,0],"hasThinking":false,"content":"<p>给你两个链表 <code>list1</code> 和 <code>list2</code> ，它们包含的元素分别为 <code>n</code> 个和 <code>m</code> 个。</p>\\n\\n<p>请你将 <code>list1</code> 中第 <code>a</code> 个节点到第 <code>b</code> 个节点删除，并将<code>list2</code> 接在被删除节点的位置。</p>\\n\\n<p>下图中蓝色边和节点展示了操作后的结果：</p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/11/28/fig1.png\\" style=\\"height: 130px; width: 504px;\\" />\\n<p>请你返回结果链表的头指针。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<p><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/11/28/merge_linked_list_ex1.png\\" style=\\"width: 406px; height: 140px;\\" /></p>\\n\\n<pre>\\n<b>输入：</b>list1 = [0,1,2,3,4,5], a = 3, b = 4, list2 = [1000000,1000001,1000002]\\n<b>输出：</b>[0,1,2,1000000,1000001,1000002,5]\\n<b>解释：</b>我们删除 list1 中第三和第四个节点，并将 list2 接在该位置。上图中蓝色的边和节点为答案链表。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/11/28/merge_linked_list_ex2.png\\" style=\\"width: 463px; height: 140px;\\" />\\n<pre>\\n<b>输入：</b>list1 = [0,1,2,3,4,5,6], a = 2, b = 5, list2 = [1000000,1000001,1000002,1000003,1000004]\\n<b>输出：</b>[0,1,1000000,1000001,1000002,1000003,1000004,6]\\n<b>解释：</b>上图中蓝色的边和节点为答案链表。\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>3 <= list1.length <= 10<sup>4</sup></code></li>\\n\\t<li><code>1 <= a <= b < list1.length - 1</code></li>\\n\\t<li><code>1 <= list2.length <= 10<sup>4</sup></code></li>\\n</ul>\\n","title":"1669. 合并两个链表","relatedTags":["链表"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1669","slug":"1669-Merge-In-Between-Linked-Lists"}')}}]);