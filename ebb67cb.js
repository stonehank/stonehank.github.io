(window.webpackJsonp=window.webpackJsonp||[]).push([[1189],{1987:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">S</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{string}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> maskPII = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">S</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(S.includes(<span class=\\"hljs-string\\">\'@\'</span>)){\\n    <span class=\\"hljs-keyword\\">let</span> res=S.toLowerCase()\\n    <span class=\\"hljs-keyword\\">let</span> arr=res.split(<span class=\\"hljs-string\\">\'@\'</span>)\\n    arr[<span class=\\"hljs-number\\">0</span>]=arr[<span class=\\"hljs-number\\">0</span>][<span class=\\"hljs-number\\">0</span>]+<span class=\\"hljs-string\\">\\"*****\\"</span>+arr[<span class=\\"hljs-number\\">0</span>][arr[<span class=\\"hljs-number\\">0</span>].length<span class=\\"hljs-number\\">-1</span>]\\n    <span class=\\"hljs-keyword\\">return</span> arr.join(<span class=\\"hljs-string\\">\'@\'</span>)\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> counts=<span class=\\"hljs-number\\">0</span>,numStr=<span class=\\"hljs-string\\">\'\'</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;S.length;i++){\\n    <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-regexp\\">/\\\\d/</span>.test(S[i])){\\n      counts++\\n      numStr+=S[i]\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> last4=numStr.substring(numStr.length<span class=\\"hljs-number\\">-4</span>)\\n  <span class=\\"hljs-keyword\\">if</span>(counts===<span class=\\"hljs-number\\">10</span>){\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-string\\">\\"***-***-\\"</span>+last4\\n  }<span class=\\"hljs-keyword\\">else</span>{\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-string\\">\\"+\\"</span>+<span class=\\"hljs-string\\">\\"*\\"</span>.repeat(numStr.length<span class=\\"hljs-number\\">-10</span>)+<span class=\\"hljs-string\\">\\"-***-***-\\"</span>+last4\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"masking-personal-information","created_at":"2019-03-28","timeArr":[2019,2,28,13,25,38,0],"hasThinking":false,"content":"<p>给你一条个人信息字符串 <code>S</code>，它可能是一个 <strong>邮箱地址</strong> ，也可能是一串 <strong>电话号码</strong> 。</p>\\n\\n<p>我们将隐藏它的隐私信息，通过如下规则:</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>1. 电子邮箱</strong></p>\\n\\n<p>定义名称 <strong>name</strong> 是长度大于等于 2 （<code>length &ge; 2</code>），并且只包含小写字母 <code>a-z</code> 和大写字母 <code>A-Z</code> 的字符串。</p>\\n\\n<p>电子邮箱地址由名称 <strong>name</strong> 开头，紧接着是符号 <code>&#39;@&#39;</code>，后面接着一个名称 <strong>name</strong>，再接着一个点号 <code>&#39;.&#39;</code>，然后是一个名称 <strong>name</strong>。</p>\\n\\n<p>电子邮箱地址确定为有效的，并且格式是 <code>&quot;name1@name2.name3&quot;</code>。</p>\\n\\n<p>为了隐藏电子邮箱，所有的名称 <strong>name</strong> 必须被转换成小写的，并且第一个名称&nbsp;<strong>name</strong> 的第一个字母和最后一个字母的中间的所有字母由 5 个 <code>&#39;*&#39;</code> 代替。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>2. 电话号码</strong></p>\\n\\n<p>电话号码是一串包括数字&nbsp;<code>0-9</code>，以及 <code>{&#39;+&#39;, &#39;-&#39;, &#39;(&#39;, &#39;)&#39;, &#39;&nbsp;&#39;}</code> 这几个字符的字符串。你可以假设电话号码包含 10 到 13 个数字。</p>\\n\\n<p>电话号码的最后 10 个数字组成本地号码，在这之前的数字组成国际号码。注意，国际号码是可选的。我们只暴露最后 4 个数字并隐藏所有其他数字。</p>\\n\\n<p>本地号码是有格式的，并且如 <code>&quot;***-***-1111&quot;</code> 这样显示，这里的 1 表示暴露的数字。</p>\\n\\n<p>为了隐藏有国际号码的电话号码，像&nbsp;<code>&quot;+111 111 111 1111&quot;</code>，我们以 <code>&quot;+***-***-***-1111&quot;</code> 的格式来显示。在本地号码前面的 <code>&#39;+&#39;</code> 号和第一个 <code>&#39;-&#39;</code> 号仅当电话号码中包含国际号码时存在。例如，一个 12 位的电话号码应当以 <code>&quot;+**-&quot;</code> 开头进行显示。</p>\\n\\n<p>注意：像 <code>&quot;(&quot;，&quot;)&quot;，&quot; &quot;</code> 这样的不相干的字符以及不符合上述格式的额外的减号或者加号都应当被删除。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p>最后，将提供的信息正确隐藏后返回。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入: </strong>&quot;LeetCode@LeetCode.com&quot;\\n<strong>输出: </strong>&quot;l*****e@leetcode.com&quot;\\n<strong>解释： \\n</strong>所有的名称转换成小写, 第一个名称的第一个字符和最后一个字符中间由 5 个星号代替。\\n因此，&quot;leetcode&quot; -&gt; &quot;l*****e&quot;。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入: </strong>&quot;AB@qq.com&quot;\\n<strong>输出: </strong>&quot;a*****b@qq.com&quot;\\n<strong>解释:&nbsp;\\n</strong>第一个名称&quot;ab&quot;的第一个字符和最后一个字符的中间必须有 5 个星号\\n因此，&quot;ab&quot; -&gt; &quot;a*****b&quot;。\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入: </strong>&quot;1(234)567-890&quot;\\n<strong>输出: </strong>&quot;***-***-7890&quot;\\n<strong>解释:</strong>&nbsp;\\n10 个数字的电话号码，那意味着所有的数字都是本地号码。\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre><strong>输入: </strong>&quot;86-(10)12345678&quot;\\n<strong>输出: </strong>&quot;+**-***-***-5678&quot;\\n<strong>解释:</strong>&nbsp;\\n12 位数字，2 个数字是国际号码另外 10 个数字是本地号码 。\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>注意:</strong></p>\\n\\n<ol>\\n\\t<li><code>S.length&nbsp;&lt;=&nbsp;40</code>。</li>\\n\\t<li>邮箱的长度至少是 8。</li>\\n\\t<li>电话号码的长度至少是 10。</li>\\n</ol>\\n","title":"831. 隐藏个人信息","relatedTags":["字符串"],"difficult":"Middle","lang":["javascript"],"uniqueID":"831","slug":"831-Masking-Personal-Information"}')}}]);