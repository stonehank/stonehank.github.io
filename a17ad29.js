(window.webpackJsonp=window.webpackJsonp||[]).push([[254],{1052:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">A</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">K</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> maxSumAfterPartitioning = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">A, K</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> N=A.length\\n  <span class=\\"hljs-keyword\\">let</span> dp=<span class=\\"hljs-built_in\\">Array</span>(N+<span class=\\"hljs-number\\">1</span>).fill(<span class=\\"hljs-number\\">0</span>)\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">1</span>;i&lt;N+<span class=\\"hljs-number\\">1</span>;i++){\\n    <span class=\\"hljs-keyword\\">let</span> curMax=<span class=\\"hljs-number\\">-1</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> k=<span class=\\"hljs-number\\">1</span>;k&lt;=K &amp;&amp; i-k&gt;=<span class=\\"hljs-number\\">0</span>;k++){\\n      curMax=<span class=\\"hljs-built_in\\">Math</span>.max(curMax,A[i-k])\\n      dp[i]=<span class=\\"hljs-built_in\\">Math</span>.max(dp[i],dp[i-k]+curMax*k)\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> dp[N]\\n};\\n</code></pre>\\n"],"querySlug":"partition-array-for-maximum-sum","created_at":"2019-05-12","timeArr":[2019,4,12,13,14,51,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p><code>dp[i]</code>表示<code>[0,i-1]</code>这一段的最大和。</p>\\n<p>对于索引<code>i</code>，</p>\\n<p><code>dp[i-1]+A[i-1]*1</code></p>\\n<p><code>Math.max(dp[i-2]+A[i-1]*2,dp[i-2]+A[i-2]*2)</code></p>\\n<p><code>Math.max(dp[i-3]+A[i-1]*3, dp[i-3]+A[i-2]*3, dp[i-3]+A[i-3]*3)</code></p>\\n<p>...</p>\\n<p><code>Math.max(dp[i-K]+A[i-1]*K, dp[i-K]+A[i-2]*K, ..., dp[i-K]+A[i-K]*K)</code></p>\\n<p>合并后，就是</p>\\n<p>遍历<code>j</code>为<code>[1,K]</code>，<code>dp[i]=Math.max(dp[i],dp[i-j]+curMax*j)</code>，其中<code>curMax</code>为遍历过程中<code>A[i-j]</code>的最大值。</p>\\n","content":"<p>给你一个整数数组 <code>arr</code>，请你将该数组分隔为长度最多为 k 的一些（连续）子数组。分隔完成后，每个子数组的中的所有值都会变为该子数组中的最大值。</p>\\n\\n<p>返回将数组分隔变换后能够得到的元素最大和。</p>\\n\\n<p> </p>\\n\\n<p><strong>注意，</strong>原数组和分隔后的数组对应顺序应当一致，也就是说，你只能选择分隔数组的位置而不能调整数组中的顺序。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>arr = [1,15,7,9,2,5,10], k = 3\\n<strong>输出：</strong>84\\n<strong>解释：</strong>\\n因为 k=3 可以分隔成 [1,15,7] [9] [2,5,10]，结果为 [15,15,15,9,10,10,10]，和为 84，是该数组所有分隔变换后元素总和最大的。\\n若是分隔成 [1] [15,7,9] [2,5,10]，结果就是 [1, 15, 15, 15, 10, 10, 10] 但这种分隔方式的元素总和（76）小于上一种。 </pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>arr = [1,4,1,5,7,3,6,1,9,9,3], k = 4\\n<strong>输出：</strong>83\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>arr = [1], k = 1\\n<strong>输出：</strong>1\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= arr.length <= 500</code></li>\\n\\t<li><code>0 <= arr[i] <= 10<sup>9</sup></code></li>\\n\\t<li><code>1 <= k <= arr.length</code></li>\\n</ul>\\n","title":"1043. 分隔数组以得到最大和","relatedTags":["数组","动态规划"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1043","slug":"1043-Partition-Array-for-Maximum-Sum"}')}}]);