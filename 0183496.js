(window.webpackJsonp=window.webpackJsonp||[]).push([[820],{1618:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">people</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[][]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> reconstructQueue = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">people</span>) </span>{\\n  people.sort(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">a,b</span>)=&gt;</span>a[<span class=\\"hljs-number\\">1</span>]===b[<span class=\\"hljs-number\\">1</span>]?a[<span class=\\"hljs-number\\">0</span>]-b[<span class=\\"hljs-number\\">0</span>]:a[<span class=\\"hljs-number\\">1</span>]-b[<span class=\\"hljs-number\\">1</span>])\\n  <span class=\\"hljs-keyword\\">let</span> res=[] ,pq=[]\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">insert</span>(<span class=\\"hljs-params\\">n</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(pq.length===<span class=\\"hljs-number\\">0</span> || pq[pq.length<span class=\\"hljs-number\\">-1</span>]&lt;n){\\n      pq.push(n)\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      <span class=\\"hljs-keyword\\">let</span> idx=bsEnd(pq,n)\\n      pq.splice(idx,<span class=\\"hljs-number\\">0</span>,n)\\n    }\\n  }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">floor</span>(<span class=\\"hljs-params\\">n</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(pq.length===<span class=\\"hljs-number\\">0</span> || pq[pq.length<span class=\\"hljs-number\\">-1</span>]&lt;n)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">let</span> idx=bsEnd(pq,n)\\n    <span class=\\"hljs-keyword\\">return</span> pq.length-idx\\n  }\\n  \\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;people.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> [h,id]=people[i]\\n    <span class=\\"hljs-keyword\\">let</span> larger=floor(h)\\n    res.push([h,id])\\n    \\n    <span class=\\"hljs-keyword\\">if</span>(larger&gt;id){\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=res.length<span class=\\"hljs-number\\">-2</span>;j&gt;=<span class=\\"hljs-number\\">0</span>;j--){\\n        <span class=\\"hljs-keyword\\">if</span>(res[j][<span class=\\"hljs-number\\">0</span>]&gt;=res[j+<span class=\\"hljs-number\\">1</span>][<span class=\\"hljs-number\\">0</span>])larger--\\n        <span class=\\"hljs-comment\\">// if(larger&lt;id)break</span>\\n        <span class=\\"hljs-comment\\">// if(larger===id &amp;&amp; res[j][1]===res[j+1][1])break</span>\\n        swap(res,j,j+<span class=\\"hljs-number\\">1</span>)\\n        <span class=\\"hljs-keyword\\">if</span>(larger===id)<span class=\\"hljs-keyword\\">break</span>\\n      } \\n    }\\n    insert(h)\\n  }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">swap</span>(<span class=\\"hljs-params\\">arr,i,j</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> t=arr[i]\\n    arr[i]=arr[j]\\n    arr[j]=t\\n  }\\n  \\n  <span class=\\"hljs-comment\\">// console.log(res)</span>\\n  <span class=\\"hljs-keyword\\">return</span> res\\n  \\n  \\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">bsEnd</span>(<span class=\\"hljs-params\\">arr,n</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> lo=<span class=\\"hljs-number\\">0</span>,hi=arr.length<span class=\\"hljs-number\\">-1</span>\\n    <span class=\\"hljs-keyword\\">while</span>(lo&lt;hi){\\n      <span class=\\"hljs-keyword\\">let</span> mid=<span class=\\"hljs-built_in\\">Math</span>.floor((lo+hi)/<span class=\\"hljs-number\\">2</span>)\\n      <span class=\\"hljs-keyword\\">if</span>(arr[mid]&lt;n)lo=mid+<span class=\\"hljs-number\\">1</span>\\n      <span class=\\"hljs-keyword\\">else</span> hi=mid\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> hi\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"queue-reconstruction-by-height","created_at":"2019-04-13","timeArr":[2019,3,13,14,36,47,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>一个笨办法就是，先对<code>people</code>排序，按先索引<code>0</code>升序，如果相等则索引<code>1</code>升序的排序。</p>\\n<p>每次遍历<code>people</code>，现将当前<code>people[i]</code>插入到<code>res</code>最后面，然后搜索前面有多少比它高的值<code>larger</code>，如果<code>larger&gt;people[i][1]</code>，\\n说明不符合要求，前面高的人多了，通过不断和前一个<code>swap</code>，直到<code>larger===people[i][1]</code>。</p>\\n<p>这里的可以将搜索优化，建立一个升序数组，使用二分搜索。</p>\\n<p>另外一个非常精妙的解决办法，同样先对<code>people</code>排序，按索引<code>0</code>降序，如果相等则索引<code>1</code>升序的排序。</p>\\n<p>按照身高降序，保证了不可能将高的插入到矮的前面的位置，而只可能将矮的插入到高的前面的位置，这么就不会影响已经排好序的高的位置。</p>\\n<p>排序好后，对每一个<code>people[i]</code>，使用<code>splice</code>插入它对应的<code>people[i][1]</code>的位置。</p>\\n","content":"<p>假设有打乱顺序的一群人站成一个队列，数组 <code>people</code> 表示队列中一些人的属性（不一定按顺序）。每个 <code>people[i] = [h<sub>i</sub>, k<sub>i</sub>]</code> 表示第 <code>i</code> 个人的身高为 <code>h<sub>i</sub></code> ，前面 <strong>正好</strong> 有 <code>k<sub>i</sub></code><sub> </sub>个身高大于或等于 <code>h<sub>i</sub></code> 的人。</p>\\n\\n<p>请你重新构造并返回输入数组 <code>people</code> 所表示的队列。返回的队列应该格式化为数组 <code>queue</code> ，其中 <code>queue[j] = [h<sub>j</sub>, k<sub>j</sub>]</code> 是队列中第 <code>j</code> 个人的属性（<code>queue[0]</code> 是排在队列前面的人）。</p>\\n\\n<p> </p>\\n\\n<ul>\\n</ul>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]\\n<strong>输出：</strong>[[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]\\n<strong>解释：</strong>\\n编号为 0 的人身高为 5 ，没有身高更高或者相同的人排在他前面。\\n编号为 1 的人身高为 7 ，没有身高更高或者相同的人排在他前面。\\n编号为 2 的人身高为 5 ，有 2 个身高更高或者相同的人排在他前面，即编号为 0 和 1 的人。\\n编号为 3 的人身高为 6 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。\\n编号为 4 的人身高为 4 ，有 4 个身高更高或者相同的人排在他前面，即编号为 0、1、2、3 的人。\\n编号为 5 的人身高为 7 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。\\n因此 [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] 是重新构造后的队列。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]\\n<strong>输出：</strong>[[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= people.length <= 2000</code></li>\\n\\t<li><code>0 <= h<sub>i</sub> <= 10<sup>6</sup></code></li>\\n\\t<li><code>0 <= k<sub>i</sub> < people.length</code></li>\\n\\t<li>题目数据确保队列可以被重建</li>\\n</ul>\\n","title":"406. 根据身高重建队列","relatedTags":["贪心","数组","排序"],"difficult":"Middle","lang":["javascript"],"uniqueID":"406","slug":"406-Queue-Reconstruction-by-Height"}')}}]);