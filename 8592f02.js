(window.webpackJsonp=window.webpackJsonp||[]).push([[274],{1072:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{TreeNode}</span> <span class=\\"hljs-variable\\">root</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">limit</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{TreeNode}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> sufficientSubset = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">root, limit</span>) </span>{\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">calc</span>(<span class=\\"hljs-params\\">root,limit</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(!root)<span class=\\"hljs-keyword\\">return</span> [<span class=\\"hljs-literal\\">null</span>,<span class=\\"hljs-number\\">0</span>]\\n    <span class=\\"hljs-keyword\\">let</span> [left,lmx]=calc(root.left,limit-root.val) \\n    <span class=\\"hljs-keyword\\">let</span> [right,rmx]=calc(root.right,limit-root.val) \\n    root.left=left\\n    root.right=right\\n    <span class=\\"hljs-keyword\\">let</span> mx=root.val+<span class=\\"hljs-built_in\\">Math</span>.max(lmx,rmx)\\n    <span class=\\"hljs-keyword\\">if</span>(mx&gt;=limit){\\n      <span class=\\"hljs-keyword\\">return</span> [root,mx]\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      <span class=\\"hljs-keyword\\">return</span> [<span class=\\"hljs-literal\\">null</span>,mx]\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> calc(root,limit)[<span class=\\"hljs-number\\">0</span>]\\n};\\n</code></pre>\\n"],"querySlug":"insufficient-nodes-in-root-to-leaf-paths","created_at":"2019-06-09","timeArr":[2019,5,9,16,58,9,0],"hasThinking":false,"content":"<p>给定一棵二叉树的根 <code>root</code>，请你考虑它所有&nbsp;<strong>从根到叶的路径</strong>：从根到任何叶的路径。（所谓一个叶子节点，就是一个没有子节点的节点）</p>\\n\\n<p>假如通过节点 <code>node</code> 的每种可能的 &ldquo;根-叶&rdquo; 路径上值的总和全都小于给定的 <code>limit</code>，则该节点被称之为「不足节点」，需要被删除。</p>\\n\\n<p>请你删除所有不足节点，并返回生成的二叉树的根。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/06/08/insufficient-1.png\\" style=\\"height: 200px; width: 482px;\\">\\n输入：</strong>root = [1,2,3,4,-99,-99,7,8,9,-99,-99,12,13,-99,14], limit = 1\\n<strong><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/06/08/insufficient-2.png\\" style=\\"height: 200px; width: 258px;\\">\\n输出：</strong>[1,2,3,4,null,null,7,8,9,null,14]\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/06/08/insufficient-3.png\\" style=\\"height: 200px; width: 292px;\\">\\n输入：</strong>root = [5,4,8,11,null,17,4,7,1,null,null,5,3], limit = 22\\n<strong><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/06/08/insufficient-4.png\\" style=\\"height: 200px; width: 264px;\\">\\n输出：</strong>[5,4,8,11,null,17,4,7,null,null,null,5]</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/06/08/insufficient-5.png\\" style=\\"height: 100px; width: 140px;\\">\\n输入：</strong>root = [5,-6,-6], limit = 0<strong>\\n输出：</strong>[]</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ol>\\n\\t<li>给定的树有&nbsp;<code>1</code>&nbsp;到&nbsp;<code>5000</code>&nbsp;个节点</li>\\n\\t<li><code>-10^5&nbsp;&lt;= node.val &lt;= 10^5</code></li>\\n\\t<li><code>-10^9 &lt;= limit&nbsp;&lt;= 10^9</code></li>\\n</ol>\\n\\n<p>&nbsp;</p>\\n","title":"1080. 根到叶路径上的不足节点","relatedTags":["树","深度优先搜索","二叉树"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1080","slug":"1080-Insufficient-Nodes-in-Root-to-Leaf-Paths"}')}}]);