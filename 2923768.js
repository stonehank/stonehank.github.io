(window.webpackJsonp=window.webpackJsonp||[]).push([[559],{1357:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">grid</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> minDays = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">grid</span>) </span>{\\n    <span class=\\"hljs-keyword\\">let</span> moves=[[<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">0</span>],[<span class=\\"hljs-number\\">1</span>,<span class=\\"hljs-number\\">0</span>],[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">-1</span>],[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">1</span>]]\\n    <span class=\\"hljs-keyword\\">let</span> m=grid.length\\n    <span class=\\"hljs-keyword\\">let</span> n=grid[<span class=\\"hljs-number\\">0</span>].length\\n    <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">let</span> maxRes=<span class=\\"hljs-literal\\">Infinity</span>\\n    <span class=\\"hljs-keyword\\">if</span>(checkIsSep(grid))<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>\\n\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;m;i++){\\n        <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;n;j++){\\n            <span class=\\"hljs-keyword\\">if</span>(grid[i][j]===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">continue</span>    \\n            grid[i][j]=<span class=\\"hljs-number\\">0</span>\\n            <span class=\\"hljs-keyword\\">if</span>(checkIsSep(grid))<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">1</span>\\n            grid[i][j]=<span class=\\"hljs-number\\">1</span>\\n        }\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">2</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">checkIsSep</span>(<span class=\\"hljs-params\\">grid</span>)</span>{\\n        <span class=\\"hljs-keyword\\">let</span> used=<span class=\\"hljs-built_in\\">Array</span>(m).fill().map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span>=&gt;</span><span class=\\"hljs-built_in\\">Array</span>(n).fill(<span class=\\"hljs-literal\\">false</span>))\\n        <span class=\\"hljs-keyword\\">let</span> allZero=<span class=\\"hljs-literal\\">true</span>\\n        <span class=\\"hljs-keyword\\">let</span> found=<span class=\\"hljs-literal\\">false</span>\\n        <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;m;i++){\\n            <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;n;j++){\\n                <span class=\\"hljs-keyword\\">if</span>(grid[i][j]===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">continue</span>\\n                allZero=<span class=\\"hljs-literal\\">false</span>\\n                <span class=\\"hljs-keyword\\">if</span>(used[i][j])<span class=\\"hljs-keyword\\">continue</span>\\n                <span class=\\"hljs-keyword\\">if</span>(found)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>           \\n                used[i][j]=<span class=\\"hljs-literal\\">true</span>\\n                dfs(i,j)\\n                found=<span class=\\"hljs-literal\\">true</span>\\n            }\\n        }\\n        <span class=\\"hljs-keyword\\">if</span>(allZero)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n              <span class=\\"hljs-comment\\">// console.log(used)</span>\\n        <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n        <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">dfs</span>(<span class=\\"hljs-params\\">x,y</span>)</span>{\\n            <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> [dx,dy] <span class=\\"hljs-keyword\\">of</span> moves){\\n                <span class=\\"hljs-keyword\\">let</span> nx=x+dx\\n                <span class=\\"hljs-keyword\\">let</span> ny=y+dy\\n                <span class=\\"hljs-keyword\\">if</span>(nx&lt;<span class=\\"hljs-number\\">0</span> || nx&gt;=m || ny&lt;<span class=\\"hljs-number\\">0</span> || ny&gt;=n)<span class=\\"hljs-keyword\\">continue</span>\\n                <span class=\\"hljs-keyword\\">if</span>(used[nx][ny])<span class=\\"hljs-keyword\\">continue</span>\\n                <span class=\\"hljs-keyword\\">if</span>(grid[nx][ny]===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">continue</span>\\n                used[nx][ny]=<span class=\\"hljs-literal\\">true</span>\\n                dfs(nx,ny)\\n            }\\n        }\\n    }\\n};\\n</code></pre>\\n"],"querySlug":"minimum-number-of-days-to-disconnect-island","created_at":"2020-08-30","timeArr":[2020,7,30,12,6,13,0],"hasThinking":false,"content":"<p>给你一个由若干 <code>0</code> 和 <code>1</code> 组成的二维网格 <code>grid</code> ，其中 <code>0</code> 表示水，而 <code>1</code> 表示陆地。岛屿由水平方向或竖直方向上相邻的 <code>1</code> （陆地）连接形成。</p>\\n\\n<p>如果 <strong>恰好只有一座岛屿 </strong>，则认为陆地是 <strong>连通的</strong> ；否则，陆地就是 <strong>分离的</strong> 。</p>\\n\\n<p>一天内，可以将任何单个陆地单元（<code>1</code>）更改为水单元（<code>0</code>）。</p>\\n\\n<p>返回使陆地分离的最少天数。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<p><strong><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/08/30/1926_island.png\\" style=\\"height: 139px; width: 498px;\\"></strong></p>\\n\\n<pre><strong>输入：</strong>grid = [[0,1,1,0],[0,1,1,0],[0,0,0,0]]\\n<strong>输出：</strong>2\\n<strong>解释：</strong>至少需要 2 天才能得到分离的陆地。\\n将陆地 grid[1][1] 和 grid[0][2] 更改为水，得到两个分离的岛屿。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>grid = [[1,1]]\\n<strong>输出：</strong>2\\n<strong>解释：</strong>如果网格中都是水，也认为是分离的 ([[1,1]] -&gt; [[0,0]])，0 岛屿。\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>grid = [[1,0,1,0]]\\n<strong>输出：</strong>0\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre><strong>输入：</strong>grid = [[1,1,0,1,1],\\n&nbsp;            [1,1,1,1,1],\\n&nbsp;            [1,1,0,1,1],\\n&nbsp;            [1,1,0,1,1]]\\n<strong>输出：</strong>1\\n</pre>\\n\\n<p><strong>示例 5：</strong></p>\\n\\n<pre><strong>输入：</strong>grid = [[1,1,0,1,1],\\n&nbsp;            [1,1,1,1,1],\\n&nbsp;            [1,1,0,1,1],\\n&nbsp;            [1,1,1,1,1]]\\n<strong>输出：</strong>2\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= grid.length, grid[i].length &lt;= 30</code></li>\\n\\t<li><code>grid[i][j]</code> 为 <code>0</code> 或 <code>1</code></li>\\n</ul>\\n","title":"1568. 使陆地分离的最少天数","relatedTags":["深度优先搜索","广度优先搜索","数组","矩阵","强连通分量"],"difficult":"Hard","lang":["javascript"],"uniqueID":"1568","slug":"1568-Minimum-Number-of-Days-to-Disconnect-Island"}')}}]);