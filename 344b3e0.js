(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{558:function(e){e.exports=JSON.parse('{"content":"<p><code>Leetcode</code>上有一系列类似的题目，看了几位大神的答案，感觉这类题目都能套用，都是DP(动态规划)的思路。</p>\\n<p>题目1：</p>\\n<p>给出一个数组，其中每一个元素表示第<code>i</code>天的价格。</p>\\n<p>你可以多次交易，但同一天只能交易1次，求交易获取最大值。</p>\\n<p>例如：<code>[1,6,0,3,4,8,2]</code></p>\\n<p>最大收益为：<code>6-1 + 8-0</code>=13</p>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">maxProfit</span>(<span class=\\"hljs-params\\">prices</span>)</span>{\\n  <span class=\\"hljs-keyword\\">let</span> prev_sell,prev_buy,prev_rest,\\n      sell=<span class=\\"hljs-number\\">0</span>,buy=-prices[<span class=\\"hljs-number\\">0</span>],rest=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;prices.length;i++){\\n      prev_buy=buy;prev_rest=rest;prev_sell=sell\\n      sell=prev_buy+prices[i]\\n      buy=<span class=\\"hljs-built_in\\">Math</span>.max(prev_rest-prices[i],prev_buy,prev_sell-prices[i])\\n      rest=<span class=\\"hljs-built_in\\">Math</span>.max(prev_rest,prev_sell)\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-built_in\\">Math</span>.max(sell,rest)\\n}</code></pre></code></pre>\\n<p>虽然对于这道题，有一种解法更简单，就是只要<code>prices[i]-pries[i-1]</code>是正数，就算到profit里面。</p>\\n<p>但上面的是一种模式，对于此种类型的题，都可以套用这套模式。</p>\\n<p>思路：</p>\\n<ol>\\n<li>每一天都有可能3种行动，sell, buy, rest(什么都不做)。</li>\\n<li>如果第i天是sell，那么它的前面一定已经买了(buy)，<code>sell=prev_buy+prices[i]</code></li>\\n<li>如果第i天是buy，那么它的前面有可能刚卖出去，<code>prev_sell-prices[i]</code>，\\n有可能是休息，<code>prev_rest-prices[i]</code>,也有可能是保持买的状态，<code>prev_buy</code>，例如<code>1,2,3</code>，就是买了1,到了3才卖。</li>\\n<li>如果第i天是rest，那么它前面有可能，买、卖、休息，但前面是买一定会小，所以<code>Math.max(prev_rest,prev_sell)</code></li>\\n</ol>\\n<p>最后只要比较最后一天的行动是卖出还是休息，比较哪个更大就是最大收益。</p>\\n<p>题目2：</p>\\n<p>给出一个数组，其中每一个元素表示第<code>i</code>天的价格。</p>\\n<p>你可以多次交易，但同一天只能交易1次，并且每次交易完成有手续费，求交易获取最大值。</p>\\n<p>例如：<code>[1,6,0,3,4,8,2]</code>，手续费是<code>6</code></p>\\n<p>最大收益为：<code>8-0-6</code>=2</p>\\n<p>直接套模板，每次sell要扣去手续费便可</p>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">maxProfit</span>(<span class=\\"hljs-params\\">prices,fee</span>)</span>{\\n  <span class=\\"hljs-keyword\\">let</span> prev_sell,prev_buy,prev_rest,\\n      sell=<span class=\\"hljs-number\\">0</span>,buy=-prices[<span class=\\"hljs-number\\">0</span>],rest=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;prices.length;i++){\\n      prev_buy=buy;prev_rest=rest;prev_sell=sell\\n      <span class=\\"hljs-comment\\">// 这里加了fee</span>\\n      sell=prev_buy+prices[i]-fee\\n      buy=<span class=\\"hljs-built_in\\">Math</span>.max(prev_rest-prices[i],prev_buy,prev_sell-prices[i])\\n      rest=<span class=\\"hljs-built_in\\">Math</span>.max(prev_rest,prev_sell)\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-built_in\\">Math</span>.max(sell,rest)\\n}</code></pre></code></pre>\\n<p>题目3：</p>\\n<p>给出一个数组，其中每一个元素表示第<code>i</code>天的价格。</p>\\n<p>你可以多次交易，但同一天只能交易1次，并且每次交易完成必须休息一天，求交易获取最大值。</p>\\n<p>例如：<code>[1,6,0,3,4,8,2]</code></p>\\n<p>最大收益为：<code>6-1 + 8-3</code>=10</p>\\n<p>套模板，只是买的那一天之前不能是卖出，必须是休息或者保持买的状态。</p>\\n<p><code>buy=Math.max(prev_rest-prices[i],prev_buy,prev_sell-prices[i])</code></p>\\n<p><code>---&gt;</code></p>\\n<p><code>buy=Math.max(prev_rest-prices[i],prev_buy)</code></p>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">maxProfit</span>(<span class=\\"hljs-params\\">prices</span>)</span>{\\n  <span class=\\"hljs-keyword\\">let</span> prev_sell,prev_buy,prev_rest,\\n      sell=<span class=\\"hljs-number\\">0</span>,buy=-prices[<span class=\\"hljs-number\\">0</span>],rest=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;prices.length;i++){\\n      prev_buy=buy;prev_rest=rest;prev_sell=sell\\n      sell=prev_buy+prices[i]\\n      <span class=\\"hljs-comment\\">// 此处不能是卖出后立刻买</span>\\n      buy=<span class=\\"hljs-built_in\\">Math</span>.max(prev_rest-prices[i],prev_buy)\\n      rest=<span class=\\"hljs-built_in\\">Math</span>.max(prev_rest,prev_sell)\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-built_in\\">Math</span>.max(sell,rest)\\n}</code></pre></code></pre>\\n<p>题目4：</p>\\n<p>给出一个数组，其中每一个元素表示第<code>i</code>天的价格。</p>\\n<p>你可以交易1次，同一天只能交易1次，求交易获取最大值。</p>\\n<p>例如：<code>[1,6,0,3,4,8,2]</code></p>\\n<p>最大收益为：<code>0 买 8卖</code>=8</p>\\n<p>因为这里只能交易1次，我们不用定义之前的情况<code>prev_buy</code>,<code>prev_rest</code>,<code>prev_sell</code></p>\\n<p>只需要定义一个买入，一个卖出便可。</p>\\n<p>代码如下：</p>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">maxProfit</span>(<span class=\\"hljs-params\\">prices</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> sell=<span class=\\"hljs-number\\">0</span>,buy=-prices[<span class=\\"hljs-number\\">0</span>]\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;prices.length;i++){\\n        sell=<span class=\\"hljs-built_in\\">Math</span>.max(buy+prices[i],sell)\\n        buy=<span class=\\"hljs-built_in\\">Math</span>.max(-prices[i],buy)\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> sell\\n}</code></pre></code></pre>\\n<p>题目5：</p>\\n<p>给出一个数组，其中每一个元素表示第<code>i</code>天的价格。</p>\\n<p>你可以最多交易2次，同一天只能交易1次，求交易获取最大值。</p>\\n<p>例如：<code>[1,6,0,3,4,8,2]</code></p>\\n<p>最大收益为：<code>1买 6卖+0买 8卖</code>=13</p>\\n<p>同上一题，这里最多交易2次，因此不需要定义<code>prev</code>情况</p>\\n<p>只需要定义2个买入，2个卖出便可。</p>\\n<p>代码如下：</p>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">maxProfit</span>(<span class=\\"hljs-params\\">prices</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> sell1=<span class=\\"hljs-number\\">0</span>,buy1=-prices[<span class=\\"hljs-number\\">0</span>],sell2=<span class=\\"hljs-number\\">0</span>,buy2=-prices[<span class=\\"hljs-number\\">0</span>]\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;prices.length;i++){\\n        sell1=<span class=\\"hljs-built_in\\">Math</span>.max(buy1+prices[i],sell1)\\n        buy1=<span class=\\"hljs-built_in\\">Math</span>.max(buy1,-prices[i])\\n        sell2=<span class=\\"hljs-built_in\\">Math</span>.max(buy2+prices[i],sell2)\\n        buy2=<span class=\\"hljs-built_in\\">Math</span>.max(-prices[i]+sell1,buy2)\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> sell2\\n}</code></pre></code></pre>\\n","toc":[],"relatedTags":null,"created_at":"2018-10-19","timeArr":[2018,9,19,0,0,0,0],"title":"LeetCode获取最大收益的算法","uuid":"4483d4ae741e5f281dba7c87dd850e305a2b0565","summary":"<p><code>Leetcode</code>上有一系列类似的题目，看了几位大神的答案，感觉这类题目都能套用，都是DP(动态规划)的思路。</p>\\n<p>题目1：</p>\\n<p>给出一个数组，其中每一个元素表示第<code>i</code>天的价格。</p>\\n<p>你可以多次交易，但同一天只能交易1次，求交易获取最大值。</p>\\n<p>例如：<code>[1,6,0,3,4,8,2]</code></p>\\n<p>最大收益为：<code>6-1 + 8-0</code>...</p>","slug":"LeetCode-huo-qu-zui-da-shou-yi-de-suan-fa","sha":"61921acd4c40080ae873343cffc1a26316b6f608"}')}}]);