(window.webpackJsonp=window.webpackJsonp||[]).push([[1094],{1892:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">asteroids</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> asteroidCollision = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">asteroids</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> stack=[]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;asteroids.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> cur=asteroids[i],add=<span class=\\"hljs-literal\\">true</span>\\n    <span class=\\"hljs-keyword\\">while</span>(stack.length&gt;<span class=\\"hljs-number\\">0</span> &amp;&amp; cur&lt;<span class=\\"hljs-number\\">0</span> &amp;&amp; stack[stack.length<span class=\\"hljs-number\\">-1</span>]&gt;<span class=\\"hljs-number\\">0</span>){\\n      <span class=\\"hljs-keyword\\">let</span> curAbs=<span class=\\"hljs-built_in\\">Math</span>.abs(cur),last=stack[stack.length<span class=\\"hljs-number\\">-1</span>]\\n      <span class=\\"hljs-keyword\\">if</span>(curAbs&gt;last){\\n        stack.pop()\\n      }<span class=\\"hljs-keyword\\">else</span>{\\n        <span class=\\"hljs-keyword\\">if</span>(curAbs===last)stack.pop()\\n        add=<span class=\\"hljs-literal\\">false</span>\\n        <span class=\\"hljs-keyword\\">break</span>\\n      }\\n    }\\n    <span class=\\"hljs-keyword\\">if</span>(add)stack.push(cur)\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> stack\\n};\\n</code></pre>\\n"],"querySlug":"asteroid-collision","created_at":"2019-04-17","timeArr":[2019,3,17,15,44,0,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>注意这里只有当前为负数(向左移动)并且<code>stack</code>最后一个为正数(向右移动)，才有可能相撞，再去判断相撞的结果。</p>\\n","content":"<p>给定一个整数数组 <code>asteroids</code>，表示在同一行的行星。</p>\\n\\n<p>对于数组中的每一个元素，其绝对值表示行星的大小，正负表示行星的移动方向（正表示向右移动，负表示向左移动）。每一颗行星以相同的速度移动。</p>\\n\\n<p>找出碰撞后剩下的所有行星。碰撞规则：两个行星相互碰撞，较小的行星会爆炸。如果两颗行星大小相同，则两颗行星都会爆炸。两颗移动方向相同的行星，永远不会发生碰撞。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>asteroids = [5,10,-5]\\n<strong>输出：</strong>[5,10]\\n<b>解释：</b>10 和 -5 碰撞后只剩下 10 。 5 和 10 永远不会发生碰撞。</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>asteroids = [8,-8]\\n<strong>输出：</strong>[]\\n<b>解释：</b>8 和 -8 碰撞后，两者都发生爆炸。</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>asteroids = [10,2,-5]\\n<strong>输出：</strong>[10]\\n<b>解释：</b>2 和 -5 发生碰撞后剩下 -5 。10 和 -5 发生碰撞后剩下 10 。</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>asteroids = [-2,-1,1,2]\\n<strong>输出：</strong>[-2,-1,1,2]\\n<b>解释</b><strong>：</strong>-2 和 -1 向左移动，而 1 和 2 向右移动。 由于移动方向相同的行星不会发生碰撞，所以最终没有行星发生碰撞。 </pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>2 <= asteroids.length <= 10<sup>4</sup></code></li>\\n\\t<li><code>-1000 <= asteroids[i] <= 1000</code></li>\\n\\t<li><code>asteroids[i] != 0</code></li>\\n</ul>\\n","title":"735. 行星碰撞","relatedTags":["栈","数组"],"difficult":"Middle","lang":["javascript"],"uniqueID":"735","slug":"735-Asteroid-Collision"}')}}]);