(window.webpackJsonp=window.webpackJsonp||[]).push([[465],{1263:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">s</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{string}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> longestPrefix = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">s</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> prefixHash=<span class=\\"hljs-keyword\\">new</span> <span class=\\"hljs-built_in\\">Map</span>()\\n  <span class=\\"hljs-keyword\\">let</span> last=s[s.length<span class=\\"hljs-number\\">-1</span>]\\n  <span class=\\"hljs-keyword\\">let</span> first=s[<span class=\\"hljs-number\\">0</span>]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;s.length;i++){\\n    <span class=\\"hljs-keyword\\">if</span>(i===s.length<span class=\\"hljs-number\\">-1</span>)<span class=\\"hljs-keyword\\">break</span>\\n    <span class=\\"hljs-keyword\\">if</span>(s[i]!==last)<span class=\\"hljs-keyword\\">continue</span>\\n    <span class=\\"hljs-keyword\\">let</span> prefix=s.slice(<span class=\\"hljs-number\\">0</span>,i+<span class=\\"hljs-number\\">1</span>)\\n    prefixHash.set(prefix,<span class=\\"hljs-literal\\">true</span>)\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> maxLen=<span class=\\"hljs-number\\">-1</span>,res=<span class=\\"hljs-string\\">\'\'</span>\\n  <span class=\\"hljs-keyword\\">let</span> affixHash={}\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=s.length<span class=\\"hljs-number\\">-1</span>;i&gt;=<span class=\\"hljs-number\\">0</span>;i--){\\n    <span class=\\"hljs-keyword\\">if</span>(i===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">break</span>\\n    <span class=\\"hljs-keyword\\">if</span>(s[i]!==first)<span class=\\"hljs-keyword\\">continue</span>\\n    <span class=\\"hljs-keyword\\">let</span> affix=s.slice(i)\\n    <span class=\\"hljs-keyword\\">if</span>(prefixHash.has(affix)){\\n      <span class=\\"hljs-keyword\\">if</span>(affix.length&gt;maxLen){\\n        maxLen=affix.length\\n        res=affix\\n      }\\n    }\\n  }  \\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"longest-happy-prefix","created_at":"2020-03-22","timeArr":[2020,2,22,11,57,10,0],"hasThinking":false,"content":"<p>「快乐前缀」是在原字符串中既是&nbsp;<strong>非空</strong> 前缀也是后缀（不包括原字符串自身）的字符串。</p>\\n\\n<p>给你一个字符串 <code>s</code>，请你返回它的 <strong>最长快乐前缀</strong>。</p>\\n\\n<p>如果不存在满足题意的前缀，则返回一个空字符串。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>s = &quot;level&quot;\\n<strong>输出：</strong>&quot;l&quot;\\n<strong>解释：</strong>不包括 s 自己，一共有 4 个前缀（&quot;l&quot;, &quot;le&quot;, &quot;lev&quot;, &quot;leve&quot;）和 4 个后缀（&quot;l&quot;, &quot;el&quot;, &quot;vel&quot;, &quot;evel&quot;）。最长的既是前缀也是后缀的字符串是 &quot;l&quot; 。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>s = &quot;ababab&quot;\\n<strong>输出：</strong>&quot;abab&quot;\\n<strong>解释：</strong>&quot;abab&quot; 是最长的既是前缀也是后缀的字符串。题目允许前后缀在原字符串中重叠。\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>s = &quot;leetcodeleet&quot;\\n<strong>输出：</strong>&quot;leet&quot;\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre><strong>输入：</strong>s = &quot;a&quot;\\n<strong>输出：</strong>&quot;&quot;\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= s.length &lt;= 10^5</code></li>\\n\\t<li><code>s</code> 只含有小写英文字母</li>\\n</ul>\\n","title":"1392. 最长快乐前缀","relatedTags":["字符串","字符串匹配","哈希函数","滚动哈希"],"difficult":"Hard","lang":["javascript"],"uniqueID":"1392","slug":"1392-Longest-Happy-Prefix"}')}}]);