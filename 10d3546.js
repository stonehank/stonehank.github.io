(window.webpackJsonp=window.webpackJsonp||[]).push([[723],{1521:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">pattern</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">str</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{boolean}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> wordPattern = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">pattern, str</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> uniq=<span class=\\"hljs-number\\">1</span>\\n  <span class=\\"hljs-keyword\\">let</span> hashP={},hashS={}\\n  <span class=\\"hljs-keyword\\">let</span> arr=str.split(<span class=\\"hljs-string\\">\' \'</span>)\\n  <span class=\\"hljs-keyword\\">if</span>(pattern.length!==arr.length)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;arr.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> p=pattern[i],a=arr[i]\\n    <span class=\\"hljs-comment\\">// console.log(p,a,hashP,hashS)</span>\\n    <span class=\\"hljs-keyword\\">if</span>(!hashP[p] &amp;&amp; !hashS[a]){\\n      hashP[p]=uniq\\n      hashS[a]=uniq\\n      uniq++\\n    }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(hashP[p] &amp;&amp; hashS[a]){\\n      <span class=\\"hljs-keyword\\">if</span>(hashP[p]!==hashS[a])<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n};\\n</code></pre>\\n"],"querySlug":"word-pattern","created_at":"2019-04-05","timeArr":[2019,3,5,10,31,16,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>与<code>NO.205</code>一致，只不过这里现将句子通过<code>split(&quot; &quot;)</code>转化成单词数组。</p>\\n<p>用数字替换字母和单词，并且用<code>hash</code>储存，遇到<code>hash</code>中不存在的字母则字母作为<code>key</code>，数字<code>+1</code>作为<code>val</code>。</p>\\n<p>如果两边同时遇到<code>hash</code>中不存在的，同时将以当前数字作为<code>val</code>；</p>\\n<p>如果两边同时遇到<code>hash</code>中都存在的，检测两边的<code>val</code>是否相等；</p>\\n<p>如果一边存在，一边不存在，返回<code>false</code>。</p>\\n","content":"<p>给定一种规律 <code>pattern</code>&nbsp;和一个字符串&nbsp;<code>str</code>&nbsp;，判断 <code>str</code> 是否遵循相同的规律。</p>\\n\\n<p>这里的&nbsp;<strong>遵循&nbsp;</strong>指完全匹配，例如，&nbsp;<code>pattern</code>&nbsp;里的每个字母和字符串&nbsp;<code>str</code><strong>&nbsp;</strong>中的每个非空单词之间存在着双向连接的对应规律。</p>\\n\\n<p><strong>示例1:</strong></p>\\n\\n<pre><strong>输入:</strong> pattern = <code>&quot;abba&quot;</code>, str = <code>&quot;dog cat cat dog&quot;</code>\\n<strong>输出:</strong> true</pre>\\n\\n<p><strong>示例 2:</strong></p>\\n\\n<pre><strong>输入:</strong>pattern = <code>&quot;abba&quot;</code>, str = <code>&quot;dog cat cat fish&quot;</code>\\n<strong>输出:</strong> false</pre>\\n\\n<p><strong>示例 3:</strong></p>\\n\\n<pre><strong>输入:</strong> pattern = <code>&quot;aaaa&quot;</code>, str = <code>&quot;dog cat cat dog&quot;</code>\\n<strong>输出:</strong> false</pre>\\n\\n<p><strong>示例&nbsp;4:</strong></p>\\n\\n<pre><strong>输入:</strong> pattern = <code>&quot;abba&quot;</code>, str = <code>&quot;dog dog dog dog&quot;</code>\\n<strong>输出:</strong> false</pre>\\n\\n<p><strong>说明:</strong><br>\\n你可以假设&nbsp;<code>pattern</code>&nbsp;只包含小写字母，&nbsp;<code>str</code>&nbsp;包含了由单个空格分隔的小写字母。&nbsp; &nbsp;&nbsp;</p>\\n","title":"290. 单词规律","relatedTags":["哈希表","字符串"],"difficult":"Easy","lang":["javascript"],"uniqueID":"290","slug":"290-Word-Pattern"}')}}]);