(window.webpackJsonp=window.webpackJsonp||[]).push([[646],{1444:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Solution</span><span class=\\"hljs-params\\">(object)</span>:</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">maxProfit</span><span class=\\"hljs-params\\">(self, k, prices)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type k: int\\n        :type prices: List[int]\\n        :rtype: int\\n        \\"\\"\\"</span>\\n        n=len(prices)\\n        <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">maxProfit</span><span class=\\"hljs-params\\">(prices)</span>:</span>\\n          pSum=<span class=\\"hljs-number\\">0</span>\\n          <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(<span class=\\"hljs-number\\">1</span>,len(prices)):\\n            gap=prices[i]-prices[i<span class=\\"hljs-number\\">-1</span>]\\n            <span class=\\"hljs-keyword\\">if</span> gap&gt;<span class=\\"hljs-number\\">0</span>:\\n              pSum+=gap\\n          <span class=\\"hljs-keyword\\">return</span> pSum\\n        <span class=\\"hljs-keyword\\">if</span> k&gt;n/<span class=\\"hljs-number\\">2</span>:\\n          <span class=\\"hljs-keyword\\">return</span> maxProfit(prices)\\n        dp=[[<span class=\\"hljs-number\\">0</span>]*n <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(k+<span class=\\"hljs-number\\">1</span>)]\\n        \\n        <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(<span class=\\"hljs-number\\">1</span>,k+<span class=\\"hljs-number\\">1</span>):\\n          curGap=float(<span class=\\"hljs-string\\">\'-inf\'</span>)\\n          <span class=\\"hljs-keyword\\">for</span> j <span class=\\"hljs-keyword\\">in</span> range(<span class=\\"hljs-number\\">1</span>,n):\\n            curGap=max(curGap,dp[i<span class=\\"hljs-number\\">-1</span>][j<span class=\\"hljs-number\\">-1</span>]-prices[j<span class=\\"hljs-number\\">-1</span>])\\n            <span class=\\"hljs-comment\\"># print i,j,dp</span>\\n            dp[i][j]=max(dp[i][j<span class=\\"hljs-number\\">-1</span>],prices[j]+curGap)\\n        <span class=\\"hljs-comment\\"># print dp</span>\\n        <span class=\\"hljs-keyword\\">return</span> dp[<span class=\\"hljs-number\\">-1</span>][<span class=\\"hljs-number\\">-1</span>]\\n</code></pre>\\n"],"querySlug":"best-time-to-buy-and-sell-stock-iv","created_at":"2019-03-01","timeArr":[2019,2,1,12,59,54,0],"hasThinking":false,"content":"<p>给定一个整数数组 <code>prices</code> ，它的第<em> </em><code>i</code> 个元素 <code>prices[i]</code> 是一支给定的股票在第 <code>i</code><em> </em>天的价格。</p>\\n\\n<p>设计一个算法来计算你所能获取的最大利润。你最多可以完成 <strong>k</strong> 笔交易。</p>\\n\\n<p><strong>注意：</strong>你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>k = 2, prices = [2,4,1]\\n<strong>输出：</strong>2\\n<strong>解释：</strong>在第 1 天 (股票价格 = 2) 的时候买入，在第 2 天 (股票价格 = 4) 的时候卖出，这笔交易所能获得利润 = 4-2 = 2 。</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>k = 2, prices = [3,2,6,5,0,3]\\n<strong>输出：</strong>7\\n<strong>解释：</strong>在第 2 天 (股票价格 = 2) 的时候买入，在第 3 天 (股票价格 = 6) 的时候卖出, 这笔交易所能获得利润 = 6-2 = 4 。\\n     随后，在第 5 天 (股票价格 = 0) 的时候买入，在第 6 天 (股票价格 = 3) 的时候卖出, 这笔交易所能获得利润 = 3-0 = 3 。</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>0 <= k <= 100</code></li>\\n\\t<li><code>0 <= prices.length <= 1000</code></li>\\n\\t<li><code>0 <= prices[i] <= 1000</code></li>\\n</ul>\\n","title":"188. 买卖股票的最佳时机 IV","relatedTags":["数组","动态规划"],"difficult":"Hard","lang":["python"],"uniqueID":"188","slug":"188-Best-Time-to-Buy-and-Sell-Stock-IV"}')}}]);