(window.webpackJsonp=window.webpackJsonp||[]).push([[1114],{1912:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">s</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">t</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{string}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> minWindow = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">s, t</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> hash={},targLen=t.length\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> w <span class=\\"hljs-keyword\\">of</span> t){\\n    <span class=\\"hljs-keyword\\">if</span>(!hash[w])hash[w]=<span class=\\"hljs-number\\">1</span>\\n    <span class=\\"hljs-keyword\\">else</span> hash[w]++\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> preID=<span class=\\"hljs-literal\\">null</span>,start=<span class=\\"hljs-number\\">0</span>,end=<span class=\\"hljs-literal\\">Infinity</span>,curLen=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;=s.length;i++){\\n    <span class=\\"hljs-comment\\">// t中每一个字母都存在于[start,end]区间中</span>\\n    <span class=\\"hljs-keyword\\">if</span>(curLen===targLen){\\n      <span class=\\"hljs-comment\\">// &lt;0 表示当前最区间左侧字母存在t中，并且后面存在重复，可以删除，便缩小区间</span>\\n      <span class=\\"hljs-comment\\">// ==null 表示当前区间最左侧字母不存在t中，可以删除</span>\\n      <span class=\\"hljs-comment\\">// 通过这一步，可以保证当前区间最左侧字母属于t，并且不存在重复</span>\\n      <span class=\\"hljs-keyword\\">while</span>(hash[s[preID]]==<span class=\\"hljs-literal\\">null</span> || hash[s[preID]]&lt;<span class=\\"hljs-number\\">0</span>){\\n        <span class=\\"hljs-keyword\\">if</span>(hash[s[preID]]==<span class=\\"hljs-literal\\">null</span>)preID++\\n        <span class=\\"hljs-keyword\\">else</span> hash[s[preID++]]++\\n      }\\n      <span class=\\"hljs-comment\\">// 当前区间更小，更新</span>\\n      <span class=\\"hljs-keyword\\">if</span>(i-preID&lt;end-start){\\n        end=i\\n        start=preID\\n      }\\n      <span class=\\"hljs-comment\\">// 最后再删除最左侧字母，等待下一次更新</span>\\n      hash[s[preID++]]++\\n      curLen--\\n    }\\n    <span class=\\"hljs-keyword\\">if</span>(i===s.length)<span class=\\"hljs-keyword\\">break</span>\\n    <span class=\\"hljs-comment\\">// 发现属于t的字母，可以作为区间的开始并且长度增加</span>\\n    <span class=\\"hljs-keyword\\">if</span>(hash[s[i]]&gt;<span class=\\"hljs-number\\">0</span>){\\n      <span class=\\"hljs-keyword\\">if</span>(preID==<span class=\\"hljs-literal\\">null</span>)preID=i\\n      curLen++\\n    }\\n    <span class=\\"hljs-comment\\">// 如果当前s[i]属于t的字母，减少1个这样当它小于0就说明存在重复</span>\\n    <span class=\\"hljs-keyword\\">if</span>(hash[s[i]]!=<span class=\\"hljs-literal\\">null</span>)hash[s[i]]--\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> end===<span class=\\"hljs-literal\\">Infinity</span>?<span class=\\"hljs-string\\">\'\'</span>:s.substring(start,end)\\n};\\n\\n</code></pre>\\n"],"querySlug":"minimum-window-substring","created_at":"2019-05-08","timeArr":[2019,4,8,11,48,50,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>首先对<code>t</code>的字母建立<code>count</code>，以出现频率作为它的值，由于题目没有明确说明大小写，因此设定<code>128</code>位。</p>\\n<p>变量<code>tLen</code>表示<code>t</code>的长度；</p>\\n<p>变量<code>preID</code>表示当前一个滑动区间的最左侧的索引；</p>\\n<p>变量<code>start</code>和<code>end</code>表示最小区间的左索引和右索引。</p>\\n<p>遍历<code>s</code>，</p>\\n<p>如果<code>count[s.charCodeAt(i)]--&gt;0</code>，说明<code>s[i]</code>属于<code>t</code>，需要<code>tLen--</code>；</p>\\n<p>如果<code>tLen===0</code>，说明<code>t</code>中的值已经全部在区间<code>[preID,i]</code>出现了，比较区间<code>[preID,i]</code>和<code>[start,end]</code>，如果更小，更新<code>[start,end]</code>；</p>\\n<p>检查<code>count[s.charCodeAt(preID++)]++==0</code>，如果条件成立，说明<code>preID</code>索引刚好调整到跳过<code>1</code>个存在<code>t</code>中的字母，并且这个字母当前已经不存在与<code>[preID,i]</code>区间内。</p>\\n<p>遍历完毕后，返回区间<code>[start,end]</code>，如果不存在，则返回<code>\'\'</code>。</p>\\n","content":"<p>给你一个字符串 <code>s</code> 、一个字符串 <code>t</code> 。返回 <code>s</code> 中涵盖 <code>t</code> 所有字符的最小子串。如果 <code>s</code> 中不存在涵盖 <code>t</code> 所有字符的子串，则返回空字符串 <code>\\"\\"</code> 。</p>\\n\\n<p> </p>\\n\\n<p><strong>注意：</strong></p>\\n\\n<ul>\\n\\t<li>对于 <code>t</code> 中重复字符，我们寻找的子字符串中该字符数量必须不少于 <code>t</code> 中该字符数量。</li>\\n\\t<li>如果 <code>s</code> 中存在这样的子串，我们保证它是唯一的答案。</li>\\n</ul>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = \\"ADOBECODEBANC\\", t = \\"ABC\\"\\n<strong>输出：</strong>\\"BANC\\"\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = \\"a\\", t = \\"a\\"\\n<strong>输出：</strong>\\"a\\"\\n</pre>\\n\\n<p><strong>示例 3:</strong></p>\\n\\n<pre>\\n<strong>输入:</strong> s = \\"a\\", t = \\"aa\\"\\n<strong>输出:</strong> \\"\\"\\n<strong>解释:</strong> t 中两个字符 \'a\' 均应包含在 s 的子串中，\\n因此没有符合条件的子字符串，返回空字符串。</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= s.length, t.length <= 10<sup>5</sup></code></li>\\n\\t<li><code>s</code> 和 <code>t</code> 由英文字母组成</li>\\n</ul>\\n\\n<p> </p>\\n<strong>进阶：</strong>你能设计一个在 <code>o(n)</code> 时间内解决此问题的算法吗？","title":"76. 最小覆盖子串","relatedTags":["哈希表","字符串","滑动窗口"],"difficult":"Hard","lang":["javascript"],"uniqueID":"76","slug":"76-Minimum-Window-Substring"}')}}]);