(window.webpackJsonp=window.webpackJsonp||[]).push([[787],{1585:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Solution</span><span class=\\"hljs-params\\">(object)</span>:</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">wiggleMaxLength</span><span class=\\"hljs-params\\">(self, nums)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type nums: List[int]\\n        :rtype: int\\n        \\"\\"\\"</span>\\n        n=len(nums)\\n        <span class=\\"hljs-keyword\\">if</span> n==<span class=\\"hljs-number\\">0</span>:<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>\\n        dp=[[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">0</span>] <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(n)]\\n        dp[<span class=\\"hljs-number\\">0</span>][<span class=\\"hljs-number\\">0</span>]=<span class=\\"hljs-number\\">1</span>\\n        dp[<span class=\\"hljs-number\\">0</span>][<span class=\\"hljs-number\\">1</span>]=<span class=\\"hljs-number\\">2</span>\\n        <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(<span class=\\"hljs-number\\">1</span>,n):\\n            gap=nums[i]-nums[i<span class=\\"hljs-number\\">-1</span>]\\n            <span class=\\"hljs-keyword\\">if</span> gap==<span class=\\"hljs-number\\">0</span>:\\n                dp[i][<span class=\\"hljs-number\\">0</span>]=dp[i<span class=\\"hljs-number\\">-1</span>][<span class=\\"hljs-number\\">0</span>]\\n                dp[i][<span class=\\"hljs-number\\">1</span>]=dp[i<span class=\\"hljs-number\\">-1</span>][<span class=\\"hljs-number\\">1</span>]\\n                <span class=\\"hljs-keyword\\">continue</span>\\n            <span class=\\"hljs-keyword\\">if</span> gap&gt;<span class=\\"hljs-number\\">0</span>:sign=<span class=\\"hljs-number\\">0</span>\\n            <span class=\\"hljs-keyword\\">elif</span> gap&lt;<span class=\\"hljs-number\\">0</span>:sign=<span class=\\"hljs-number\\">1</span>\\n            <span class=\\"hljs-keyword\\">for</span> j <span class=\\"hljs-keyword\\">in</span> range(i<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">-1</span>):\\n                <span class=\\"hljs-keyword\\">if</span> dp[j][<span class=\\"hljs-number\\">1</span>]==sign <span class=\\"hljs-keyword\\">or</span> dp[j][<span class=\\"hljs-number\\">1</span>]==<span class=\\"hljs-number\\">2</span>:\\n                    dp[i][<span class=\\"hljs-number\\">0</span>]=dp[j][<span class=\\"hljs-number\\">0</span>]+<span class=\\"hljs-number\\">1</span>\\n                    <span class=\\"hljs-keyword\\">if</span> sign==<span class=\\"hljs-number\\">1</span>:dp[i][<span class=\\"hljs-number\\">1</span>]=<span class=\\"hljs-number\\">0</span>\\n                    <span class=\\"hljs-keyword\\">else</span>:dp[i][<span class=\\"hljs-number\\">1</span>]=<span class=\\"hljs-number\\">1</span>\\n                    <span class=\\"hljs-keyword\\">break</span>\\n        <span class=\\"hljs-keyword\\">return</span> dp[<span class=\\"hljs-number\\">-1</span>][<span class=\\"hljs-number\\">0</span>]\\n</code></pre>\\n"],"querySlug":"wiggle-subsequence","created_at":"2019-03-02","timeArr":[2019,2,2,18,34,38,0],"hasThinking":false,"content":"<p>如果连续数字之间的差严格地在正数和负数之间交替，则数字序列称为<strong> 摆动序列 。</strong>第一个差（如果存在的话）可能是正数或负数。仅有一个元素或者含两个不等元素的序列也视作摆动序列。</p>\\n\\n<ul>\\n\\t<li>\\n\\t<p>例如， <code>[1, 7, 4, 9, 2, 5]</code> 是一个 <strong>摆动序列</strong> ，因为差值 <code>(6, -3, 5, -7, 3)</code> 是正负交替出现的。</p>\\n\\t</li>\\n\\t<li>相反，<code>[1, 4, 7, 2, 5]</code> 和 <code>[1, 7, 4, 5, 5]</code> 不是摆动序列，第一个序列是因为它的前两个差值都是正数，第二个序列是因为它的最后一个差值为零。</li>\\n</ul>\\n\\n<p><strong>子序列</strong> 可以通过从原始序列中删除一些（也可以不删除）元素来获得，剩下的元素保持其原始顺序。</p>\\n\\n<p>给你一个整数数组 <code>nums</code> ，返回 <code>nums</code> 中作为 <strong>摆动序列 </strong>的 <strong>最长子序列的长度</strong> 。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [1,7,4,9,2,5]\\n<strong>输出：</strong>6\\n<strong>解释：</strong>整个序列均为摆动序列，各元素之间的差值为 (6, -3, 5, -7, 3) 。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [1,17,5,10,13,15,10,5,16,8]\\n<strong>输出：</strong>7\\n<strong>解释：</strong>这个序列包含几个长度为 7 摆动序列。\\n其中一个是 [1, 17, 10, 13, 10, 16, 8] ，各元素之间的差值为 (16, -7, 3, -3, 6, -8) 。\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [1,2,3,4,5,6,7,8,9]\\n<strong>输出：</strong>2\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= nums.length <= 1000</code></li>\\n\\t<li><code>0 <= nums[i] <= 1000</code></li>\\n</ul>\\n\\n<p> </p>\\n\\n<p><strong>进阶：</strong>你能否用 <code>O(n)</code><em> </em>时间复杂度完成此题?</p>\\n","title":"376. 摆动序列","relatedTags":["贪心","数组","动态规划"],"difficult":"Middle","lang":["python"],"uniqueID":"376","slug":"376-Wiggle-Subsequence"}')}}]);