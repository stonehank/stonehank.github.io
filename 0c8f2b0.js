(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{545:function(n){n.exports=JSON.parse('{"content":"<h2 id=\\"nano-memoize--he--fast-memoize\\">nano-memoize 和 fast-memoize</h2>\\n<p>首先，这2个工具的实现源码是极其相似的，基本上，只要阅读了其中一个源码，也就了解了另外一个的实现。</p>\\n<p>fast-memoize导图：\\n<img src=\\"/article/img/fast-memoize.png\\" alt=\\"\\"></p>\\n<p>大概说说它们的实现思路：</p>\\n<ol>\\n<li>定义缓存结构，其中<code>fast</code>使用了<code>无prototype的对象</code>，<code>nano</code>使用了<code>普通对象</code>。</li>\\n<li>定义序列化方法：当检测到是单参数时，都是选择JSON.stringify，而多个参数，两者有不同（后面再说）。</li>\\n<li>定义策略：也就是缓存的具体方法，其实很简单，就是对当前缓存结构查找，找到就返回，找不到就重新运行，\\n 两者都使用了<code>bind</code>方法注入参数，可以省去运行时再去查找参数。</li>\\n</ol>\\n<p>接着分析两者的异同：</p>\\n<p>相同处：</p>\\n<ul>\\n<li>都使用了<code>JSON.stringify</code>作为序列化方法，因为它是原生的。</li>\\n<li>都对返回的缓存函数进行了参数注入（这是一个极大提升性能的方法）。</li>\\n<li>对单参数还是多参数的判断都是使用<code>func.length</code>(形参的数量判断)，因为<code>func.length</code>比<code>arguments.length</code>这种动态判断性能会好很多。</li>\\n</ul>\\n<p>不同点：</p>\\n<ul>\\n<li><code>fast</code>使用了<code>无prototype的对象</code>，<code>nano</code>使用了<code>普通对象</code>(这一点性能上相差不多)。</li>\\n<li>当遇到多个参数时，<code>fast</code>还是继续对<code>arguments</code>进行序列化，而<code>nano</code>则复杂一点，它通过用数组将每一次多个参数保存起来，\\n后续通过遍历每个参数进行全等对比<code>===</code>，判断是否从缓存调取结果。</li>\\n<li>同样是多个参数，<code>nano</code>增加了一个参数max，可以让用户自定义需要进行对比参数的长度。</li>\\n</ul>\\n<p><a href=\\"https://github.com/stonehank/sourcecode-analysis/blob/master/source-code.fast-memoizeVSnano-memoize/README.md\\">更详细的说明和深入理解，可查看源码学习——fast,nano</a></p>\\n<p>假设：</p>\\n<ul>\\n<li>忽略===的执行时间</li>\\n<li>使用的参数分为 引用相同 和 引用不同(但是深比较为true)</li>\\n</ul>\\n<table>\\n<thead>\\n<tr>\\n<th><em>耗时操作</em></th>\\n<th><em>多个参数(引用相同)</em></th>\\n<th></th>\\n<th><em>多个参数(引用不同)</em></th>\\n<th></th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td>状态</td>\\n<td>首次运行</td>\\n<td>后续运行</td>\\n<td>首次运行</td>\\n<td>后续运行</td>\\n</tr>\\n<tr>\\n<td>fast</td>\\n<td>序列化+运行</td>\\n<td>序列化</td>\\n<td>序列化+运行</td>\\n<td>序列化</td>\\n</tr>\\n<tr>\\n<td>nano</td>\\n<td>运行</td>\\n<td>0</td>\\n<td>运行</td>\\n<td>运行</td>\\n</tr>\\n</tbody></table>\\n","toc":[{"anchor":"nano-memoize--he--fast-memoize","level":2,"text":"nano-memoize 和 fast-memoize"}],"relatedTags":null,"created_at":"2018-07-15","timeArr":[2018,6,15,0,0,0,0],"title":"2个JS缓存工具学习心得","uuid":"a6a06a76f20c9fd24c4954c100dbd016a75a5974","summary":"<h4>nano-memoize 和 fast-memoize</h4>\\n<p>首先，这2个工具的实现源码是极其相似的，基本上，只要阅读了其中一个源码，也就了解了另外一个的实现。</p>\\n<p>fast-memoize导图：\\n<img src=\\"/article/img/fast-memoize.png\\" alt=\\"\\"></p>\\n<p>大概说说它们的实现思路：</p>\\n<ol>\\n<li>定义缓存结构，其...</li>\\n</ol>","slug":"2-ge-JS-huan-cun-gong-ju-xue-xi-xin-de","sha":"4bdf87c5d346920df9247464ab6b24fdcc7791ab"}')}}]);