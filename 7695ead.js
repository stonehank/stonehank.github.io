(window.webpackJsonp=window.webpackJsonp||[]).push([[283],{1081:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * // This is the MountainArray\'s API interface.\\n * // You should not implement it, or speculate about its implementation\\n * function MountainArray() {\\n *\\n *     <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{integer}</span> <span class=\\"hljs-variable\\">index</span></span>\\n *     <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{integer}</span></span>\\n *     this.get = function(index) {\\n *         ...\\n *     };\\n *\\n *     <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{integer}</span></span>\\n *     this.length = function() {\\n *         ...\\n *     };\\n * };\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">target</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{MountainArray}</span> <span class=\\"hljs-variable\\">mountainArr</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> findInMountainArray = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">target, mountainArr</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> peak,len=mountainArr.length()\\n  <span class=\\"hljs-keyword\\">let</span> lo=<span class=\\"hljs-number\\">0</span>,hi=len<span class=\\"hljs-number\\">-1</span>\\n  <span class=\\"hljs-keyword\\">while</span>(lo&lt;=hi){\\n    <span class=\\"hljs-keyword\\">let</span> mid=<span class=\\"hljs-built_in\\">Math</span>.floor((lo+hi)/<span class=\\"hljs-number\\">2</span>)\\n    <span class=\\"hljs-keyword\\">let</span> pre=mountainArr.get(mid<span class=\\"hljs-number\\">-1</span>),\\n        cur=mountainArr.get(mid),\\n        nxt=mountainArr.get(mid+<span class=\\"hljs-number\\">1</span>)\\n    <span class=\\"hljs-comment\\">// console.log(lo,hi,mid)</span>\\n    <span class=\\"hljs-keyword\\">if</span>(pre&lt;cur &amp;&amp; cur&lt;nxt){\\n      lo=mid+<span class=\\"hljs-number\\">1</span>\\n    }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(pre&gt;cur &amp;&amp; cur&gt;nxt){\\n      hi=mid<span class=\\"hljs-number\\">-1</span>\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      peak=mid\\n      <span class=\\"hljs-keyword\\">if</span>(cur===target)<span class=\\"hljs-keyword\\">return</span> peak\\n      <span class=\\"hljs-keyword\\">break</span>\\n    }\\n  }\\n  <span class=\\"hljs-comment\\">// console.log(peak)</span>\\n  <span class=\\"hljs-keyword\\">let</span> idxL=bs(mountainArr,<span class=\\"hljs-number\\">0</span>,peak,target)\\n  <span class=\\"hljs-keyword\\">if</span>(mountainArr.get(idxL)===target){\\n    <span class=\\"hljs-keyword\\">return</span> idxL\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> idxR=bs(mountainArr,peak+<span class=\\"hljs-number\\">1</span>,len<span class=\\"hljs-number\\">-1</span>,target)\\n  <span class=\\"hljs-keyword\\">if</span>(mountainArr.get(idxR)===target){\\n    <span class=\\"hljs-keyword\\">return</span> idxR\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">-1</span>\\n  \\n  \\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">bs</span>(<span class=\\"hljs-params\\">mount,lo,hi,n</span>)</span>{\\n    <span class=\\"hljs-keyword\\">while</span>(lo&lt;hi){\\n      <span class=\\"hljs-keyword\\">let</span> mid=<span class=\\"hljs-built_in\\">Math</span>.floor((lo+hi)/<span class=\\"hljs-number\\">2</span>)\\n      <span class=\\"hljs-keyword\\">if</span>(mount.get(mid)&lt;n)lo=mid+<span class=\\"hljs-number\\">1</span>\\n      <span class=\\"hljs-keyword\\">else</span> hi=mid\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> hi\\n  }\\n\\n};\\n</code></pre>\\n","<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\"># \\"\\"\\"</span>\\n<span class=\\"hljs-comment\\"># This is MountainArray\'s API interface.</span>\\n<span class=\\"hljs-comment\\"># You should not implement it, or speculate about its implementation</span>\\n<span class=\\"hljs-comment\\"># \\"\\"\\"</span>\\n<span class=\\"hljs-comment\\">#class MountainArray(object):</span>\\n<span class=\\"hljs-comment\\">#    def get(self, index):</span>\\n<span class=\\"hljs-comment\\">#        \\"\\"\\"</span>\\n<span class=\\"hljs-comment\\">#        :type index: int</span>\\n<span class=\\"hljs-comment\\">#        :rtype int</span>\\n<span class=\\"hljs-comment\\">#        \\"\\"\\"</span>\\n<span class=\\"hljs-comment\\">#</span>\\n<span class=\\"hljs-comment\\">#    def length(self):</span>\\n<span class=\\"hljs-comment\\">#        \\"\\"\\"</span>\\n<span class=\\"hljs-comment\\">#        :rtype int</span>\\n<span class=\\"hljs-comment\\">#        \\"\\"\\"</span>\\n\\n\\n\\n<span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Solution</span><span class=\\"hljs-params\\">(object)</span>:</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">findInMountainArray</span><span class=\\"hljs-params\\">(self, target, mountain_arr)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type target: integer\\n        :type mountain_arr: MountainArray\\n        :rtype: integer\\n        \\"\\"\\"</span>\\n        peak=<span class=\\"hljs-number\\">-1</span>\\n        length=mountain_arr.length()\\n        lo,hi=<span class=\\"hljs-number\\">0</span>,length<span class=\\"hljs-number\\">-1</span>\\n        <span class=\\"hljs-keyword\\">while</span> lo&lt;=hi:\\n          mid=(lo+hi)//<span class=\\"hljs-number\\">2</span>\\n          <span class=\\"hljs-keyword\\">if</span> mid==<span class=\\"hljs-number\\">0</span>:\\n            lo=mid+<span class=\\"hljs-number\\">1</span>\\n          <span class=\\"hljs-keyword\\">elif</span> mid==length<span class=\\"hljs-number\\">-1</span>:\\n            hi=mid<span class=\\"hljs-number\\">-1</span>\\n          <span class=\\"hljs-keyword\\">else</span>:\\n            pre=mountain_arr.get(mid<span class=\\"hljs-number\\">-1</span>)\\n            cur=mountain_arr.get(mid)\\n            nxt=mountain_arr.get(mid+<span class=\\"hljs-number\\">1</span>)\\n            <span class=\\"hljs-keyword\\">if</span> pre&lt;cur&lt;nxt:\\n              lo=mid+<span class=\\"hljs-number\\">1</span>\\n            <span class=\\"hljs-keyword\\">elif</span> pre&gt;cur&gt;nxt:\\n              hi=mid<span class=\\"hljs-number\\">-1</span>\\n            <span class=\\"hljs-keyword\\">else</span>:\\n              peak=mid\\n              <span class=\\"hljs-keyword\\">if</span> cur==target:<span class=\\"hljs-keyword\\">return</span> peak\\n              <span class=\\"hljs-keyword\\">break</span>\\n            \\n        <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">bs</span><span class=\\"hljs-params\\">(mount,lo,hi,n)</span>:</span>\\n          <span class=\\"hljs-keyword\\">while</span> lo&lt;hi:\\n            mid=(lo+hi)//<span class=\\"hljs-number\\">2</span>\\n            <span class=\\"hljs-keyword\\">if</span> mount.get(mid)&lt;n :\\n              lo=mid+<span class=\\"hljs-number\\">1</span>\\n            <span class=\\"hljs-keyword\\">else</span>:\\n              hi=mid\\n          <span class=\\"hljs-keyword\\">return</span> hi\\n        \\n        <span class=\\"hljs-comment\\"># print peak</span>\\n        l,h=<span class=\\"hljs-number\\">0</span>,peak<span class=\\"hljs-number\\">-1</span>\\n        <span class=\\"hljs-keyword\\">while</span> l&lt;h:\\n            mid=(l+h)//<span class=\\"hljs-number\\">2</span>\\n            <span class=\\"hljs-keyword\\">if</span> mountain_arr.get(mid)&lt;target :\\n              l=mid+<span class=\\"hljs-number\\">1</span>\\n            <span class=\\"hljs-keyword\\">else</span>:\\n              h=mid\\n        <span class=\\"hljs-keyword\\">if</span> mountain_arr.get(h)==target:\\n          <span class=\\"hljs-keyword\\">return</span> h\\n        \\n        l,h=peak+<span class=\\"hljs-number\\">1</span>,length<span class=\\"hljs-number\\">-1</span>\\n        <span class=\\"hljs-keyword\\">while</span> l&lt;h:\\n            <span class=\\"hljs-comment\\"># print l,h</span>\\n            mid=(l+h)//<span class=\\"hljs-number\\">2</span>\\n            <span class=\\"hljs-keyword\\">if</span> mountain_arr.get(mid)&gt;target :\\n              l=mid+<span class=\\"hljs-number\\">1</span>\\n            <span class=\\"hljs-keyword\\">else</span>:\\n              h=mid\\n        <span class=\\"hljs-keyword\\">if</span> mountain_arr.get(h)==target:\\n          <span class=\\"hljs-keyword\\">return</span> h        \\n        \\n        <span class=\\"hljs-comment\\"># idxL=bs(mountain_arr,0,peak-1,target)</span>\\n        <span class=\\"hljs-comment\\"># if mountain_arr.get(idxL)==target:</span>\\n        <span class=\\"hljs-comment\\">#   return idxL</span>\\n        <span class=\\"hljs-comment\\"># idxR=bs(mountain_arr,peak+1,len-1,target)</span>\\n        <span class=\\"hljs-comment\\"># if mountain_arr.get(idxR)==target:</span>\\n        <span class=\\"hljs-comment\\">#   return idxR</span>\\n        \\n        <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">-1</span>\\n            \\n</code></pre>\\n"],"querySlug":"find-in-mountain-array","hasThinking":false,"content":"<p>（这是一个 <strong>交互式问题&nbsp;</strong>）</p>\\n\\n<p>给你一个 <strong>山脉数组</strong>&nbsp;<code>mountainArr</code>，请你返回能够使得&nbsp;<code>mountainArr.get(index)</code>&nbsp;<strong>等于</strong>&nbsp;<code>target</code>&nbsp;<strong>最小</strong>&nbsp;的下标 <code>index</code>&nbsp;值。</p>\\n\\n<p>如果不存在这样的下标 <code>index</code>，就请返回&nbsp;<code>-1</code>。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p>何为山脉数组？如果数组&nbsp;<code>A</code> 是一个山脉数组的话，那它满足如下条件：</p>\\n\\n<p><strong>首先</strong>，<code>A.length &gt;= 3</code></p>\\n\\n<p><strong>其次</strong>，在&nbsp;<code>0 &lt; i&nbsp;&lt; A.length - 1</code>&nbsp;条件下，存在 <code>i</code> 使得：</p>\\n\\n<ul>\\n\\t<li><code>A[0] &lt; A[1] &lt; ... A[i-1] &lt; A[i]</code></li>\\n\\t<li><code>A[i] &gt; A[i+1] &gt; ... &gt; A[A.length - 1]</code></li>\\n</ul>\\n\\n<p>&nbsp;</p>\\n\\n<p>你将&nbsp;<strong>不能直接访问该山脉数组</strong>，必须通过&nbsp;<code>MountainArray</code>&nbsp;接口来获取数据：</p>\\n\\n<ul>\\n\\t<li><code>MountainArray.get(k)</code>&nbsp;- 会返回数组中索引为<code>k</code>&nbsp;的元素（下标从 0 开始）</li>\\n\\t<li><code>MountainArray.length()</code>&nbsp;- 会返回该数组的长度</li>\\n</ul>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>注意：</strong></p>\\n\\n<p>对&nbsp;<code>MountainArray.get</code>&nbsp;发起超过 <code>100</code> 次调用的提交将被视为错误答案。此外，任何试图规避判题系统的解决方案都将会导致比赛资格被取消。</p>\\n\\n<p>为了帮助大家更好地理解交互式问题，我们准备了一个样例 &ldquo;<strong>答案</strong>&rdquo;：<a href=\\"https://leetcode-cn.com/playground/RKhe3ave\\" target=\\"_blank\\">https://leetcode-cn.com/playground/RKhe3ave</a>，请注意这 <strong>不是一个正确答案</strong>。</p>\\n\\n<ol>\\n</ol>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>array = [1,2,3,4,5,3,1], target = 3\\n<strong>输出：</strong>2\\n<strong>解释：</strong>3 在数组中出现了两次，下标分别为 2 和 5，我们返回最小的下标 2。</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>array = [0,1,2,4,2,1], target = 3\\n<strong>输出：</strong>-1\\n<strong>解释：</strong>3 在数组中没有出现，返回 -1。\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>3 &lt;= mountain_arr.length() &lt;= 10000</code></li>\\n\\t<li><code>0 &lt;= target &lt;= 10^9</code></li>\\n\\t<li><code>0 &lt;= mountain_arr.get(index) &lt;=&nbsp;10^9</code></li>\\n</ul>\\n","title":"1095. 山脉数组中查找目标值","relatedTags":["数组","二分查找","交互"],"difficult":"Hard","lang":["javascript","python"],"uniqueID":"1095","slug":"1095-Find-in-Mountain-Array"}')}}]);