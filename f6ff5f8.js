(window.webpackJsonp=window.webpackJsonp||[]).push([[649],{1447:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">n</span></span> - a positive integer\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span> </span>- a positive integer\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> reverseBits = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">n</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> str=n.toString(<span class=\\"hljs-number\\">2</span>)\\n  <span class=\\"hljs-keyword\\">let</span> gap=<span class=\\"hljs-number\\">32</span>-str.length\\n  <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-built_in\\">parseInt</span>(str.split(<span class=\\"hljs-string\\">\'\'</span>).reverse().join(<span class=\\"hljs-string\\">\'\'</span>),<span class=\\"hljs-number\\">2</span>)\\n  <span class=\\"hljs-keyword\\">while</span>(gap--&gt;<span class=\\"hljs-number\\">0</span>)res*=<span class=\\"hljs-number\\">2</span>\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"reverse-bits","created_at":"2019-04-20","timeArr":[2019,3,20,21,45,24,0],"hasThinking":false,"content":"<p>颠倒给定的 32 位无符号整数的二进制位。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li>请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。</li>\\n\\t<li>在 Java 中，编译器使用<a href=\\"https://baike.baidu.com/item/二进制补码/5295284\\" target=\\"_blank\\">二进制补码</a>记法来表示有符号整数。因此，在 <strong>示例 2</strong>&nbsp;中，输入表示有符号整数 <code>-3</code>，输出表示有符号整数 <code>-1073741825</code>。</li>\\n</ul>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>进阶</strong>:<br />\\n如果多次调用这个函数，你将如何优化你的算法？</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>n = 00000010100101000001111010011100\\n<strong>输出：</strong>964176192 (00111001011110000010100101000000)\\n<strong>解释：</strong>输入的二进制串 <strong>00000010100101000001111010011100 </strong>表示无符号整数<strong> 43261596</strong><strong>，\\n    </strong> 因此返回 964176192，其二进制表示形式为 <strong>00111001011110000010100101000000</strong>。</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>n = 11111111111111111111111111111101\\n<strong>输出：</strong>3221225471 (10111111111111111111111111111111)\\n<strong>解释：</strong>输入的二进制串 <strong>11111111111111111111111111111101</strong> 表示无符号整数 4294967293，\\n   &nbsp; 因此返回 3221225471 其二进制表示形式为 <strong>10111111111111111111111111111111 。</strong></pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li>输入是一个长度为 <code>32</code> 的二进制字符串</li>\\n</ul>\\n","title":"190. 颠倒二进制位","relatedTags":["位运算","分治"],"difficult":"Easy","lang":["javascript"],"uniqueID":"190","slug":"190-Reverse-Bits"}')}}]);