(window.webpackJsonp=window.webpackJsonp||[]).push([[577],{1375:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">s</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> maxDepth = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">s</span>) </span>{\\n    <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">let</span> status=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;s.length;i++){\\n        <span class=\\"hljs-keyword\\">if</span>(s[i]===<span class=\\"hljs-string\\">\'(\'</span>){\\n            status++\\n            res=<span class=\\"hljs-built_in\\">Math</span>.max(res,status)\\n        }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(s[i]===<span class=\\"hljs-string\\">\')\'</span>){\\n            status--\\n        }\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"maximum-nesting-depth-of-the-parentheses","created_at":"2020-10-12","timeArr":[2020,9,12,17,31,8,0],"hasThinking":false,"content":"<p>如果字符串满足以下条件之一，则可以称之为 <strong>有效括号字符串</strong><strong>（valid parentheses string</strong>，可以简写为 <strong>VPS</strong>）：</p>\\n\\n<ul>\\n\\t<li>字符串是一个空字符串 <code>\\"\\"</code>，或者是一个不为 <code>\\"(\\"</code> 或 <code>\\")\\"</code> 的单字符。</li>\\n\\t<li>字符串可以写为 <code>AB</code>（<code>A</code> 与 <code>B</code> 字符串连接），其中 <code>A</code> 和 <code>B</code> 都是 <strong>有效括号字符串</strong> 。</li>\\n\\t<li>字符串可以写为 <code>(A)</code>，其中 <code>A</code> 是一个 <strong>有效括号字符串</strong> 。</li>\\n</ul>\\n\\n<p>类似地，可以定义任何有效括号字符串 <code>S</code> 的 <strong>嵌套深度</strong> <code>depth(S)</code>：</p>\\n\\n<ul>\\n\\t<li><code>depth(\\"\\") = 0</code></li>\\n\\t<li><code>depth(C) = 0</code>，其中 <code>C</code> 是单个字符的字符串，且该字符不是 <code>\\"(\\"</code> 或者 <code>\\")\\"</code></li>\\n\\t<li><code>depth(A + B) = max(depth(A), depth(B))</code>，其中 <code>A</code> 和 <code>B</code> 都是 <strong>有效括号字符串</strong></li>\\n\\t<li><code>depth(\\"(\\" + A + \\")\\") = 1 + depth(A)</code>，其中 <code>A</code> 是一个 <strong>有效括号字符串</strong></li>\\n</ul>\\n\\n<p>例如：<code>\\"\\"</code>、<code>\\"()()\\"</code>、<code>\\"()(()())\\"</code> 都是 <strong>有效括号字符串</strong>（嵌套深度分别为 0、1、2），而 <code>\\")(\\"</code> 、<code>\\"(()\\"</code> 都不是 <strong>有效括号字符串</strong> 。</p>\\n\\n<p>给你一个 <strong>有效括号字符串</strong> <code>s</code>，返回该字符串的<em> </em><code>s</code> <strong>嵌套深度</strong> 。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = \\"(1+(2*3)+((<strong>8</strong>)/4))+1\\"\\n<strong>输出：</strong>3\\n<strong>解释：</strong>数字 8 在嵌套的 3 层括号中。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = \\"(1)+((2))+(((<strong>3</strong>)))\\"\\n<strong>输出：</strong>3\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = \\"1+(<strong>2</strong>*3)/(2-1)\\"\\n<strong>输出：</strong>1\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = \\"<strong>1</strong>\\"\\n<strong>输出：</strong>0\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= s.length <= 100</code></li>\\n\\t<li><code>s</code> 由数字 <code>0-9</code> 和字符 <code>\'+\'</code>、<code>\'-\'</code>、<code>\'*\'</code>、<code>\'/\'</code>、<code>\'(\'</code>、<code>\')\'</code> 组成</li>\\n\\t<li>题目数据保证括号表达式 <code>s</code> 是 <strong>有效的括号表达式</strong></li>\\n</ul>\\n","title":"1614. 括号的最大嵌套深度","relatedTags":["栈","字符串"],"difficult":"Easy","lang":["javascript"],"uniqueID":"1614","slug":"1614-Maximum-Nesting-Depth-of-the-Parentheses"}')}}]);