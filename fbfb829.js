(window.webpackJsonp=window.webpackJsonp||[]).push([[830],{1628:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">matrix</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[][]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> pacificAtlantic = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">matrix</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(matrix.length===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span> []\\n  <span class=\\"hljs-keyword\\">let</span> m=matrix.length,n=matrix[<span class=\\"hljs-number\\">0</span>].length\\n  <span class=\\"hljs-keyword\\">let</span> pacific=<span class=\\"hljs-built_in\\">Array</span>(m).fill().map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span>=&gt;</span><span class=\\"hljs-built_in\\">Array</span>(n).fill(<span class=\\"hljs-literal\\">false</span>))\\n  <span class=\\"hljs-keyword\\">let</span> atlantic=<span class=\\"hljs-built_in\\">Array</span>(m).fill().map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span>=&gt;</span><span class=\\"hljs-built_in\\">Array</span>(n).fill(<span class=\\"hljs-literal\\">false</span>))\\n  <span class=\\"hljs-keyword\\">let</span> moves=[[<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">0</span>],[<span class=\\"hljs-number\\">1</span>,<span class=\\"hljs-number\\">0</span>],[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">-1</span>],[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">1</span>]]\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">dfs</span>(<span class=\\"hljs-params\\">[x,y],ocean</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(ocean[x][y])<span class=\\"hljs-keyword\\">return</span>\\n    ocean[x][y]=<span class=\\"hljs-literal\\">true</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> [dx,dy] <span class=\\"hljs-keyword\\">of</span> moves){\\n      <span class=\\"hljs-keyword\\">let</span> nx=dx+x,ny=dy+y\\n      <span class=\\"hljs-keyword\\">if</span>(nx&lt;<span class=\\"hljs-number\\">0</span> || ny&lt;<span class=\\"hljs-number\\">0</span> || nx&gt;=m || ny&gt;=n)<span class=\\"hljs-keyword\\">continue</span>\\n      <span class=\\"hljs-keyword\\">if</span>(matrix[nx][ny]&lt;matrix[x][y])<span class=\\"hljs-keyword\\">continue</span>\\n      dfs([nx,ny],ocean)\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> res=[]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;m;i++)dfs([i,<span class=\\"hljs-number\\">0</span>],pacific)\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;n;i++)dfs([<span class=\\"hljs-number\\">0</span>,i],pacific)\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;m;i++)dfs([i,n<span class=\\"hljs-number\\">-1</span>],atlantic)\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;n;i++)dfs([m<span class=\\"hljs-number\\">-1</span>,i],atlantic)\\n  \\n  <span class=\\"hljs-comment\\">// console.log(pacific,atlantic)</span>\\n  \\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;m;i++){\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;n;j++){\\n      <span class=\\"hljs-keyword\\">if</span>(pacific[i][j] &amp;&amp; atlantic[i][j])res.push([i,j])\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"pacific-atlantic-water-flow","created_at":"2019-04-09","timeArr":[2019,3,9,12,17,55,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>分别对能流到<code>pacific</code>和<code>atlantic</code>的点计算，时间复杂度<code>O(2n)</code>。</p>\\n<p>对于<code>pacific</code>，起点只能是左边缘和上边缘，</p>\\n<p>对于<code>atlantic</code>，起点只能是右边缘和下边缘。</p>\\n<p>在<code>dfs</code>遍历过程中，如果遇到周围的高度比当前高度更小，则可以跳过，因为高度小的是不能流到高度高的。</p>\\n","content":"<p>给定一个 <code>m x n</code> 的非负整数矩阵来表示一片大陆上各个单元格的高度。&ldquo;太平洋&rdquo;处于大陆的左边界和上边界，而&ldquo;大西洋&rdquo;处于大陆的右边界和下边界。</p>\\n\\n<p>规定水流只能按照上、下、左、右四个方向流动，且只能从高到低或者在同等高度上流动。</p>\\n\\n<p>请找出那些水流既可以流动到&ldquo;太平洋&rdquo;，又能流动到&ldquo;大西洋&rdquo;的陆地单元的坐标。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ol>\\n\\t<li>输出坐标的顺序不重要</li>\\n\\t<li><em>m</em> 和 <em>n</em> 都小于150</li>\\n</ol>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例：</strong></p>\\n\\n<p>&nbsp;</p>\\n\\n<pre>\\n给定下面的 5x5 矩阵:\\n\\n  太平洋 ~   ~   ~   ~   ~ \\n       ~  1   2   2   3  (5) *\\n       ~  3   2   3  (4) (4) *\\n       ~  2   4  (5)  3   1  *\\n       ~ (6) (7)  1   4   5  *\\n       ~ (5)  1   1   2   4  *\\n          *   *   *   *   * 大西洋\\n\\n返回:\\n\\n[[0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], [4, 0]] (上图中带括号的单元).\\n</pre>\\n\\n<p>&nbsp;</p>\\n","title":"417. 太平洋大西洋水流问题","relatedTags":["深度优先搜索","广度优先搜索","数组","矩阵"],"difficult":"Middle","lang":["javascript"],"uniqueID":"417","slug":"417-Pacific-Atlantic-Water-Flow"}')}}]);