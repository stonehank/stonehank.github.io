(window.webpackJsonp=window.webpackJsonp||[]).push([[811],{1609:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string[][]}</span> <span class=\\"hljs-variable\\">equations</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">values</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string[][]}</span> <span class=\\"hljs-variable\\">queries</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> calcEquation = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">equations, values, queries</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> N=values.length\\n  <span class=\\"hljs-keyword\\">let</span> connect={}\\n  <span class=\\"hljs-keyword\\">let</span> hash={} \\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;N;i++){\\n    <span class=\\"hljs-keyword\\">let</span> [x,y]=equations[i],\\n        v=values[i]\\n    <span class=\\"hljs-keyword\\">let</span> vx=hash[x],vy=hash[y]\\n    <span class=\\"hljs-keyword\\">if</span>(vx==<span class=\\"hljs-literal\\">null</span> &amp;&amp; vy==<span class=\\"hljs-literal\\">null</span>){\\n     vy=<span class=\\"hljs-number\\">1</span>;vx=v \\n    }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(vy==<span class=\\"hljs-literal\\">null</span>)vy=vx/v\\n    <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(vx==<span class=\\"hljs-literal\\">null</span>)vx=vy*v\\n    <span class=\\"hljs-keyword\\">else</span>{\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;connect[x].length;j++){\\n        hash[connect[x][j]]*=v*vy\\n      }\\n      vx=vy*v\\n    }\\n    hash[x]=vx\\n    hash[y]=vy\\n    <span class=\\"hljs-keyword\\">if</span>(connect[x]==<span class=\\"hljs-literal\\">null</span>)connect[x]=[y]\\n    <span class=\\"hljs-keyword\\">else</span> connect[x].push(y)\\n    <span class=\\"hljs-keyword\\">if</span>(connect[y]==<span class=\\"hljs-literal\\">null</span>)connect[y]=[x]\\n    <span class=\\"hljs-keyword\\">else</span> connect[y].push(x)\\n  }\\n\\n  <span class=\\"hljs-keyword\\">let</span> res=[]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;queries.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> [x,y]=queries[i]\\n    <span class=\\"hljs-keyword\\">let</span> a=hash[x],b=hash[y]\\n    <span class=\\"hljs-keyword\\">if</span>(a==<span class=\\"hljs-literal\\">null</span> || b==<span class=\\"hljs-literal\\">null</span>){\\n      res.push(<span class=\\"hljs-number\\">-1</span>)\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      <span class=\\"hljs-keyword\\">if</span>(!check(x,y,{})){\\n        res.push(<span class=\\"hljs-number\\">-1</span>)\\n      }<span class=\\"hljs-keyword\\">else</span>{\\n        res.push(a/b)\\n      }\\n      \\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">check</span>(<span class=\\"hljs-params\\">v,w,used</span>)</span>{\\n    used[v]=<span class=\\"hljs-literal\\">true</span>\\n    <span class=\\"hljs-keyword\\">let</span> adj=connect[v]\\n    <span class=\\"hljs-keyword\\">if</span>(adj.includes(w))<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;adj.length;i++){\\n      <span class=\\"hljs-keyword\\">if</span>(used[adj[i]])<span class=\\"hljs-keyword\\">continue</span>\\n      <span class=\\"hljs-keyword\\">if</span>(check(adj[i],w,used))<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"evaluate-division","created_at":"2019-04-23","timeArr":[2019,3,23,12,12,34,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>建立<code>graph</code>，里面保存每一个变量对应的另一个变量以及倍率。</p>\\n<p>例如 <code>a/b=5</code>，那么<code>graph[a]=[b,5]</code>，<code>graph[b]=[a,1/5]</code>。</p>\\n<p>接着遍历<code>queries</code>，对于每一对变量，通过<code>dfs</code>在<code>graph</code>中找出它们的最终倍率，如果找不到则返回<code>-1</code>。</p>\\n","content":"<p>给你一个变量对数组 <code>equations</code> 和一个实数值数组 <code>values</code> 作为已知条件，其中 <code>equations[i] = [A<sub>i</sub>, B<sub>i</sub>]</code> 和 <code>values[i]</code> 共同表示等式 <code>A<sub>i</sub> / B<sub>i</sub> = values[i]</code> 。每个 <code>A<sub>i</sub></code> 或 <code>B<sub>i</sub></code> 是一个表示单个变量的字符串。</p>\\n\\n<p>另有一些以数组 <code>queries</code> 表示的问题，其中 <code>queries[j] = [C<sub>j</sub>, D<sub>j</sub>]</code> 表示第 <code>j</code> 个问题，请你根据已知条件找出 <code>C<sub>j</sub> / D<sub>j</sub> = ?</code> 的结果作为答案。</p>\\n\\n<p>返回 <strong>所有问题的答案</strong> 。如果存在某个无法确定的答案，则用 <code>-1.0</code> 替代这个答案。如果问题中出现了给定的已知条件中没有出现的字符串，也需要用 <code>-1.0</code> 替代这个答案。</p>\\n\\n<p><strong>注意：</strong>输入总是有效的。你可以假设除法运算中不会出现除数为 0 的情况，且不存在任何矛盾的结果。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>equations = [[\\"a\\",\\"b\\"],[\\"b\\",\\"c\\"]], values = [2.0,3.0], queries = [[\\"a\\",\\"c\\"],[\\"b\\",\\"a\\"],[\\"a\\",\\"e\\"],[\\"a\\",\\"a\\"],[\\"x\\",\\"x\\"]]\\n<strong>输出：</strong>[6.00000,0.50000,-1.00000,1.00000,-1.00000]\\n<strong>解释：</strong>\\n条件：<em>a / b = 2.0</em>, <em>b / c = 3.0</em>\\n问题：<em>a / c = ?</em>, <em>b / a = ?</em>, <em>a / e = ?</em>, <em>a / a = ?</em>, <em>x / x = ?</em>\\n结果：[6.0, 0.5, -1.0, 1.0, -1.0 ]\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>equations = [[\\"a\\",\\"b\\"],[\\"b\\",\\"c\\"],[\\"bc\\",\\"cd\\"]], values = [1.5,2.5,5.0], queries = [[\\"a\\",\\"c\\"],[\\"c\\",\\"b\\"],[\\"bc\\",\\"cd\\"],[\\"cd\\",\\"bc\\"]]\\n<strong>输出：</strong>[3.75000,0.40000,5.00000,0.20000]\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>equations = [[\\"a\\",\\"b\\"]], values = [0.5], queries = [[\\"a\\",\\"b\\"],[\\"b\\",\\"a\\"],[\\"a\\",\\"c\\"],[\\"x\\",\\"y\\"]]\\n<strong>输出：</strong>[0.50000,2.00000,-1.00000,-1.00000]\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= equations.length <= 20</code></li>\\n\\t<li><code>equations[i].length == 2</code></li>\\n\\t<li><code>1 <= A<sub>i</sub>.length, B<sub>i</sub>.length <= 5</code></li>\\n\\t<li><code>values.length == equations.length</code></li>\\n\\t<li><code>0.0 < values[i] <= 20.0</code></li>\\n\\t<li><code>1 <= queries.length <= 20</code></li>\\n\\t<li><code>queries[i].length == 2</code></li>\\n\\t<li><code>1 <= C<sub>j</sub>.length, D<sub>j</sub>.length <= 5</code></li>\\n\\t<li><code>A<sub>i</sub>, B<sub>i</sub>, C<sub>j</sub>, D<sub>j</sub></code> 由小写英文字母与数字组成</li>\\n</ul>\\n","title":"399. 除法求值","relatedTags":["深度优先搜索","广度优先搜索","并查集","图","数组","最短路"],"difficult":"Middle","lang":["javascript"],"uniqueID":"399","slug":"399-Evaluate-Division"}')}}]);