(window.webpackJsonp=window.webpackJsonp||[]).push([[307],{1105:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{TreeNode}</span> <span class=\\"hljs-variable\\">root</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">sum</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{boolean}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> pathSum = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">root, sum</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> res=[]\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">path</span>(<span class=\\"hljs-params\\">root,sum,arr</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(!root)<span class=\\"hljs-keyword\\">return</span>\\n    <span class=\\"hljs-keyword\\">if</span>(sum===root.val &amp;&amp; !root.left &amp;&amp; !root.right){\\n      arr.push(root.val)\\n      res.push(arr.slice())\\n      arr.pop()\\n      <span class=\\"hljs-keyword\\">return</span>\\n    } \\n    arr.push(root.val)\\n    path(root.left,sum-root.val,arr)\\n    path(root.right,sum-root.val,arr)\\n    arr.pop()\\n  }\\n  path(root,sum,[])\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"path-sum-ii","created_at":"2019-03-18","timeArr":[2019,2,18,15,0,2,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>必须同时满足<code>sum</code>和<code>leaf</code>节点，才能作为结果添加进<code>res</code>。</p>\\n","content":"<p>给你二叉树的根节点 <code>root</code> 和一个整数目标和 <code>targetSum</code> ，找出所有 <strong>从根节点到叶子节点</strong> 路径总和等于给定目标和的路径。</p>\\n\\n<p><strong>叶子节点</strong> 是指没有子节点的节点。</p>\\n\\n<div class=\\"original__bRMd\\">\\n<div>\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2021/01/18/pathsumii1.jpg\\" style=\\"width: 500px; height: 356px;\\" />\\n<pre>\\n<strong>输入：</strong>root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22\\n<strong>输出：</strong>[[5,4,11,2],[5,8,4,5]]\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2021/01/18/pathsum2.jpg\\" style=\\"width: 212px; height: 181px;\\" />\\n<pre>\\n<strong>输入：</strong>root = [1,2,3], targetSum = 5\\n<strong>输出：</strong>[]\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>root = [1,2], targetSum = 0\\n<strong>输出：</strong>[]\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li>树中节点总数在范围 <code>[0, 5000]</code> 内</li>\\n\\t<li><code>-1000 <= Node.val <= 1000</code></li>\\n\\t<li><code>-1000 <= targetSum <= 1000</code></li>\\n</ul>\\n</div>\\n</div>\\n","title":"113. 路径总和 II","relatedTags":["树","深度优先搜索","回溯","二叉树"],"difficult":"Middle","lang":["javascript"],"uniqueID":"113","slug":"113-Path-Sum-II"}')}}]);