(window.webpackJsonp=window.webpackJsonp||[]).push([[992],{1790:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{character[]}</span> <span class=\\"hljs-variable\\">tasks</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">n</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> leastInterval = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">tasks, n</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> pq=[]\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">bsEnd</span>(<span class=\\"hljs-params\\">arr,n</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> lo=<span class=\\"hljs-number\\">0</span>,hi=arr.length<span class=\\"hljs-number\\">-1</span>\\n    <span class=\\"hljs-keyword\\">while</span>(lo&lt;hi){\\n      <span class=\\"hljs-keyword\\">let</span> mid=<span class=\\"hljs-built_in\\">Math</span>.floor((lo+hi)/<span class=\\"hljs-number\\">2</span>)\\n      <span class=\\"hljs-keyword\\">if</span>(arr[mid][<span class=\\"hljs-number\\">1</span>]&lt;n)lo=mid+<span class=\\"hljs-number\\">1</span>\\n      <span class=\\"hljs-keyword\\">else</span> hi=mid\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> hi\\n  }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">insert</span>(<span class=\\"hljs-params\\">n</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(pq.length===<span class=\\"hljs-number\\">0</span> || pq[pq.length<span class=\\"hljs-number\\">-1</span>][<span class=\\"hljs-number\\">1</span>]&lt;n[<span class=\\"hljs-number\\">1</span>]){\\n      pq.push(n)\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      <span class=\\"hljs-keyword\\">let</span> idx=bsEnd(pq,n[<span class=\\"hljs-number\\">1</span>])\\n      pq.splice(idx,<span class=\\"hljs-number\\">0</span>,n)\\n    }\\n  }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">delMax</span>(<span class=\\"hljs-params\\"></span>)</span>{\\n    <span class=\\"hljs-keyword\\">return</span> pq.pop()\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> acode=<span class=\\"hljs-string\\">\'A\'</span>.charCodeAt(<span class=\\"hljs-number\\">0</span>)\\n  <span class=\\"hljs-keyword\\">let</span> taskCount=<span class=\\"hljs-built_in\\">Array</span>(<span class=\\"hljs-number\\">26</span>).fill(<span class=\\"hljs-number\\">0</span>)\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;tasks.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> code=tasks[i].charCodeAt(<span class=\\"hljs-number\\">0</span>)-acode\\n    taskCount[code]++\\n  }\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;taskCount.length;i++){\\n    <span class=\\"hljs-keyword\\">if</span>(taskCount[i]&gt;<span class=\\"hljs-number\\">0</span>)insert([<span class=\\"hljs-built_in\\">String</span>.fromCharCode(i+acode),taskCount[i]])\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> ans=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">while</span>(pq.length&gt;<span class=\\"hljs-number\\">0</span>){\\n    <span class=\\"hljs-keyword\\">let</span> temp=[]\\n    <span class=\\"hljs-keyword\\">let</span> limit=<span class=\\"hljs-built_in\\">Math</span>.min(pq.length,n+<span class=\\"hljs-number\\">1</span>)\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;limit;i++){\\n      <span class=\\"hljs-keyword\\">let</span> del=delMax()\\n      <span class=\\"hljs-keyword\\">if</span>(del)temp.push([del[<span class=\\"hljs-number\\">0</span>],del[<span class=\\"hljs-number\\">1</span>]<span class=\\"hljs-number\\">-1</span>])\\n    }\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;temp.length;i++){\\n      <span class=\\"hljs-keyword\\">if</span>(temp[i][<span class=\\"hljs-number\\">1</span>]&gt;<span class=\\"hljs-number\\">0</span>)insert(temp[i])\\n    }\\n    <span class=\\"hljs-keyword\\">if</span>(pq.length===<span class=\\"hljs-number\\">0</span>)ans+=limit\\n    <span class=\\"hljs-keyword\\">else</span> ans+=(n+<span class=\\"hljs-number\\">1</span>)\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> ans\\n};\\n</code></pre>\\n"],"querySlug":"task-scheduler","created_at":"2019-03-14","timeArr":[2019,2,14,16,5,6,0],"hasThinking":false,"content":"<p>给你一个用字符数组 <code>tasks</code> 表示的 CPU 需要执行的任务列表。其中每个字母表示一种不同种类的任务。任务可以以任意顺序执行，并且每个任务都可以在 1 个单位时间内执行完。在任何一个单位时间，CPU 可以完成一个任务，或者处于待命状态。</p>\\n\\n<p>然而，两个<strong> 相同种类</strong> 的任务之间必须有长度为整数<strong> </strong><code>n</code><strong> </strong>的冷却时间，因此至少有连续 <code>n</code> 个单位时间内 CPU 在执行不同的任务，或者在待命状态。</p>\\n\\n<p>你需要计算完成所有任务所需要的<strong> 最短时间</strong> 。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>tasks = [\\"A\\",\\"A\\",\\"A\\",\\"B\\",\\"B\\",\\"B\\"], n = 2\\n<strong>输出：</strong>8\\n<strong>解释：</strong>A -> B -> (待命) -> A -> B -> (待命) -> A -> B\\n     在本示例中，两个相同类型任务之间必须间隔长度为 n = 2 的冷却时间，而执行一个任务只需要一个单位时间，所以中间出现了（待命）状态。 </pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>tasks = [\\"A\\",\\"A\\",\\"A\\",\\"B\\",\\"B\\",\\"B\\"], n = 0\\n<strong>输出：</strong>6\\n<strong>解释：</strong>在这种情况下，任何大小为 6 的排列都可以满足要求，因为 n = 0\\n[\\"A\\",\\"A\\",\\"A\\",\\"B\\",\\"B\\",\\"B\\"]\\n[\\"A\\",\\"B\\",\\"A\\",\\"B\\",\\"A\\",\\"B\\"]\\n[\\"B\\",\\"B\\",\\"B\\",\\"A\\",\\"A\\",\\"A\\"]\\n...\\n诸如此类\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>tasks = [\\"A\\",\\"A\\",\\"A\\",\\"A\\",\\"A\\",\\"A\\",\\"B\\",\\"C\\",\\"D\\",\\"E\\",\\"F\\",\\"G\\"], n = 2\\n<strong>输出：</strong>16\\n<strong>解释：</strong>一种可能的解决方案是：\\n     A -> B -> C -> A -> D -> E -> A -> F -> G -> A -> (待命) -> (待命) -> A -> (待命) -> (待命) -> A\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= task.length <= 10<sup>4</sup></code></li>\\n\\t<li><code>tasks[i]</code> 是大写英文字母</li>\\n\\t<li><code>n</code> 的取值范围为 <code>[0, 100]</code></li>\\n</ul>\\n","title":"621. 任务调度器","relatedTags":["贪心","数组","哈希表","计数","排序","堆（优先队列）"],"difficult":"Middle","lang":["javascript"],"uniqueID":"621","slug":"621-Task-Scheduler"}')}}]);