(window.webpackJsonp=window.webpackJsonp||[]).push([[1285],{2083:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">A</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> maxSubarraySumCircular = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">A</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> N = A.length;\\n  <span class=\\"hljs-keyword\\">let</span> P = <span class=\\"hljs-built_in\\">Array</span>(<span class=\\"hljs-number\\">2</span>*N+<span class=\\"hljs-number\\">1</span>).fill(<span class=\\"hljs-number\\">0</span>)\\n  <span class=\\"hljs-keyword\\">for</span> (<span class=\\"hljs-keyword\\">let</span> i = <span class=\\"hljs-number\\">0</span>; i &lt; <span class=\\"hljs-number\\">2</span>*N; ++i)\\n    P[i+<span class=\\"hljs-number\\">1</span>] = P[i] + A[i % N];\\n  <span class=\\"hljs-keyword\\">let</span> ans = A[<span class=\\"hljs-number\\">0</span>];\\n  <span class=\\"hljs-keyword\\">let</span> stack = [<span class=\\"hljs-number\\">0</span>]\\n  <span class=\\"hljs-keyword\\">for</span> (<span class=\\"hljs-keyword\\">let</span> j = <span class=\\"hljs-number\\">1</span>; j &lt;= <span class=\\"hljs-number\\">2</span>*N; ++j) {\\n    <span class=\\"hljs-keyword\\">if</span> (stack[<span class=\\"hljs-number\\">0</span>] &lt; j-N)stack.shift()\\n    ans = <span class=\\"hljs-built_in\\">Math</span>.max(ans, P[j] - P[stack[<span class=\\"hljs-number\\">0</span>]]);\\n    <span class=\\"hljs-keyword\\">while</span> (stack.length&gt;<span class=\\"hljs-number\\">0</span> &amp;&amp; P[j] &lt;= P[stack[stack.length<span class=\\"hljs-number\\">-1</span>]]){\\n      stack.pop()\\n    }\\n    stack.push(j)\\n  }\\n\\n  <span class=\\"hljs-keyword\\">return</span> ans;\\n\\n};\\n</code></pre>\\n"],"querySlug":"maximum-sum-circular-subarray","created_at":"2019-03-16","timeArr":[2019,2,16,22,14,9,0],"hasThinking":false,"content":"<p>给定一个由整数数组 <code>A</code>&nbsp;表示的<strong>环形数组 <code>C</code></strong>，求 <code><strong>C</strong></code>&nbsp;的非空子数组的最大可能和。</p>\\n\\n<p>在此处，<em>环形数组</em>意味着数组的末端将会与开头相连呈环状。（形式上，当<code>0 &lt;= i &lt; A.length</code>&nbsp;时&nbsp;<code>C[i] = A[i]</code>，且当&nbsp;<code>i &gt;= 0</code>&nbsp;时&nbsp;<code>C[i+A.length] = C[i]</code>）</p>\\n\\n<p>此外，子数组最多只能包含固定缓冲区 <code>A</code>&nbsp;中的每个元素一次。（形式上，对于子数组&nbsp;<code>C[i], C[i+1], ..., C[j]</code>，不存在&nbsp;<code>i &lt;= k1, k2 &lt;= j</code>&nbsp;其中&nbsp;<code>k1 % A.length&nbsp;= k2 % A.length</code>）</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>[1,-2,3,-2]\\n<strong>输出：</strong>3\\n<strong>解释：</strong>从子数组 [3] 得到最大和 3\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>[5,-3,5]\\n<strong>输出：</strong>10\\n<strong>解释：</strong>从子数组 [5,5] 得到最大和 5 + 5 = 10\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>[3,-1,2,-1]\\n<strong>输出：</strong>4\\n<strong>解释：</strong>从子数组 [2,-1,3] 得到最大和 2 + (-1) + 3 = 4\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre><strong>输入：</strong>[3,-2,2,-3]\\n<strong>输出：</strong>3\\n<strong>解释：</strong>从子数组 [3] 和 [3,-2,2] 都可以得到最大和 3\\n</pre>\\n\\n<p><strong>示例 5：</strong></p>\\n\\n<pre><strong>输入：</strong>[-2,-3,-1]\\n<strong>输出：</strong>-1\\n<strong>解释：</strong>从子数组 [-1] 得到最大和 -1\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ol>\\n\\t<li><code>-30000 &lt;= A[i] &lt;= 30000</code></li>\\n\\t<li><code>1 &lt;= A.length &lt;= 30000</code></li>\\n</ol>\\n","title":"918. 环形子数组的最大和","relatedTags":["队列","数组","分治","动态规划","单调队列"],"difficult":"Middle","lang":["javascript"],"uniqueID":"918","slug":"918-Maximum-Sum-Circular-Subarray"}')}}]);