(window.webpackJsonp=window.webpackJsonp||[]).push([[1325],{2123:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">A</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{boolean}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> canReorderDoubled = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">A</span>) </span>{\\n  A.sort(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">a,b</span>)=&gt;</span>a-b)\\n  <span class=\\"hljs-keyword\\">let</span> hash={}\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> n <span class=\\"hljs-keyword\\">of</span> A){\\n    <span class=\\"hljs-keyword\\">if</span>(hash[n]==<span class=\\"hljs-literal\\">null</span>)hash[n]=<span class=\\"hljs-number\\">1</span>\\n    <span class=\\"hljs-keyword\\">else</span> hash[n]++\\n  }\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;A.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> cur=A[i]\\n    <span class=\\"hljs-keyword\\">let</span> target=cur&gt;<span class=\\"hljs-number\\">0</span> ? cur*<span class=\\"hljs-number\\">2</span> :cur/<span class=\\"hljs-number\\">2</span>\\n    <span class=\\"hljs-keyword\\">if</span>(hash[cur]===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">continue</span>\\n    <span class=\\"hljs-keyword\\">if</span>(hash[target]&gt;<span class=\\"hljs-number\\">0</span>){\\n      hash[target]--\\n      hash[cur]--\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n};\\n</code></pre>\\n"],"querySlug":"array-of-doubled-pairs","created_at":"2019-03-17","timeArr":[2019,2,17,18,56,32,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>由题目可知，最终能符合要求的数组存在以下特点<code>A[0]*2=A[1],A[2]*2=A[3],A[4]*5=A[5]...</code></p>\\n<p>因此只需先排序，然后从小到大寻找它的对应的值，如果不存在，因为是排好序的，后面的数也不会有与它对应的，因此直接返回<code>false</code>，\\n如果存在，则减去各自的计数。</p>\\n","content":"<p>给定一个长度为偶数的整数数组 <code>arr</code>，只有对 <code>arr</code> 进行重组后可以满足 “对于每个 <code>0 <= i < len(arr) / 2</code>，都有 <code>arr[2 * i + 1] = 2 * arr[2 * i]</code>” 时，返回 <code>true</code>；否则，返回 <code>false</code>。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>arr = [3,1,3,6]\\n<strong>输出：</strong>false\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>arr = [2,1,2,6]\\n<strong>输出：</strong>false\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>arr = [4,-2,2,-4]\\n<strong>输出：</strong>true\\n<strong>解释：</strong>可以用 [-2,-4] 和 [2,4] 这两组组成 [-2,-4,2,4] 或是 [2,4,-2,-4]\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>arr = [1,2,4,16,8,4]\\n<strong>输出：</strong>false\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>0 <= arr.length <= 3 * 10<sup>4</sup></code></li>\\n\\t<li><code>arr.length</code> 是偶数</li>\\n\\t<li><code>-10<sup>5</sup> <= arr[i] <= 10<sup>5</sup></code></li>\\n</ul>\\n","title":"954. 二倍数对数组","relatedTags":["贪心","数组","哈希表","排序"],"difficult":"Middle","lang":["javascript"],"uniqueID":"954","slug":"954-Array-of-Doubled-Pairs"}')}}]);