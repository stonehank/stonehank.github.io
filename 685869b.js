(window.webpackJsonp=window.webpackJsonp||[]).push([[1227],{2025:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">N</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> primePalindrome = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">N</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> nums={<span class=\\"hljs-number\\">0</span>:<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">1</span>:<span class=\\"hljs-number\\">1</span>,<span class=\\"hljs-number\\">2</span>:<span class=\\"hljs-number\\">2</span>,<span class=\\"hljs-number\\">3</span>:<span class=\\"hljs-number\\">3</span>,<span class=\\"hljs-number\\">4</span>:<span class=\\"hljs-number\\">4</span>,<span class=\\"hljs-number\\">5</span>:<span class=\\"hljs-number\\">5</span>,<span class=\\"hljs-number\\">6</span>:<span class=\\"hljs-number\\">6</span>,<span class=\\"hljs-number\\">7</span>:<span class=\\"hljs-number\\">7</span>,<span class=\\"hljs-number\\">8</span>:<span class=\\"hljs-number\\">8</span>,<span class=\\"hljs-number\\">9</span>:<span class=\\"hljs-number\\">9</span>}\\n  <span class=\\"hljs-keyword\\">let</span> allN=<span class=\\"hljs-number\\">1e8</span>\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">checkisPrime</span>(<span class=\\"hljs-params\\">x</span>) </span>{\\n    <span class=\\"hljs-keyword\\">if</span> (x === <span class=\\"hljs-number\\">1</span>) <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>;\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">2</span>; i * i &lt;= x; i++) {\\n        <span class=\\"hljs-keyword\\">if</span>(x % i === <span class=\\"hljs-number\\">0</span>) <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>;\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>;\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> strN=<span class=\\"hljs-string\\">\'\'</span>+N\\n  <span class=\\"hljs-keyword\\">let</span> mid=<span class=\\"hljs-built_in\\">Math</span>.ceil(strN.length/<span class=\\"hljs-number\\">2</span>)<span class=\\"hljs-number\\">-1</span>\\n  <span class=\\"hljs-keyword\\">let</span> isEven=<span class=\\"hljs-literal\\">false</span>\\n  <span class=\\"hljs-keyword\\">if</span>(strN.length % <span class=\\"hljs-number\\">2</span>===<span class=\\"hljs-number\\">0</span>)isEven=<span class=\\"hljs-literal\\">true</span>\\n  <span class=\\"hljs-keyword\\">let</span> temp=strN.substring(<span class=\\"hljs-number\\">0</span>,mid)\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=nums[strN[mid]];i&lt;<span class=\\"hljs-number\\">10</span>;i++){\\n    temp+=nums[i]\\n    <span class=\\"hljs-keyword\\">let</span> len=temp.length\\n    <span class=\\"hljs-keyword\\">if</span>(!isEven)len--\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> k=<span class=\\"hljs-number\\">0</span>;k&lt;len;k++){\\n      temp+=temp[len-k<span class=\\"hljs-number\\">-1</span>]\\n    }\\n    <span class=\\"hljs-keyword\\">if</span>(+temp&gt;=N){ \\n      <span class=\\"hljs-keyword\\">if</span>(checkisPrime(+temp))<span class=\\"hljs-keyword\\">return</span> +temp\\n    }\\n    <span class=\\"hljs-keyword\\">if</span>(i==<span class=\\"hljs-number\\">9</span>){\\n      temp=+temp + <span class=\\"hljs-built_in\\">Math</span>.pow(<span class=\\"hljs-number\\">10</span>,mid) + <span class=\\"hljs-string\\">\'\'</span>\\n      i=<span class=\\"hljs-number\\">-1</span>\\n    }\\n    isEven=temp.length%<span class=\\"hljs-number\\">2</span>===<span class=\\"hljs-number\\">0</span>\\n    mid=<span class=\\"hljs-built_in\\">Math</span>.ceil(temp.length/<span class=\\"hljs-number\\">2</span>)<span class=\\"hljs-number\\">-1</span>\\n    temp=temp.substring(<span class=\\"hljs-number\\">0</span>,mid)\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"prime-palindrome","created_at":"2019-04-03","timeArr":[2019,3,3,11,1,34,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>定义一个检查是否<code>质数</code>的函数<code>isPrime</code>，和一个计算下一个<code>回文字符串</code>的函数<code>nextP</code></p>\\n<p>有了以上2个功能函数，那么就很简单了。</p>\\n<pre class=\\"hljs\\"><code>  <span class=\\"hljs-keyword\\">while</span>(<span class=\\"hljs-literal\\">true</span>){\\n    N=nextP(N)\\n    <span class=\\"hljs-keyword\\">if</span>(isPrime(N))<span class=\\"hljs-keyword\\">return</span> N\\n    N+=<span class=\\"hljs-number\\">1</span>\\n  }\\n</code></pre>\\n<p><code>isPrime</code>很简单。</p>\\n<p><code>nextP</code>的逻辑则如下：</p>\\n<ol>\\n<li>\\n<p>分割出一个数的<code>前</code>，<code>中</code>，<code>后</code>部分。</p>\\n<p>例如：</p>\\n<p><code>23456</code>，前是<code>23</code>，中是<code>4</code>，后是<code>56</code>。</p>\\n<p><code>2345</code>，前是<code>23</code>，中是<code>\'\'</code>，后是<code>45</code>。</p>\\n</li>\\n<li>\\n<p>检查当前的<code>后</code>部分比起<code>前</code>部分的反向字符串是大了还是小了，如果更大，则说明<code>前+中</code>部分需要<code>+1</code>，\\n如果小了，只需要将<code>前</code>部分的<code>reverse</code>代替<code>后</code>部分即可。</p>\\n<p>例如：</p>\\n<p><code>23456</code>和<code>2345</code>，它们的<code>后</code>部分都比<code>前</code>的<code>reverse</code>更大，因此结果分别是<code>23532</code>和<code>2442</code>。</p>\\n<p><code>18456</code>和<code>9856</code>，它们的<code>后</code>部分都比<code>前</code>的<code>reverse</code>更小，因此结果分别是<code>18481</code>和<code>9889</code>。</p>\\n</li>\\n</ol>\\n","content":"<p>求出大于或等于&nbsp;<code>N</code>&nbsp;的最小回文素数。</p>\\n\\n<p>回顾一下，如果一个数大于 1，且其因数只有 1 和它自身，那么这个数是<em>素数</em>。</p>\\n\\n<p>例如，2，3，5，7，11 以及&nbsp;13 是素数。</p>\\n\\n<p>回顾一下，如果一个数从左往右读与从右往左读是一样的，那么这个数是<em>回文数。</em></p>\\n\\n<p>例如，12321 是回文数。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>6\\n<strong>输出：</strong>7\\n</pre>\\n\\n<p><strong>示例&nbsp;2：</strong></p>\\n\\n<pre><strong>输入：</strong>8\\n<strong>输出：</strong>11\\n</pre>\\n\\n<p><strong>示例&nbsp;3：</strong></p>\\n\\n<pre><strong>输入：</strong>13\\n<strong>输出：</strong>101</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= N &lt;= 10^8</code></li>\\n\\t<li>答案肯定存在，且小于&nbsp;<code>2 * 10^8</code>。</li>\\n</ul>\\n\\n<p>&nbsp;</p>\\n\\n<p>&nbsp;</p>\\n","title":"866. 回文素数","relatedTags":["数学"],"difficult":"Middle","lang":["javascript"],"uniqueID":"866","slug":"866-Prime-Palindrome"}')}}]);