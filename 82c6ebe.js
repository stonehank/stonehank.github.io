(window.webpackJsonp=window.webpackJsonp||[]).push([[102],{584:function(e){e.exports=JSON.parse('{"content":"<h2 id=\\"css3-zhong-fu-zhi-fang-shi\\">css3种赋值方式</h2>\\n<ol>\\n<li><code>element.style.name=value</code></li>\\n<li><code>element.style.setProperty(&#39;name&#39;,&#39;value&#39;)</code></li>\\n<li><code>element.style.cssText=&quot;name:value&quot;</code></li>\\n</ol>\\n<p>1和2一次都只能对单个属性赋值，只对name属性赋值，2性能稍微好些</p>\\n<p>3一次可赋值多个属性（减少重排），但注意会先清除内联中其他非赋值属性</p>\\n<h2 id=\\"dong-tai-geng-xin-shi-jian-han-shu\\">动态更新事件函数</h2>\\n<ul>\\n<li>通常写法<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-keyword\\">var</span> someEle=<span class=\\"hljs-built_in\\">document</span>.getElementById(<span class=\\"hljs-string\\">\\"id\\"</span>)\\n<span class=\\"hljs-comment\\">// 绑定</span>\\nsomeEle.addEventListener(eventName,eventFunc)\\n<span class=\\"hljs-comment\\">// 替换</span>\\nsomeEle.removeEventListener(eventName,eventFunc)\\nsomeEle.addEventListener(eventName,newEventFunc)\\n<span class=\\"hljs-comment\\">// 解绑</span>\\nsomeEle.removeEventListener(eventName,newEventFunc)</code></pre></code></pre>\\n这只是一个元素的事件，当元素或者事件多了，会写很多绑定和解绑代码，\\n而且每次解绑都要去查询之前绑定的函数</li>\\n</ul>\\n<ul>\\n<li>动态更新写法<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">// 定义动态事件</span>\\n<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">eventListener</span>(<span class=\\"hljs-params\\">event</span>) </span>{\\n<span class=\\"hljs-keyword\\">return</span> event.currentTarget.events[event.type](event)\\n}\\n<span class=\\"hljs-comment\\">// 初始化  </span>\\n<span class=\\"hljs-keyword\\">var</span> someEle=<span class=\\"hljs-built_in\\">document</span>.getElementById(<span class=\\"hljs-string\\">\\"id\\"</span>)\\n<span class=\\"hljs-keyword\\">if</span>(!someEle.events){\\nsomeEle.events={}\\n}\\n</code></pre></code></pre>\\n</li>\\n</ul>\\n<p>// 绑定\\nsomeEle.events[eventName]=eventFunc\\nsomeEle.addEventListener(eventName,eventListener)\\n// 替换\\nsomeEle.events[eventName]=newEventFunc\\n// 解绑\\nsomeEle.removeEventListener(eventName,eventListener)</p>\\n<p>```\\n可以看到，当绑定成功后，每次更新只需要改变数据便可，不需要重新绑定</p>\\n<ul>\\n<li>注意：addEventListener绑定可以同时绑定多个事件函数，而动态绑定单个事件名称只能绑定1个事件函数</li>\\n</ul>\\n","toc":[{"anchor":"css3-zhong-fu-zhi-fang-shi","level":2,"text":"css3种赋值方式"},{"anchor":"dong-tai-geng-xin-shi-jian-han-shu","level":2,"text":"动态更新事件函数"}],"relatedTags":null,"created_at":"2018-06-30","timeArr":[2018,5,30,0,0,0,0],"title":"css3种赋值-动态绑定事件","uuid":"4f4c6e28771908a591c243c12f68d65599bc6d0e","summary":"<h4>css3种赋值方式</h4>\\n<ol>\\n<li><code>element.style.name=value</code></li>\\n<li><code>element.style.setProperty(\'name\',\'value\')</code></li>\\n<li><code>element.style.cssText=&quot;name:value&quot;</code></li>\\n</ol>\\n<p>1和2一次都只能对单个属性赋值，只对name属性赋值，2...</p>","slug":"css3-zhong-fu-zhi-dong-tai-bang-ding-shi-jian","sha":"8e96930475cb06f0123593475430fadf9ed6eec0"}')}}]);