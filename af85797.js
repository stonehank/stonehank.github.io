(window.webpackJsonp=window.webpackJsonp||[]).push([[314],{1112:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">piles</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> stoneGameII = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">piles</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> N=piles.length\\n  <span class=\\"hljs-keyword\\">let</span> rest=<span class=\\"hljs-built_in\\">Array</span>(N).fill(<span class=\\"hljs-number\\">0</span>)\\n  <span class=\\"hljs-keyword\\">let</span> hash={}\\n  rest[N<span class=\\"hljs-number\\">-1</span>]=piles[N<span class=\\"hljs-number\\">-1</span>]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=N<span class=\\"hljs-number\\">-2</span>;i&gt;=<span class=\\"hljs-number\\">0</span>;i--){\\n    rest[i]=rest[i+<span class=\\"hljs-number\\">1</span>]+piles[i]\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> helper(<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">1</span>)\\n  \\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">helper</span>(<span class=\\"hljs-params\\">start,M</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(start&gt;=N)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-number\\">2</span>*M&gt;=N-start)<span class=\\"hljs-keyword\\">return</span> rest[start]\\n    <span class=\\"hljs-keyword\\">if</span>(hash[start+<span class=\\"hljs-string\\">\' \'</span>+M])<span class=\\"hljs-keyword\\">return</span> hash[start+<span class=\\"hljs-string\\">\' \'</span>+M]\\n    <span class=\\"hljs-keyword\\">let</span> min=<span class=\\"hljs-literal\\">Infinity</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">1</span>;i&lt;=<span class=\\"hljs-number\\">2</span>*M;i++){\\n      min=<span class=\\"hljs-built_in\\">Math</span>.min(min,helper(start+i,<span class=\\"hljs-built_in\\">Math</span>.max(i,M)))\\n    }\\n    <span class=\\"hljs-keyword\\">let</span> res=rest[start]-min\\n    hash[start+<span class=\\"hljs-string\\">\' \'</span>+M]=res\\n    <span class=\\"hljs-keyword\\">return</span> res\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"stone-game-ii","created_at":"2019-07-28","timeArr":[2019,6,28,13,25,4,0],"hasThinking":false,"content":"<p>亚历克斯和李继续他们的石子游戏。许多堆石子&nbsp;<strong>排成一行</strong>，每堆都有正整数颗石子&nbsp;<code>piles[i]</code>。游戏以谁手中的石子最多来决出胜负。</p>\\n\\n<p>亚历克斯和李轮流进行，亚历克斯先开始。最初，<code>M = 1</code>。</p>\\n\\n<p>在每个玩家的回合中，该玩家可以拿走剩下的&nbsp;<strong>前</strong>&nbsp;<code>X</code>&nbsp;堆的所有石子，其中&nbsp;<code>1 &lt;= X &lt;= 2M</code>。然后，令&nbsp;<code>M = max(M, X)</code>。</p>\\n\\n<p>游戏一直持续到所有石子都被拿走。</p>\\n\\n<p>假设亚历克斯和李都发挥出最佳水平，返回亚历克斯可以得到的最大数量的石头。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例：</strong></p>\\n\\n<pre><strong>输入：</strong>piles = [2,7,9,4,4]\\n<strong>输出：</strong>10\\n<strong>解释：\\n</strong>如果亚历克斯在开始时拿走一堆石子，李拿走两堆，接着亚历克斯也拿走两堆。在这种情况下，亚历克斯可以拿到 2 + 4 + 4 = 10 颗石子。 \\n如果亚历克斯在开始时拿走两堆石子，那么李就可以拿走剩下全部三堆石子。在这种情况下，亚历克斯可以拿到 2 + 7 = 9 颗石子。\\n所以我们返回更大的 10。 \\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= piles.length &lt;= 100</code></li>\\n\\t<li><code>1 &lt;= piles[i]&nbsp;&lt;= 10 ^ 4</code></li>\\n</ul>\\n","title":"1140. 石子游戏 II","relatedTags":["数组","数学","动态规划","博弈"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1140","slug":"1140-Stone-Game-II"}')}}]);