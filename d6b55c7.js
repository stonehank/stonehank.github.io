(window.webpackJsonp=window.webpackJsonp||[]).push([[493],{1291:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{TreeNode}</span> <span class=\\"hljs-variable\\">root</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> preorderTraversal = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">root</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> stack=[],res=[]\\n  <span class=\\"hljs-keyword\\">let</span> node=root\\n  <span class=\\"hljs-keyword\\">while</span>(stack.length&gt;<span class=\\"hljs-number\\">0</span> || node){\\n    <span class=\\"hljs-keyword\\">while</span>(node){\\n      res.push(node.val)\\n      stack.push(node)\\n      node=node.left\\n    }\\n    node=stack.pop()\\n    node=node.right\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"binary-tree-preorder-traversal","created_at":"2019-03-18","timeArr":[2019,2,18,20,19,18,0],"hasThinking":false,"content":"<p>给你二叉树的根节点 <code>root</code> ，返回它节点值的 <strong>前序</strong><em> </em>遍历。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2020/09/15/inorder_1.jpg\\" style=\\"width: 202px; height: 324px;\\" />\\n<pre>\\n<strong>输入：</strong>root = [1,null,2,3]\\n<strong>输出：</strong>[1,2,3]\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>root = []\\n<strong>输出：</strong>[]\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>root = [1]\\n<strong>输出：</strong>[1]\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2020/09/15/inorder_5.jpg\\" style=\\"width: 202px; height: 202px;\\" />\\n<pre>\\n<strong>输入：</strong>root = [1,2]\\n<strong>输出：</strong>[1,2]\\n</pre>\\n\\n<p><strong>示例 5：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2020/09/15/inorder_4.jpg\\" style=\\"width: 202px; height: 202px;\\" />\\n<pre>\\n<strong>输入：</strong>root = [1,null,2]\\n<strong>输出：</strong>[1,2]\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li>树中节点数目在范围 <code>[0, 100]</code> 内</li>\\n\\t<li><code>-100 <= Node.val <= 100</code></li>\\n</ul>\\n\\n<p> </p>\\n\\n<p><strong>进阶：</strong>递归算法很简单，你可以通过迭代算法完成吗？</p>\\n","title":"144. 二叉树的前序遍历","relatedTags":["栈","树","深度优先搜索","二叉树"],"difficult":"Easy","lang":["javascript"],"uniqueID":"144","slug":"144-Binary-Tree-Preorder-Traversal"}')}}]);