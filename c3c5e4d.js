(window.webpackJsonp=window.webpackJsonp||[]).push([[131],{613:function(e){e.exports=JSON.parse('{"content":"<h4 id=\\"jian-ting-wang-ye-du-qu-zhuang-kuang-shi-yong\\">监听网页读取状况使用</h4>\\n<p><code>DOMContentLoaded</code>和<code>window.onload</code></p>\\n<p>监听网页展示状况，可以调用一系列<code>Page LIfecycle</code>API</p>\\n<h4 id=\\"sheng-ming-zhou-qi\\">生命周期</h4>\\n<p><img src=\\"https://raw.githubusercontent.com/WICG/page-lifecycle/master/LifecycleStates.png\\" alt=\\"\\"></p>\\n<ul>\\n<li><code>Active</code>：网页可见并且接受输入，例如滚动，键入字符</li>\\n<li><code>Passive</code>：网页可见并且不接受输入，UI执行，例如正在console平台键入</li>\\n<li><code>Hidden</code>：网页不可见，UI不执行</li>\\n<li><code>Terminated</code>：用户主动关闭页面，也有可能从Frozen状态直接结束。</li>\\n<li><code>Frozen</code>：用户未关闭页面，页面长时间未使用被冻结，网页不会再被分配 CPU 计算资源(小部分任务继续运行)。</li>\\n<li><code>Discarded</code>：网页长时间冻结，卸载网页，清除占用内存，再次进入会重新加载。(当tab过多，容易出现这种情况)</li>\\n</ul>\\n<h4 id=\\"shi-jian\\">事件</h4>\\n<ul>\\n<li><p>focus </p>\\n</li>\\n<li><p>blur</p>\\n</li>\\n<li><p>visibilitychange : 当页面可见状态发生变化，例如，最小化，切换tab，关闭tab等</p>\\n</li>\\n<li><p>freeze : chrome 68新增，当页面转为<code>Frozen</code>时触发。</p>\\n</li>\\n<li><p>resume : chrome 68新增，当页面离开<code>Frozen</code>并且不是关闭时触发。</p>\\n</li>\\n<li><p>pageshow </p>\\n<blockquote>\\n<p><code>pageshow</code>事件在用户加载网页时触发。这时，有可能是全新的页面加载，也可能是从缓存中获取的页面。\\n  如果是从缓存中获取，则该事件对象的<code>event.persisted</code>属性为true，否则为false。</p>\\n</blockquote>\\n<blockquote>\\n<p>这个事件的名字有点误导，它跟页面的可见性其实毫无关系，只跟浏览器的 History 记录的变化有关。</p>\\n</blockquote>\\n</li>\\n<li><p>pagehide</p>\\n<blockquote>\\n<p><code>pagehide</code>事件在用户离开当前网页、进入另一个网页时触发。它的前提是浏览器的 History 记录必须发生变化，跟网页是否可见无关。</p>\\n</blockquote>\\n<blockquote>\\n<p>如果浏览器能够将当前页面添加到缓存以供稍后重用，则事件对象的<code>event.persisted</code>属性为true。 如果为true。如果页面添加到了缓存，则页面进入 Frozen 状态，否则进入 Terminatied 状态。</p>\\n</blockquote>\\n</li>\\n<li><p>unload</p>\\n</li>\\n<li><p>beforeunload : 通过设置<code>event.returnValue</code>在退出网页时提示。</p>\\n</li>\\n</ul>\\n<h4 id=\\"shu-xing\\">属性</h4>\\n<p><code>document.visibilityState</code>：获取当前页面可见状态<code>visible</code>,<code>hidden</code>。\\n<code>document.wasDiscarded</code>：判断网页是否经过<code>Discarded</code>阶段。</p>\\n<hr>\\n<p>demo:<a href=\\"https://page-lifecycle.glitch.me/\\">https://page-lifecycle.glitch.me/</a></p>\\n<p>参考：</p>\\n<ul>\\n<li><a href=\\"http://www.ruanyifeng.com/blog/2018/11/page_lifecycle_api.html\\">Page Lifecycle API 教程</a></li>\\n<li><a href=\\"https://github.com/WICG/page-lifecycle\\">page lifecycle</a></li>\\n</ul>\\n","toc":[{"anchor":"jian-ting-wang-ye-du-qu-zhuang-kuang-shi-yong","level":4,"text":"监听网页读取状况使用"},{"anchor":"sheng-ming-zhou-qi","level":4,"text":"生命周期"},{"anchor":"shi-jian","level":4,"text":"事件"},{"anchor":"shu-xing","level":4,"text":"属性"}],"relatedTags":null,"created_at":"2018-11-07","timeArr":[2018,10,7,0,0,0,0],"title":"监控网页状态的-Page Lifecycle","uuid":"dc88a14e3350748449cfa7bae96179c2301f3548","summary":"<h4>监听网页读取状况使用</h4>\\n<p><code>DOMContentLoaded</code>和<code>window.onload</code></p>\\n<p>监听网页展示状况，可以调用一系列<code>Page LIfecycle</code>API</p>\\n<h4>生命周期：</h4>\\n<p>![](https://raw.githubusercontent.com/WICG/page-lifecycle/m...</p>","slug":"jian-kong-wang-ye-zhuang-tai-de-Page-Lifecycle","sha":"ce6d06466d2502c0c7cc081e44839f05bad8e8b0"}')}}]);