(window.webpackJsonp=window.webpackJsonp||[]).push([[1276],{2074:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Solution</span><span class=\\"hljs-params\\">(object)</span>:</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">numDecodings</span><span class=\\"hljs-params\\">(self, s)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type s: str\\n        :rtype: int\\n        \\"\\"\\"</span>\\n        <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">check</span><span class=\\"hljs-params\\">(a,b)</span>:</span>\\n          <span class=\\"hljs-keyword\\">if</span> <span class=\\"hljs-number\\">10</span>&lt;=int(a)*<span class=\\"hljs-number\\">10</span>+int(b)&lt;=<span class=\\"hljs-number\\">26</span>:\\n            <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">True</span>\\n          <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">False</span>\\n        n=len(s)\\n        dp=[<span class=\\"hljs-number\\">0</span>]*(n+<span class=\\"hljs-number\\">1</span>)\\n        dp[<span class=\\"hljs-number\\">0</span>]=<span class=\\"hljs-number\\">1</span>\\n        <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(<span class=\\"hljs-number\\">1</span>,n+<span class=\\"hljs-number\\">1</span>):\\n          <span class=\\"hljs-keyword\\">if</span> s[i<span class=\\"hljs-number\\">-1</span>]!=<span class=\\"hljs-string\\">\'0\'</span>:\\n            dp[i]=dp[i<span class=\\"hljs-number\\">-1</span>]\\n          <span class=\\"hljs-keyword\\">if</span> i&gt;<span class=\\"hljs-number\\">1</span> <span class=\\"hljs-keyword\\">and</span> check(s[i<span class=\\"hljs-number\\">-2</span>],s[i<span class=\\"hljs-number\\">-1</span>]):\\n            dp[i]+=dp[i<span class=\\"hljs-number\\">-2</span>]\\n        <span class=\\"hljs-keyword\\">return</span> dp[<span class=\\"hljs-number\\">-1</span>]\\n</code></pre>\\n"],"querySlug":"decode-ways","created_at":"2019-02-28","timeArr":[2019,1,28,15,59,28,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>DP，<code>dp[i+1]</code>为当前索引<code>i</code>以及之前的字符串有多少种组合，</p>\\n<p>那么，如果存在一个<code>i</code>(i&gt;0)，那么<code>dp[i+1]=s[i]的组合*dp[i] + (s[i-1],s[i])的组合*dp[i-1]</code>。</p>\\n<p>例如：<code>[1,3,6,2,1,2]</code>:</p>\\n<p>当<code>i</code>为<code>2</code>，对应的<code>s[i]</code>为<code>6</code>，那么<code>dp[i+1]</code>就是<code>(6的组合 * [1,3]的组合) + ([3,6]的组合 * [1]的组合)</code>。</p>\\n<p>如果索引<code>i</code>为<code>1</code>，那么前面只有1位数，因此我们初始默认<code>dp[0]=1</code>。</p>\\n<p>最后就是组合的算法，<strong>1位数</strong>的组合计算就是除了输入为<code>&quot;0&quot;</code>返回<code>0</code>，其他都可以返回<code>1</code>。</p>\\n<p><strong>2位数</strong>的组合计算，需要判断这个2位数是否在<code>[10,26]</code>之内，在则返回<code>1</code>，不在的返回<code>0</code>；\\n如果一个2位数是<code>07</code>，也是同样返回<code>0</code>，这里不能当做1位数来计算，否则会重复。</p>\\n","content":"<p>一条包含字母 <code>A-Z</code> 的消息通过以下映射进行了 <strong>编码</strong> ：</p>\\n\\n<pre>\\n\'A\' -> 1\\n\'B\' -> 2\\n...\\n\'Z\' -> 26\\n</pre>\\n\\n<p>要 <strong>解码</strong> 已编码的消息，所有数字必须基于上述映射的方法，反向映射回字母（可能有多种方法）。例如，<code>\\"11106\\"</code> 可以映射为：</p>\\n\\n<ul>\\n\\t<li><code>\\"AAJF\\"</code> ，将消息分组为 <code>(1 1 10 6)</code></li>\\n\\t<li><code>\\"KJF\\"</code> ，将消息分组为 <code>(11 10 6)</code></li>\\n</ul>\\n\\n<p>注意，消息不能分组为  <code>(1 11 06)</code> ，因为 <code>\\"06\\"</code> 不能映射为 <code>\\"F\\"</code> ，这是由于 <code>\\"6\\"</code> 和 <code>\\"06\\"</code> 在映射中并不等价。</p>\\n\\n<p>给你一个只含数字的 <strong>非空 </strong>字符串 <code>s</code> ，请计算并返回 <strong>解码</strong> 方法的 <strong>总数</strong> 。</p>\\n\\n<p>题目数据保证答案肯定是一个 <strong>32 位</strong> 的整数。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = \\"12\\"\\n<strong>输出：</strong>2\\n<strong>解释：</strong>它可以解码为 \\"AB\\"（1 2）或者 \\"L\\"（12）。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = \\"226\\"\\n<strong>输出：</strong>3\\n<strong>解释：</strong>它可以解码为 \\"BZ\\" (2 26), \\"VF\\" (22 6), 或者 \\"BBF\\" (2 2 6) 。\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = \\"0\\"\\n<strong>输出：</strong>0\\n<strong>解释：</strong>没有字符映射到以 0 开头的数字。\\n含有 0 的有效映射是 \'J\' -> \\"10\\" 和 \'T\'-> \\"20\\" 。\\n由于没有字符，因此没有有效的方法对此进行解码，因为所有数字都需要映射。\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = \\"06\\"\\n<strong>输出：</strong>0\\n<strong>解释：</strong>\\"06\\" 不能映射到 \\"F\\" ，因为字符串含有前导 0（<code>\\"6\\"</code> 和 <code>\\"06\\"</code> 在映射中并不等价）。</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= s.length <= 100</code></li>\\n\\t<li><code>s</code> 只包含数字，并且可能包含前导零。</li>\\n</ul>\\n","title":"91. 解码方法","relatedTags":["字符串","动态规划"],"difficult":"Middle","lang":["python"],"uniqueID":"91","slug":"91-Decode-Ways"}')}}]);