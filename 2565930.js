(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{563:function(n){n.exports=JSON.parse('{"content":"<h4 id=\\"strict-mode\\">Strict Mode</h4>\\n<p>在React v16.3时添加，目的是帮助找出应用中潜在的问题。</p>\\n<p>使用：</p>\\n<pre><code class=\\"language-jsx\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-keyword\\">import</span> React <span class=\\"hljs-keyword\\">from</span> <span class=\\"hljs-string\\">\'react\'</span>;\\n\\n<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">ExampleApplication</span>(<span class=\\"hljs-params\\"></span>) </span>{\\n  <span class=\\"hljs-keyword\\">return</span> (\\n    &lt;div&gt;\\n      &lt;Header /&gt;\\n      &lt;React.StrictMode&gt;\\n        &lt;div&gt;\\n          &lt;ComponentOne /&gt;\\n          &lt;ComponentTwo /&gt;\\n        &lt;/div&gt;\\n      &lt;/React.StrictMode&gt;\\n      &lt;Footer /&gt;\\n    &lt;/div&gt;\\n  );\\n}</code></pre></code></pre>\\n<hr>\\n<p>简单总结：</p>\\n<p>StrictMode目前有助于</p>\\n<ul>\\n<li>识别具有不安全生命周期的组件</li>\\n<li>有关旧式字符串<code>ref</code>用法的警告</li>\\n<li>有关<code>findDOMNode</code>使用的警告</li>\\n<li>检测意外的副作用</li>\\n<li>检测是否有旧的<code>context</code>API</li>\\n</ul>\\n<ol>\\n<li><p>识别具有不安全生命周期的组件</p>\\n<p> 检测是否使用已经列入废弃的生命周期(检测第三方工具很方便)。</p>\\n</li>\\n<li><p>有关旧式字符串<code>ref</code>用法的警告</p>\\n<p> <code>ref</code>字符串虽然方便，但有许多<a href=\\"https://github.com/facebook/react/issues/1373\\">缺陷</a></p>\\n<p> 检测是否使用了<code>ref</code>字符串。</p>\\n</li>\\n<li><p>有关<code>findDOMNode</code>使用的警告</p>\\n<p> 如果需要获取DOM元素引用，优先使用ref，而不是<code>findDOMNode</code>。</p>\\n<p> 第一、因为当使用了<Fragment>的时候，<code>findDOMNode</code>只会引用到第一个元素，而当时渲染的元素可能有很多。</p>\\n<p> 第二、<code>findDOMNode</code>是一个一次性的调用，当渲染元素改变，它(之前的结果)并不会改变。</p>\\n</li>\\n<li><p>检测意外的副作用</p>\\n<p> React更新会经过2个阶段</p>\\n<ul>\\n<li><p><code>render</code> 这个阶段会决定哪些需要更新。</p>\\n</li>\\n<li><p><code>commit</code> 这个阶段会执行更新。</p>\\n<p>其中<code>render</code>阶段很慢(相对)，因此未来的<code>async mode</code>会将<code>render</code>阶段分割成许多小块。</p>\\n<p>因此在<code>render</code>阶段的生命周期函数有可能会重复执行。</p>\\n<p>而这个检测功能，会有意进行双调用，如果<code>render</code>阶段不是一致的结果，则有可能更容易发现bug。</p>\\n</li>\\n</ul>\\n</li>\\n<li><p>检测是否有旧的<code>context</code>API</p>\\n<p> 旧的<code>context</code>API更容易出现bug。</p>\\n</li>\\n</ol>\\n","toc":[{"anchor":"strict-mode","level":4,"text":"Strict Mode"}],"relatedTags":null,"created_at":"2018-10-30","timeArr":[2018,9,30,0,0,0,0],"title":"React的Strict Mode","uuid":"8cf3eb3203db34468cc1b1507b0c244e16cbf3ab","summary":"<h4>Strict Mode</h4>\\n<p>在React v16.3时添加，目的是帮助找出应用中潜在的问题。</p>\\n<p>使用：</p>\\n<pre class=\\"hljs\\"><code><span class=\\"hljs-keyword\\">import</span> React <span class=\\"hljs-keyword\\">from</span> <span class=\\"hljs-string\\">\'react\'</span>;\\n\\n<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">ExampleApplication</span>(<span class=\\"hljs-params\\"></span>) </span>{\\n  <span class=\\"hljs-keyword\\">return</span> (\\n    &lt;div&gt;\\n      &lt;Header /&gt;...</code></pre>","slug":"React-de-Strict-Mode","sha":"041680b86309bc84db432c597afbaf572d179c1f"}')}}]);