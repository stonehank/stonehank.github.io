(window.webpackJsonp=window.webpackJsonp||[]).push([[345],{1143:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">n</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">connections</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[][]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> criticalConnections = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">n, connections</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> graph=<span class=\\"hljs-built_in\\">Array</span>(n).fill().map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span>=&gt;</span>[])\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> [v,w] <span class=\\"hljs-keyword\\">of</span> connections){\\n    graph[v].push(w)\\n    graph[w].push(v)\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> res=[]\\n  <span class=\\"hljs-keyword\\">let</span> low=<span class=\\"hljs-built_in\\">Array</span>(n).fill(<span class=\\"hljs-number\\">0</span>)\\n  <span class=\\"hljs-keyword\\">let</span> vtime=<span class=\\"hljs-built_in\\">Array</span>(n).fill(<span class=\\"hljs-number\\">0</span>)\\n  <span class=\\"hljs-keyword\\">let</span> parent=<span class=\\"hljs-built_in\\">Array</span>(n).fill(<span class=\\"hljs-number\\">-1</span>)\\n  <span class=\\"hljs-keyword\\">let</span> visited=<span class=\\"hljs-built_in\\">Array</span>(n).fill(<span class=\\"hljs-literal\\">false</span>)\\n  <span class=\\"hljs-keyword\\">let</span> time=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;n;i++){\\n    <span class=\\"hljs-keyword\\">if</span>(visited[i])<span class=\\"hljs-keyword\\">continue</span>\\n    dfs(i,visited,parent,low,vtime)\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">dfs</span>(<span class=\\"hljs-params\\">v,visited,parent,low,vtime</span>)</span>{\\n    visited[v]=<span class=\\"hljs-literal\\">true</span>\\n    time++\\n    vtime[v]=time\\n    low[v]=time\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> w <span class=\\"hljs-keyword\\">of</span> graph[v]){\\n      <span class=\\"hljs-keyword\\">if</span>(!visited[w]){\\n        parent[w]=v\\n        dfs(w,visited,parent,low,vtime)\\n        low[v]=<span class=\\"hljs-built_in\\">Math</span>.min(low[v],low[w])\\n        <span class=\\"hljs-keyword\\">if</span>(low[w]&gt;vtime[v]){\\n          res.push([v,w])\\n        }        \\n      }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(w!==parent[v]){\\n        low[v]=<span class=\\"hljs-built_in\\">Math</span>.min(low[v],vtime[w])\\n      }\\n    }\\n  }\\n \\n};\\n</code></pre>\\n"],"querySlug":"critical-connections-in-a-network","created_at":"2019-09-15","timeArr":[2019,8,15,15,22,16,0],"hasThinking":false,"content":"<p>力扣数据中心有&nbsp;<code>n</code>&nbsp;台服务器，分别按从&nbsp;<code>0</code>&nbsp;到&nbsp;<code>n-1</code>&nbsp;的方式进行了编号。</p>\\n\\n<p>它们之间以「服务器到服务器」点对点的形式相互连接组成了一个内部集群，其中连接&nbsp;<code>connections</code> 是无向的。</p>\\n\\n<p>从形式上讲，<code>connections[i] = [a, b]</code>&nbsp;表示服务器 <code>a</code>&nbsp;和 <code>b</code>&nbsp;之间形成连接。任何服务器都可以直接或者间接地通过网络到达任何其他服务器。</p>\\n\\n<p>「关键连接」是在该集群中的重要连接，也就是说，假如我们将它移除，便会导致某些服务器无法访问其他服务器。</p>\\n\\n<p>请你以任意顺序返回该集群内的所有 「关键连接」。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<p><strong><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/original_images/critical-connections-in-a-network.png\\" style=\\"width: 150px;\\"></strong></p>\\n\\n<pre><strong>输入：</strong>n = 4, connections = [[0,1],[1,2],[2,0],[1,3]]\\n<strong>输出：</strong>[[1,3]]\\n<strong>解释：</strong>[[3,1]] 也是正确的。</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= n &lt;= 10^5</code></li>\\n\\t<li><code>n-1 &lt;= connections.length &lt;= 10^5</code></li>\\n\\t<li><code>connections[i][0] != connections[i][1]</code></li>\\n\\t<li>不存在重复的连接</li>\\n</ul>\\n","title":"1192. 查找集群内的「关键连接」","relatedTags":["深度优先搜索","图","双连通分量"],"difficult":"Hard","lang":["javascript"],"uniqueID":"1192","slug":"1192-Critical-Connections-in-a-Network"}')}}]);