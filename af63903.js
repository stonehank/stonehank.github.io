(window.webpackJsonp=window.webpackJsonp||[]).push([[738],{1536:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">n</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">edges</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> findMinHeightTrees = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">n, edges</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(n===<span class=\\"hljs-number\\">1</span>)<span class=\\"hljs-keyword\\">return</span> [<span class=\\"hljs-number\\">0</span>]\\n  <span class=\\"hljs-keyword\\">let</span> graph=<span class=\\"hljs-built_in\\">Array</span>(n).fill().map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span>=&gt;</span>[])\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> [v,w] <span class=\\"hljs-keyword\\">of</span> edges){\\n    graph[v].push(w)\\n    graph[w].push(v)\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> leaf=[]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;graph.length;i++){\\n    <span class=\\"hljs-keyword\\">if</span>(graph[i].length===<span class=\\"hljs-number\\">1</span>){\\n      leaf.push(i)\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">while</span>(n&gt;<span class=\\"hljs-number\\">2</span>){\\n    <span class=\\"hljs-keyword\\">let</span> len=leaf.length\\n    n-=len\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;len;i++){\\n      <span class=\\"hljs-keyword\\">let</span> v=leaf.shift()\\n      <span class=\\"hljs-keyword\\">let</span> nxtV=graph[v].pop()\\n      <span class=\\"hljs-keyword\\">let</span> adj=graph[nxtV]\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;adj.length;j++){\\n        <span class=\\"hljs-keyword\\">if</span>(adj[j]===v)adj.splice(j,<span class=\\"hljs-number\\">1</span>)\\n      }\\n      <span class=\\"hljs-keyword\\">if</span>(adj.length===<span class=\\"hljs-number\\">1</span>)leaf.push(nxtV)\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> leaf\\n};\\n</code></pre>\\n"],"querySlug":"minimum-height-trees","created_at":"2019-05-15","timeArr":[2019,4,15,11,17,14,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>我们要找出一棵树的最小高度的根节点，其实就是要找到最中心的<code>1</code>个或者<code>2</code>个点。</p>\\n<p>可以先假设，一条直线的路径，我们应该如何找中心点，一个很简单的方法，直线两端两个指针，各自往中间靠近，当2个指针相遇，\\n说明找到了中心点。</p>\\n<p><code>树</code>同样如此，我们首先找到<strong>只有1个邻接点</strong>的节点，然后通过不断删除，找出它们的下一个只有1个邻接点的节点，直到最后的一个或者两个节点。</p>\\n","content":"<p>树是一个无向图，其中任何两个顶点只通过一条路径连接。 换句话说，一个任何没有简单环路的连通图都是一棵树。</p>\\n\\n<p>给你一棵包含 <code>n</code> 个节点的树，标记为 <code>0</code> 到 <code>n - 1</code> 。给定数字 <code>n</code> 和一个有 <code>n - 1</code> 条无向边的 <code>edges</code> 列表（每一个边都是一对标签），其中 <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> 表示树中节点 <code>a<sub>i</sub></code> 和 <code>b<sub>i</sub></code> 之间存在一条无向边。</p>\\n\\n<p>可选择树中任何一个节点作为根。当选择节点 <code>x</code> 作为根节点时，设结果树的高度为 <code>h</code> 。在所有可能的树中，具有最小高度的树（即，<code>min(h)</code>）被称为 <strong>最小高度树</strong> 。</p>\\n\\n<p>请你找到所有的 <strong>最小高度树</strong> 并按 <strong>任意顺序</strong> 返回它们的根节点标签列表。</p>\\n树的 <strong>高度</strong> 是指根节点和叶子节点之间最长向下路径上边的数量。\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2020/09/01/e1.jpg\\" style=\\"width: 800px; height: 213px;\\" />\\n<pre>\\n<strong>输入：</strong>n = 4, edges = [[1,0],[1,2],[1,3]]\\n<strong>输出：</strong>[1]\\n<strong>解释：</strong>如图所示，当根是标签为 1 的节点时，树的高度是 1 ，这是唯一的最小高度树。</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2020/09/01/e2.jpg\\" style=\\"width: 800px; height: 321px;\\" />\\n<pre>\\n<strong>输入：</strong>n = 6, edges = [[3,0],[3,1],[3,2],[3,4],[5,4]]\\n<strong>输出：</strong>[3,4]\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>n = 1, edges = []\\n<strong>输出：</strong>[0]\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>n = 2, edges = [[0,1]]\\n<strong>输出：</strong>[0,1]\\n</pre>\\n\\n<p> </p>\\n\\n<ul>\\n</ul>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= n <= 2 * 10<sup>4</sup></code></li>\\n\\t<li><code>edges.length == n - 1</code></li>\\n\\t<li><code>0 <= a<sub>i</sub>, b<sub>i</sub> < n</code></li>\\n\\t<li><code>a<sub>i</sub> != b<sub>i</sub></code></li>\\n\\t<li>所有 <code>(a<sub>i</sub>, b<sub>i</sub>)</code> 互不相同</li>\\n\\t<li>给定的输入 <strong>保证</strong> 是一棵树，并且 <strong>不会有重复的边</strong></li>\\n</ul>\\n","title":"310. 最小高度树","relatedTags":["深度优先搜索","广度优先搜索","图","拓扑排序"],"difficult":"Middle","lang":["javascript"],"uniqueID":"310","slug":"310-Minimum-Height-Trees"}')}}]);