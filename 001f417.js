(window.webpackJsonp=window.webpackJsonp||[]).push([[1073],{1871:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">s1</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">s2</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> minimumDeleteSum = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">s1, s2</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(s1==s2)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">let</span> dp=<span class=\\"hljs-built_in\\">Array</span>(s1.length+<span class=\\"hljs-number\\">1</span>).fill().map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span>=&gt;</span><span class=\\"hljs-built_in\\">Array</span>(s2.length+<span class=\\"hljs-number\\">1</span>).fill(<span class=\\"hljs-literal\\">null</span>))\\n  <span class=\\"hljs-keyword\\">let</span> res= dfs(<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">0</span>)\\n  <span class=\\"hljs-keyword\\">return</span> res\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">dfs</span>(<span class=\\"hljs-params\\">i,j</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">if</span>(dp[i][j]!=<span class=\\"hljs-literal\\">null</span>)<span class=\\"hljs-keyword\\">return</span> dp[i][j]\\n    <span class=\\"hljs-keyword\\">while</span>(i&lt;s1.length || j &lt;s2.length){\\n      <span class=\\"hljs-keyword\\">if</span>(i===s1.length){\\n        <span class=\\"hljs-keyword\\">while</span>(j&lt;s2.length){\\n          res+=s2.charCodeAt(j++)\\n        }\\n      }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(j===s2.length){\\n        <span class=\\"hljs-keyword\\">while</span>(i&lt;s1.length){\\n          res+=s1.charCodeAt(i++)\\n        }\\n      }<span class=\\"hljs-keyword\\">else</span>{\\n        <span class=\\"hljs-keyword\\">if</span>(s1[i]!==s2[j]){\\n          <span class=\\"hljs-keyword\\">let</span> left=s1.charCodeAt(i)+dfs(i+<span class=\\"hljs-number\\">1</span>,j),\\n              right=s2.charCodeAt(j)+dfs(i,j+<span class=\\"hljs-number\\">1</span>)\\n          res=<span class=\\"hljs-built_in\\">Math</span>.min(left,right)\\n          <span class=\\"hljs-keyword\\">break</span>\\n        }<span class=\\"hljs-keyword\\">else</span>{\\n          i++\\n          j++\\n        }\\n      }\\n    }\\n    dp[i][j]=res\\n    <span class=\\"hljs-keyword\\">return</span> res\\n  }\\n};\\n</code></pre>\\n","<pre class=\\"hljs\\"><code><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Solution</span><span class=\\"hljs-params\\">(object)</span>:</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">minimumDeleteSum</span><span class=\\"hljs-params\\">(self, s1, s2)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type s1: str\\n        :type s2: str\\n        :rtype: int\\n        \\"\\"\\"</span>\\n        m=len(s1)\\n        n=len(s2)\\n        dp=[[<span class=\\"hljs-number\\">0</span>]*(n+<span class=\\"hljs-number\\">1</span>) <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(m+<span class=\\"hljs-number\\">1</span>)]\\n        <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(<span class=\\"hljs-number\\">1</span>,m+<span class=\\"hljs-number\\">1</span>):\\n          dp[i][<span class=\\"hljs-number\\">0</span>]=dp[i<span class=\\"hljs-number\\">-1</span>][<span class=\\"hljs-number\\">0</span>]+ord(s1[i<span class=\\"hljs-number\\">-1</span>])\\n        <span class=\\"hljs-keyword\\">for</span> j <span class=\\"hljs-keyword\\">in</span> range(<span class=\\"hljs-number\\">1</span>,n+<span class=\\"hljs-number\\">1</span>):\\n          dp[<span class=\\"hljs-number\\">0</span>][j]=dp[<span class=\\"hljs-number\\">0</span>][j<span class=\\"hljs-number\\">-1</span>]+ord(s2[j<span class=\\"hljs-number\\">-1</span>])\\n          \\n        <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(<span class=\\"hljs-number\\">1</span>,m+<span class=\\"hljs-number\\">1</span>):\\n          <span class=\\"hljs-keyword\\">for</span> j <span class=\\"hljs-keyword\\">in</span> range(<span class=\\"hljs-number\\">1</span>,n+<span class=\\"hljs-number\\">1</span>):\\n            <span class=\\"hljs-keyword\\">if</span> s1[i<span class=\\"hljs-number\\">-1</span>]==s2[j<span class=\\"hljs-number\\">-1</span>]:\\n              dp[i][j]=dp[i<span class=\\"hljs-number\\">-1</span>][j<span class=\\"hljs-number\\">-1</span>]\\n            <span class=\\"hljs-keyword\\">else</span>:\\n              dp[i][j]=min(dp[i<span class=\\"hljs-number\\">-1</span>][j]+ord(s1[i<span class=\\"hljs-number\\">-1</span>]),dp[i][j<span class=\\"hljs-number\\">-1</span>]+ord(s2[j<span class=\\"hljs-number\\">-1</span>]))\\n        \\n        <span class=\\"hljs-keyword\\">return</span> dp[m][n]\\n        \\n</code></pre>\\n"],"querySlug":"minimum-ascii-delete-sum-for-two-strings","hasThinking":false,"content":"<p>给定两个字符串<code>s1, s2</code>，找到使两个字符串相等所需删除字符的ASCII值的最小和。</p>\\n\\n<p><strong>示例 1:</strong></p>\\n\\n<pre>\\n<strong>输入:</strong> s1 = &quot;sea&quot;, s2 = &quot;eat&quot;\\n<strong>输出:</strong> 231\\n<strong>解释:</strong> 在 &quot;sea&quot; 中删除 &quot;s&quot; 并将 &quot;s&quot; 的值(115)加入总和。\\n在 &quot;eat&quot; 中删除 &quot;t&quot; 并将 116 加入总和。\\n结束时，两个字符串相等，115 + 116 = 231 就是符合条件的最小和。\\n</pre>\\n\\n<p><strong>示例&nbsp;2:</strong></p>\\n\\n<pre>\\n<strong>输入:</strong> s1 = &quot;delete&quot;, s2 = &quot;leet&quot;\\n<strong>输出:</strong> 403\\n<strong>解释:</strong> 在 &quot;delete&quot; 中删除 &quot;dee&quot; 字符串变成 &quot;let&quot;，\\n将 100[d]+101[e]+101[e] 加入总和。在 &quot;leet&quot; 中删除 &quot;e&quot; 将 101[e] 加入总和。\\n结束时，两个字符串都等于 &quot;let&quot;，结果即为 100+101+101+101 = 403 。\\n如果改为将两个字符串转换为 &quot;lee&quot; 或 &quot;eet&quot;，我们会得到 433 或 417 的结果，比答案更大。\\n</pre>\\n\\n<p><strong>注意:</strong></p>\\n\\n<ul>\\n\\t<li><code>0 &lt; s1.length, s2.length &lt;= 1000</code>。</li>\\n\\t<li>所有字符串中的字符ASCII值在<code>[97, 122]</code>之间。</li>\\n</ul>\\n","title":"712. 两个字符串的最小ASCII删除和","relatedTags":["字符串","动态规划"],"difficult":"Middle","lang":["javascript","python"],"uniqueID":"712","slug":"712-Minimum-ASCII-Delete-Sum-for-Two-Strings"}')}}]);