(window.webpackJsonp=window.webpackJsonp||[]).push([[117],{599:function(n){n.exports=JSON.parse('{"content":"<h3 id=\\"gui-ze\\">规则</h3>\\n<ol>\\n<li>原型是<code>2-3树</code></li>\\n<li>红链接：相当于<code>2-3树</code>的<code>3节点</code>，红链接中子节点是<code>红色</code>，父节点是<code>黑色</code></li>\\n<li>只存在红链接为左链接，发现红链接为右链接需要转换</li>\\n<li>当节点为null，也认为是<code>黑色</code></li>\\n<li>当插入节点，出现2个左红点相邻(不可能出现2个右红点相邻，因为第3条)，其实就是<code>2-3树</code>中出现了<code>4节点</code>，需要转换。</li>\\n<li>当删除节点，需要让被删除的节点为<code>红色</code>(通过转换)</li>\\n<li>红黑树的插入和删除都是建议在<code>递归</code>执行的基础上</li>\\n</ol>\\n<hr>\\n<h3 id=\\"cha-ru\\">插入</h3>\\n<p><img src=\\"/article/img/%E7%BA%A2%E9%BB%91%E6%A0%91-%E6%8F%92%E5%85%A5%E8%8A%82%E7%82%B9.png\\" alt=\\"\\"></p>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">insert</span>(<span class=\\"hljs-params\\"></span>)</span>{\\n  <span class=\\"hljs-comment\\">// ...正常二叉树的处理</span>\\n\\n  <span class=\\"hljs-comment\\">// 以下三条会在递归过程中处理</span>\\n  <span class=\\"hljs-keyword\\">if</span>(isRed(node.left) &amp;&amp; isRed(node.right)) flipColors(node)\\n  <span class=\\"hljs-keyword\\">if</span>(!isRed(node.left) &amp;&amp; isRed(node.right))node=rotateLeft(node)\\n  <span class=\\"hljs-keyword\\">if</span>(isRed(node.left) &amp;&amp; isRed(node.left.left))node=rotateRight(node)\\n}</code></pre></code></pre>\\n<p><img src=\\"/article/img/%E7%BA%A2%E9%BB%91%E6%A0%91-%E6%8F%92%E5%85%A5%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.png\\" alt=\\"\\"></p>\\n<p>例(B代表<code>black</code>, R代表<code>red</code>)：</p>\\n<pre><code><pre class=\\"hljs\\"><code>                              R3为右红左黑       R5为左红左左红        此时已经到达根节点，虽然左红右红，\\n    B5       添加4     B5      执行第二条     B5   执行第三条     B4    但不会执行第一条，留到下一次执行 \\n   /  \\\\      ---&gt;     /  \\\\      ---&gt;        /  \\\\     ---&gt;      /  \\\\   \\n  R3  Null          R3  Null              R4  Null            R3   R5   \\n                     \\\\                   /                                          \\n                      R4               R3                                           </code></pre></code></pre><hr>\\n<h3 id=\\"shan-chu\\">删除</h3>\\n<h4 id=\\"zuo-jie-dian\\">左节点</h4>\\n<p><img src=\\"/article/img/%E7%BA%A2%E9%BB%91%E6%A0%91-%E5%88%A0%E9%99%A4(%E5%B7%A6%E8%8A%82%E7%82%B9).png\\" alt=\\"\\"></p>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-keyword\\">if</span> (val &lt; node.val)  {\\n  <span class=\\"hljs-comment\\">// 检测左节点如果是2节点(黑色)，那么需要将它变为3节点(红色)再删除</span>\\n  node=checkLeftNodeAndMove(node)\\n  <span class=\\"hljs-comment\\">// 继续往下执行</span>\\n  node.left = _remove(node.left, val);\\n}<span class=\\"hljs-keyword\\">else</span>{ <span class=\\"hljs-comment\\">/* ... */</span>}</code></pre></code></pre>\\n<p> 在<code>checkLeftNodeAndMove</code>内部，如果检测到左边是个<code>2节点</code>(左黑 &amp; 左左黑)，那么先<code>flipColors</code>，这么做是为了让当前<code>node</code>先\\n成为一个<code>3节点</code>或者<code>4节点</code>(左红,右红?)，让左节点(<code>2节点</code>)可以通过右节点或者通过<code>node</code>去借一个红色节点(转换)，然后就去\\n检测右边，右边存在<code>3节点</code>(右左红)，那么就从右边借(<code>rotateRight + rotateLeft</code>)，如果右边不存在，通过递归和执行\\n<code>flipColors</code>，最终可以从<code>node</code>去借一个红色节点。</p>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">checkLeftNodeAndMove</span>(<span class=\\"hljs-params\\">node</span>)</span>{\\n  <span class=\\"hljs-comment\\">// 确保左边只是个2节点</span>\\n  <span class=\\"hljs-keyword\\">if</span> (!isRed(node.left) &amp;&amp; !isRed(node.left.left))\\n    node= moveRedLeft(node);\\n  <span class=\\"hljs-keyword\\">return</span> node\\n}\\n\\n<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">moveRedLeft</span>(<span class=\\"hljs-params\\">node</span>) </span>{\\n  <span class=\\"hljs-comment\\">// 将node变为3节点或者4节点</span>\\n  flipColors(node);\\n  <span class=\\"hljs-keyword\\">if</span> (isRed(node.right.left)) {\\n    <span class=\\"hljs-comment\\">// 判断是否可以从右节点接一个红色节点</span>\\n    node.right = rotateRight(node.right);\\n    node = rotateLeft(node);\\n    <span class=\\"hljs-comment\\">// 已经从右节点借到一个红色节点，解除node的多节点</span>\\n    flipColors(node);\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> node;\\n}</code></pre></code></pre>\\n<hr>\\n<h4 id=\\"you-jie-dian\\">右节点</h4>\\n<p><img src=\\"/article/img/%E7%BA%A2%E9%BB%91%E6%A0%91-%E5%88%A0%E9%99%A4(%E5%8F%B3%E8%8A%82%E7%82%B9).png\\" alt=\\"\\"></p>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-keyword\\">if</span> (val &lt; node.val)  {\\n  <span class=\\"hljs-comment\\">/* ...左节点的处理... */</span>\\n}<span class=\\"hljs-keyword\\">else</span> {\\n  <span class=\\"hljs-comment\\">// 如果是3节点，需要先右旋，保证被删除的不是父级树</span>\\n  <span class=\\"hljs-comment\\">/*\\n  例如： 5         3\\n        /   ==&gt;     \\\\\\n     R 3           R 5\\n  */</span>\\n  <span class=\\"hljs-keyword\\">if</span> (isRed(node.left))\\n    node = rotateRight(node);\\n  <span class=\\"hljs-comment\\">// 找到值，通过上面右转，无右子树，直接删除</span>\\n  <span class=\\"hljs-keyword\\">if</span> (val===node.val  &amp;&amp; (node.right == <span class=\\"hljs-literal\\">null</span>))\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">null</span>;\\n\\n  <span class=\\"hljs-comment\\">// 检测右侧可能被删除的节点如果是2节点(黑色)，那么需要将它变为3节点(红色)再删除</span>\\n  node=checkRightNodeAndMove(node)\\n  <span class=\\"hljs-keyword\\">if</span> (val === node.val) {\\n    <span class=\\"hljs-keyword\\">let</span> x = min(node.right);\\n    node.val = x.val;\\n    node.right = _remove(node.right,x.val);\\n  }\\n  <span class=\\"hljs-keyword\\">else</span> node.right =_remove(node.right, val);\\n}</code></pre></code></pre>\\n<p> 在<code>checkLeftNodeAndMove</code>内部，如果检测到右边<strong>有可能是删除位置</strong>的节点是个<code>2节点</code>(右黑 &amp; 右左黑)，那么先<code>flipColors</code>，\\n 同样也是为了让当前<code>node</code>先成为一个<code>3节点</code>或者<code>4节点</code>，然后就去检测左边，左边存在<code>3节点</code>(左左红)，那么就从左边借\\n (<code>rotateRight</code>)，如果左边不存在，通过递归和执行<code>flipColors</code>，最终可以从<code>node</code>去借一个红色节点。</p>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">checkRightNodeAndMove</span>(<span class=\\"hljs-params\\">node</span>)</span>{\\n  <span class=\\"hljs-comment\\">// 如果右节点 或者 右节点的左孩子 为红色，这两个节点是有可能会被删除的节点，则不需要调整，可以继续递归至下一层</span>\\n  <span class=\\"hljs-keyword\\">if</span> (!isRed(node.right) &amp;&amp; !isRed(node.right.left))\\n  <span class=\\"hljs-comment\\">// 调整为3节点</span>\\n    node = moveRedRight(node);\\n  <span class=\\"hljs-keyword\\">return</span> node\\n}\\n\\n<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">moveRedRight</span>(<span class=\\"hljs-params\\">node</span>) </span>{\\n  <span class=\\"hljs-comment\\">// 将node变为3节点或者4节点</span>\\n  flipColors(node);\\n  <span class=\\"hljs-comment\\">// 判断是否可以从左节点接一个红色节点</span>\\n  <span class=\\"hljs-keyword\\">if</span> (isRed(node.left.left)) {\\n    node = rotateRight(node);\\n    <span class=\\"hljs-comment\\">// 已经从左节点借到一个红色节点，解除node的多节点</span>\\n    flipColors(node);\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> node;\\n}</code></pre></code></pre>\\n<hr>\\n<h4 id=\\"balance\\">balance</h4>\\n<p>删除操作结束后，<strong>递归</strong>执行<code>balance</code></p>\\n<p>检测一下内容</p>\\n<ul>\\n<li>检测是否存在右红链接</li>\\n<li>检测是否存在2个左红链接相邻</li>\\n<li>检测是否存在<code>4节点</code>(左红右红)</li>\\n</ul>\\n<p>其实就是<code>插入节点</code>的3个<code>if</code>，这两个表达意思是一模一样，可以通用(已测试)</p>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">balance</span>(<span class=\\"hljs-params\\">node</span>)</span>{\\n  <span class=\\"hljs-keyword\\">if</span> (isRed(node.right))  node = rotateLeft(node);\\n  <span class=\\"hljs-keyword\\">if</span> (isRed(node.left) &amp;&amp; isRed(node.left.left)) node = rotateRight(node);\\n  <span class=\\"hljs-keyword\\">if</span> (isRed(node.left) &amp;&amp; isRed(node.right)) flipColors(node);\\n  <span class=\\"hljs-keyword\\">return</span> node;\\n}</code></pre></code></pre>\\n","toc":[{"anchor":"gui-ze","level":3,"text":"规则"},{"anchor":"cha-ru","level":3,"text":"插入"},{"anchor":"shan-chu","level":3,"text":"删除"},{"anchor":"zuo-jie-dian","level":4,"text":"左节点"},{"anchor":"you-jie-dian","level":4,"text":"右节点"},{"anchor":"balance","level":4,"text":"balance"}],"relatedTags":null,"created_at":"2018-12-10","timeArr":[2018,11,10,0,0,0,0],"title":"红黑树要点-根据《算法第4版》","uuid":"2bd50bd84bc74d731859ba7d0c3008c8ed84172a","summary":"<h4>规则：</h4>\\n<ol>\\n<li>原型是<code>2-3树</code></li>\\n<li>红链接：相当于<code>2-3树</code>的<code>3节点</code>，红链接中子节点是<code>红色</code>，父节点是<code>黑色</code></li>\\n<li>只存在红链接为左链接，发现红链接为右链接需要转换</li>\\n<li>当节点为null，也认为是<code>黑色</code></li>\\n<li>当插入节点，出现2个左红点相邻(不可能出现2个右红点相邻，因为第3条)，其实就是`...</li>\\n</ol>","slug":"hong-hei-shu-yao-dian-gen-ju-suan-fa-di-4-ban-","sha":"18598c17b6c44620cb536b5b1bb6fa7f9f9cd4e4"}')}}]);