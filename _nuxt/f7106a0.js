(window.webpackJsonp=window.webpackJsonp||[]).push([[165],{647:function(n){n.exports=JSON.parse('{"content":"<p>实体首部字段</p>\\n<ul>\\n<li>Content-Encoding：实体编码方式(gzip, compress, deflate, identity)</li>\\n<li>Content-Location：报文主体返回资源对应的 URI(不一定是请求URI)。</li>\\n<li>Content-Range：匹配部分。</li>\\n<li>Content-Type：实体内对象的媒体类型。</li>\\n<li>Last-Modified：指明资源最终修改的时间。</li>\\n</ul>\\n<hr>\\n<p>Cookie相关字段</p>\\n<table>\\n<thead>\\n<tr>\\n<th>首部字段名</th>\\n<th>说明</th>\\n<th>首部类型</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td>Set-Cookie</td>\\n<td>开始状态管理所使用的Cookie信息</td>\\n<td>响应首部字段</td>\\n</tr>\\n<tr>\\n<td>Cookie</td>\\n<td>服务器接收到的Cookie信息</td>\\n<td>请求首部字段</td>\\n</tr>\\n</tbody></table>\\n<ul>\\n<li><p>Set-Cookie</p>\\n<p>  <code>Set-Cookie: status=enable; expires=Tue, 05 Jul 2011 07:26:31 GMT; path=/; domain=.hackr.jp;</code></p>\\n</li>\\n<li><p>Set-Cookie 字段的属性</p>\\n</li>\\n</ul>\\n<table>\\n<thead>\\n<tr>\\n<th>属性</th>\\n<th>说明</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td>NAME=VALUE</td>\\n<td>赋予 Cookie 的名称和其值（必需项）</td>\\n</tr>\\n<tr>\\n<td>expires=DATE</td>\\n<td>Cookie 的有效期（若不明确指定则默认为浏览器关闭前为止）</td>\\n</tr>\\n<tr>\\n<td>path=PATH</td>\\n<td>将服务器上的文件目录作为Cookie的适用对象（若不指定则默认为文档所在的文件目录）</td>\\n</tr>\\n<tr>\\n<td>domain=域名</td>\\n<td>作为 Cookie 适用对象的域名 （若不指定则默认为创建 Cookie的服务器的域名）</td>\\n</tr>\\n<tr>\\n<td>Secure</td>\\n<td>仅在 HTTPS 安全通信时才会发送 Cookie</td>\\n</tr>\\n<tr>\\n<td>HttpOnly</td>\\n<td>加以限制，使 Cookie 不能被 JavaScript 脚本访问</td>\\n</tr>\\n</tbody></table>\\n<ul>\\n<li><p>Cookie：status=enable</p>\\n</li>\\n<li><p>DNT：属于 HTTP 请求首部，为<code>1</code>拒绝个人信息被征集，<code>0</code>允许。</p>\\n</li>\\n</ul>\\n<hr>\\n<p>HTTP 的不足</p>\\n<ul>\\n<li>通信使用明文（不加密），内容可能会被窃听<ul>\\n<li>TCP/IP 是可能被窃听的网络（即便不使用明文）</li>\\n<li>通信的加密 （HTTPS)</li>\\n<li>内容的加密 （双方都具有加密解密能力）</li>\\n</ul>\\n</li>\\n<li>不验证通信方的身份，因此有可能遭遇伪装<ul>\\n<li>任何人都可发起请求</li>\\n<li>HTTPS可以确认对方的证书</li>\\n</ul>\\n</li>\\n<li>无法证明报文的完整性，所以有可能已遭篡改<ul>\\n<li>接收到的内容可能有误（中间人攻击）</li>\\n</ul>\\n</li>\\n</ul>\\n<hr>\\n<p>SSL采用<code>公钥</code>和<code>私钥</code></p>\\n<p>HTTPS 采用混合加密机制(SSL+HTTP)</p>\\n<p>机制前提：公开密钥加密与共享密钥加密相比，其处理速度要慢</p>\\n<ol>\\n<li>在交换密钥（共享密钥）环节使用公开密钥加密方式</li>\\n<li>之后的建立通信交换报文阶段则使用共享密钥加密方式</li>\\n</ol>\\n<hr>\\n<p>在使用公钥加密之前，如何确保接收到的公钥是正确的</p>\\n<ol>\\n<li>公钥放置在公钥证书（数字证书）内部。</li>\\n<li>浏览器内置了常用第三方认证的公开密钥（用于对数字证书进行校验）。</li>\\n</ol>\\n<hr>\\n<p>可证明组织真实性的 EV SSL 证书</p>\\n<hr>\\n<p>客户端证书</p>\\n<p>需要费用，用于特殊用途的业务，例如网银。</p>\\n<hr>\\n<p>HTTPS 的安全通信机制</p>\\n<ol>\\n<li><p>客户端通过发送 Client Hello 报文开始 SSL 通信。报文中包含客户端支持的 SSL 的指定版本、\\n加密组件（Cipher Suite）列表（所使用的加密算法及密钥长度等）。</p>\\n<p> 总结：(协商加密组件，验证SSL版本)</p>\\n</li>\\n<li><p>服务器可进行 SSL 通信时，会以 Server Hello 报文作为应答。和客户端一样，\\n在报文中包含 SSL 版本以及加密组件。服务器的加密组件内容是从接收到的客户端加密组件内筛选出来的。</p>\\n<p> 总结：回应SSL版本，确认加密组件</p>\\n</li>\\n<li><p>之后服务器发送 Certificate 报文。报文中包含公开密钥证书。</p>\\n<p> 总结：发生公钥证书（包含公钥）</p>\\n</li>\\n<li><p>最后服务器发送 Server Hello Done 报文通知客户端，最初阶段的 SSL 握手协商部分结束。</p>\\n</li>\\n<li><p>SSL 第一次握手结束之后，客户端以 Client Key Exchange 报文作为回应。\\n报文中包含通信加密中使用的一种被称为 Pre-master secret 的随机密码串。\\n该报文已用步骤 3 中的公开密钥进行加密。</p>\\n<p> 总结：对共享密钥使用公钥加密并且发送</p>\\n</li>\\n<li><p>接着客户端继续发送 Change Cipher Spec 报文。该报文会提示服务器，\\n在此报文之后的通信会采用 Pre-master secret 密钥加密。</p>\\n<p> 总结：提示准备进行共享密钥加密（速度快）</p>\\n</li>\\n<li><p>客户端发送 Finished 报文。该报文包含连接至今全部报文的整体校验值。\\n这次握手协商是否能够成功，要以服务器是否能够正确解密该报文作为判定标准。</p>\\n<p> 总结：最后一次总验证</p>\\n</li>\\n<li><p>服务器同样发送 Change Cipher Spec 报文。</p>\\n</li>\\n<li><p>服务器同样发送 Finished 报文。</p>\\n<p> 总结：确认使用共享密钥加密，三次握手结束</p>\\n</li>\\n<li><p>服务器和客户端的 Finished 报文交换完毕之后，SSL 连接就算建立完成。\\n当然，通信会受到 SSL 的保护。从此处开始进行应用层协议的通信，即发送 HTTP 请求。</p>\\n</li>\\n<li><p>应用层协议通信，即发送 HTTP 响应。</p>\\n<p>总结：后续直接HTTP协议通信（使用共享密钥）</p>\\n</li>\\n<li><p>最后由客户端断开连接。断开连接时，发送 close_notify 报文。</p>\\n</li>\\n</ol>\\n<hr>\\n<p>BASIC认证</p>\\n<p>明文发送账号密码，非常不安全。</p>\\n<p>DIGEST认证</p>\\n<p>发送通过<code>质询码</code>计算生成的<code>响应码</code>验证。</p>\\n<p>SSL 客户端认证</p>\\n<p>通过客户端证书(内含公钥)进行SSL安全认证</p>\\n<ul>\\n<li><p>证书认证(例如验证网银证书，确认客户端)</p>\\n</li>\\n<li><p>基于表单认证(例如登录表单，输入网银密码，确认本人操作)</p>\\n<ul>\\n<li>基于<code>cookie</code>保存上一次验证信息，判断是否本人操作</li>\\n</ul>\\n</li>\\n</ul>\\n","toc":[],"relatedTags":null,"created_at":"2018-11-26","timeArr":[2018,10,26,0,0,0,0],"title":"图解Http大纲笔记(2)","uuid":"6b947579be3958bc587abb5535d818129ff810da","summary":"<p>实体首部字段</p>\\n<ul>\\n<li>Content-Encoding：实体编码方式(gzip, compress, deflate, identity)</li>\\n<li>Content-Location：报文主体返回资源对应的 URI(不一定是请求URI)。</li>\\n<li>Content-Range：匹配部分。</li>\\n<li>Content-Type：实体内对象的媒...</li>\\n</ul>","slug":"tu-jie-Http-da-gang-bi-ji-(2)","sha":"ad5b165bf43fc96f65189cf43aad4253aafc6b16"}')}}]);