(window.webpackJsonp=window.webpackJsonp||[]).push([[277],{1075:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for singly-linked list.\\n * function ListNode(val) {\\n *     this.val = val;\\n *     this.next = null;\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{ListNode}</span> <span class=\\"hljs-variable\\">head</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{TreeNode}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> sortedListToBST = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">head</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(!head)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">null</span>\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">findMid</span>(<span class=\\"hljs-params\\">start,end</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(start===end)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">null</span>\\n    <span class=\\"hljs-keyword\\">let</span> slow=start,fast=start\\n    <span class=\\"hljs-keyword\\">while</span>(fast.next!==end &amp;&amp; fast.next.next!==end){\\n      slow=slow.next\\n      fast=fast.next.next\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> slow\\n  }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">createTree</span>(<span class=\\"hljs-params\\">start,end</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> mid=findMid(start,end)\\n    <span class=\\"hljs-keyword\\">if</span>(!mid)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">null</span>\\n    <span class=\\"hljs-keyword\\">let</span> root=<span class=\\"hljs-keyword\\">new</span> TreeNode(mid.val)\\n    root.left=createTree(start,mid)\\n    root.right=createTree(mid.next,end)\\n    <span class=\\"hljs-keyword\\">return</span> root\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> createTree(head,<span class=\\"hljs-literal\\">null</span>)\\n  \\n};\\n</code></pre>\\n"],"querySlug":"convert-sorted-list-to-binary-search-tree","created_at":"2019-04-08","timeArr":[2019,3,8,12,26,29,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>为了达到<code>平衡树</code>，每次都要插入<code>中间值</code>，左子树再插入左侧的中间值，右子树插入右侧的中间值，然后递归。</p>\\n<p>可以将链表转化为数组，然后通过<code>mid=Math.floor((lo+hi)/2)</code>去查找中间值；</p>\\n<p>也可以直接通过链表的<code>slow=slow.next;fast=fast.next.next</code>找中间值。</p>\\n","content":"<p>给定一个单链表，其中的元素按升序排序，将其转换为高度平衡的二叉搜索树。</p>\\n\\n<p>本题中，一个高度平衡二叉树是指一个二叉树<em>每个节点&nbsp;</em>的左右两个子树的高度差的绝对值不超过 1。</p>\\n\\n<p><strong>示例:</strong></p>\\n\\n<pre>给定的有序链表： [-10, -3, 0, 5, 9],\\n\\n一个可能的答案是：[0, -3, 9, -10, null, 5], 它可以表示下面这个高度平衡二叉搜索树：\\n\\n      0\\n     / \\\\\\n   -3   9\\n   /   /\\n -10  5\\n</pre>\\n","title":"109. 有序链表转换二叉搜索树","relatedTags":["树","二叉搜索树","链表","分治","二叉树"],"difficult":"Middle","lang":["javascript"],"uniqueID":"109","slug":"109-Convert-Sorted-List-to-Binary-Search-Tree"}')}}]);