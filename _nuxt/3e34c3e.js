(window.webpackJsonp=window.webpackJsonp||[]).push([[1292],{2090:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">graph</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">initial</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> minMalwareSpread = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">graph, initial</span>) </span>{\\n  initial.sort(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">a,b</span>)=&gt;</span>a-b)\\n  <span class=\\"hljs-keyword\\">let</span> visited=[],min=<span class=\\"hljs-literal\\">Infinity</span>,minID=<span class=\\"hljs-literal\\">null</span>,count=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;initial.length;i++){\\n    visited=[]\\n    count=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;initial.length;j++){\\n      <span class=\\"hljs-keyword\\">if</span>(initial[j]===initial[i])<span class=\\"hljs-keyword\\">continue</span>\\n      <span class=\\"hljs-keyword\\">if</span>(visited[initial[j]])<span class=\\"hljs-keyword\\">continue</span>\\n      dfs(initial[j])\\n    }\\n    <span class=\\"hljs-keyword\\">if</span>(count&lt;min){\\n      min=count\\n      minID=initial[i]\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> minID\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">dfs</span>(<span class=\\"hljs-params\\">node</span>)</span>{\\n    visited[node]=<span class=\\"hljs-literal\\">true</span>\\n    count++\\n    <span class=\\"hljs-keyword\\">let</span> adj=graph[node]\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;adj.length;i++){\\n      <span class=\\"hljs-keyword\\">if</span>(i===node)<span class=\\"hljs-keyword\\">continue</span>\\n      <span class=\\"hljs-keyword\\">if</span>(adj[i]===<span class=\\"hljs-number\\">1</span>){\\n        <span class=\\"hljs-keyword\\">if</span>(visited[i])<span class=\\"hljs-keyword\\">continue</span>\\n        dfs(i)\\n      }\\n    }\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"minimize-malware-spread","created_at":"2019-04-11","timeArr":[2019,3,11,11,39,11,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>双重遍历<code>initial</code>，每次假设删除<code>inital[i]</code>，然后计算每一个<code>initial[j](initial[j]!==initial[i])</code>能传播的数量<code>count</code>，如果<code>count&lt;maxCount</code>，\\n说明当前删除了<code>initial[i]</code>后，传播的数量是最小的，需要记录<code>initial[i]</code>。</p>\\n<p>注意：<code>initial</code>需要先排序，按从小到大的顺序。</p>\\n<p>具体计算步骤就是<code>dfs</code>，找到邻接点<code>graph[i][j]===1</code>的，说明会被病毒感染，<code>count++</code>，然后继续递归搜寻。</p>\\n<p>相关题：</p>\\n<p>此题和 NO.928-尽量减少恶意软件的传播 II代码基本相同，只有1个差别</p>\\n<ul>\\n<li>NO.924中假设删除<code>initial[i]</code>后，不需要将它记录为已访问的点，即后续还可以继续访问；</li>\\n<li>NO.928中假设删除<code>initial[i]</code>后，需要将它记录为已访问的点，即后续不可以继续访问。</li>\\n</ul>\\n","content":"<p>在节点网络中，只有当 <code>graph[i][j] = 1</code>&nbsp;时，每个节点&nbsp;<code>i</code>&nbsp;能够直接连接到另一个节点 <code>j</code>。</p>\\n\\n<p>一些节点&nbsp;<code>initial</code>&nbsp;最初被恶意软件感染。只要两个节点直接连接，且其中至少一个节点受到恶意软件的感染，那么两个节点都将被恶意软件感染。这种恶意软件的传播将继续，直到没有更多的节点可以被这种方式感染。</p>\\n\\n<p>假设 <code>M(initial)</code> 是在恶意软件停止传播之后，整个网络中感染恶意软件的最终节点数。</p>\\n\\n<p>我们可以从初始列表中删除一个节点。如果移除这一节点将最小化 <code>M(initial)</code>，&nbsp;则返回该节点。如果有多个节点满足条件，就返回索引最小的节点。</p>\\n\\n<p>请注意，如果某个节点已从受感染节点的列表 <code>initial</code> 中删除，它以后可能仍然因恶意软件传播而受到感染。</p>\\n\\n<p>&nbsp;</p>\\n\\n<ol>\\n</ol>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]\\n<strong>输出：</strong>0\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]\\n<strong>输出：</strong>0\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]\\n<strong>输出：</strong>1\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt; graph.length = graph[0].length &lt;= 300</code></li>\\n\\t<li><code>0 &lt;= graph[i][j] == graph[j][i] &lt;= 1</code></li>\\n\\t<li><code>graph[i][i] == 1</code></li>\\n\\t<li><code>1 &lt;= initial.length &lt; graph.length</code></li>\\n\\t<li><code>0 &lt;= initial[i] &lt; graph.length</code></li>\\n</ul>\\n","title":"924. 尽量减少恶意软件的传播","relatedTags":["深度优先搜索","广度优先搜索","并查集","数组","矩阵"],"difficult":"Hard","lang":["javascript"],"uniqueID":"924","slug":"924-Minimize-Malware-Spread"}')}}]);