(window.webpackJsonp=window.webpackJsonp||[]).push([[552],{1350:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * initialize your data structure here.\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> MinStack = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{\\n  <span class=\\"hljs-keyword\\">this</span>.stack=[]\\n  <span class=\\"hljs-keyword\\">this</span>.min=[]\\n};\\n\\n<span class=\\"hljs-comment\\">/** \\n * @param {number} x\\n * @return {void}\\n */</span>\\nMinStack.prototype.push = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">x</span>) </span>{\\n  <span class=\\"hljs-keyword\\">this</span>.stack.push(x)\\n  <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-keyword\\">this</span>.min.length===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">this</span>.min.push(x)\\n  <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">this</span>.min.push(<span class=\\"hljs-built_in\\">Math</span>.min(x,<span class=\\"hljs-keyword\\">this</span>.getMin()))\\n  \\n};\\n\\n<span class=\\"hljs-comment\\">/**\\n * @return {void}\\n */</span>\\nMinStack.prototype.pop = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{\\n  <span class=\\"hljs-keyword\\">this</span>.min.pop()\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-keyword\\">this</span>.stack.pop()\\n};\\n\\n<span class=\\"hljs-comment\\">/**\\n * @return {number}\\n */</span>\\nMinStack.prototype.top = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-keyword\\">this</span>.stack[<span class=\\"hljs-keyword\\">this</span>.stack.length<span class=\\"hljs-number\\">-1</span>]\\n};\\n\\n<span class=\\"hljs-comment\\">/**\\n * @return {number}\\n */</span>\\nMinStack.prototype.getMin = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-keyword\\">this</span>.min[<span class=\\"hljs-keyword\\">this</span>.min.length<span class=\\"hljs-number\\">-1</span>]\\n};\\n\\n<span class=\\"hljs-comment\\">/** \\n * Your MinStack object will be instantiated and called as such:\\n * var obj = Object.create(MinStack).createNew()\\n * obj.push(x)\\n * obj.pop()\\n * var param_3 = obj.top()\\n * var param_4 = obj.getMin()\\n */</span>\\n</code></pre>\\n"],"querySlug":"min-stack","created_at":"2019-04-17","timeArr":[2019,3,17,9,38,50,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>两个栈，一个栈<code>stack</code>保存元素本身，另一个栈<code>min</code>保存到目前为止的最小元素。</p>\\n","content":"<p>设计一个支持 <code>push</code> ，<code>pop</code> ，<code>top</code> 操作，并能在常数时间内检索到最小元素的栈。</p>\\n\\n<ul>\\n\\t<li><code>push(x)</code> &mdash;&mdash; 将元素 x 推入栈中。</li>\\n\\t<li><code>pop()</code>&nbsp;&mdash;&mdash; 删除栈顶的元素。</li>\\n\\t<li><code>top()</code>&nbsp;&mdash;&mdash; 获取栈顶元素。</li>\\n\\t<li><code>getMin()</code> &mdash;&mdash; 检索栈中的最小元素。</li>\\n</ul>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例:</strong></p>\\n\\n<pre><strong>输入：</strong>\\n[&quot;MinStack&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;getMin&quot;,&quot;pop&quot;,&quot;top&quot;,&quot;getMin&quot;]\\n[[],[-2],[0],[-3],[],[],[],[]]\\n\\n<strong>输出：</strong>\\n[null,null,null,null,-3,null,0,-2]\\n\\n<strong>解释：</strong>\\nMinStack minStack = new MinStack();\\nminStack.push(-2);\\nminStack.push(0);\\nminStack.push(-3);\\nminStack.getMin();   --&gt; 返回 -3.\\nminStack.pop();\\nminStack.top();      --&gt; 返回 0.\\nminStack.getMin();   --&gt; 返回 -2.\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>pop</code>、<code>top</code> 和 <code>getMin</code> 操作总是在 <strong>非空栈</strong> 上调用。</li>\\n</ul>\\n","title":"155. 最小栈","relatedTags":["栈","设计"],"difficult":"Easy","lang":["javascript"],"uniqueID":"155","slug":"155-Min-Stack"}')}}]);