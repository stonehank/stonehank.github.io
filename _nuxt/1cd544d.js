(window.webpackJsonp=window.webpackJsonp||[]).push([[356],{1154:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">chips</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> minCostToMoveChips = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">chips</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> possiblePos=<span class=\\"hljs-keyword\\">new</span> <span class=\\"hljs-built_in\\">Set</span>()\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> n <span class=\\"hljs-keyword\\">of</span> chips){\\n    possiblePos.add(n)\\n  }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">getCost</span>(<span class=\\"hljs-params\\">pos</span>)</span>{\\n    <span class=\\"hljs-comment\\">// console.log(pos)</span>\\n    <span class=\\"hljs-keyword\\">let</span> c=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> n <span class=\\"hljs-keyword\\">of</span> chips){\\n      <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-built_in\\">Math</span>.abs(n -pos) % <span class=\\"hljs-number\\">2</span>===<span class=\\"hljs-number\\">1</span>)c++\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> c\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> minCost=<span class=\\"hljs-literal\\">Infinity</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> p <span class=\\"hljs-keyword\\">of</span> possiblePos){\\n    minCost=<span class=\\"hljs-built_in\\">Math</span>.min(minCost,getCost(p))\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> minCost\\n};\\n</code></pre>\\n"],"querySlug":"minimum-cost-to-move-chips-to-the-same-position","created_at":"2021-06-11","timeArr":[2021,5,11,22,30,3,0],"hasThinking":false,"content":"<p>数轴上放置了一些筹码，每个筹码的位置存在数组&nbsp;<code>chips</code>&nbsp;当中。</p>\\n\\n<p>你可以对 <strong>任何筹码</strong> 执行下面两种操作之一（<strong>不限操作次数</strong>，0 次也可以）：</p>\\n\\n<ul>\\n\\t<li>将第 <code>i</code> 个筹码向左或者右移动 2 个单位，代价为 <strong>0</strong>。</li>\\n\\t<li>将第 <code>i</code> 个筹码向左或者右移动 1 个单位，代价为 <strong>1</strong>。</li>\\n</ul>\\n\\n<p>最开始的时候，同一位置上也可能放着两个或者更多的筹码。</p>\\n\\n<p>返回将所有筹码移动到同一位置（任意位置）上所需要的最小代价。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>chips = [1,2,3]\\n<strong>输出：</strong>1\\n<strong>解释：</strong>第二个筹码移动到位置三的代价是 1，第一个筹码移动到位置三的代价是 0，总代价为 1。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>chips = [2,2,2,3,3]\\n<strong>输出：</strong>2\\n<strong>解释：</strong>第四和第五个筹码移动到位置二的代价都是 1，所以最小总代价为 2。\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= chips.length &lt;= 100</code></li>\\n\\t<li><code>1 &lt;= chips[i] &lt;= 10^9</code></li>\\n</ul>\\n","title":"1217. 玩筹码","relatedTags":["贪心","数组","数学"],"difficult":"Easy","lang":["javascript"],"uniqueID":"1217","slug":"1217-Minimum-Cost-to-Move-Chips-to-The-Same-Position"}')}}]);