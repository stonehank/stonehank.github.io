(window.webpackJsonp=window.webpackJsonp||[]).push([[315],{1113:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">text1</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">text2</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> longestCommonSubsequence = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">text1, text2</span>) </span>{\\n    <span class=\\"hljs-keyword\\">let</span> m=text1.length\\n    <span class=\\"hljs-keyword\\">let</span> n=text2.length\\n    <span class=\\"hljs-keyword\\">let</span> dp=<span class=\\"hljs-built_in\\">Array</span>(m+<span class=\\"hljs-number\\">1</span>).fill().map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span>=&gt;</span><span class=\\"hljs-built_in\\">Array</span>(n+<span class=\\"hljs-number\\">1</span>).fill(<span class=\\"hljs-number\\">0</span>))\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">1</span>;i&lt;=m;i++){\\n        <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">1</span>;j&lt;=n;j++){\\n            \\n            <span class=\\"hljs-keyword\\">if</span>(text1[i<span class=\\"hljs-number\\">-1</span>]===text2[j<span class=\\"hljs-number\\">-1</span>]){\\n                dp[i][j]=dp[i<span class=\\"hljs-number\\">-1</span>][j<span class=\\"hljs-number\\">-1</span>]+<span class=\\"hljs-number\\">1</span>\\n            }<span class=\\"hljs-keyword\\">else</span>{\\n                dp[i][j]=<span class=\\"hljs-built_in\\">Math</span>.max(dp[i<span class=\\"hljs-number\\">-1</span>][j<span class=\\"hljs-number\\">-1</span>],dp[i<span class=\\"hljs-number\\">-1</span>][j],dp[i][j<span class=\\"hljs-number\\">-1</span>])\\n            }\\n        }\\n    }\\n    <span class=\\"hljs-comment\\">// console.log(dp)</span>\\n    <span class=\\"hljs-keyword\\">return</span> dp[m][n]\\n};\\n</code></pre>\\n"],"querySlug":"longest-common-subsequence","created_at":"2021-04-03","timeArr":[2021,3,3,11,28,4,0],"hasThinking":false,"content":"<p>给定两个字符串 <code>text1</code> 和 <code>text2</code>，返回这两个字符串的最长 <strong>公共子序列</strong> 的长度。如果不存在 <strong>公共子序列</strong> ，返回 <code>0</code> 。</p>\\n\\n<p>一个字符串的 <strong>子序列</strong><em> </em>是指这样一个新的字符串：它是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）后组成的新字符串。</p>\\n\\n<ul>\\n\\t<li>例如，<code>\\"ace\\"</code> 是 <code>\\"abcde\\"</code> 的子序列，但 <code>\\"aec\\"</code> 不是 <code>\\"abcde\\"</code> 的子序列。</li>\\n</ul>\\n\\n<p>两个字符串的 <strong>公共子序列</strong> 是这两个字符串所共同拥有的子序列。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>text1 = \\"abcde\\", text2 = \\"ace\\" \\n<strong>输出：</strong>3  \\n<strong>解释：</strong>最长公共子序列是 \\"ace\\" ，它的长度为 3 。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>text1 = \\"abc\\", text2 = \\"abc\\"\\n<strong>输出：</strong>3\\n<strong>解释：</strong>最长公共子序列是 \\"abc\\" ，它的长度为 3 。\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>text1 = \\"abc\\", text2 = \\"def\\"\\n<strong>输出：</strong>0\\n<strong>解释：</strong>两个字符串没有公共子序列，返回 0 。\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= text1.length, text2.length <= 1000</code></li>\\n\\t<li><code>text1</code> 和 <code>text2</code> 仅由小写英文字符组成。</li>\\n</ul>\\n","title":"1143. 最长公共子序列","relatedTags":["字符串","动态规划"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1143","slug":"1143-Longest-Common-Subsequence"}')}}]);