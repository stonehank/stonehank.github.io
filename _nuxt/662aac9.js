(window.webpackJsonp=window.webpackJsonp||[]).push([[241],{1039:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">A</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">L</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">M</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> maxSumTwoNoOverlap = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">A, L, M</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> maxSum=<span class=\\"hljs-number\\">0</span>,lSum=<span class=\\"hljs-number\\">0</span>,mSum=<span class=\\"hljs-number\\">0</span>,tempMax=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;A.length;i++){\\n    lSum+=A[i]\\n    <span class=\\"hljs-keyword\\">if</span>(i&gt;=L){\\n      lSum-=A[i-L]\\n      mSum+=A[i-L]\\n    }\\n    <span class=\\"hljs-keyword\\">if</span>(i&gt;=M+L){\\n      mSum-=A[i-L-M]\\n    }\\n    tempMax=<span class=\\"hljs-built_in\\">Math</span>.max(tempMax,mSum)\\n    maxSum=<span class=\\"hljs-built_in\\">Math</span>.max(maxSum,tempMax+lSum)\\n  }\\n  lSum=<span class=\\"hljs-number\\">0</span>,mSum=<span class=\\"hljs-number\\">0</span>,tempMax=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;A.length;i++){\\n    mSum+=A[i]\\n    <span class=\\"hljs-keyword\\">if</span>(i&gt;=M){\\n      mSum-=A[i-M]\\n      lSum+=A[i-M]\\n    }\\n    <span class=\\"hljs-keyword\\">if</span>(i&gt;=M+L){\\n      lSum-=A[i-L-M]\\n    }\\n    tempMax=<span class=\\"hljs-built_in\\">Math</span>.max(tempMax,lSum)\\n    maxSum=<span class=\\"hljs-built_in\\">Math</span>.max(maxSum,tempMax+mSum)\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> maxSum\\n};\\n</code></pre>\\n"],"querySlug":"maximum-sum-of-two-non-overlapping-subarrays","created_at":"2019-04-21","timeArr":[2019,3,21,12,53,3,0],"hasThinking":false,"content":"<p>给出非负整数数组 <code>A</code> ，返回两个非重叠（连续）子数组中元素的最大和，子数组的长度分别为 <code>L</code> 和 <code>M</code>。（这里需要澄清的是，长为 L 的子数组可以出现在长为 M 的子数组之前或之后。）</p>\\n\\n<p>从形式上看，返回最大的 <code>V</code>，而 <code>V = (A[i] + A[i+1] + ... + A[i+L-1]) + (A[j] + A[j+1] + ... + A[j+M-1])</code> 并满足下列条件之一：</p>\\n\\n<p>&nbsp;</p>\\n\\n<ul>\\n\\t<li><code>0 &lt;= i &lt; i + L - 1 &lt; j &lt; j + M - 1 &lt; A.length</code>, <strong>或</strong></li>\\n\\t<li><code>0 &lt;= j &lt; j + M - 1 &lt; i &lt; i + L - 1 &lt; A.length</code>.</li>\\n</ul>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>A = [0,6,5,2,2,5,1,9,4], L = 1, M = 2\\n<strong>输出：</strong>20\\n<strong>解释：</strong>子数组的一种选择中，[9] 长度为 1，[6,5] 长度为 2。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>A = [3,8,1,3,2,1,8,9,0], L = 3, M = 2\\n<strong>输出：</strong>29\\n<strong>解释：</strong>子数组的一种选择中，[3,8,1] 长度为 3，[8,9] 长度为 2。\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>A = [2,1,5,6,0,9,5,0,3,8], L = 4, M = 3\\n<strong>输出：</strong>31\\n<strong>解释：</strong>子数组的一种选择中，[5,6,0,9] 长度为 4，[0,3,8] 长度为 3。</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ol>\\n\\t<li><code>L &gt;= 1</code></li>\\n\\t<li><code>M &gt;= 1</code></li>\\n\\t<li><code>L + M &lt;= A.length &lt;= 1000</code></li>\\n\\t<li><code>0 &lt;= A[i] &lt;= 1000</code></li>\\n</ol>\\n","title":"1031. 两个非重叠子数组的最大和","relatedTags":["数组","动态规划","滑动窗口"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1031","slug":"1031-Maximum-Sum-of-Two-Non-Overlapping-Subarrays"}')}}]);