(window.webpackJsonp=window.webpackJsonp||[]).push([[343],{1141:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">s</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{string}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> reverseParentheses = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">s</span>) </span>{\\n  \\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">reverse</span>(<span class=\\"hljs-params\\">str</span>)</span>{\\n    <span class=\\"hljs-keyword\\">return</span> str.split(<span class=\\"hljs-string\\">\'\'</span>).reverse().join(<span class=\\"hljs-string\\">\'\'</span>)\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> reverse(resolve(s)[<span class=\\"hljs-number\\">1</span>])\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">resolve</span>(<span class=\\"hljs-params\\">str</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> curS=<span class=\\"hljs-string\\">\'\'</span>\\n    <span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">for</span>(;i&lt;str.length;i++){\\n      <span class=\\"hljs-keyword\\">if</span>(str[i]===<span class=\\"hljs-string\\">\\"(\\"</span>){\\n        <span class=\\"hljs-keyword\\">let</span> nxtStr=str.slice(i+<span class=\\"hljs-number\\">1</span>)\\n        <span class=\\"hljs-keyword\\">let</span> [id,revStr]=resolve(nxtStr)\\n        <span class=\\"hljs-comment\\">// console.log()</span>\\n        curS+=revStr\\n        i+=id+<span class=\\"hljs-number\\">1</span>\\n      }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(str[i]===<span class=\\"hljs-string\\">\\")\\"</span>){\\n        <span class=\\"hljs-keyword\\">break</span>\\n      }<span class=\\"hljs-keyword\\">else</span>{\\n        curS+=str[i]\\n      }\\n    }\\n    <span class=\\"hljs-comment\\">// console.log(curS)</span>\\n    <span class=\\"hljs-keyword\\">return</span> [i,reverse(curS)]\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"reverse-substrings-between-each-pair-of-parentheses","created_at":"2019-09-15","timeArr":[2019,8,15,10,42,58,0],"hasThinking":false,"content":"<p>给出一个字符串 <code>s</code>（仅含有小写英文字母和括号）。</p>\\n\\n<p>请你按照从括号内到外的顺序，逐层反转每对匹配括号中的字符串，并返回最终的结果。</p>\\n\\n<p>注意，您的结果中 <strong>不应</strong> 包含任何括号。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = \\"(abcd)\\"\\n<strong>输出：</strong>\\"dcba\\"\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = \\"(u(love)i)\\"\\n<strong>输出：</strong>\\"iloveu\\"\\n<strong>解释：</strong>先反转子字符串 \\"love\\" ，然后反转整个字符串。</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = \\"(ed(et(oc))el)\\"\\n<strong>输出：</strong>\\"leetcode\\"\\n<strong>解释：</strong>先反转子字符串 \\"oc\\" ，接着反转 \\"etco\\" ，然后反转整个字符串。</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = \\"a(bcdefghijkl(mno)p)q\\"\\n<strong>输出：</strong>\\"apmnolkjihgfedcbq\\"\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>0 <= s.length <= 2000</code></li>\\n\\t<li><code>s</code> 中只有小写英文字母和括号</li>\\n\\t<li>题目测试用例确保所有括号都是成对出现的</li>\\n</ul>\\n","title":"1190. 反转每对括号间的子串","relatedTags":["栈","字符串"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1190","slug":"1190-Reverse-Substrings-Between-Each-Pair-of-Parentheses"}')}}]);