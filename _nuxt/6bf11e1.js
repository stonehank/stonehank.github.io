(window.webpackJsonp=window.webpackJsonp||[]).push([[229],{1027:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">A</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> numEnclaves = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">A</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> m=A.length,n=A[<span class=\\"hljs-number\\">0</span>].length\\n  <span class=\\"hljs-keyword\\">let</span> moves=[[<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">0</span>],[<span class=\\"hljs-number\\">1</span>,<span class=\\"hljs-number\\">0</span>],[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">1</span>],[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">-1</span>]]\\n  <span class=\\"hljs-keyword\\">let</span> visited=<span class=\\"hljs-built_in\\">Array</span>(m).fill().map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span>=&gt;</span><span class=\\"hljs-built_in\\">Array</span>(n).fill(<span class=\\"hljs-literal\\">false</span>))\\n  <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">let</span> canOut=<span class=\\"hljs-literal\\">false</span>,count=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;m;i++){\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;n;j++){\\n      <span class=\\"hljs-keyword\\">if</span>(visited[i][j])<span class=\\"hljs-keyword\\">continue</span>\\n      visited[i][j]=<span class=\\"hljs-literal\\">true</span>\\n      <span class=\\"hljs-keyword\\">if</span>(A[i][j]===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">continue</span>\\n      canOut=<span class=\\"hljs-literal\\">false</span>;count=<span class=\\"hljs-number\\">0</span>\\n      dfs([i,j])\\n      <span class=\\"hljs-keyword\\">if</span>(!canOut)res+=count\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">dfs</span>(<span class=\\"hljs-params\\">[x,y]</span>)</span>{\\n    count++\\n    visited[x][y]=<span class=\\"hljs-literal\\">true</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> [dx,dy] <span class=\\"hljs-keyword\\">of</span> moves){\\n      <span class=\\"hljs-keyword\\">let</span> nx=dx+x,ny=dy+y\\n      <span class=\\"hljs-keyword\\">if</span>(nx&lt;<span class=\\"hljs-number\\">0</span> || ny&lt;<span class=\\"hljs-number\\">0</span> || nx&gt;=m || ny&gt;=n){\\n        canOut=<span class=\\"hljs-literal\\">true</span>\\n        <span class=\\"hljs-keyword\\">continue</span>\\n      }\\n      <span class=\\"hljs-keyword\\">if</span>(A[nx][ny]===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">continue</span>\\n      <span class=\\"hljs-keyword\\">if</span>(visited[nx][ny])<span class=\\"hljs-keyword\\">continue</span>\\n      dfs([nx,ny])\\n    }\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"number-of-enclaves","created_at":"2019-03-31","timeArr":[2019,2,31,11,40,12,0],"hasThinking":false,"content":"<p>给出一个二维数组&nbsp;<code>A</code>，每个单元格为 0（代表海）或 1（代表陆地）。</p>\\n\\n<p>移动是指在陆地上从一个地方走到另一个地方（朝四个方向之一）或离开网格的边界。</p>\\n\\n<p>返回网格中<strong>无法</strong>在任意次数的移动中离开网格边界的陆地单元格的数量。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>[[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]]\\n<strong>输出：</strong>3\\n<strong>解释： </strong>\\n有三个 1 被 0 包围。一个 1 没有被包围，因为它在边界上。</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>[[0,1,1,0],[0,0,1,0],[0,0,1,0],[0,0,0,0]]\\n<strong>输出：</strong>0\\n<strong>解释：</strong>\\n所有 1 都在边界上或可以到达边界。</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ol>\\n\\t<li><code>1 &lt;= A.length &lt;= 500</code></li>\\n\\t<li><code>1 &lt;= A[i].length &lt;= 500</code></li>\\n\\t<li><code>0 &lt;= A[i][j] &lt;= 1</code></li>\\n\\t<li>所有行的大小都相同</li>\\n</ol>\\n","title":"1020. 飞地的数量","relatedTags":["深度优先搜索","广度优先搜索","并查集","数组","矩阵"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1020","slug":"1020-Number-of-Enclaves"}')}}]);