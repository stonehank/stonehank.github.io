(window.webpackJsonp=window.webpackJsonp||[]).push([[364],{1162:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">nums</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> maxEqualFreq = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">nums</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> equals=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">let</span> pId=<span class=\\"hljs-number\\">1</span>\\n  <span class=\\"hljs-keyword\\">let</span> hash={}\\n  <span class=\\"hljs-keyword\\">let</span> countMap=<span class=\\"hljs-keyword\\">new</span> <span class=\\"hljs-built_in\\">Map</span>()\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;nums.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> n=nums[i]\\n    <span class=\\"hljs-keyword\\">if</span>(hash[n]==<span class=\\"hljs-literal\\">null</span>){\\n      hash[n]=<span class=\\"hljs-number\\">0</span>\\n    }\\n    <span class=\\"hljs-keyword\\">if</span>(hash[n]!==<span class=\\"hljs-number\\">0</span>){\\n      countMap.set(hash[n],countMap.get(hash[n])  <span class=\\"hljs-number\\">-1</span>)\\n      <span class=\\"hljs-keyword\\">if</span>(countMap.get(hash[n])===<span class=\\"hljs-number\\">0</span>){\\n        countMap.delete(hash[n])\\n      }\\n    }\\n    hash[n]++\\n    countMap.set(hash[n],(countMap.get(hash[n]) || <span class=\\"hljs-number\\">0</span>) +<span class=\\"hljs-number\\">1</span>)\\n        <span class=\\"hljs-comment\\">// console.log(countMap,i)</span>\\n    <span class=\\"hljs-keyword\\">if</span>(countMap.size===<span class=\\"hljs-number\\">1</span>){\\n\\n      <span class=\\"hljs-keyword\\">if</span>(i===nums.length<span class=\\"hljs-number\\">-1</span>){\\n        <span class=\\"hljs-keyword\\">if</span>(countMap.keys().next().value===<span class=\\"hljs-number\\">1</span> || countMap.values().next().value===<span class=\\"hljs-number\\">1</span>){\\n          <span class=\\"hljs-keyword\\">return</span> i+<span class=\\"hljs-number\\">1</span>\\n        }\\n        <span class=\\"hljs-keyword\\">return</span> i\\n      }\\n      pId=i+<span class=\\"hljs-number\\">1</span>\\n    }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(countMap.size===<span class=\\"hljs-number\\">2</span>){\\n      <span class=\\"hljs-keyword\\">let</span> k=countMap.keys()\\n      <span class=\\"hljs-keyword\\">let</span> k1=k.next().value\\n      <span class=\\"hljs-keyword\\">let</span> k2=k.next().value\\n      <span class=\\"hljs-keyword\\">let</span> v=countMap.values()\\n      <span class=\\"hljs-keyword\\">let</span> v1=v.next().value\\n      <span class=\\"hljs-keyword\\">let</span> v2=v.next().value\\n      <span class=\\"hljs-keyword\\">if</span>((k2-k1===<span class=\\"hljs-number\\">1</span> &amp;&amp; v2===<span class=\\"hljs-number\\">1</span>) || \\n         (k1-k2===<span class=\\"hljs-number\\">1</span> &amp;&amp; v1===<span class=\\"hljs-number\\">1</span>) ||\\n         (k1===<span class=\\"hljs-number\\">1</span> &amp;&amp; v1===<span class=\\"hljs-number\\">1</span>) || (k2===<span class=\\"hljs-number\\">1</span> &amp;&amp; v2===<span class=\\"hljs-number\\">1</span>)){\\n        pId=i+<span class=\\"hljs-number\\">1</span>\\n      }\\n    }\\n    <span class=\\"hljs-comment\\">// console.log(pId)</span>\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> pId\\n};\\n</code></pre>\\n"],"querySlug":"maximum-equal-frequency","created_at":"2019-10-13","timeArr":[2019,9,13,12,20,9,0],"hasThinking":false,"content":"<p>给出一个正整数数组&nbsp;<code>nums</code>，请你帮忙从该数组中找出能满足下面要求的 <strong>最长</strong> 前缀，并返回其长度：</p>\\n\\n<ul>\\n\\t<li>从前缀中 <strong>删除一个</strong> 元素后，使得所剩下的每个数字的出现次数相同。</li>\\n</ul>\\n\\n<p>如果删除这个元素后没有剩余元素存在，仍可认为每个数字都具有相同的出现次数（也就是 0 次）。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>nums = [2,2,1,1,5,3,3,5]\\n<strong>输出：</strong>7\\n<strong>解释：</strong>对于长度为 7 的子数组 [2,2,1,1,5,3,3]，如果我们从中删去 nums[4]=5，就可以得到 [2,2,1,1,3,3]，里面每个数字都出现了两次。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>nums = [1,1,1,2,2,2,3,3,3,4,4,4,5]\\n<strong>输出：</strong>13\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>nums = [1,1,1,2,2,2]\\n<strong>输出：</strong>5\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre><strong>输入：</strong>nums = [10,2,8,9,3,8,1,5,2,3,7,6]\\n<strong>输出：</strong>8\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>2 &lt;= nums.length &lt;= 10^5</code></li>\\n\\t<li><code>1 &lt;= nums[i] &lt;= 10^5</code></li>\\n</ul>\\n","title":"1224. 最大相等频率","relatedTags":["数组","哈希表"],"difficult":"Hard","lang":["javascript"],"uniqueID":"1224","slug":"1224-Maximum-Equal-Frequency"}')}}]);