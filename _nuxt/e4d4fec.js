(window.webpackJsonp=window.webpackJsonp||[]).push([[1326],{2124:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string[]}</span> <span class=\\"hljs-variable\\">A</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> minDeletionSize = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">A</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">let</span> next=A.slice()\\n  <span class=\\"hljs-keyword\\">while</span>(next.length&gt;<span class=\\"hljs-number\\">0</span>){\\n    <span class=\\"hljs-keyword\\">let</span> m=next.length,n=next[<span class=\\"hljs-number\\">0</span>].length\\n    <span class=\\"hljs-keyword\\">if</span>(n===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">break</span>\\n    <span class=\\"hljs-keyword\\">let</span> aux=[],delCol=<span class=\\"hljs-literal\\">null</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">1</span>;i&lt;m;i++){\\n      <span class=\\"hljs-keyword\\">if</span>(delCol!=<span class=\\"hljs-literal\\">null</span>)<span class=\\"hljs-keyword\\">break</span>\\n      <span class=\\"hljs-keyword\\">if</span>(next[i]&lt;next[i<span class=\\"hljs-number\\">-1</span>]){\\n        <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;n;j++){\\n          <span class=\\"hljs-keyword\\">if</span>(next[i][j]&lt;next[i<span class=\\"hljs-number\\">-1</span>][j]){\\n            delCol=j\\n            res++\\n            <span class=\\"hljs-keyword\\">break</span>\\n          }\\n        }\\n      }\\n    }\\n    <span class=\\"hljs-keyword\\">if</span>(delCol!=<span class=\\"hljs-literal\\">null</span>){\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;next.length;i++){\\n        aux.push(next[i].substring(<span class=\\"hljs-number\\">0</span>,delCol)+next[i].substring(delCol+<span class=\\"hljs-number\\">1</span>))\\n      }\\n    }\\n    next=aux\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"delete-columns-to-make-sorted-ii","created_at":"2019-04-15","timeArr":[2019,3,15,15,59,16,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>定义一个<code>next</code>为存放待检查的字符串，遍历<code>next</code>行，如果发现<code>next[i]&lt;next[i-1]</code>，说明在<code>i</code>和<code>i-1</code>行中肯定有一列不符合规则，\\n找出那一列<code>delCol</code>，然后将每一行的<code>delCol</code>都删除后的字符串重新添加到新的<code>next</code>，继续重新遍历行。</p>\\n<p>直到<code>next</code>为空。</p>\\n","content":"<p>给定由 <code>n</code> 个字符串组成的数组 <code>strs</code>，其中每个字符串长度相等。</p>\\n\\n<p>选取一个删除索引序列，对于 <code>strs</code> 中的每个字符串，删除对应每个索引处的字符。</p>\\n\\n<p>比如，有 <code>strs = [\\"abcdef\\", \\"uvwxyz\\"]</code>，删除索引序列 <code>{0, 2, 3}</code>，删除后 <code>strs</code> 为<code>[\\"bef\\", \\"vyz\\"]</code>。</p>\\n\\n<p>假设，我们选择了一组删除索引 <code>answer</code>，那么在执行删除操作之后，最终得到的数组的元素是按 <strong>字典序</strong>（<code>strs[0] <= strs[1] <= strs[2] ... <= strs[n - 1]</code>）排列的，然后请你返回 <code>answer.length</code> 的最小可能值。</p>\\n\\n<p> </p>\\n\\n<ol>\\n</ol>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>strs = [\\"ca\\",\\"bb\\",\\"ac\\"]\\n<strong>输出：</strong>1\\n<strong>解释： </strong>\\n删除第一列后，strs = [\\"a\\", \\"b\\", \\"c\\"]。\\n现在 strs 中元素是按字典排列的 (即，strs[0] <= strs[1] <= strs[2])。\\n我们至少需要进行 1 次删除，因为最初 strs 不是按字典序排列的，所以答案是 1。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>strs = [\\"xc\\",\\"yb\\",\\"za\\"]\\n<strong>输出：</strong>0\\n<strong>解释：</strong>\\nstrs 的列已经是按字典序排列了，所以我们不需要删除任何东西。\\n注意 strs 的行不需要按字典序排列。\\n也就是说，strs[0][0] <= strs[0][1] <= ... 不一定成立。\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>strs = [\\"zyx\\",\\"wvu\\",\\"tsr\\"]\\n<strong>输出：</strong>3\\n<strong>解释：</strong>\\n我们必须删掉每一列。\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>n == strs.length</code></li>\\n\\t<li><code>1 <= n <= 100</code></li>\\n\\t<li><code>1 <= strs[i].length <= 100</code></li>\\n\\t<li><code>strs[i]</code> 由小写英文字母组成</li>\\n</ul>\\n","title":"955. 删列造序 II","relatedTags":["贪心","数组","字符串"],"difficult":"Middle","lang":["javascript"],"uniqueID":"955","slug":"955-Delete-Columns-to-Make-Sorted-II"}')}}]);