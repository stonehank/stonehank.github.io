(window.webpackJsonp=window.webpackJsonp||[]).push([[826],{1624:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Solution</span><span class=\\"hljs-params\\">(object)</span>:</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">numberOfArithmeticSlices</span><span class=\\"hljs-params\\">(self, A)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type A: List[int]\\n        :rtype: int\\n        \\"\\"\\"</span>\\n        n=len(A)\\n        <span class=\\"hljs-keyword\\">if</span> n==<span class=\\"hljs-number\\">0</span>:<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>\\n        dp=[[] <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(n)]\\n        dp[<span class=\\"hljs-number\\">0</span>].append([<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-string\\">\'#\'</span>])\\n        res=<span class=\\"hljs-number\\">0</span>\\n        <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(<span class=\\"hljs-number\\">1</span>,n):\\n          dp[i].append([<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-string\\">\'#\'</span>])\\n          j=i<span class=\\"hljs-number\\">-1</span>\\n          gap=A[i]-A[j]\\n          <span class=\\"hljs-keyword\\">for</span> k <span class=\\"hljs-keyword\\">in</span> range(len(dp[j])):\\n            <span class=\\"hljs-keyword\\">if</span> dp[j][k][<span class=\\"hljs-number\\">1</span>]==<span class=\\"hljs-string\\">\\"#\\"</span> <span class=\\"hljs-keyword\\">or</span> dp[j][k][<span class=\\"hljs-number\\">1</span>]==gap:\\n              <span class=\\"hljs-keyword\\">if</span> dp[j][k][<span class=\\"hljs-number\\">0</span>]+<span class=\\"hljs-number\\">1</span>&gt;<span class=\\"hljs-number\\">0</span>:res+=<span class=\\"hljs-number\\">1</span>\\n              dp[i].append([dp[j][k][<span class=\\"hljs-number\\">0</span>]+<span class=\\"hljs-number\\">1</span>,gap])\\n        <span class=\\"hljs-comment\\"># print dp</span>\\n        <span class=\\"hljs-keyword\\">return</span> res\\n</code></pre>\\n"],"querySlug":"arithmetic-slices","created_at":"2019-03-02","timeArr":[2019,2,2,23,43,25,0],"hasThinking":false,"content":"<p>如果一个数列 <strong>至少有三个元素</strong> ，并且任意两个相邻元素之差相同，则称该数列为等差数列。</p>\\n\\n<ul>\\n\\t<li>例如，<code>[1,3,5,7,9]</code>、<code>[7,7,7,7]</code> 和 <code>[3,-1,-5,-9]</code> 都是等差数列。</li>\\n</ul>\\n\\n<div class=\\"original__bRMd\\">\\n<div>\\n<p>给你一个整数数组 <code>nums</code> ，返回数组 <code>nums</code> 中所有为等差数组的 <strong>子数组</strong> 个数。</p>\\n\\n<p><strong>子数组</strong> 是数组中的一个连续序列。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [1,2,3,4]\\n<strong>输出：</strong>3\\n<strong>解释：</strong>nums 中有三个子等差数组：[1, 2, 3]、[2, 3, 4] 和 [1,2,3,4] 自身。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [1]\\n<strong>输出：</strong>0\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= nums.length <= 5000</code></li>\\n\\t<li><code>-1000 <= nums[i] <= 1000</code></li>\\n</ul>\\n</div>\\n</div>\\n","title":"413. 等差数列划分","relatedTags":["数组","动态规划"],"difficult":"Middle","lang":["python"],"uniqueID":"413","slug":"413-Arithmetic-Slices"}')}}]);