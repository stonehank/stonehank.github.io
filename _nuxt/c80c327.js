(window.webpackJsonp=window.webpackJsonp||[]).push([[326],{1124:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{TreeNode}</span> <span class=\\"hljs-variable\\">root</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> maxLevelSum = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">root</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> minID=<span class=\\"hljs-literal\\">null</span>\\n  <span class=\\"hljs-keyword\\">let</span> maxCount=-<span class=\\"hljs-literal\\">Infinity</span>\\n  <span class=\\"hljs-keyword\\">let</span> level=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">let</span> arr=[root]\\n  <span class=\\"hljs-keyword\\">while</span>(arr.length&gt;<span class=\\"hljs-number\\">0</span>){\\n    level++\\n    <span class=\\"hljs-keyword\\">let</span> len=arr.length\\n    <span class=\\"hljs-keyword\\">let</span> curSum=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;len;i++){\\n      <span class=\\"hljs-keyword\\">let</span> node=arr.shift()\\n      curSum+=node.val\\n      <span class=\\"hljs-keyword\\">if</span>(node.left)arr.push(node.left)\\n      <span class=\\"hljs-keyword\\">if</span>(node.right)arr.push(node.right)\\n    }\\n    <span class=\\"hljs-comment\\">// console.log(level,curSum)</span>\\n    <span class=\\"hljs-keyword\\">if</span>(curSum&gt;maxCount){\\n      maxCount=curSum\\n      minID=level\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> minID\\n};\\n</code></pre>\\n"],"querySlug":"maximum-level-sum-of-a-binary-tree","created_at":"2019-08-18","timeArr":[2019,7,18,10,44,22,0],"hasThinking":false,"content":"<p>给你一个二叉树的根节点&nbsp;<code>root</code>。设根节点位于二叉树的第 <code>1</code> 层，而根节点的子节点位于第 <code>2</code> 层，依此类推。</p>\\n\\n<p>请你找出层内元素之和 <strong>最大</strong> 的那几层（可能只有一层）的层号，并返回其中&nbsp;<strong>最小</strong> 的那个。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<p><strong><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/08/17/capture.jpeg\\" style=\\"height: 175px; width: 200px;\\"></strong></p>\\n\\n<pre><strong>输入：</strong>root = [1,7,0,7,-8,null,null]\\n<strong>输出：</strong>2\\n<strong>解释：</strong>\\n第 1 层各元素之和为 1，\\n第 2 层各元素之和为 7 + 0 = 7，\\n第 3 层各元素之和为 7 + -8 = -1，\\n所以我们返回第 2 层的层号，它的层内元素之和最大。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>root = [989,null,10250,98693,-89388,null,null,null,-32127]\\n<strong>输出：</strong>2\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li>树中的节点数介于&nbsp;<code>1</code>&nbsp;和&nbsp;<code>10^4</code>&nbsp;之间</li>\\n\\t<li><code>-10^5 &lt;= node.val &lt;= 10^5</code></li>\\n</ul>\\n","title":"1161. 最大层内元素和","relatedTags":["树","广度优先搜索","二叉树"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1161","slug":"1161-Maximum-Level-Sum-of-a-Binary-Tree"}')}}]);