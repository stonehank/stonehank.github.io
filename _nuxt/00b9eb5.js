(window.webpackJsonp=window.webpackJsonp||[]).push([[1368],{2166:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{TreeNode}</span> <span class=\\"hljs-variable\\">root</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">x</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">y</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{boolean}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> isCousins = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">root, x, y</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(!root)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n  <span class=\\"hljs-keyword\\">let</span> xd,xp,yd,yp\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">dfs</span>(<span class=\\"hljs-params\\">root,parent,deep</span>)</span>{\\n    root.p=parent\\n    root.d=deep\\n    <span class=\\"hljs-keyword\\">if</span>(root.val===x){\\n      xd=deep\\n      xp=parent\\n    }\\n    <span class=\\"hljs-keyword\\">if</span>(root.val===y){\\n      yd=deep\\n      yp=parent\\n    }\\n    <span class=\\"hljs-keyword\\">if</span>(root.left)dfs(root.left,root,deep+<span class=\\"hljs-number\\">1</span>)\\n    <span class=\\"hljs-keyword\\">if</span>(root.right)dfs(root.right,root,deep+<span class=\\"hljs-number\\">1</span>)\\n  }\\n  dfs(root,<span class=\\"hljs-literal\\">null</span>,<span class=\\"hljs-number\\">0</span>)\\n  <span class=\\"hljs-comment\\">// console.log(xd,yd,xp,yp)</span>\\n  <span class=\\"hljs-keyword\\">if</span>(xd===yd &amp;&amp; xp!==yp)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n};\\n</code></pre>\\n"],"querySlug":"cousins-in-binary-tree","created_at":"2019-02-17","timeArr":[2019,1,17,10,37,45,0],"hasThinking":false,"content":"<p>在二叉树中，根节点位于深度 <code>0</code> 处，每个深度为 <code>k</code> 的节点的子节点位于深度 <code>k+1</code> 处。</p>\\n\\n<p>如果二叉树的两个节点深度相同，但<strong> 父节点不同</strong> ，则它们是一对<em>堂兄弟节点</em>。</p>\\n\\n<p>我们给出了具有唯一值的二叉树的根节点 <code>root</code> ，以及树中两个不同节点的值 <code>x</code> 和 <code>y</code> 。</p>\\n\\n<p>只有与值 <code>x</code> 和 <code>y</code> 对应的节点是堂兄弟节点时，才返回 <code>true</code> 。否则，返回 <code>false</code>。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：<br />\\n<img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/16/q1248-01.png\\" style=\\"height: 160px; width: 180px;\\" /></strong></p>\\n\\n<pre>\\n<strong>输入：</strong>root = [1,2,3,4], x = 4, y = 3\\n<strong>输出：</strong>false\\n</pre>\\n\\n<p><strong>示例 2：<br />\\n<img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/16/q1248-02.png\\" style=\\"height: 160px; width: 201px;\\" /></strong></p>\\n\\n<pre>\\n<strong>输入：</strong>root = [1,2,3,null,4,null,5], x = 5, y = 4\\n<strong>输出：</strong>true\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<p><strong><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/16/q1248-03.png\\" style=\\"height: 160px; width: 156px;\\" /></strong></p>\\n\\n<pre>\\n<strong>输入：</strong>root = [1,2,3,null,4], x = 2, y = 3\\n<strong>输出：</strong>false</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li>二叉树的节点数介于 <code>2</code> 到 <code>100</code> 之间。</li>\\n\\t<li>每个节点的值都是唯一的、范围为 <code>1</code> 到 <code>100</code> 的整数。</li>\\n</ul>\\n\\n<p> </p>\\n","title":"993. 二叉树的堂兄弟节点","relatedTags":["树","深度优先搜索","广度优先搜索","二叉树"],"difficult":"Easy","lang":["javascript"],"uniqueID":"993","slug":"993-Cousins-in-Binary-Tree"}')}}]);