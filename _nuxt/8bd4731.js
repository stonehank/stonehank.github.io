(window.webpackJsonp=window.webpackJsonp||[]).push([[885],{1683:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">nums</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> totalHammingDistance = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">nums</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;<span class=\\"hljs-number\\">32</span>;i++){\\n    <span class=\\"hljs-keyword\\">let</span> one=<span class=\\"hljs-number\\">0</span>,zero=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">let</span> c=<span class=\\"hljs-number\\">1</span>&lt;&lt;i\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> num <span class=\\"hljs-keyword\\">of</span> nums){\\n      <span class=\\"hljs-keyword\\">if</span>((num &amp; c) &gt;<span class=\\"hljs-number\\">0</span>)one++\\n      <span class=\\"hljs-keyword\\">else</span> zero++\\n    }\\n    res+=one*zero\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"total-hamming-distance","created_at":"2019-04-22","timeArr":[2019,3,22,13,9,12,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>这里主要是 <code>&gt;&gt;</code> 和 <code>&amp;</code>，实现对每一个数据进行位数处理</p>\\n<p>1、对每一个数据进行右移 i位<code>nums[j] &gt;&gt; i</code> ，得出 k</p>\\n<p>2、对 k 进行 <code>k &amp; 1</code>， 1 的二进制是<code>...00001</code>，因此可以判断出 k 的最后1位是 1 还是 0，所以<code>binCount</code>就是最后一位为1的数量</p>\\n<p>3、<code>binCount*(nums.length-binCount)</code> ，其中<code>nums.length-binCount</code>指最后一位是0的数量，因此<code>1的数量*0的数量</code>，也就是它们能组合的海明距离</p>\\n","content":"<p>两个整数的 <a href=\\"https://baike.baidu.com/item/%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB/475174?fr=aladdin\\">汉明距离</a> 指的是这两个数字的二进制数对应位不同的数量。</p>\\n\\n<p>给你一个整数数组 <code>nums</code>，请你计算并返回 <code>nums</code> 中任意两个数之间汉明距离的总和。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [4,14,2]\\n<strong>输出：</strong>6\\n<strong>解释：</strong>在二进制表示中，4 表示为 0100 ，14 表示为 1110 ，2表示为 0010 。（这样表示是为了体现后四位之间关系）\\n所以答案为：\\nHammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [4,14,4]\\n<strong>输出：</strong>4\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= nums.length <= 10<sup>5</sup></code></li>\\n\\t<li><code>0 <= nums[i] <= 10<sup>9</sup></code></li>\\n</ul>\\n","title":"477. 汉明距离总和","relatedTags":["位运算","数组","数学"],"difficult":"Middle","lang":["javascript"],"uniqueID":"477","slug":"477-Total-Hamming-Distance"}')}}]);