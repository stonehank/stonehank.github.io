(window.webpackJsonp=window.webpackJsonp||[]).push([[213],{1011:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">N</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> clumsy = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">N</span>) </span>{\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">calc</span>(<span class=\\"hljs-params\\">n</span>)</span>{\\n      <span class=\\"hljs-keyword\\">if</span>(n&gt;=<span class=\\"hljs-number\\">3</span>)\\n        <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-built_in\\">Math</span>.floor( n*(n<span class=\\"hljs-number\\">-1</span>) /(n<span class=\\"hljs-number\\">-2</span>))\\n      <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(n===<span class=\\"hljs-number\\">2</span>){\\n        <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-built_in\\">Math</span>.floor(n*(n<span class=\\"hljs-number\\">-1</span>))\\n      }<span class=\\"hljs-keyword\\">else</span>{\\n        <span class=\\"hljs-keyword\\">return</span> n\\n      }\\n    }\\n  \\n  <span class=\\"hljs-keyword\\">let</span> mod=N % <span class=\\"hljs-number\\">4</span>\\n  <span class=\\"hljs-keyword\\">let</span> res=calc(N)\\n  <span class=\\"hljs-keyword\\">if</span>(N&gt;=<span class=\\"hljs-number\\">4</span>){\\n    res+=(N<span class=\\"hljs-number\\">-3</span>)\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=N<span class=\\"hljs-number\\">-4</span>;i&gt;mod;i-=<span class=\\"hljs-number\\">4</span>){\\n      res=res-calc(i)\\n      res+=(i<span class=\\"hljs-number\\">-3</span>)\\n    }\\n    res-=calc(mod)    \\n  }\\n\\n  <span class=\\"hljs-keyword\\">return</span> res\\n  \\n};\\n</code></pre>\\n"],"querySlug":"clumsy-factorial","created_at":"2019-03-10","timeArr":[2019,2,10,10,56,25,0],"hasThinking":false,"content":"<p>通常，正整数 <code>n</code> 的阶乘是所有小于或等于 <code>n</code> 的正整数的乘积。例如，<code>factorial(10) = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1</code>。</p>\\n\\n<p>相反，我们设计了一个笨阶乘 <code>clumsy</code>：在整数的递减序列中，我们以一个固定顺序的操作符序列来依次替换原有的乘法操作符：乘法(*)，除法(/)，加法(+)和减法(-)。</p>\\n\\n<p>例如，<code>clumsy(10) = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1</code>。然而，这些运算仍然使用通常的算术运算顺序：我们在任何加、减步骤之前执行所有的乘法和除法步骤，并且按从左到右处理乘法和除法步骤。</p>\\n\\n<p>另外，我们使用的除法是地板除法（<em>floor division</em>），所以&nbsp;<code>10 * 9 / 8</code>&nbsp;等于&nbsp;<code>11</code>。这保证结果是一个整数。</p>\\n\\n<p>实现上面定义的笨函数：给定一个整数 <code>N</code>，它返回 <code>N</code> 的笨阶乘。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>4\\n<strong>输出：</strong>7\\n<strong>解释：</strong>7 = 4 * 3 / 2 + 1\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>10\\n<strong>输出：</strong>12\\n<strong>解释：</strong>12 = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ol>\\n\\t<li><code>1 &lt;= N &lt;= 10000</code></li>\\n\\t<li><code>-2^31 &lt;= answer &lt;= 2^31 - 1</code>&nbsp; （答案保证符合 32 位整数。）</li>\\n</ol>\\n","title":"1006. 笨阶乘","relatedTags":["栈","数学","模拟"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1006","slug":"1006-Clumsy-Factorial"}')}}]);