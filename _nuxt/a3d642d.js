(window.webpackJsonp=window.webpackJsonp||[]).push([[1093],{1891:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">image</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">sr</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">sc</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">newColor</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[][]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> floodFill = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">image, sr, sc, newColor</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(image.length===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span> image\\n  <span class=\\"hljs-keyword\\">let</span> m=image.length,n=image[<span class=\\"hljs-number\\">0</span>].length\\n  <span class=\\"hljs-keyword\\">let</span> oldColor=image[sr][sc]\\n  <span class=\\"hljs-keyword\\">if</span>(oldColor===newColor)<span class=\\"hljs-keyword\\">return</span> image\\n  <span class=\\"hljs-keyword\\">let</span> moves=[[<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">0</span>],[<span class=\\"hljs-number\\">1</span>,<span class=\\"hljs-number\\">0</span>],[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">-1</span>],[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">1</span>]]\\n  dfs([sr,sc])\\n  <span class=\\"hljs-keyword\\">return</span> image\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">dfs</span>(<span class=\\"hljs-params\\">[x,y]</span>)</span>{\\n    image[x][y]=newColor\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> [dx,dy] <span class=\\"hljs-keyword\\">of</span> moves){\\n      <span class=\\"hljs-keyword\\">let</span> nx=dx+x,ny=dy+y\\n      <span class=\\"hljs-keyword\\">if</span>(nx&lt;<span class=\\"hljs-number\\">0</span> || ny&lt;<span class=\\"hljs-number\\">0</span> || nx&gt;=m || ny&gt;=n)<span class=\\"hljs-keyword\\">continue</span>\\n      <span class=\\"hljs-keyword\\">if</span>(image[nx][ny]===oldColor){\\n        dfs([nx,ny])\\n      }\\n    }\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"flood-fill","created_at":"2019-04-10","timeArr":[2019,3,10,14,43,52,0],"hasThinking":false,"content":"<p>有一幅以二维整数数组表示的图画，每一个整数表示该图画的像素值大小，数值在 0 到 65535 之间。</p>\\n\\n<p>给你一个坐标&nbsp;<code>(sr, sc)</code>&nbsp;表示图像渲染开始的像素值（行 ，列）和一个新的颜色值&nbsp;<code>newColor</code>，让你重新上色这幅图像。</p>\\n\\n<p>为了完成上色工作，从初始坐标开始，记录初始坐标的上下左右四个方向上像素值与初始坐标相同的相连像素点，接着再记录这四个方向上符合条件的像素点与他们对应四个方向上像素值与初始坐标相同的相连像素点，&hellip;&hellip;，重复该过程。将所有有记录的像素点的颜色值改为新的颜色值。</p>\\n\\n<p>最后返回经过上色渲染后的图像。</p>\\n\\n<p><strong>示例 1:</strong></p>\\n\\n<pre>\\n<strong>输入:</strong> \\nimage = [[1,1,1],[1,1,0],[1,0,1]]\\nsr = 1, sc = 1, newColor = 2\\n<strong>输出:</strong> [[2,2,2],[2,2,0],[2,0,1]]\\n<strong>解析:</strong> \\n在图像的正中间，(坐标(sr,sc)=(1,1)),\\n在路径上所有符合条件的像素点的颜色都被更改成2。\\n注意，右下角的像素没有更改为2，\\n因为它不是在上下左右四个方向上与初始点相连的像素点。\\n</pre>\\n\\n<p><strong>注意:</strong></p>\\n\\n<ul>\\n\\t<li><code>image</code> 和&nbsp;<code>image[0]</code>&nbsp;的长度在范围&nbsp;<code>[1, 50]</code> 内。</li>\\n\\t<li>给出的初始点将满足&nbsp;<code>0 &lt;= sr &lt; image.length</code> 和&nbsp;<code>0 &lt;= sc &lt; image[0].length</code>。</li>\\n\\t<li><code>image[i][j]</code> 和&nbsp;<code>newColor</code>&nbsp;表示的颜色值在范围&nbsp;<code>[0, 65535]</code>内。</li>\\n</ul>\\n","title":"733. 图像渲染","relatedTags":["深度优先搜索","广度优先搜索","数组","矩阵"],"difficult":"Easy","lang":["javascript"],"uniqueID":"733","slug":"733-Flood-Fill"}')}}]);