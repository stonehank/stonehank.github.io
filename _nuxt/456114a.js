(window.webpackJsonp=window.webpackJsonp||[]).push([[847],{1645:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">s</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">p</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> findAnagrams = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">s, p</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> hash=<span class=\\"hljs-built_in\\">Array</span>(<span class=\\"hljs-number\\">26</span>).fill(<span class=\\"hljs-number\\">0</span>),len=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;p.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> code=p.charCodeAt(i)<span class=\\"hljs-number\\">-97</span>\\n    <span class=\\"hljs-keyword\\">if</span>(hash[code]===<span class=\\"hljs-number\\">0</span>){\\n      len++\\n    }\\n    hash[code]++\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> res=[]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;p.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> code=s.charCodeAt(i)<span class=\\"hljs-number\\">-97</span>\\n    hash[code]--\\n    <span class=\\"hljs-keyword\\">if</span>(hash[code]===<span class=\\"hljs-number\\">0</span>)len--\\n  }\\n  <span class=\\"hljs-keyword\\">if</span>(len===<span class=\\"hljs-number\\">0</span>)res.push(<span class=\\"hljs-number\\">0</span>)\\n  \\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=p.length;i&lt;s.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> headCode=s.charCodeAt(i-p.length)<span class=\\"hljs-number\\">-97</span>,\\n        tailCode=s.charCodeAt(i)<span class=\\"hljs-number\\">-97</span>\\n    <span class=\\"hljs-keyword\\">if</span>(hash[headCode]===<span class=\\"hljs-number\\">0</span>)len++\\n    hash[headCode]++\\n    hash[tailCode]--\\n    <span class=\\"hljs-keyword\\">if</span>(hash[tailCode]===<span class=\\"hljs-number\\">0</span>)len--\\n    <span class=\\"hljs-keyword\\">if</span>(len===<span class=\\"hljs-number\\">0</span>)res.push(i-p.length+<span class=\\"hljs-number\\">1</span>)\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"find-all-anagrams-in-a-string","created_at":"2019-04-05","timeArr":[2019,3,5,15,27,39,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p><code>window slide</code>算法，先定义一个<code>hash</code>收集每个字母的频率，并且记录一共有多少种字母<code>len</code>。</p>\\n<p>先对<code>s</code>中前<code>p.length</code>个处理，如果存在<code>len===0</code>，则<code>0</code>是一个有效的结果。</p>\\n<p>接着对<code>[p.length,s.length]</code>进行滑动处理，每次增加头上<code>i-p.length</code>的一个，减少尾巴<code>i</code>的一个，中间存在<code>len===0</code>，则添加进结果。</p>\\n","content":"<p>给定两个字符串 <code>s</code> 和 <code>p</code>，找到 <code>s</code><strong> </strong>中所有 <code>p</code><strong> </strong>的 <strong>异位词 </strong>的子串，返回这些子串的起始索引。不考虑答案输出的顺序。</p>\\n\\n<p><strong>异位词 </strong>指字母相同，但排列不同的字符串。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1:</strong></p>\\n\\n<pre>\\n<strong>输入: </strong>s = \\"cbaebabacd\\", p = \\"abc\\"\\n<strong>输出: </strong>[0,6]\\n<strong>解释:</strong>\\n起始索引等于 0 的子串是 \\"cba\\", 它是 \\"abc\\" 的异位词。\\n起始索引等于 6 的子串是 \\"bac\\", 它是 \\"abc\\" 的异位词。\\n</pre>\\n\\n<p><strong> 示例 2:</strong></p>\\n\\n<pre>\\n<strong>输入: </strong>s = \\"abab\\", p = \\"ab\\"\\n<strong>输出: </strong>[0,1,2]\\n<strong>解释:</strong>\\n起始索引等于 0 的子串是 \\"ab\\", 它是 \\"ab\\" 的异位词。\\n起始索引等于 1 的子串是 \\"ba\\", 它是 \\"ab\\" 的异位词。\\n起始索引等于 2 的子串是 \\"ab\\", 它是 \\"ab\\" 的异位词。\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示:</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= s.length, p.length <= 3 * 10<sup>4</sup></code></li>\\n\\t<li><code>s</code> 和 <code>p</code> 仅包含小写字母</li>\\n</ul>\\n","title":"438. 找到字符串中所有字母异位词","relatedTags":["哈希表","字符串","滑动窗口"],"difficult":"Middle","lang":["javascript"],"uniqueID":"438","slug":"438-Find-All-Anagrams-in-a-String"}')}}]);