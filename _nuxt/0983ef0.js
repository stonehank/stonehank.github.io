(window.webpackJsonp=window.webpackJsonp||[]).push([[470],{1268:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Solution</span><span class=\\"hljs-params\\">(object)</span>:</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">wordBreak</span><span class=\\"hljs-params\\">(self, s, wordDict)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type s: str\\n        :type wordDict: List[str]\\n        :rtype: List[str]\\n        \\"\\"\\"</span>\\n        mem={}\\n        <span class=\\"hljs-keyword\\">for</span> n <span class=\\"hljs-keyword\\">in</span> wordDict:mem.setdefault(n,<span class=\\"hljs-literal\\">True</span>)\\n        ans=[]\\n        N=len(s)\\n        <span class=\\"hljs-comment\\"># 先检测是否存在解</span>\\n        dp=[<span class=\\"hljs-literal\\">False</span>]*(N+<span class=\\"hljs-number\\">1</span>)\\n        dp[<span class=\\"hljs-number\\">0</span>]=<span class=\\"hljs-literal\\">True</span>\\n        <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(<span class=\\"hljs-number\\">1</span>,N+<span class=\\"hljs-number\\">1</span>):\\n          <span class=\\"hljs-keyword\\">for</span> j <span class=\\"hljs-keyword\\">in</span> range(<span class=\\"hljs-number\\">0</span>,i):\\n            <span class=\\"hljs-keyword\\">if</span> dp[j] <span class=\\"hljs-keyword\\">and</span> mem.has_key(s[j:i]):\\n              dp[i]=<span class=\\"hljs-literal\\">True</span>\\n        <span class=\\"hljs-keyword\\">if</span> <span class=\\"hljs-keyword\\">not</span> dp[<span class=\\"hljs-number\\">-1</span>]:<span class=\\"hljs-keyword\\">return</span> ans\\n\\n        <span class=\\"hljs-comment\\"># 求解</span>\\n        <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">backtrack</span><span class=\\"hljs-params\\">(start,res)</span>:</span>\\n          <span class=\\"hljs-keyword\\">if</span> start==N:\\n            ans.append(res.strip())\\n          <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(start,N):\\n            cur=s[start:i+<span class=\\"hljs-number\\">1</span>]\\n            <span class=\\"hljs-keyword\\">if</span> mem.has_key(cur):\\n              backtrack(i+<span class=\\"hljs-number\\">1</span>,res+<span class=\\"hljs-string\\">\' \'</span>+cur)\\n            \\n        backtrack(<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-string\\">\'\'</span>)\\n        <span class=\\"hljs-keyword\\">return</span> ans\\n</code></pre>\\n"],"querySlug":"word-break-ii","created_at":"2019-03-01","timeArr":[2019,2,1,11,6,14,0],"hasThinking":false,"content":"<p>给定一个<strong>非空</strong>字符串 <em>s</em> 和一个包含<strong>非空</strong>单词列表的字典 <em>wordDict</em>，在字符串中增加空格来构建一个句子，使得句子中所有的单词都在词典中。返回所有这些可能的句子。</p>\\n\\n<p><strong>说明：</strong></p>\\n\\n<ul>\\n\\t<li>分隔时可以重复使用字典中的单词。</li>\\n\\t<li>你可以假设字典中没有重复的单词。</li>\\n</ul>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入:\\n</strong>s = &quot;<code>catsanddog</code>&quot;\\nwordDict = <code>[&quot;cat&quot;, &quot;cats&quot;, &quot;and&quot;, &quot;sand&quot;, &quot;dog&quot;]</code>\\n<strong>输出:\\n</strong><code>[\\n&nbsp; &quot;cats and dog&quot;,\\n&nbsp; &quot;cat sand dog&quot;\\n]</code>\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入:\\n</strong>s = &quot;pineapplepenapple&quot;\\nwordDict = [&quot;apple&quot;, &quot;pen&quot;, &quot;applepen&quot;, &quot;pine&quot;, &quot;pineapple&quot;]\\n<strong>输出:\\n</strong>[\\n&nbsp; &quot;pine apple pen apple&quot;,\\n&nbsp; &quot;pineapple pen apple&quot;,\\n&nbsp; &quot;pine applepen apple&quot;\\n]\\n<strong>解释:</strong> 注意你可以重复使用字典中的单词。\\n</pre>\\n\\n<p><strong>示例&nbsp;3：</strong></p>\\n\\n<pre><strong>输入:\\n</strong>s = &quot;catsandog&quot;\\nwordDict = [&quot;cats&quot;, &quot;dog&quot;, &quot;sand&quot;, &quot;and&quot;, &quot;cat&quot;]\\n<strong>输出:\\n</strong>[]\\n</pre>\\n","title":"140. 单词拆分 II","relatedTags":["字典树","记忆化搜索","哈希表","字符串","动态规划","回溯"],"difficult":"Hard","lang":["python"],"uniqueID":"140","slug":"140-Word-Break-II"}')}}]);