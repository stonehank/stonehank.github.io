(window.webpackJsonp=window.webpackJsonp||[]).push([[1154],{1952:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">str</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> myAtoi = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">str</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> isNeg=<span class=\\"hljs-literal\\">null</span>\\n  <span class=\\"hljs-keyword\\">let</span> first=<span class=\\"hljs-literal\\">false</span>\\n  <span class=\\"hljs-keyword\\">let</span> numS=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;str.length;i++){\\n    <span class=\\"hljs-keyword\\">if</span>(!first &amp;&amp; str[i]===<span class=\\"hljs-string\\">\' \'</span>)<span class=\\"hljs-keyword\\">continue</span>\\n    first=<span class=\\"hljs-literal\\">true</span>\\n    <span class=\\"hljs-keyword\\">if</span>(isNeg==<span class=\\"hljs-literal\\">null</span> &amp;&amp; str[i]===<span class=\\"hljs-string\\">\\"+\\"</span>){isNeg=<span class=\\"hljs-literal\\">false</span>;}\\n    <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(isNeg==<span class=\\"hljs-literal\\">null</span> &amp;&amp; str[i]===<span class=\\"hljs-string\\">\\"-\\"</span>){isNeg=<span class=\\"hljs-literal\\">true</span>}\\n    <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-regexp\\">/\\\\d/</span>.test(str[i])){\\n      isNeg=!!isNeg\\n      numS=numS*<span class=\\"hljs-number\\">10</span>+str[i]*<span class=\\"hljs-number\\">1</span>\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      <span class=\\"hljs-keyword\\">break</span>\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> res=isNeg?-numS:numS,\\n      limit=<span class=\\"hljs-built_in\\">Math</span>.pow(<span class=\\"hljs-number\\">2</span>,<span class=\\"hljs-number\\">31</span>)\\n  <span class=\\"hljs-keyword\\">if</span>(res&gt;limit<span class=\\"hljs-number\\">-1</span>)res=limit<span class=\\"hljs-number\\">-1</span>\\n  <span class=\\"hljs-keyword\\">if</span>(res&lt;-limit)res=-limit\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"string-to-integer-atoi","created_at":"2019-03-21","timeArr":[2019,2,21,17,12,0,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>这道题涉及的情况有4种，因此需要先完全考虑清楚它们的关系，否则会容易漏掉一些规则出错。</p>\\n<ol>\\n<li>空格：空格只有在前面没有任何字符的情况下才能继续处理，如果前面存在任何字符，遇到空格直接跳出。</li>\\n<li>字母：遇到字母直接跳出。</li>\\n<li>正负号：只有在还没有出现正负号或者数字的情况，正负号才有效，否则跳出。</li>\\n<li>数字：遇到数字如果前面无zhengfuhao正负号，说明是正号。</li>\\n</ol>\\n","content":"<p>请你来实现一个 <code>myAtoi(string s)</code> 函数，使其能将字符串转换成一个 32 位有符号整数（类似 C/C++ 中的 <code>atoi</code> 函数）。</p>\\n\\n<p>函数 <code>myAtoi(string s)</code> 的算法如下：</p>\\n\\n<ul>\\n\\t<li>读入字符串并丢弃无用的前导空格</li>\\n\\t<li>检查下一个字符（假设还未到字符末尾）为正还是负号，读取该字符（如果有）。 确定最终结果是负数还是正数。 如果两者都不存在，则假定结果为正。</li>\\n\\t<li>读入下一个字符，直到到达下一个非数字字符或到达输入的结尾。字符串的其余部分将被忽略。</li>\\n\\t<li>将前面步骤读入的这些数字转换为整数（即，\\"123\\" -> 123， \\"0032\\" -> 32）。如果没有读入数字，则整数为 <code>0</code> 。必要时更改符号（从步骤 2 开始）。</li>\\n\\t<li>如果整数数超过 32 位有符号整数范围 <code>[−2<sup>31</sup>,  2<sup>31 </sup>− 1]</code> ，需要截断这个整数，使其保持在这个范围内。具体来说，小于 <code>−2<sup>31</sup></code> 的整数应该被固定为 <code>−2<sup>31</sup></code> ，大于 <code>2<sup>31 </sup>− 1</code> 的整数应该被固定为 <code>2<sup>31 </sup>− 1</code> 。</li>\\n\\t<li>返回整数作为最终结果。</li>\\n</ul>\\n\\n<p><strong>注意：</strong></p>\\n\\n<ul>\\n\\t<li>本题中的空白字符只包括空格字符 <code>\' \'</code> 。</li>\\n\\t<li>除前导空格或数字后的其余字符串外，<strong>请勿忽略</strong> 任何其他字符。</li>\\n</ul>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = \\"42\\"\\n<strong>输出：</strong>42\\n<strong>解释：</strong>加粗的字符串为已经读入的字符，插入符号是当前读取的字符。\\n第 1 步：\\"42\\"（当前没有读入字符，因为没有前导空格）\\n         ^\\n第 2 步：\\"42\\"（当前没有读入字符，因为这里不存在 \'-\' 或者 \'+\'）\\n         ^\\n第 3 步：\\"<strong>42</strong>\\"（读入 \\"42\\"）\\n           ^\\n解析得到整数 42 。\\n由于 \\"42\\" 在范围 [-2<sup>31</sup>, 2<sup>31</sup> - 1] 内，最终结果为 42 。</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = \\"   -42\\"\\n<strong>输出：</strong>-42\\n<strong>解释：</strong>\\n第 1 步：\\"<strong>   </strong>-42\\"（读入前导空格，但忽视掉）\\n            ^\\n第 2 步：\\"   <strong>-</strong>42\\"（读入 \'-\' 字符，所以结果应该是负数）\\n             ^\\n第 3 步：\\"   -<strong>42</strong>\\"（读入 \\"42\\"）\\n               ^\\n解析得到整数 -42 。\\n由于 \\"-42\\" 在范围 [-2<sup>31</sup>, 2<sup>31</sup> - 1] 内，最终结果为 -42 。\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = \\"4193 with words\\"\\n<strong>输出：</strong>4193\\n<strong>解释：</strong>\\n第 1 步：\\"4193 with words\\"（当前没有读入字符，因为没有前导空格）\\n         ^\\n第 2 步：\\"4193 with words\\"（当前没有读入字符，因为这里不存在 \'-\' 或者 \'+\'）\\n         ^\\n第 3 步：\\"<strong>4193</strong> with words\\"（读入 \\"4193\\"；由于下一个字符不是一个数字，所以读入停止）\\n             ^\\n解析得到整数 4193 。\\n由于 \\"4193\\" 在范围 [-2<sup>31</sup>, 2<sup>31</sup> - 1] 内，最终结果为 4193 。\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = \\"words and 987\\"\\n<strong>输出：</strong>0\\n<strong>解释：</strong>\\n第 1 步：\\"words and 987\\"（当前没有读入字符，因为没有前导空格）\\n         ^\\n第 2 步：\\"words and 987\\"（当前没有读入字符，因为这里不存在 \'-\' 或者 \'+\'）\\n         ^\\n第 3 步：\\"words and 987\\"（由于当前字符 \'w\' 不是一个数字，所以读入停止）\\n         ^\\n解析得到整数 0 ，因为没有读入任何数字。\\n由于 0 在范围 [-2<sup>31</sup>, 2<sup>31</sup> - 1] 内，最终结果为 0 。</pre>\\n\\n<p><strong>示例 5：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = \\"-91283472332\\"\\n<strong>输出：</strong>-2147483648\\n<strong>解释：</strong>\\n第 1 步：\\"-91283472332\\"（当前没有读入字符，因为没有前导空格）\\n         ^\\n第 2 步：\\"<strong>-</strong>91283472332\\"（读入 \'-\' 字符，所以结果应该是负数）\\n          ^\\n第 3 步：\\"-<strong>91283472332</strong>\\"（读入 \\"91283472332\\"）\\n                     ^\\n解析得到整数 -91283472332 。\\n由于 -91283472332 小于范围 [-2<sup>31</sup>, 2<sup>31</sup> - 1] 的下界，最终结果被截断为 -2<sup>31</sup> = -2147483648 。</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>0 <= s.length <= 200</code></li>\\n\\t<li><code>s</code> 由英文字母（大写和小写）、数字（<code>0-9</code>）、<code>\' \'</code>、<code>\'+\'</code>、<code>\'-\'</code> 和 <code>\'.\'</code> 组成</li>\\n</ul>\\n","title":"8. 字符串转换整数 (atoi)","relatedTags":["字符串"],"difficult":"Middle","lang":["javascript"],"uniqueID":"8","slug":"8-String-to-Integer-(atoi)"}')}}]);