(window.webpackJsonp=window.webpackJsonp||[]).push([[883],{1681:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Solution</span><span class=\\"hljs-params\\">(object)</span>:</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">findRadius</span><span class=\\"hljs-params\\">(self, houses, heaters)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type houses: List[int]\\n        :type heaters: List[int]\\n        :rtype: int\\n        \\"\\"\\"</span>\\n        houses.sort()\\n        heaters.sort()\\n        minRadius=float(<span class=\\"hljs-string\\">\\"-inf\\"</span>)\\n        <span class=\\"hljs-keyword\\">for</span> n <span class=\\"hljs-keyword\\">in</span> houses:\\n          <span class=\\"hljs-keyword\\">if</span> heaters[<span class=\\"hljs-number\\">-1</span>]&lt;=n:\\n            minRadius=max(minRadius,n-heaters[<span class=\\"hljs-number\\">-1</span>])\\n          <span class=\\"hljs-keyword\\">elif</span> heaters[<span class=\\"hljs-number\\">0</span>]&gt;=n:\\n            minRadius=max(minRadius,heaters[<span class=\\"hljs-number\\">0</span>]-n)\\n          <span class=\\"hljs-keyword\\">else</span>:\\n            lo,hi=<span class=\\"hljs-number\\">0</span>,len(heaters)<span class=\\"hljs-number\\">-1</span>\\n            <span class=\\"hljs-keyword\\">while</span> lo&lt;hi:\\n              mid=(lo+hi)//<span class=\\"hljs-number\\">2</span>\\n              <span class=\\"hljs-keyword\\">if</span> heaters[mid]&lt;n:\\n                lo=mid+<span class=\\"hljs-number\\">1</span>\\n              <span class=\\"hljs-keyword\\">else</span>:\\n                hi=mid\\n            minRadius=max(minRadius,min(heaters[lo]-n,n-heaters[lo<span class=\\"hljs-number\\">-1</span>]))\\n        <span class=\\"hljs-keyword\\">return</span> minRadius\\n</code></pre>\\n"],"querySlug":"heaters","created_at":"2019-02-25","timeArr":[2019,1,25,23,56,51,0],"hasThinking":false,"content":"<p>冬季已经来临。 你的任务是设计一个有固定加热半径的供暖器向所有房屋供暖。</p>\\n\\n<p>在加热器的加热半径范围内的每个房屋都可以获得供暖。</p>\\n\\n<p>现在，给出位于一条水平线上的房屋 <code>houses</code> 和供暖器 <code>heaters</code> 的位置，请你找出并返回可以覆盖所有房屋的最小加热半径。</p>\\n\\n<p><strong>说明</strong>：所有供暖器都遵循你的半径标准，加热的半径也一样。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1:</strong></p>\\n\\n<pre>\\n<strong>输入:</strong> houses = [1,2,3], heaters = [2]\\n<strong>输出:</strong> 1\\n<strong>解释:</strong> 仅在位置2上有一个供暖器。如果我们将加热半径设为1，那么所有房屋就都能得到供暖。\\n</pre>\\n\\n<p><strong>示例 2:</strong></p>\\n\\n<pre>\\n<strong>输入:</strong> houses = [1,2,3,4], heaters = [1,4]\\n<strong>输出:</strong> 1\\n<strong>解释:</strong> 在位置1, 4上有两个供暖器。我们需要将加热半径设为1，这样所有房屋就都能得到供暖。\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>houses = [1,5], heaters = [2]\\n<strong>输出：</strong>3\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= houses.length, heaters.length <= 3 * 10<sup>4</sup></code></li>\\n\\t<li><code>1 <= houses[i], heaters[i] <= 10<sup>9</sup></code></li>\\n</ul>\\n","title":"475. 供暖器","relatedTags":["数组","二分查找","排序"],"difficult":"Middle","lang":["python"],"uniqueID":"475","slug":"475-Heaters"}')}}]);