(window.webpackJsonp=window.webpackJsonp||[]).push([[1197],{1995:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string[]}</span> <span class=\\"hljs-variable\\">A</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> numSimilarGroups = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">A</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> hash={}\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> a <span class=\\"hljs-keyword\\">of</span> A)hash[a]=<span class=\\"hljs-number\\">1</span>\\n  A=<span class=\\"hljs-built_in\\">Object</span>.keys(hash)\\n  <span class=\\"hljs-keyword\\">let</span> N=A.length\\n  <span class=\\"hljs-keyword\\">let</span> group=N\\n  <span class=\\"hljs-keyword\\">let</span> uf=<span class=\\"hljs-built_in\\">Array</span>(N).fill(<span class=\\"hljs-number\\">0</span>).map(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">n,i</span>)=&gt;</span>i),\\n      weight=<span class=\\"hljs-built_in\\">Array</span>(N).fill(<span class=\\"hljs-number\\">1</span>)\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">find</span>(<span class=\\"hljs-params\\">i</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(i!==uf[i]){\\n      uf[i]=find(uf[i])\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> uf[i]\\n  }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">union</span>(<span class=\\"hljs-params\\">a,b</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> i=find(a),\\n        j=find(b)\\n    <span class=\\"hljs-keyword\\">if</span>(i===j)<span class=\\"hljs-keyword\\">return</span>\\n    group--\\n    <span class=\\"hljs-keyword\\">if</span>(weight[i]&lt;weight[j]){\\n      weight[j]+=weight[i]\\n      uf[i]=j\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      weight[i]+=weight[j]\\n      uf[j]=i\\n    }\\n  }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">isConnected</span>(<span class=\\"hljs-params\\">a,b</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> i=find(a),\\n        j=find(b)\\n    <span class=\\"hljs-keyword\\">return</span> i===j\\n  }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">isSimilar</span>(<span class=\\"hljs-params\\">nA,nB</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> diff=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;nA.length;i++){\\n      <span class=\\"hljs-keyword\\">if</span>(nA[i]!==nB[i])diff++\\n      <span class=\\"hljs-keyword\\">if</span>(diff&gt;<span class=\\"hljs-number\\">2</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> diff&lt;=<span class=\\"hljs-number\\">2</span>\\n  }\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;N<span class=\\"hljs-number\\">-1</span>;i++){\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=i+<span class=\\"hljs-number\\">1</span>;j&lt;N;j++){\\n      <span class=\\"hljs-keyword\\">if</span>(isSimilar(A[i],A[j])){\\n        union(i,j)\\n      }\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> group\\n};\\n</code></pre>\\n"],"querySlug":"similar-string-groups","created_at":"2019-04-10","timeArr":[2019,3,10,23,2,45,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p><code>union find</code>可以解决此问题，对<code>A</code>双重遍历判断相似的字符串进行<code>union</code>，但是直接写，容易<code>TLE</code>，可以优化的<code>2</code>个地方：</p>\\n<ol>\\n<li>\\n<p>先将<code>A</code>去重，因为重复肯定是属于一个关联组中，因此只需要保留1个便可。</p>\\n</li>\\n<li>\\n<p>双重遍历，内部遍历只需要从<code>j=i+1</code>开始。</p>\\n</li>\\n<li>\\n<p>使用加权<code>union</code>，在查找上能节省不少时间。</p>\\n</li>\\n</ol>\\n","content":"<p>如果交换字符串 <code>X</code> 中的两个不同位置的字母，使得它和字符串 <code>Y</code> 相等，那么称 <code>X</code> 和 <code>Y</code> 两个字符串相似。如果这两个字符串本身是相等的，那它们也是相似的。</p>\\n\\n<p>例如，<code>\\"tars\\"</code> 和 <code>\\"rats\\"</code> 是相似的 (交换 <code>0</code> 与 <code>2</code> 的位置)； <code>\\"rats\\"</code> 和 <code>\\"arts\\"</code> 也是相似的，但是 <code>\\"star\\"</code> 不与 <code>\\"tars\\"</code>，<code>\\"rats\\"</code>，或 <code>\\"arts\\"</code> 相似。</p>\\n\\n<p>总之，它们通过相似性形成了两个关联组：<code>{\\"tars\\", \\"rats\\", \\"arts\\"}</code> 和 <code>{\\"star\\"}</code>。注意，<code>\\"tars\\"</code> 和 <code>\\"arts\\"</code> 是在同一组中，即使它们并不相似。形式上，对每个组而言，要确定一个单词在组中，只需要这个词和该组中至少一个单词相似。</p>\\n\\n<p>给你一个字符串列表 <code>strs</code>。列表中的每个字符串都是 <code>strs</code> 中其它所有字符串的一个字母异位词。请问 <code>strs</code> 中有多少个相似字符串组？</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>strs = [\\"tars\\",\\"rats\\",\\"arts\\",\\"star\\"]\\n<strong>输出：</strong>2\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>strs = [\\"omv\\",\\"ovm\\"]\\n<strong>输出：</strong>1\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= strs.length <= 300</code></li>\\n\\t<li><code>1 <= strs[i].length <= 300</code></li>\\n\\t<li><code>strs[i]</code> 只包含小写字母。</li>\\n\\t<li><code>strs</code> 中的所有单词都具有相同的长度，且是彼此的字母异位词。</li>\\n</ul>\\n\\n<p> </p>\\n\\n<p><strong>备注：</strong></p>\\n\\n<p>      字母异位词（anagram），一种把某个字符串的字母的位置（顺序）加以改换所形成的新词。</p>\\n","title":"839. 相似字符串组","relatedTags":["深度优先搜索","广度优先搜索","并查集","字符串"],"difficult":"Hard","lang":["javascript"],"uniqueID":"839","slug":"839-Similar-String-Groups"}')}}]);