(window.webpackJsonp=window.webpackJsonp||[]).push([[1360],{2158:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for an interval.\\n * function Interval(start, end) {\\n *     this.start = start;\\n *     this.end = end;\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{Interval[]}</span> <span class=\\"hljs-variable\\">A</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{Interval[]}</span> <span class=\\"hljs-variable\\">B</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{Interval[]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> intervalIntersection = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">A, B</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> res=[]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;A.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> a=A[i]\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;B.length;j++){\\n      <span class=\\"hljs-keyword\\">let</span> b=B[j]\\n      <span class=\\"hljs-keyword\\">if</span>(b.end&lt;a.start)<span class=\\"hljs-keyword\\">continue</span>\\n      <span class=\\"hljs-keyword\\">let</span> inte=hasInterv(a,b)\\n      <span class=\\"hljs-keyword\\">if</span>(inte){\\n        res.push(inte)\\n      }<span class=\\"hljs-keyword\\">else</span>{\\n        <span class=\\"hljs-keyword\\">break</span>\\n      }\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">hasInterv</span>(<span class=\\"hljs-params\\">a,b</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> intS=<span class=\\"hljs-built_in\\">Math</span>.max(a.start,b.start)\\n    <span class=\\"hljs-keyword\\">let</span> intE=<span class=\\"hljs-built_in\\">Math</span>.min(a.end,b.end)\\n    <span class=\\"hljs-keyword\\">if</span>(intS&lt;=intE)<span class=\\"hljs-keyword\\">return</span> {<span class=\\"hljs-attr\\">start</span>:intS,<span class=\\"hljs-attr\\">end</span>:intE}\\n    <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">null</span>\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"interval-list-intersections","created_at":"2019-02-03","timeArr":[2019,1,3,10,56,53,0],"hasThinking":false,"content":"<p>给定两个由一些<strong> 闭区间 </strong>组成的列表，<code>firstList</code> 和 <code>secondList</code> ，其中 <code>firstList[i] = [start<sub>i</sub>, end<sub>i</sub>]</code> 而 <code>secondList[j] = [start<sub>j</sub>, end<sub>j</sub>]</code> 。每个区间列表都是成对 <strong>不相交</strong> 的，并且 <strong>已经排序</strong> 。</p>\\n\\n<p>返回这 <strong>两个区间列表的交集</strong> 。</p>\\n\\n<p>形式上，<strong>闭区间</strong> <code>[a, b]</code>（其中 <code>a <= b</code>）表示实数 <code>x</code> 的集合，而 <code>a <= x <= b</code> 。</p>\\n\\n<p>两个闭区间的 <strong>交集</strong> 是一组实数，要么为空集，要么为闭区间。例如，<code>[1, 3]</code> 和 <code>[2, 4]</code> 的交集为 <code>[2, 3]</code> 。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2019/01/30/interval1.png\\" style=\\"width: 700px; height: 194px;\\" />\\n<pre>\\n<strong>输入：</strong>firstList = [[0,2],[5,10],[13,23],[24,25]], secondList = [[1,5],[8,12],[15,24],[25,26]]\\n<strong>输出：</strong>[[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>firstList = [[1,3],[5,9]], secondList = []\\n<strong>输出：</strong>[]\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>firstList = [], secondList = [[4,8],[10,12]]\\n<strong>输出：</strong>[]\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>firstList = [[1,7]], secondList = [[3,10]]\\n<strong>输出：</strong>[[3,7]]\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>0 <= firstList.length, secondList.length <= 1000</code></li>\\n\\t<li><code>firstList.length + secondList.length >= 1</code></li>\\n\\t<li><code>0 <= start<sub>i</sub> < end<sub>i</sub> <= 10<sup>9</sup></code></li>\\n\\t<li><code>end<sub>i</sub> < start<sub>i+1</sub></code></li>\\n\\t<li><code>0 <= start<sub>j</sub> < end<sub>j</sub> <= 10<sup>9</sup> </code></li>\\n\\t<li><code>end<sub>j</sub> < start<sub>j+1</sub></code></li>\\n</ul>\\n","title":"986. 区间列表的交集","relatedTags":["数组","双指针"],"difficult":"Middle","lang":["javascript"],"uniqueID":"986","slug":"986-Interval-List-Intersections"}')}}]);