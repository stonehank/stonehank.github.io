(window.webpackJsonp=window.webpackJsonp||[]).push([[824],{1622:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Solution</span><span class=\\"hljs-params\\">(object)</span>:</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">splitArray</span><span class=\\"hljs-params\\">(self, nums, m)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type nums: List[int]\\n        :type m: int\\n        :rtype: int\\n        \\"\\"\\"</span>\\n        numSum=sum(nums)\\n        numMax=max(nums)\\n        <span class=\\"hljs-keyword\\">if</span> m==<span class=\\"hljs-number\\">1</span>:<span class=\\"hljs-keyword\\">return</span> numSum\\n        minSum=float(<span class=\\"hljs-string\\">\'inf\'</span>)\\n        lo,hi=numMax,numSum\\n        <span class=\\"hljs-keyword\\">while</span> lo&lt;hi:\\n          mid=(lo+hi)//<span class=\\"hljs-number\\">2</span>\\n          s=<span class=\\"hljs-number\\">0</span>\\n          count=<span class=\\"hljs-number\\">1</span>\\n          <span class=\\"hljs-keyword\\">for</span> n <span class=\\"hljs-keyword\\">in</span> nums:\\n            s+=n\\n            <span class=\\"hljs-keyword\\">if</span> s&gt;mid:\\n              count+=<span class=\\"hljs-number\\">1</span>\\n              s=n\\n          <span class=\\"hljs-keyword\\">if</span> count&lt;=m:\\n            hi=mid\\n          <span class=\\"hljs-keyword\\">else</span>:\\n            lo=mid+<span class=\\"hljs-number\\">1</span>\\n        <span class=\\"hljs-keyword\\">return</span> lo\\n          \\n</code></pre>\\n"],"querySlug":"split-array-largest-sum","created_at":"2019-02-25","timeArr":[2019,1,25,22,12,33,0],"hasThinking":false,"content":"<p>给定一个非负整数数组 <code>nums</code> 和一个整数 <code>m</code> ，你需要将这个数组分成 <code>m</code><em> </em>个非空的连续子数组。</p>\\n\\n<p>设计一个算法使得这 <code>m</code><em> </em>个子数组各自和的最大值最小。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [7,2,5,10,8], m = 2\\n<strong>输出：</strong>18\\n<strong>解释：</strong>\\n一共有四种方法将 nums 分割为 2 个子数组。 其中最好的方式是将其分为 [7,2,5] 和 [10,8] 。\\n因为此时这两个子数组各自的和的最大值为18，在所有情况中最小。</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [1,2,3,4,5], m = 2\\n<strong>输出：</strong>9\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [1,4,4], m = 3\\n<strong>输出：</strong>4\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= nums.length <= 1000</code></li>\\n\\t<li><code>0 <= nums[i] <= 10<sup>6</sup></code></li>\\n\\t<li><code>1 <= m <= min(50, nums.length)</code></li>\\n</ul>\\n","title":"410. 分割数组的最大值","relatedTags":["贪心","数组","二分查找","动态规划"],"difficult":"Hard","lang":["python"],"uniqueID":"410","slug":"410-Split-Array-Largest-Sum"}')}}]);