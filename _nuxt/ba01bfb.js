(window.webpackJsonp=window.webpackJsonp||[]).push([[365],{1163:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Solution</span><span class=\\"hljs-params\\">(object)</span>:</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">maxProfit</span><span class=\\"hljs-params\\">(self, prices)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type prices: List[int]\\n        :rtype: int\\n        \\"\\"\\"</span>\\n        <span class=\\"hljs-keyword\\">if</span> <span class=\\"hljs-keyword\\">not</span> prices:<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>\\n        N=len(prices)\\n        dp=[[<span class=\\"hljs-number\\">0</span>]*(N) <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(<span class=\\"hljs-number\\">3</span>)]\\n        <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(<span class=\\"hljs-number\\">1</span>,<span class=\\"hljs-number\\">3</span>):\\n          curMaxGap=float(<span class=\\"hljs-string\\">\'-inf\'</span>)\\n          <span class=\\"hljs-keyword\\">for</span> j <span class=\\"hljs-keyword\\">in</span> range(<span class=\\"hljs-number\\">1</span>,N):\\n            curMaxGap=max(curMaxGap,dp[i<span class=\\"hljs-number\\">-1</span>][j<span class=\\"hljs-number\\">-1</span>]-prices[j<span class=\\"hljs-number\\">-1</span>])\\n            dp[i][j]=max(dp[i][j<span class=\\"hljs-number\\">-1</span>],curMaxGap+prices[j])\\n        \\n        <span class=\\"hljs-keyword\\">return</span> dp[<span class=\\"hljs-number\\">-1</span>][<span class=\\"hljs-number\\">-1</span>]\\n</code></pre>\\n"],"querySlug":"best-time-to-buy-and-sell-stock-iii","created_at":"2019-02-28","timeArr":[2019,1,28,23,15,35,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>DP</p>\\n<p>方法一：空间复杂度<code>O(N)</code></p>\\n<p><code>dp[i][j]</code>表示在第<code>i</code>次交易和第<code>j</code>天能获得的最大收益。</p>\\n<p>状态转移方程：</p>\\n<p><code>dp[i][j]=Math.max(dp[i][j-1],min+p)</code></p>\\n<p><code>min=Math.max(min,dp[i-1][j-1]-p)</code></p>\\n<p>这里<code>min</code>代表购买股票所花费的最大值，<code>Math.max(min,dp[i-1][j-1]-p)</code>意思是，对于当天的股票价格，要么不购买，要么使用上一次的收益去购买，选最大值。</p>\\n<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">prices</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> maxProfit = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">prices</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> N=prices.length\\n  <span class=\\"hljs-keyword\\">let</span> dp=<span class=\\"hljs-built_in\\">Array</span>(<span class=\\"hljs-number\\">3</span>).fill().map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span>=&gt;</span><span class=\\"hljs-built_in\\">Array</span>(N+<span class=\\"hljs-number\\">1</span>).fill(<span class=\\"hljs-number\\">0</span>))\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">1</span>;i&lt;<span class=\\"hljs-number\\">3</span>;i++){\\n    <span class=\\"hljs-keyword\\">let</span> min=-<span class=\\"hljs-literal\\">Infinity</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">1</span>;j&lt;N+<span class=\\"hljs-number\\">1</span>;j++){\\n      <span class=\\"hljs-keyword\\">let</span> p=prices[j<span class=\\"hljs-number\\">-1</span>]\\n      dp[i][j]=<span class=\\"hljs-built_in\\">Math</span>.max(dp[i][j<span class=\\"hljs-number\\">-1</span>],min+p)\\n      min=<span class=\\"hljs-built_in\\">Math</span>.max(min,dp[i<span class=\\"hljs-number\\">-1</span>][j<span class=\\"hljs-number\\">-1</span>]-p)\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> dp[<span class=\\"hljs-number\\">2</span>][N]\\n};\\n</code></pre>\\n<p>方法二：空间复杂度<code>O(1)</code></p>\\n<p><code>buy1</code>代表第一次的购买收益，<code>sell1</code>代表第一次的卖出收益；</p>\\n<p><code>buy2</code>代表第二次的购买收益，<code>sell2</code>代表第二次的卖出收益。</p>\\n","content":"<p>给定一个数组，它的第<em> </em><code>i</code> 个元素是一支给定的股票在第 <code>i</code><em> </em>天的价格。</p>\\n\\n<p>设计一个算法来计算你所能获取的最大利润。你最多可以完成 <strong>两笔 </strong>交易。</p>\\n\\n<p><strong>注意：</strong>你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1:</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>prices = [3,3,5,0,0,3,1,4]\\n<strong>输出：</strong>6\\n<strong>解释：</strong>在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。\\n     随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>prices = [1,2,3,4,5]\\n<strong>输出：</strong>4\\n<strong>解释：</strong>在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。   \\n     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。   \\n     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>prices = [7,6,4,3,1] \\n<strong>输出：</strong>0 \\n<strong>解释：</strong>在这个情况下, 没有交易完成, 所以最大利润为 0。</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>prices = [1]\\n<strong>输出：</strong>0\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= prices.length <= 10<sup>5</sup></code></li>\\n\\t<li><code>0 <= prices[i] <= 10<sup>5</sup></code></li>\\n</ul>\\n","title":"123. 买卖股票的最佳时机 III","relatedTags":["数组","动态规划"],"difficult":"Hard","lang":["python"],"uniqueID":"123","slug":"123-Best-Time-to-Buy-and-Sell-Stock-III"}')}}]);