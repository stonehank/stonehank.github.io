(window.webpackJsonp=window.webpackJsonp||[]).push([[506],{1304:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">nums1</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">nums2</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> maxDotProduct = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">nums1, nums2</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> len1=nums1.length\\n  <span class=\\"hljs-keyword\\">let</span> len2=nums2.length\\n  <span class=\\"hljs-keyword\\">let</span> dp=<span class=\\"hljs-built_in\\">Array</span>(len1+<span class=\\"hljs-number\\">1</span>).fill().map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span>=&gt;</span><span class=\\"hljs-built_in\\">Array</span>(len2+<span class=\\"hljs-number\\">1</span>).fill(-<span class=\\"hljs-literal\\">Infinity</span>))\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">1</span>;i&lt;len1+<span class=\\"hljs-number\\">1</span>;i++){\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">1</span>;j&lt;len2+<span class=\\"hljs-number\\">1</span>;j++){\\n      dp[i][j]=<span class=\\"hljs-built_in\\">Math</span>.max(dp[i][j],dp[i<span class=\\"hljs-number\\">-1</span>][j])\\n      dp[i][j]=<span class=\\"hljs-built_in\\">Math</span>.max(dp[i][j],dp[i][j<span class=\\"hljs-number\\">-1</span>])\\n      dp[i][j]=<span class=\\"hljs-built_in\\">Math</span>.max(dp[i][j],dp[i<span class=\\"hljs-number\\">-1</span>][j<span class=\\"hljs-number\\">-1</span>])\\n      dp[i][j]=<span class=\\"hljs-built_in\\">Math</span>.max(dp[i][j],<span class=\\"hljs-built_in\\">Math</span>.max(dp[i<span class=\\"hljs-number\\">-1</span>][j<span class=\\"hljs-number\\">-1</span>],<span class=\\"hljs-number\\">0</span>)+nums1[i<span class=\\"hljs-number\\">-1</span>]*nums2[j<span class=\\"hljs-number\\">-1</span>])\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> dp[len1][len2]\\n  \\n};\\n</code></pre>\\n"],"querySlug":"max-dot-product-of-two-subsequences","created_at":"2020-05-24","timeArr":[2020,4,24,13,57,24,0],"hasThinking":false,"content":"<p>给你两个数组&nbsp;<code>nums1</code>&nbsp;和&nbsp;<code>nums2</code>&nbsp;。</p>\\n\\n<p>请你返回 <code>nums1</code> 和 <code>nums2</code> 中两个长度相同的 <strong>非空</strong> 子序列的最大点积。</p>\\n\\n<p>数组的非空子序列是通过删除原数组中某些元素（可能一个也不删除）后剩余数字组成的序列，但不能改变数字间相对顺序。比方说，<code>[2,3,5]</code>&nbsp;是&nbsp;<code>[1,2,3,4,5]</code>&nbsp;的一个子序列而&nbsp;<code>[1,5,3]</code>&nbsp;不是。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums1 = [2,1,-2,5], nums2 = [3,0,-6]\\n<strong>输出：</strong>18\\n<strong>解释：</strong>从 nums1 中得到子序列 [2,-2] ，从 nums2 中得到子序列 [3,-6] 。\\n它们的点积为 (2*3 + (-2)*(-6)) = 18 。</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums1 = [3,-2], nums2 = [2,-6,7]\\n<strong>输出：</strong>21\\n<strong>解释：</strong>从 nums1 中得到子序列 [3] ，从 nums2 中得到子序列 [7] 。\\n它们的点积为 (3*7) = 21 。</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums1 = [-1,-1], nums2 = [1,1]\\n<strong>输出：</strong>-1\\n<strong>解释：</strong>从 nums1 中得到子序列 [-1] ，从 nums2 中得到子序列 [1] 。\\n它们的点积为 -1 。</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= nums1.length, nums2.length &lt;= 500</code></li>\\n\\t<li><code>-1000 &lt;= nums1[i], nums2[i] &lt;= 100</code></li>\\n</ul>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>点积：</strong></p>\\n\\n<pre>\\n定义 <code><strong>a</strong>&nbsp;= [<em>a</em><sub>1</sub>,&nbsp;<em>a</em><sub>2</sub>,&hellip;,&nbsp;<em>a</em><sub><em>n</em></sub>]</code> 和<strong> <code>b</code></strong><code>&nbsp;= [<em>b</em><sub>1</sub>,&nbsp;<em>b</em><sub>2</sub>,&hellip;,&nbsp;<em>b</em><sub><em>n</em></sub>]</code> 的点积为：\\n\\n<img alt=\\"\\\\mathbf{a}\\\\cdot \\\\mathbf{b} = \\\\sum_{i=1}^n a_ib_i = a_1b_1 + a_2b_2 + \\\\cdots + a_nb_n \\" class=\\"tex\\" src=\\"http://upload.wikimedia.org/math/c/3/2/c329bf86e747d74f55ed2e17c36fd83f.png\\" />\\n\\n这里的 <strong>&Sigma;</strong> 指示总和符号。\\n</pre>\\n","title":"1458. 两个子序列的最大点积","relatedTags":["数组","动态规划"],"difficult":"Hard","lang":["javascript"],"uniqueID":"1458","slug":"1458-Max-Dot-Product-of-Two-Subsequences"}')}}]);