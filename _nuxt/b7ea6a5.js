(window.webpackJsonp=window.webpackJsonp||[]).push([[1168],{1966:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">points</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> largestTriangleArea = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">points</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> maxArea=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;points.length<span class=\\"hljs-number\\">-2</span>;i++){\\n    <span class=\\"hljs-keyword\\">let</span> [a,b]=points[i]\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=i+<span class=\\"hljs-number\\">1</span>;j&lt;points.length<span class=\\"hljs-number\\">-1</span>;j++){\\n      <span class=\\"hljs-keyword\\">let</span> [c,d]=points[j]\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> k=j+<span class=\\"hljs-number\\">1</span>;k&lt;points.length;k++){\\n        <span class=\\"hljs-keyword\\">let</span> [e,f]=points[k]\\n        <span class=\\"hljs-keyword\\">let</span> area=<span class=\\"hljs-built_in\\">Math</span>.abs((a-c)*(d-f)+(c-e)*(f-b)+(e-c)*(f-d))/<span class=\\"hljs-number\\">2</span>\\n        maxArea=<span class=\\"hljs-built_in\\">Math</span>.max(maxArea,area)\\n      }\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> maxArea\\n};\\n</code></pre>\\n"],"querySlug":"largest-triangle-area","created_at":"2019-04-02","timeArr":[2019,3,2,21,26,26,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>使用<code>shoelace formula</code>(鞋带公式)可以轻松的计算出简单多边形的面积。</p>\\n<pre class=\\"hljs\\"><code>x1 y1\\n  X\\nx2 y2\\n  X\\nx3 y3    \\n</code></pre>\\n<p>类似上面<code>(x,y)均为点的坐标</code>，每个点的坐标值都是交叉计算，公式为(不考虑顺序):</p>\\n<p><code>Area=Math.abs(x1*y2 + x2*y3 + x3*y1 - x2*y1 - x3*y2 - x1*y3)</code></p>\\n<p>至于公式推理，首先可以将多边形分割成三角形，然后对三角形做辅助线，再次分割成<code>3</code>个三角形，\\n这<code>3</code>个三角形可以通过坐标点进行计算面积。</p>\\n","content":"<p>给定包含多个点的集合，从其中取三个点组成三角形，返回能组成的最大三角形的面积。</p>\\n\\n<pre>\\n<strong>示例:</strong>\\n<strong>输入:</strong> points = [[0,0],[0,1],[1,0],[0,2],[2,0]]\\n<strong>输出:</strong> 2\\n<strong>解释:</strong> \\n这五个点如下图所示。组成的橙色三角形是最大的，面积为2。\\n</pre>\\n\\n<p><img alt=\\"\\" src=\\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/04/1027.png\\" style=\\"height:328px; width:400px\\" /></p>\\n\\n<p><strong>注意: </strong></p>\\n\\n<ul>\\n\\t<li><code>3 &lt;= points.length &lt;= 50</code>.</li>\\n\\t<li>不存在重复的点。</li>\\n\\t<li>&nbsp;<code>-50 &lt;= points[i][j] &lt;= 50</code>.</li>\\n\\t<li>结果误差值在&nbsp;<code>10^-6</code>&nbsp;以内都认为是正确答案。</li>\\n</ul>\\n","title":"812. 最大三角形面积","relatedTags":["几何","数组","数学"],"difficult":"Easy","lang":["javascript"],"uniqueID":"812","slug":"812-Largest-Triangle-Area"}')}}]);