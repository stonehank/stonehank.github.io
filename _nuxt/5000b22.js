(window.webpackJsonp=window.webpackJsonp||[]).push([[289],{1087:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">books</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">shelf_width</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> minHeightShelves = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">books, shelf_width</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> n=books.length\\n  <span class=\\"hljs-keyword\\">let</span> dp=<span class=\\"hljs-built_in\\">Array</span>(n+<span class=\\"hljs-number\\">1</span>).fill(<span class=\\"hljs-literal\\">Infinity</span>)\\n  dp[<span class=\\"hljs-number\\">0</span>]=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span> (<span class=\\"hljs-keyword\\">let</span> i = <span class=\\"hljs-number\\">1</span>; i &lt;= n; ++i) {\\n      <span class=\\"hljs-keyword\\">let</span> sum = <span class=\\"hljs-number\\">0</span>;\\n      <span class=\\"hljs-keyword\\">let</span> maxh = books[i - <span class=\\"hljs-number\\">1</span>][<span class=\\"hljs-number\\">1</span>];\\n      <span class=\\"hljs-keyword\\">for</span> (<span class=\\"hljs-keyword\\">let</span> j = i - <span class=\\"hljs-number\\">1</span>; j &gt;= <span class=\\"hljs-number\\">0</span>; --j) {\\n          maxh = <span class=\\"hljs-built_in\\">Math</span>.max(maxh, books[j][<span class=\\"hljs-number\\">1</span>]);\\n          sum += books[j][<span class=\\"hljs-number\\">0</span>];\\n          <span class=\\"hljs-keyword\\">if</span> (sum &gt; shelf_width) <span class=\\"hljs-keyword\\">break</span>;\\n          dp[i] = <span class=\\"hljs-built_in\\">Math</span>.min(dp[i], dp[j] + maxh);\\n      }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> dp[n];\\n};\\n</code></pre>\\n"],"querySlug":"filling-bookcase-shelves","created_at":"2019-06-30","timeArr":[2019,5,30,12,27,50,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p><code>动态规划</code>，<code>dp[i]</code>表示第<code>i</code>本书能达到的最小高度。</p>\\n<p>初始设置<code>dp[0]=0</code>。</p>\\n<p>当前书可以放独立的一行，</p>\\n<p>如果满足<code>W-books[i].width&gt;0</code>，</p>\\n<p>公式为<code>dp[i]=books[i].height+dp[i-1]</code>；</p>\\n<p>当前书可以和上一本放一起，</p>\\n<p>如果满足宽度<code>W-books[i].width-books[i-1].width&gt;0</code>，</p>\\n<p>公式为<code>dp[i]=max(books[i].height,books[i-1].height)+dp[i-2]</code>；</p>\\n<p>...</p>\\n<p>当前数可以和前<code>j</code>本放一起，</p>\\n<p>如果满足宽度<code>W-books[i].width-books[i-1].width-...-books[j].width&gt;0</code>，</p>\\n<p>公式为<code>dp[i]=max(books[i].height,books[i-1].height,...,books[j].height)+dp[j]</code></p>\\n<p>定义一个<code>maxH</code>记录从<code>i</code>到<code>j</code>的最大高度，即<code>max(books[i].height,books[i-1].height,...,books[j].height)</code></p>\\n<p>定义一个<code>sum</code>记录从<code>i</code>到<code>j</code>的宽度和，即<code>books[i].width + books[i-1].width + ... + books[j].width</code></p>\\n","content":"<p>附近的家居城促销，你买回了一直心仪的可调节书架，打算把自己的书都整理到新的书架上。</p>\\n\\n<p>你把要摆放的书 <code>books</code>&nbsp;都整理好，叠成一摞：从上往下，第 <code>i</code>&nbsp;本书的厚度为 <code>books[i][0]</code>，高度为 <code>books[i][1]</code>。</p>\\n\\n<p><strong>按顺序</strong>&nbsp;将这些书摆放到总宽度为&nbsp;<code>shelf_width</code> 的书架上。</p>\\n\\n<p>先选几本书放在书架上（它们的厚度之和小于等于书架的宽度 <code>shelf_width</code>），然后再建一层书架。重复这个过程，直到把所有的书都放在书架上。</p>\\n\\n<p>需要注意的是，在上述过程的每个步骤中，<strong>摆放书的顺序与你整理好的顺序相同</strong>。 例如，如果这里有 5 本书，那么可能的一种摆放情况是：第一和第二本书放在第一层书架上，第三本书放在第二层书架上，第四和第五本书放在最后一层书架上。</p>\\n\\n<p>每一层所摆放的书的最大高度就是这一层书架的层高，书架整体的高度为各层高之和。</p>\\n\\n<p>以这种方式布置书架，返回书架整体可能的最小高度。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例：</strong></p>\\n\\n<p><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/06/28/shelves.png\\" style=\\"width: 150px;\\"></p>\\n\\n<pre><strong>输入：</strong>books = [[1,1],[2,3],[2,3],[1,1],[1,1],[1,1],[1,2]], shelf_width = 4\\n<strong>输出：</strong>6\\n<strong>解释：</strong>\\n3 层书架的高度和为 1 + 3 + 2 = 6 。\\n第 2 本书不必放在第一层书架上。\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= books.length &lt;= 1000</code></li>\\n\\t<li><code>1 &lt;= books[i][0] &lt;= shelf_width &lt;= 1000</code></li>\\n\\t<li><code>1 &lt;= books[i][1] &lt;= 1000</code></li>\\n</ul>\\n","title":"1105. 填充书架","relatedTags":["数组","动态规划"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1105","slug":"1105-Filling-Bookcase-Shelves"}')}}]);