(window.webpackJsonp=window.webpackJsonp||[]).push([[391],{1189:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{TreeNode}</span> <span class=\\"hljs-variable\\">root</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> sumNumbers = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">root</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">getNumber</span>(<span class=\\"hljs-params\\">root,num</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(!root)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">let</span> val=root.val\\n    <span class=\\"hljs-keyword\\">if</span>(root.left)getNumber(root.left,num*<span class=\\"hljs-number\\">10</span>+val)\\n    <span class=\\"hljs-keyword\\">if</span>(root.right)getNumber(root.right,num*<span class=\\"hljs-number\\">10</span>+val)\\n    <span class=\\"hljs-keyword\\">if</span>(!root.left &amp;&amp; !root.right)res+=num*<span class=\\"hljs-number\\">10</span>+val\\n  }\\n  getNumber(root,<span class=\\"hljs-number\\">0</span>)\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"sum-root-to-leaf-numbers","created_at":"2019-03-18","timeArr":[2019,2,18,20,12,32,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>递归，每次递归<code>num=num*10+val</code>，将当前值和上一次的值合并为数字；</p>\\n<p>直到叶子节点，将值添加到<code>res</code>。</p>\\n","content":"给你一个二叉树的根节点 <code>root</code> ，树中每个节点都存放有一个 <code>0</code> 到 <code>9</code> 之间的数字。\\n<div class=\\"original__bRMd\\">\\n<div>\\n<p>每条从根节点到叶节点的路径都代表一个数字：</p>\\n\\n<ul>\\n\\t<li>例如，从根节点到叶节点的路径 <code>1 -> 2 -> 3</code> 表示数字 <code>123</code> 。</li>\\n</ul>\\n\\n<p>计算从根节点到叶节点生成的 <strong>所有数字之和</strong> 。</p>\\n\\n<p><strong>叶节点</strong> 是指没有子节点的节点。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2021/02/19/num1tree.jpg\\" style=\\"width: 212px; height: 182px;\\" />\\n<pre>\\n<strong>输入：</strong>root = [1,2,3]\\n<strong>输出：</strong>25\\n<strong>解释：</strong>\\n从根到叶子节点路径 <code>1->2</code> 代表数字 <code>12</code>\\n从根到叶子节点路径 <code>1->3</code> 代表数字 <code>13</code>\\n因此，数字总和 = 12 + 13 = <code>25</code></pre>\\n\\n<p><strong>示例 2：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2021/02/19/num2tree.jpg\\" style=\\"width: 292px; height: 302px;\\" />\\n<pre>\\n<strong>输入：</strong>root = [4,9,0,5,1]\\n<strong>输出：</strong>1026\\n<strong>解释：</strong>\\n从根到叶子节点路径 <code>4->9->5</code> 代表数字 495\\n从根到叶子节点路径 <code>4->9->1</code> 代表数字 491\\n从根到叶子节点路径 <code>4->0</code> 代表数字 40\\n因此，数字总和 = 495 + 491 + 40 = <code>1026</code>\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li>树中节点的数目在范围 <code>[1, 1000]</code> 内</li>\\n\\t<li><code>0 <= Node.val <= 9</code></li>\\n\\t<li>树的深度不超过 <code>10</code></li>\\n</ul>\\n</div>\\n</div>\\n","title":"129. 求根节点到叶节点数字之和","relatedTags":["树","深度优先搜索","二叉树"],"difficult":"Middle","lang":["javascript"],"uniqueID":"129","slug":"129-Sum-Root-to-Leaf-Numbers"}')}}]);