(window.webpackJsonp=window.webpackJsonp||[]).push([[896],{1694:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string[]}</span> <span class=\\"hljs-variable\\">strs</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{string[][]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> groupAnagrams = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">strs</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> collect={},result=[]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;strs.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> sorted=strs[i].split(<span class=\\"hljs-string\\">\'\'</span>).sort().join(<span class=\\"hljs-string\\">\'\'</span>)\\n    <span class=\\"hljs-keyword\\">if</span>(!collect[sorted])collect[sorted]=[strs[i]]\\n    <span class=\\"hljs-keyword\\">else</span> collect[sorted].push(strs[i])\\n  }\\n\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> k <span class=\\"hljs-keyword\\">in</span> collect){\\n    result.push(collect[k])\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> result\\n};\\n</code></pre>\\n"],"querySlug":"group-anagrams","created_at":"2019-03-22","timeArr":[2019,2,22,12,44,58,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>查看2个异位词最直接的办法就是排序，这里对每一个单词进行排序，再用<code>hash</code>保存，发现相同的说明是异位词，\\n时间复杂度是<code>O(NKlogK)</code>，其中<code>N</code>是单词列表长度，<code>K</code>是每个单词的长度。</p>\\n<p>另一种办法对每一个单词构建一个<code>26</code>位数组，里面存放每一个字母在当前单词中出现的次数，</p>\\n<p>例如：<code>aabcab</code>，对应的数组就是<code>[3,2,1,0,0,0,...]</code></p>\\n<p>序列化该数组后，保存到<code>hash</code>，发现相同的说明就是异位词。</p>\\n<p>第二种方法时间复杂度是<code>O(NK)</code>。</p>\\n","content":"<p>给你一个字符串数组，请你将 <strong>字母异位词</strong> 组合在一起。可以按任意顺序返回结果列表。</p>\\n\\n<p><strong>字母异位词</strong> 是由重新排列源单词的字母得到的一个新单词，所有源单词中的字母都恰好只用一次。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1:</strong></p>\\n\\n<pre>\\n<strong>输入:</strong> strs = <code>[\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"]</code>\\n<strong>输出: </strong>[[\\"bat\\"],[\\"nat\\",\\"tan\\"],[\\"ate\\",\\"eat\\",\\"tea\\"]]</pre>\\n\\n<p><strong>示例 2:</strong></p>\\n\\n<pre>\\n<strong>输入:</strong> strs = <code>[\\"\\"]</code>\\n<strong>输出: </strong>[[\\"\\"]]\\n</pre>\\n\\n<p><strong>示例 3:</strong></p>\\n\\n<pre>\\n<strong>输入:</strong> strs = <code>[\\"a\\"]</code>\\n<strong>输出: </strong>[[\\"a\\"]]</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= strs.length &lt;= 10<sup>4</sup></code></li>\\n\\t<li><code>0 &lt;= strs[i].length &lt;= 100</code></li>\\n\\t<li><code>strs[i]</code>&nbsp;仅包含小写字母</li>\\n</ul>\\n","title":"49. 字母异位词分组","relatedTags":["哈希表","字符串","排序"],"difficult":"Middle","lang":["javascript"],"uniqueID":"49","slug":"49-Group-Anagrams"}')}}]);