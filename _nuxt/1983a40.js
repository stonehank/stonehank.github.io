(window.webpackJsonp=window.webpackJsonp||[]).push([[228],{1026:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{TreeNode}</span> <span class=\\"hljs-variable\\">root</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[][]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> levelOrder = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">root</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(!root)<span class=\\"hljs-keyword\\">return</span> []\\n  <span class=\\"hljs-keyword\\">let</span> res=[]\\n  <span class=\\"hljs-keyword\\">let</span> aux=[root]\\n  <span class=\\"hljs-keyword\\">while</span>(aux.length&gt;<span class=\\"hljs-number\\">0</span>){\\n    <span class=\\"hljs-keyword\\">let</span> len=aux.length\\n    <span class=\\"hljs-keyword\\">let</span> vals=[]\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;len;i++){\\n      <span class=\\"hljs-keyword\\">let</span> node=aux.shift()\\n      vals.push(node.val)\\n      <span class=\\"hljs-keyword\\">if</span>(node.left)aux.push(node.left)\\n      <span class=\\"hljs-keyword\\">if</span>(node.right)aux.push(node.right)\\n    }\\n    res.push(vals)\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"binary-tree-level-order-traversal","created_at":"2019-03-18","timeArr":[2019,2,18,12,57,46,0],"hasThinking":true,"thinking":"<hr>\\n<p>迭代(<code>bfs</code>)：</p>\\n<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{TreeNode}</span> <span class=\\"hljs-variable\\">root</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[][]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> levelOrder = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">root</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(!root)<span class=\\"hljs-keyword\\">return</span> []\\n  <span class=\\"hljs-keyword\\">let</span> res=[]\\n  <span class=\\"hljs-keyword\\">let</span> aux=[root]\\n  <span class=\\"hljs-keyword\\">while</span>(aux.length&gt;<span class=\\"hljs-number\\">0</span>){\\n    <span class=\\"hljs-keyword\\">let</span> len=aux.length\\n    <span class=\\"hljs-keyword\\">let</span> vals=[]\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;len;i++){\\n      <span class=\\"hljs-keyword\\">let</span> node=aux.shift()\\n      vals.push(node.val)\\n      <span class=\\"hljs-keyword\\">if</span>(node.left)aux.push(node.left)\\n      <span class=\\"hljs-keyword\\">if</span>(node.right)aux.push(node.right)\\n    }\\n    res.push(vals)\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n<p>递归(<code>dfs</code>)：</p>\\n","content":"<p>给你一个二叉树，请你返回其按 <strong>层序遍历</strong> 得到的节点值。 （即逐层地，从左到右访问所有节点）。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例：</strong><br />\\n二叉树：<code>[3,9,20,null,null,15,7]</code>,</p>\\n\\n<pre>\\n    3\\n   / \\\\\\n  9  20\\n    /  \\\\\\n   15   7\\n</pre>\\n\\n<p>返回其层序遍历结果：</p>\\n\\n<pre>\\n[\\n  [3],\\n  [9,20],\\n  [15,7]\\n]\\n</pre>\\n","title":"102. 二叉树的层序遍历","relatedTags":["树","广度优先搜索","二叉树"],"difficult":"Middle","lang":["javascript"],"uniqueID":"102","slug":"102-Binary-Tree-Level-Order-Traversal"}')}}]);