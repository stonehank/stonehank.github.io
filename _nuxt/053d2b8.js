(window.webpackJsonp=window.webpackJsonp||[]).push([[255],{1053:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">S</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{string}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> longestDupSubstring = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">S</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> R=<span class=\\"hljs-number\\">26</span>,MOD=<span class=\\"hljs-number\\">1e9</span>+<span class=\\"hljs-number\\">7</span>\\n  <span class=\\"hljs-keyword\\">let</span> lo=<span class=\\"hljs-number\\">0</span>,hi=S.length<span class=\\"hljs-number\\">-1</span>,res=<span class=\\"hljs-string\\">\'\'</span>\\n  <span class=\\"hljs-keyword\\">while</span>(lo&lt;hi){\\n    <span class=\\"hljs-keyword\\">let</span> len=<span class=\\"hljs-built_in\\">Math</span>.ceil((lo+hi)/<span class=\\"hljs-number\\">2</span>)\\n    <span class=\\"hljs-keyword\\">let</span> sub=rabinKarp(S,len)\\n    <span class=\\"hljs-keyword\\">if</span>(sub!==<span class=\\"hljs-string\\">\'\'</span>){\\n      lo=len\\n      res=sub\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      hi=len<span class=\\"hljs-number\\">-1</span>\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n  \\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">rabinKarp</span>(<span class=\\"hljs-params\\">str,len</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> RM=<span class=\\"hljs-number\\">1</span>\\n    <span class=\\"hljs-comment\\">// 等价于RM=Math.pow(R,M-1) % MOD</span>\\n    <span class=\\"hljs-comment\\">// 由于JS精度问题拆解计算</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">1</span>;i&lt;len;i++){\\n      RM=(RM*R) % MOD\\n    }\\n    <span class=\\"hljs-keyword\\">let</span> map=<span class=\\"hljs-keyword\\">new</span> <span class=\\"hljs-built_in\\">Map</span>()\\n    <span class=\\"hljs-keyword\\">let</span> num=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-comment\\">// 计算前len个字符串的散列值</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;len;i++){\\n      <span class=\\"hljs-keyword\\">let</span> code=str.charCodeAt(i)<span class=\\"hljs-number\\">-97</span>\\n      num=(num*R + code) % MOD\\n    }\\n    map.set(num,<span class=\\"hljs-number\\">0</span>)\\n    <span class=\\"hljs-comment\\">// 后续计算散列值</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;str.length-len;i++){\\n      <span class=\\"hljs-keyword\\">let</span> preCode=str.charCodeAt(i)<span class=\\"hljs-number\\">-97</span>,\\n          curCode=str.charCodeAt(i+len)<span class=\\"hljs-number\\">-97</span>\\n      num=(num+MOD-(preCode*RM % MOD)) % MOD\\n      num=(num*R + curCode) % MOD\\n      <span class=\\"hljs-keyword\\">if</span>(map.has(num)){\\n        <span class=\\"hljs-keyword\\">let</span> sub=str.substring(i+<span class=\\"hljs-number\\">1</span>,i+<span class=\\"hljs-number\\">1</span>+len)\\n        <span class=\\"hljs-keyword\\">let</span> preId=map.get(num),\\n            preSub=str.substring(preId,preId+len)\\n        <span class=\\"hljs-keyword\\">if</span>(sub===preSub)<span class=\\"hljs-keyword\\">return</span> sub\\n      }\\n      map.set(num,i+<span class=\\"hljs-number\\">1</span>)\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-string\\">\'\'</span>\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"longest-duplicate-substring","created_at":"2019-05-12","timeArr":[2019,4,12,19,3,51,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p><code>二分+rabin-Karp</code></p>\\n<p>假设答案是长度为<code>55</code>的子串，那么长度为<code>54</code>的子串就一定存在并且长度为<code>56</code>的子串一定不存在，因此可以使用二分法，逐步缩小范围，直到找到答案。</p>\\n<p>对于长度<code>len</code>，使用<code>rabin-Karp</code>去计算是否符合要求。</p>\\n<p>具体<code>rabin-Karp</code>算法，就是字符串的检索方法，</p>\\n<p>例如：\'abcbc\'，现在需要找到<code>len</code>为<code>2</code>是否存在重复子串，</p>\\n<ol>\\n<li>前<code>2</code>个子串为<code>ab</code></li>\\n<li>从第<code>3</code>个开始，增加<code>c</code>，减去<code>a</code>，子串为<code>bc</code></li>\\n<li>增加<code>d</code>减去<code>b</code>，子串为<code>cb</code></li>\\n<li>增加<code>c</code>减去<code>c</code>，子串为<code>bc</code>，存在重复，返回<code>true</code>。</li>\\n</ol>\\n<p>原理就是如此，不过它使用了散列值的数学计算，也就不需要将整个子串串保存进<code>hash</code>(否则遇到很长的子串效率会极低)，对于一个子串，只需要保存一个数字。</p>\\n","content":"<p>给出一个字符串&nbsp;<code>S</code>，考虑其所有<strong>重复子串</strong>（<code>S</code> 的连续子串，出现两次或多次，可能会有重叠）。</p>\\n\\n<p>返回<strong>任何</strong>具有最长可能长度的重复子串。（如果 <code>S</code>&nbsp;不含重复子串，那么答案为&nbsp;<code>&quot;&quot;</code>。）</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>&quot;banana&quot;\\n<strong>输出：</strong>&quot;ana&quot;\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>&quot;abcd&quot;\\n<strong>输出：</strong>&quot;&quot;\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ol>\\n\\t<li><code>2 &lt;= S.length &lt;= 10^5</code></li>\\n\\t<li><code>S</code> 由小写英文字母组成。</li>\\n</ol>\\n","title":"1044. 最长重复子串","relatedTags":["字符串","二分查找","后缀数组","滑动窗口","哈希函数","滚动哈希"],"difficult":"Hard","lang":["javascript"],"uniqueID":"1044","slug":"1044-Longest-Duplicate-Substring"}')}}]);