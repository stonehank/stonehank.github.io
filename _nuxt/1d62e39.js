(window.webpackJsonp=window.webpackJsonp||[]).push([[1140],{1938:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">n</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">flights</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">src</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">dst</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">K</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> findCheapestPrice = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">n, flights, src, dst, K</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> graph=[]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;n;i++)graph[i]=[]\\n  \\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;flights.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> [v,w,p]=flights[i]\\n    graph[v].push([w,p])\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> prices=<span class=\\"hljs-built_in\\">Array</span>(n).fill(<span class=\\"hljs-literal\\">Infinity</span>)\\n  <span class=\\"hljs-keyword\\">let</span> temp=<span class=\\"hljs-built_in\\">Array</span>(n).fill(<span class=\\"hljs-literal\\">Infinity</span>)\\n  temp[src]=<span class=\\"hljs-number\\">0</span>\\n  prices[src]=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">let</span> arr=[src]\\n  <span class=\\"hljs-keyword\\">while</span>(arr.length&gt;<span class=\\"hljs-number\\">0</span> &amp;&amp; K&gt;=<span class=\\"hljs-number\\">0</span>){\\n    <span class=\\"hljs-keyword\\">let</span> len=arr.length\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;len;i++){\\n      <span class=\\"hljs-keyword\\">let</span> <span class=\\"hljs-keyword\\">from</span>=arr.shift()\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;graph[<span class=\\"hljs-keyword\\">from</span>].length;j++){\\n        <span class=\\"hljs-keyword\\">let</span> [to,price]=graph[<span class=\\"hljs-keyword\\">from</span>][j]\\n        temp[to]=<span class=\\"hljs-built_in\\">Math</span>.min(temp[to],prices[<span class=\\"hljs-keyword\\">from</span>]+price)\\n        <span class=\\"hljs-keyword\\">if</span>(arr.includes(to))<span class=\\"hljs-keyword\\">continue</span>\\n        arr.push(to)\\n      }\\n    }\\n    prices=temp.slice()\\n    K--\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> prices[dst]===<span class=\\"hljs-literal\\">Infinity</span>?<span class=\\"hljs-number\\">-1</span>:prices[dst]\\n};\\n</code></pre>\\n"],"querySlug":"cheapest-flights-within-k-stops","created_at":"2019-03-07","timeArr":[2019,2,7,23,59,2,0],"hasThinking":false,"content":"<p>有 <code>n</code> 个城市通过一些航班连接。给你一个数组&nbsp;<code>flights</code> ，其中&nbsp;<code>flights[i] = [from<sub>i</sub>, to<sub>i</sub>, price<sub>i</sub>]</code> ，表示该航班都从城市 <code>from<sub>i</sub></code> 开始，以价格 <code>price<sub>i</sub></code> 抵达 <code>to<sub>i</sub></code>。</p>\\n\\n<p>现在给定所有的城市和航班，以及出发城市 <code>src</code> 和目的地 <code>dst</code>，你的任务是找到出一条最多经过 <code>k</code>&nbsp;站中转的路线，使得从 <code>src</code> 到 <code>dst</code> 的 <strong>价格最便宜</strong> ，并返回该价格。 如果不存在这样的路线，则输出 <code>-1</code>。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入:</strong> \\nn = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]\\nsrc = 0, dst = 2, k = 1\\n<strong>输出:</strong> 200\\n<strong>解释:</strong> \\n城市航班图如下\\n<img alt=\\"\\" src=\\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/02/16/995.png\\" style=\\"height: 180px; width: 246px;\\" />\\n\\n从城市 0 到城市 2 在 1 站中转以内的最便宜价格是 200，如图中红色所示。</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入:</strong> \\nn = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]\\nsrc = 0, dst = 2, k = 0\\n<strong>输出:</strong> 500\\n<strong>解释:</strong> \\n城市航班图如下\\n<img alt=\\"\\" src=\\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/02/16/995.png\\" style=\\"height: 180px; width: 246px;\\" />\\n\\n从城市 0 到城市 2 在 0 站中转以内的最便宜价格是 500，如图中蓝色所示。</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= n &lt;= 100</code></li>\\n\\t<li><code>0 &lt;= flights.length &lt;= (n * (n - 1) / 2)</code></li>\\n\\t<li><code>flights[i].length == 3</code></li>\\n\\t<li><code>0 &lt;= from<sub>i</sub>, to<sub>i</sub> &lt; n</code></li>\\n\\t<li><code>from<sub>i</sub> != to<sub>i</sub></code></li>\\n\\t<li><code>1 &lt;= price<sub>i</sub> &lt;= 10<sup>4</sup></code></li>\\n\\t<li>航班没有重复，且不存在自环</li>\\n\\t<li><code>0 &lt;= src, dst, k &lt; n</code></li>\\n\\t<li><code>src != dst</code></li>\\n</ul>\\n","title":"787. K 站中转内最便宜的航班","relatedTags":["深度优先搜索","广度优先搜索","图","动态规划","最短路","堆（优先队列）"],"difficult":"Middle","lang":["javascript"],"uniqueID":"787","slug":"787-Cheapest-Flights-Within-K-Stops"}')}}]);