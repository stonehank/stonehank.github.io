(window.webpackJsonp=window.webpackJsonp||[]).push([[249],{1047:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">A</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> minScoreTriangulation = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">A</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> dp=<span class=\\"hljs-built_in\\">Array</span>(<span class=\\"hljs-number\\">51</span>).fill().map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span>=&gt;</span><span class=\\"hljs-built_in\\">Array</span>(<span class=\\"hljs-number\\">51</span>).fill(<span class=\\"hljs-literal\\">null</span>))\\n  <span class=\\"hljs-keyword\\">return</span> dfs(<span class=\\"hljs-number\\">0</span>,A.length<span class=\\"hljs-number\\">-1</span>)\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">dfs</span>(<span class=\\"hljs-params\\">l,r</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(r-l===<span class=\\"hljs-number\\">1</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">if</span>(dp[l][r]!=<span class=\\"hljs-literal\\">null</span>)<span class=\\"hljs-keyword\\">return</span> dp[l][r]\\n    <span class=\\"hljs-keyword\\">let</span> area=<span class=\\"hljs-literal\\">Infinity</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> k=l+<span class=\\"hljs-number\\">1</span>;k&lt;r;k++){\\n      area=<span class=\\"hljs-built_in\\">Math</span>.min(area,dfs(l,k)+dfs(k,r)+A[l]*A[k]*A[r])\\n    }\\n    dp[l][r]=area\\n    <span class=\\"hljs-keyword\\">return</span> area\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"minimum-score-triangulation-of-polygon","created_at":"2019-05-05","timeArr":[2019,4,5,12,50,11,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>关键是对多边形的正确划分，自己做的时候没有划分好，导致一直<code>TLE</code>；</p>\\n<p>例如：多边形<code>[1,2,3,4,5,6]</code>，首先可以划分为<code>[1,2,3]</code>和<code>[3,4,5,6,1]</code>，这样另一个多边形<code>[3,4,5,6,1]</code>是连续的；</p>\\n<p>接着，<code>[3,4,5,6,1]</code>划分为<code>[3,4,5]</code>和<code>[5,6,1,3]</code>，这时<code>[5,6,1,3]</code>就是一个索引<strong>不连续</strong>的多边形，因为中间还有一个索引<code>2</code>被跳过了，\\n这就导致状态很难被保存；</p>\\n<p>正确对<code>[1,2,3,4,5,6]</code>的划分应该是</p>\\n<ul>\\n<li><code>[1~2]</code>和<code>[2~6]</code>和<code>[1,2,6]</code></li>\\n<li><code>[1~3]</code>和<code>[3~6]</code>和<code>[1,3,6]</code></li>\\n<li><code>[1~4]</code>和<code>[4~6]</code>和<code>[1,4,6]</code></li>\\n</ul>\\n<p>如上划分，通过将头尾作为一个三角形，就可以保证多边形的索引始终是连续的，状态保存可以只保存连续索引区间的头和尾，至于<code>3</code>个数的区间，直接计算乘积，并不需要连续限制。</p>\\n","content":"<p>给定&nbsp;<code>N</code>，想象一个凸&nbsp;<code>N</code>&nbsp;边多边形，其顶点按顺时针顺序依次标记为&nbsp;<code>A[0], A[i], ..., A[N-1]</code>。</p>\\n\\n<p>假设您将多边形剖分为 <code>N-2</code> 个三角形。对于每个三角形，该三角形的值是顶点标记的<strong>乘积</strong>，三角剖分的分数是进行三角剖分后所有 <code>N-2</code> 个三角形的值之和。</p>\\n\\n<p>返回多边形进行三角剖分后可以得到的最低分。<br>\\n&nbsp;</p>\\n\\n<ol>\\n</ol>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>[1,2,3]\\n<strong>输出：</strong>6\\n<strong>解释：</strong>多边形已经三角化，唯一三角形的分数为 6。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<p><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/05/03/minimum-score-triangulation-of-polygon-1.png\\" style=\\"height: 150px; width: 253px;\\"></p>\\n\\n<pre><strong>输入：</strong>[3,7,4,5]\\n<strong>输出：</strong>144\\n<strong>解释：</strong>有两种三角剖分，可能得分分别为：3*7*5 + 4*5*7 = 245，或 3*4*5 + 3*4*7 = 144。最低分数为 144。\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>[1,3,1,4,1,5]\\n<strong>输出：</strong>13\\n<strong>解释：</strong>最低分数三角剖分的得分情况为 1*1*3 + 1*1*4 + 1*1*5 + 1*1*1 = 13。\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ol>\\n\\t<li><code>3 &lt;= A.length &lt;= 50</code></li>\\n\\t<li><code>1 &lt;= A[i] &lt;= 100</code></li>\\n</ol>\\n","title":"1039. 多边形三角剖分的最低得分","relatedTags":["数组","动态规划"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1039","slug":"1039-Minimum-Score-Triangulation-of-Polygon"}')}}]);