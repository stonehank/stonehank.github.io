(window.webpackJsonp=window.webpackJsonp||[]).push([[333],{1131:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">capacity</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> DinnerPlates = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">capacity</span>) </span>{\\n  <span class=\\"hljs-keyword\\">this</span>.stackArr=[]\\n  <span class=\\"hljs-keyword\\">this</span>.capacity=capacity\\n  <span class=\\"hljs-keyword\\">this</span>.nextInsertPos=<span class=\\"hljs-number\\">0</span>\\n};\\n\\n<span class=\\"hljs-comment\\">/** \\n * @param {number} val\\n * @return {void}\\n */</span>\\nDinnerPlates.prototype.push = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">val</span>) </span>{\\n\\n  <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-keyword\\">this</span>.stackArr[<span class=\\"hljs-keyword\\">this</span>.nextInsertPos]==<span class=\\"hljs-literal\\">null</span>){\\n    <span class=\\"hljs-keyword\\">this</span>.stackArr[<span class=\\"hljs-keyword\\">this</span>.nextInsertPos]=[]\\n  }\\n  <span class=\\"hljs-keyword\\">this</span>.stackArr[<span class=\\"hljs-keyword\\">this</span>.nextInsertPos].push(val)\\n  <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-keyword\\">this</span>.stackArr[<span class=\\"hljs-keyword\\">this</span>.nextInsertPos].length===<span class=\\"hljs-keyword\\">this</span>.capacity){\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-keyword\\">this</span>.nextInsertPos+<span class=\\"hljs-number\\">1</span>;i&lt;<span class=\\"hljs-literal\\">Infinity</span>;i++){\\n      <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-keyword\\">this</span>.stackArr[i]==<span class=\\"hljs-literal\\">null</span> || <span class=\\"hljs-keyword\\">this</span>.stackArr[i].length&lt;<span class=\\"hljs-keyword\\">this</span>.capacity){\\n        <span class=\\"hljs-keyword\\">this</span>.nextInsertPos=i\\n        <span class=\\"hljs-keyword\\">break</span>\\n      }\\n    }\\n  }\\n\\n\\n};\\n\\n<span class=\\"hljs-comment\\">/**\\n * @return {number}\\n */</span>\\nDinnerPlates.prototype.pop = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{\\n    <span class=\\"hljs-comment\\">// console.log(this.stackArr)</span>\\n  <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-number\\">-1</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-keyword\\">this</span>.stackArr.length<span class=\\"hljs-number\\">-1</span>;i&gt;=<span class=\\"hljs-number\\">0</span>;i--){\\n    res=<span class=\\"hljs-keyword\\">this</span>.stackArr[i].pop()\\n    <span class=\\"hljs-keyword\\">this</span>.nextInsertPos=<span class=\\"hljs-built_in\\">Math</span>.min(<span class=\\"hljs-keyword\\">this</span>.nextInsertPos,i)\\n    <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-keyword\\">this</span>.stackArr[i].length===<span class=\\"hljs-number\\">0</span>){\\n      <span class=\\"hljs-keyword\\">this</span>.stackArr.pop()\\n    }\\n    <span class=\\"hljs-keyword\\">break</span>\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n\\n<span class=\\"hljs-comment\\">/** \\n * @param {number} index\\n * @return {number}\\n */</span>\\nDinnerPlates.prototype.popAtStack = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">index</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-number\\">-1</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-keyword\\">this</span>.stackArr[index].length<span class=\\"hljs-number\\">-1</span>;i&gt;=<span class=\\"hljs-number\\">0</span>;i--){\\n    res=<span class=\\"hljs-keyword\\">this</span>.stackArr[index].pop()\\n    <span class=\\"hljs-keyword\\">this</span>.nextInsertPos=index\\n    <span class=\\"hljs-keyword\\">break</span>\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n\\n<span class=\\"hljs-comment\\">/** \\n * Your DinnerPlates object will be instantiated and called as such:\\n * var obj = new DinnerPlates(capacity)\\n * obj.push(val)\\n * var param_2 = obj.pop()\\n * var param_3 = obj.popAtStack(index)\\n */</span>\\n</code></pre>\\n"],"querySlug":"dinner-plate-stacks","created_at":"2019-08-25","timeArr":[2019,7,25,11,55,9,0],"hasThinking":false,"content":"<p>我们把无限数量 &infin; 的栈排成一行，按从左到右的次序从 0 开始编号。每个栈的的最大容量&nbsp;<code>capacity</code> 都相同。</p>\\n\\n<p>实现一个叫「餐盘」的类&nbsp;<code>DinnerPlates</code>：</p>\\n\\n<ul>\\n\\t<li><code>DinnerPlates(int capacity)</code>&nbsp;- 给出栈的最大容量&nbsp;<code>capacity</code>。</li>\\n\\t<li><code>void push(int val)</code>&nbsp;- 将给出的正整数&nbsp;<code>val</code>&nbsp;推入&nbsp;<strong>从左往右第一个&nbsp;</strong>没有满的栈。</li>\\n\\t<li><code>int pop()</code>&nbsp;- 返回&nbsp;<strong>从右往左第一个&nbsp;</strong>非空栈顶部的值，并将其从栈中删除；如果所有的栈都是空的，请返回&nbsp;<code>-1</code>。</li>\\n\\t<li><code>int popAtStack(int index)</code>&nbsp;- 返回编号&nbsp;<code>index</code>&nbsp;的栈顶部的值，并将其从栈中删除；如果编号&nbsp;<code>index</code>&nbsp;的栈是空的，请返回 <code>-1</code>。</li>\\n</ul>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例：</strong></p>\\n\\n<pre><strong>输入： </strong>\\n[&quot;DinnerPlates&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;popAtStack&quot;,&quot;push&quot;,&quot;push&quot;,&quot;popAtStack&quot;,&quot;popAtStack&quot;,&quot;pop&quot;,&quot;pop&quot;,&quot;pop&quot;,&quot;pop&quot;,&quot;pop&quot;]\\n[[2],[1],[2],[3],[4],[5],[0],[20],[21],[0],[2],[],[],[],[],[]]\\n<strong>输出：</strong>\\n[null,null,null,null,null,null,2,null,null,20,21,5,4,3,1,-1]\\n\\n<strong>解释：</strong>\\nDinnerPlates D = DinnerPlates(2);  // 初始化，栈最大容量 capacity = 2\\nD.push(1);\\nD.push(2);\\nD.push(3);\\nD.push(4);\\nD.push(5);         // 栈的现状为：    2 &nbsp;4\\n&nbsp;                                   1 &nbsp;3 &nbsp;5\\n                                    ﹈ ﹈ ﹈\\nD.popAtStack(0);   // 返回 2。栈的现状为：     &nbsp;4\\n            &nbsp;                             1 &nbsp;3 &nbsp;5\\n                                          ﹈ ﹈ ﹈\\nD.push(20);        // 栈的现状为：  20  4\\n&nbsp;                                  1 &nbsp;3 &nbsp;5\\n                                   ﹈ ﹈ ﹈\\nD.push(21);        // 栈的现状为：  20  4 21\\n&nbsp;                                  1 &nbsp;3 &nbsp;5\\n                                   ﹈ ﹈ ﹈\\nD.popAtStack(0);   // 返回 20。栈的现状为：       4 21\\n             &nbsp;                              1 &nbsp;3 &nbsp;5\\n                                            ﹈ ﹈ ﹈\\nD.popAtStack(2);   // 返回 21。栈的现状为：       4\\n             &nbsp;                              1 &nbsp;3 &nbsp;5\\n                                            ﹈ ﹈ ﹈ \\nD.pop()            // 返回 5。栈的现状为：        4\\n             &nbsp;                              1 &nbsp;3 \\n                                            ﹈ ﹈  \\nD.pop()            // 返回 4。栈的现状为：    1  3 \\n                                           ﹈ ﹈   \\nD.pop()            // 返回 3。栈的现状为：    1 \\n                                           ﹈   \\nD.pop()            // 返回 1。现在没有栈。\\nD.pop()            // 返回 -1。仍然没有栈。\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= capacity&nbsp;&lt;= 20000</code></li>\\n\\t<li><code>1 &lt;= val&nbsp;&lt;= 20000</code></li>\\n\\t<li><code>0 &lt;= index&nbsp;&lt;= 100000</code></li>\\n\\t<li>最多会对&nbsp;<code>push</code>，<code>pop</code>，和&nbsp;<code>popAtStack</code>&nbsp;进行 <code>200000</code> 次调用。</li>\\n</ul>\\n","title":"1172. 餐盘栈","relatedTags":["栈","设计","哈希表","堆（优先队列）"],"difficult":"Hard","lang":["javascript"],"uniqueID":"1172","slug":"1172-Dinner-Plate-Stacks"}')}}]);