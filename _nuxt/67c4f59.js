(window.webpackJsonp=window.webpackJsonp||[]).push([[905],{1703:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Solution</span><span class=\\"hljs-params\\">(object)</span>:</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">longestPalindrome</span><span class=\\"hljs-params\\">(self, s)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type s: str\\n        :rtype: str\\n        \\"\\"\\"</span>\\n        n=len(s)\\n        dp=[[<span class=\\"hljs-number\\">0</span>]*n <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(n)]\\n        <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(n):\\n            dp[i][i]=<span class=\\"hljs-number\\">1</span>\\n        maxLen=<span class=\\"hljs-number\\">0</span>\\n        ans=s[<span class=\\"hljs-number\\">0</span>:<span class=\\"hljs-number\\">1</span>]\\n        <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(<span class=\\"hljs-number\\">1</span>,n):\\n          <span class=\\"hljs-keyword\\">for</span> j <span class=\\"hljs-keyword\\">in</span> range(<span class=\\"hljs-number\\">0</span>,n-i):\\n            k=j+i\\n            <span class=\\"hljs-keyword\\">if</span> s[j]==s[k] <span class=\\"hljs-keyword\\">and</span> dp[j+<span class=\\"hljs-number\\">1</span>][k<span class=\\"hljs-number\\">-1</span>]!=<span class=\\"hljs-number\\">-1</span>:\\n              dp[j][k]=dp[j+<span class=\\"hljs-number\\">1</span>][k<span class=\\"hljs-number\\">-1</span>]+<span class=\\"hljs-number\\">2</span>\\n              <span class=\\"hljs-keyword\\">if</span> dp[j][k]&gt;maxLen:\\n                maxLen=dp[j][k]\\n                ans=s[j:k+<span class=\\"hljs-number\\">1</span>]\\n            <span class=\\"hljs-keyword\\">else</span>:\\n              dp[j][k]=<span class=\\"hljs-number\\">-1</span>\\n\\n        <span class=\\"hljs-comment\\"># print dp</span>\\n        <span class=\\"hljs-keyword\\">return</span> ans\\n</code></pre>\\n"],"querySlug":"longest-palindromic-substring","created_at":"2019-02-27","timeArr":[2019,1,27,16,17,24,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>对于每一个<code>str[i]</code>，都去检查它作为回文的中心的回文长度，</p>\\n<p>例如 <code>ababcba</code>，</p>\\n<p>索引<code>1</code>的<code>b</code>作为中心，那么对应的回文就是<code>aba</code>，</p>\\n<p>索引<code>2</code>作为中心，对应的回文就是<code>bab</code>，</p>\\n<p>索引<code>4</code>作为中心，对应的回文就是<code>abcba</code>。</p>\\n<p>注意的是，回文有2种，<code>ababa</code>，以<code>a</code>为中心，<code>abba</code>，以<code>bb</code>为中心，因此对于每一个索引，都要计算2种形成回文的方式，最后选择最长的。</p>\\n","content":"<p>给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = \\"babad\\"\\n<strong>输出：</strong>\\"bab\\"\\n<strong>解释：</strong>\\"aba\\" 同样是符合题意的答案。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = \\"cbbd\\"\\n<strong>输出：</strong>\\"bb\\"\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = \\"a\\"\\n<strong>输出：</strong>\\"a\\"\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = \\"ac\\"\\n<strong>输出：</strong>\\"a\\"\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= s.length <= 1000</code></li>\\n\\t<li><code>s</code> 仅由数字和英文字母（大写和/或小写）组成</li>\\n</ul>\\n","title":"5. 最长回文子串","relatedTags":["字符串","动态规划"],"difficult":"Middle","lang":["python"],"uniqueID":"5","slug":"5-Longest-Palindromic-Substring"}')}}]);