(window.webpackJsonp=window.webpackJsonp||[]).push([[993],{1791:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Initialize your data structure here. Set the size of the queue to be k.\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">k</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> MyCircularQueue = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">k</span>) </span>{\\n  <span class=\\"hljs-keyword\\">this</span>.delId=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">this</span>.addId=<span class=\\"hljs-number\\">-1</span>\\n  <span class=\\"hljs-keyword\\">this</span>.list=<span class=\\"hljs-built_in\\">Array</span>(k).fill(<span class=\\"hljs-literal\\">null</span>)\\n  <span class=\\"hljs-keyword\\">this</span>.size=k\\n  <span class=\\"hljs-keyword\\">this</span>.curSize=<span class=\\"hljs-number\\">0</span>\\n};\\n\\n<span class=\\"hljs-comment\\">/**\\n * Insert an element into the circular queue. Return true if the operation is successful. \\n * @param {number} value\\n * @return {boolean}\\n */</span>\\nMyCircularQueue.prototype.enQueue = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">value</span>) </span>{\\n  <span class=\\"hljs-comment\\">// console.log(this.list)</span>\\n  <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-keyword\\">this</span>.isFull())<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n  <span class=\\"hljs-keyword\\">this</span>.addId=(<span class=\\"hljs-keyword\\">this</span>.addId+<span class=\\"hljs-number\\">1</span>) % <span class=\\"hljs-keyword\\">this</span>.size\\n  <span class=\\"hljs-keyword\\">this</span>.list[<span class=\\"hljs-keyword\\">this</span>.addId]=value\\n  <span class=\\"hljs-keyword\\">this</span>.curSize++\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n};\\n\\n<span class=\\"hljs-comment\\">/**\\n * Delete an element from the circular queue. Return true if the operation is successful.\\n * @return {boolean}\\n */</span>\\nMyCircularQueue.prototype.deQueue = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-keyword\\">this</span>.isEmpty())<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n  <span class=\\"hljs-keyword\\">this</span>.delId=(<span class=\\"hljs-keyword\\">this</span>.delId+<span class=\\"hljs-number\\">1</span>) % <span class=\\"hljs-keyword\\">this</span>.size\\n  <span class=\\"hljs-keyword\\">this</span>.curSize--\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n};\\n\\n<span class=\\"hljs-comment\\">/**\\n * Get the front item from the queue.\\n * @return {number}\\n */</span>\\nMyCircularQueue.prototype.Front = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-keyword\\">this</span>.isEmpty())<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">-1</span>\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-keyword\\">this</span>.list[<span class=\\"hljs-keyword\\">this</span>.delId]\\n};\\n\\n<span class=\\"hljs-comment\\">/**\\n * Get the last item from the queue.\\n * @return {number}\\n */</span>\\nMyCircularQueue.prototype.Rear = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-keyword\\">this</span>.isEmpty())<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">-1</span>\\n  <span class=\\"hljs-comment\\">// console.log(this.addId,this.list)</span>\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-keyword\\">this</span>.list[<span class=\\"hljs-keyword\\">this</span>.addId]\\n};\\n\\n<span class=\\"hljs-comment\\">/**\\n * Checks whether the circular queue is empty or not.\\n * @return {boolean}\\n */</span>\\nMyCircularQueue.prototype.isEmpty = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-keyword\\">this</span>.curSize===<span class=\\"hljs-number\\">0</span>\\n};\\n\\n<span class=\\"hljs-comment\\">/**\\n * Checks whether the circular queue is full or not.\\n * @return {boolean}\\n */</span>\\nMyCircularQueue.prototype.isFull = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-keyword\\">this</span>.curSize===<span class=\\"hljs-keyword\\">this</span>.size\\n};\\n\\n<span class=\\"hljs-comment\\">/** \\n * Your MyCircularQueue object will be instantiated and called as such:\\n * var obj = Object.create(MyCircularQueue).createNew(k)\\n * var param_1 = obj.enQueue(value)\\n * var param_2 = obj.deQueue()\\n * var param_3 = obj.Front()\\n * var param_4 = obj.Rear()\\n * var param_5 = obj.isEmpty()\\n * var param_6 = obj.isFull()\\n */</span>\\n</code></pre>\\n"],"querySlug":"design-circular-queue","created_at":"2019-04-19","timeArr":[2019,3,19,16,43,37,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>其实就是双指针，分别是当前队列的第一个的指针<code>delId</code>，当前队列最后一个指针<code>addId</code>。</p>\\n<p>由于是循环队列，因此指针每次执行完毕向后移动需要<code>% this.size</code>。</p>\\n<p><code>delId</code>停留在删除前的位置，而<code>addId</code>停留在添加后的位置，所以初始值<code>delId=0,addId=-1</code>，比较方便编写。</p>\\n","content":"<p>设计你的循环队列实现。 循环队列是一种线性数据结构，其操作表现基于 FIFO（先进先出）原则并且队尾被连接在队首之后以形成一个循环。它也被称为&ldquo;环形缓冲器&rdquo;。</p>\\n\\n<p>循环队列的一个好处是我们可以利用这个队列之前用过的空间。在一个普通队列里，一旦一个队列满了，我们就不能插入下一个元素，即使在队列前面仍有空间。但是使用循环队列，我们能使用这些空间去存储新的值。</p>\\n\\n<p>你的实现应该支持如下操作：</p>\\n\\n<ul>\\n\\t<li><code>MyCircularQueue(k)</code>: 构造器，设置队列长度为 k 。</li>\\n\\t<li><code>Front</code>: 从队首获取元素。如果队列为空，返回 -1 。</li>\\n\\t<li><code>Rear</code>: 获取队尾元素。如果队列为空，返回 -1 。</li>\\n\\t<li><code>enQueue(value)</code>: 向循环队列插入一个元素。如果成功插入则返回真。</li>\\n\\t<li><code>deQueue()</code>: 从循环队列中删除一个元素。如果成功删除则返回真。</li>\\n\\t<li><code>isEmpty()</code>: 检查循环队列是否为空。</li>\\n\\t<li><code>isFull()</code>: 检查循环队列是否已满。</li>\\n</ul>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例：</strong></p>\\n\\n<pre>MyCircularQueue circularQueue = new MyCircularQueue(3); // 设置长度为 3\\ncircularQueue.enQueue(1); &nbsp;// 返回 true\\ncircularQueue.enQueue(2); &nbsp;// 返回 true\\ncircularQueue.enQueue(3); &nbsp;// 返回 true\\ncircularQueue.enQueue(4); &nbsp;// 返回 false，队列已满\\ncircularQueue.Rear(); &nbsp;// 返回 3\\ncircularQueue.isFull(); &nbsp;// 返回 true\\ncircularQueue.deQueue(); &nbsp;// 返回 true\\ncircularQueue.enQueue(4); &nbsp;// 返回 true\\ncircularQueue.Rear(); &nbsp;// 返回 4</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li>所有的值都在 0&nbsp;至 1000 的范围内；</li>\\n\\t<li>操作数将在 1 至 1000 的范围内；</li>\\n\\t<li>请不要使用内置的队列库。</li>\\n</ul>\\n","title":"622. 设计循环队列","relatedTags":["设计","队列","数组","链表"],"difficult":"Middle","lang":["javascript"],"uniqueID":"622","slug":"622-Design-Circular-Queue"}')}}]);