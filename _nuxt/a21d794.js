(window.webpackJsonp=window.webpackJsonp||[]).push([[910],{1708:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">nums</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> nextGreaterElements = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">nums</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> N=nums.length\\n  <span class=\\"hljs-keyword\\">let</span> stack=[],res=<span class=\\"hljs-built_in\\">Array</span>(N).fill(<span class=\\"hljs-literal\\">null</span>)\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;N*<span class=\\"hljs-number\\">2</span>;i++){\\n    <span class=\\"hljs-keyword\\">let</span> id=i % N\\n    <span class=\\"hljs-keyword\\">while</span>(stack.length&gt;<span class=\\"hljs-number\\">0</span> &amp;&amp; nums[id]&gt;nums[stack[stack.length<span class=\\"hljs-number\\">-1</span>]]){\\n      res[stack.pop()]=nums[id]\\n    }\\n    stack.push(id)\\n  }\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;res.length;i++){\\n    <span class=\\"hljs-keyword\\">if</span>(res[i]==<span class=\\"hljs-literal\\">null</span>)res[i]=<span class=\\"hljs-number\\">-1</span>\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"next-greater-element-ii","created_at":"2019-04-17","timeArr":[2019,3,17,12,48,15,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>比起<code>NO.496</code>，需要延长<code>nums</code>为原来的2倍(指针转2圈即可)。</p>\\n<p>同样还是通过<code>stack</code>解决。</p>\\n<p>假设<code>nums=[1,6,4,5,3,8]</code>，我们通过<code>stack</code>不断压栈</p>\\n<ol>\\n<li><code>cur===1</code>，<code>stack=[1]</code>。</li>\\n<li><code>cur===6</code>，<code>cur&gt;stack[stack.length-1]</code>，因此说明<code>1</code>的下一个最大值就是<code>6</code>，通过<code>hash</code>保存并且<code>stack.pop</code>。</li>\\n<li><code>cur===4</code>，<code>stack=[6,4]</code>。</li>\\n<li><code>cur===5</code>，<code>cur&gt;stack[stack.length-1]</code>，说明<code>4</code>的下一个最大值是<code>5</code>。</li>\\n<li><code>cur===3</code>，<code>stack=[6,5,3]</code>。</li>\\n<li><code>cur===8</code>，<code>5</code>和<code>3</code>的下一个最大值是<code>8</code>。</li>\\n</ol>\\n<p>接着遍历<code>nums1</code>，只需要检查<code>hash</code>中的下一个最大值即可，不存在则为<code>-1</code>。</p>\\n","content":"<p>给定一个循环数组（最后一个元素的下一个元素是数组的第一个元素），输出每个元素的下一个更大元素。数字 x 的下一个更大的元素是按数组遍历顺序，这个数字之后的第一个比它更大的数，这意味着你应该循环地搜索它的下一个更大的数。如果不存在，则输出 -1。</p>\\n\\n<p><strong>示例 1:</strong></p>\\n\\n<pre>\\n<strong>输入:</strong> [1,2,1]\\n<strong>输出:</strong> [2,-1,2]\\n<strong>解释:</strong> 第一个 1 的下一个更大的数是 2；\\n数字 2 找不到下一个更大的数； \\n第二个 1 的下一个最大的数需要循环搜索，结果也是 2。\\n</pre>\\n\\n<p><strong>注意:</strong> 输入数组的长度不会超过 10000。</p>\\n","title":"503. 下一个更大元素 II","relatedTags":["栈","数组","单调栈"],"difficult":"Middle","lang":["javascript"],"uniqueID":"503","slug":"503-Next-Greater-Element-II"}')}}]);