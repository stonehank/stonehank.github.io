(window.webpackJsonp=window.webpackJsonp||[]).push([[269],{1067:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">arr1</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">arr2</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> addNegabinary = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">arr1, arr2</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> i=arr1.length<span class=\\"hljs-number\\">-1</span>,j=arr2.length<span class=\\"hljs-number\\">-1</span>\\n  <span class=\\"hljs-keyword\\">let</span> res=[],carry=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">while</span>(i&gt;=<span class=\\"hljs-number\\">0</span> || j&gt;=<span class=\\"hljs-number\\">0</span>){\\n    <span class=\\"hljs-keyword\\">let</span> sum=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">if</span>(j&lt;<span class=\\"hljs-number\\">0</span>){\\n      sum=carry+arr1[i--]\\n    }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(i&lt;<span class=\\"hljs-number\\">0</span>){\\n      sum=carry+arr2[j--]\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      sum=carry+arr1[i--]+arr2[j--]\\n    }\\n    carry=<span class=\\"hljs-built_in\\">Math</span>.trunc(sum / <span class=\\"hljs-number\\">-2</span>)\\n    sum %=<span class=\\"hljs-number\\">2</span>\\n    <span class=\\"hljs-keyword\\">if</span>(sum===<span class=\\"hljs-number\\">-1</span>){\\n      res.unshift(<span class=\\"hljs-number\\">1</span>)\\n      carry+=<span class=\\"hljs-number\\">1</span>\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n     res.unshift(sum)\\n    }\\n   \\n  }\\n  <span class=\\"hljs-keyword\\">if</span>(carry!==<span class=\\"hljs-number\\">0</span>){\\n    res.unshift(<span class=\\"hljs-number\\">1</span>)\\n    res.unshift(<span class=\\"hljs-number\\">1</span>)\\n  }\\n  <span class=\\"hljs-keyword\\">if</span>(res.length===<span class=\\"hljs-number\\">1</span>)<span class=\\"hljs-keyword\\">return</span> res\\n  <span class=\\"hljs-keyword\\">let</span> res2=[]\\n  <span class=\\"hljs-keyword\\">let</span> leadZ=<span class=\\"hljs-literal\\">true</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;res.length;i++){\\n    <span class=\\"hljs-keyword\\">if</span>(res[i]!==<span class=\\"hljs-number\\">0</span>)leadZ=<span class=\\"hljs-literal\\">false</span>\\n    <span class=\\"hljs-keyword\\">if</span>(leadZ &amp;&amp; res[i]===<span class=\\"hljs-number\\">0</span>){\\n      <span class=\\"hljs-keyword\\">continue</span>\\n    }\\n    res2.push(res[i])\\n  }\\n  <span class=\\"hljs-keyword\\">if</span>(res2.length===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span> [<span class=\\"hljs-number\\">0</span>]\\n  <span class=\\"hljs-keyword\\">return</span> res2\\n};\\n</code></pre>\\n"],"querySlug":"adding-two-negabinary-numbers","created_at":"2019-06-02","timeArr":[2019,5,2,11,36,6,0],"hasThinking":false,"content":"<p>给出基数为 <strong>-2</strong>&nbsp;的两个数&nbsp;<code>arr1</code> 和&nbsp;<code>arr2</code>，返回两数相加的结果。</p>\\n\\n<p>数字以&nbsp;<strong>数组形式&nbsp;</strong>给出：数组由若干 0 和 1 组成，按最高有效位到最低有效位的顺序排列。例如，<code>arr&nbsp;= [1,1,0,1]</code>&nbsp;表示数字&nbsp;<code>(-2)^3&nbsp;+ (-2)^2 + (-2)^0 = -3</code>。<strong>数组形式&nbsp;</strong>的数字也同样不含前导零：以 <code>arr</code> 为例，这意味着要么&nbsp;<code>arr == [0]</code>，要么&nbsp;<code>arr[0] == 1</code>。</p>\\n\\n<p>返回相同表示形式的 <code>arr1</code> 和 <code>arr2</code> 相加的结果。两数的表示形式为：不含前导零、由若干 0 和 1 组成的数组。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例：</strong></p>\\n\\n<pre><strong>输入：</strong>arr1 = [1,1,1,1,1], arr2 = [1,0,1]\\n<strong>输出：</strong>[1,0,0,0,0]\\n<strong>解释：</strong>arr1 表示 11，arr2 表示 5，输出表示 16 。\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ol>\\n\\t<li><code>1 &lt;= arr1.length &lt;= 1000</code></li>\\n\\t<li><code>1 &lt;= arr2.length &lt;= 1000</code></li>\\n\\t<li><code>arr1</code> 和&nbsp;<code>arr2</code>&nbsp;都不含前导零</li>\\n\\t<li><code>arr1[i]</code> 为&nbsp;<code>0</code>&nbsp;或&nbsp;<code>1</code></li>\\n\\t<li><code>arr2[i]</code>&nbsp;为&nbsp;<code>0</code> 或&nbsp;<code>1</code></li>\\n</ol>\\n","title":"1073. 负二进制数相加","relatedTags":["数组","数学"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1073","slug":"1073-Adding-Two-Negabinary-Numbers"}')}}]);