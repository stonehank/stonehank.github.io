(window.webpackJsonp=window.webpackJsonp||[]).push([[180],{662:function(n){n.exports=JSON.parse('{"content":"<p>一些JS基础(3)</p>\\n<h4 id=\\"forof\\">for...of</h4>\\n<p> <code>for..of</code>会寻找内置或者自定义的 @@iterator 对象并调用它的 next() 方法来遍历数据值</p>\\n<p> array默认带有iterator，因此可以直接使用for...of</p>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-keyword\\">var</span> arr=[<span class=\\"hljs-number\\">1</span>,<span class=\\"hljs-number\\">2</span>,<span class=\\"hljs-number\\">3</span>];\\n<span class=\\"hljs-keyword\\">var</span> it=arr[<span class=\\"hljs-built_in\\">Symbol</span>.iterator]()\\n\\nit.next() <span class=\\"hljs-comment\\">// {value: 1, done: false}</span>\\nit.next() <span class=\\"hljs-comment\\">// {value: 2, done: false}</span>\\nit.next() <span class=\\"hljs-comment\\">// {value: 3, done: false}</span>\\nit.next() <span class=\\"hljs-comment\\">// {value: undefined, done: true}</span></code></pre></code></pre>\\n<p>object默认不带iterator，不可以直接使用for...of，但可以手动添加iterator属性后</p>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-keyword\\">var</span> obj={<span class=\\"hljs-attr\\">x</span>:<span class=\\"hljs-number\\">1</span>,<span class=\\"hljs-attr\\">y</span>:<span class=\\"hljs-number\\">2</span>,<span class=\\"hljs-attr\\">z</span>:<span class=\\"hljs-number\\">3</span>}\\n<span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> key <span class=\\"hljs-keyword\\">of</span> obj){<span class=\\"hljs-built_in\\">console</span>.log(key)} <span class=\\"hljs-comment\\">// TypeError:obj is not iterable</span>\\n\\n<span class=\\"hljs-built_in\\">Object</span>.defineProperty(obj,<span class=\\"hljs-built_in\\">Symbol</span>.iterator,{\\n  <span class=\\"hljs-attr\\">writable</span>:<span class=\\"hljs-literal\\">false</span>,\\n  <span class=\\"hljs-attr\\">enumerable</span>:<span class=\\"hljs-literal\\">false</span>,\\n  <span class=\\"hljs-attr\\">configurable</span>:<span class=\\"hljs-literal\\">true</span>,\\n  <span class=\\"hljs-attr\\">value</span>:<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>)</span>{\\n    <span class=\\"hljs-keyword\\">var</span> curO=<span class=\\"hljs-keyword\\">this</span>;\\n    <span class=\\"hljs-keyword\\">var</span> oId=<span class=\\"hljs-built_in\\">Object</span>.keys(curO);\\n    <span class=\\"hljs-keyword\\">var</span> curIdx=<span class=\\"hljs-number\\">0</span>;\\n    <span class=\\"hljs-keyword\\">return</span>{\\n      <span class=\\"hljs-attr\\">next</span>:<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>)</span>{\\n        <span class=\\"hljs-keyword\\">return</span> {\\n          <span class=\\"hljs-attr\\">value</span>:curO[oId[curIdx++]],\\n          <span class=\\"hljs-attr\\">done</span>:curIdx&gt;oId.length\\n        }\\n      }\\n    }\\n  }\\n})\\n<span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> key <span class=\\"hljs-keyword\\">of</span> obj){<span class=\\"hljs-built_in\\">console</span>.log(key)} \\n<span class=\\"hljs-comment\\">// 1</span>\\n<span class=\\"hljs-comment\\">// 2</span>\\n<span class=\\"hljs-comment\\">// 3</span></code></pre></code></pre>\\n<h4 id=\\"forin-he-in\\">for...in和in</h4>\\n<p><code>for(let key in obj){...}</code>查找的属性必须是可枚举的，在整个原型链上查找</p>\\n<p><code>key in obj</code>查找的属性可以不是可枚举的，在整个原型链上查找</p>\\n<h4 id=\\"yuan-xing-lian-ji-cheng\\">原型链继承</h4>\\n<pre><code><pre class=\\"hljs\\"><code>// ES6 之前需要抛弃默认的 Bar.prototype\\nBar.ptototype = Object.create( Foo.prototype );\\n// ES6 开始可以直接修改现有的 Bar.prototype\\nObject.setPrototypeOf( Bar.prototype, Foo.prototype );</code></pre></code></pre><h4 id=\\"setprototypeofgetprototypeofisprototypeof\\">setPrototypeOf,getPrototypeOf,isPrototypeOf</h4>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-keyword\\">var</span> a={<span class=\\"hljs-attr\\">x</span>:<span class=\\"hljs-number\\">1</span>}\\n<span class=\\"hljs-keyword\\">var</span> b={<span class=\\"hljs-attr\\">y</span>:<span class=\\"hljs-number\\">2</span>}\\n\\n<span class=\\"hljs-built_in\\">Object</span>.setPrototypeOf(a,b)\\na.__proto__===b <span class=\\"hljs-comment\\">// true</span>\\n<span class=\\"hljs-built_in\\">Object</span>.getPrototypeOf(a)===a.__proto__ <span class=\\"hljs-comment\\">// true</span>\\nb.isPrototypeOf(a) <span class=\\"hljs-comment\\">// true</span>\\n\\n<span class=\\"hljs-comment\\">/*           null\\n*             | prototype\\n*            Object \\n*  prototype /\\n*           b \\n*            \\\\ prototype \\n*             a\\n* */</span></code></pre></code></pre>\\n<h4 id=\\"class-de-prototype\\">class的prototype</h4>\\n<p>先不用class</p>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">A</span>(<span class=\\"hljs-params\\">n</span>)</span>{\\n  <span class=\\"hljs-keyword\\">this</span>.id=n\\n}\\nA.prototype.show=<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>)</span>{\\n  <span class=\\"hljs-built_in\\">console</span>.log(<span class=\\"hljs-keyword\\">this</span>.id)\\n}\\n\\n<span class=\\"hljs-keyword\\">var</span> a=<span class=\\"hljs-keyword\\">new</span> A(<span class=\\"hljs-number\\">5</span>)\\na.show() <span class=\\"hljs-comment\\">// 5</span></code></pre></code></pre>\\n<p>接着我们改变prototype，分2种形式</p>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">// 一：更改prototype上的属性</span>\\nA.prototype.show=<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>)</span>{\\n  <span class=\\"hljs-built_in\\">console</span>.log(<span class=\\"hljs-string\\">\\"change\\"</span>)\\n}\\na.show() <span class=\\"hljs-comment\\">// change 生效</span>\\n\\n<span class=\\"hljs-comment\\">// 二：直接更改整个prototype</span>\\nA.prototype={\\n  <span class=\\"hljs-attr\\">show</span>:<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>)</span>{\\n    <span class=\\"hljs-built_in\\">console</span>.log(<span class=\\"hljs-string\\">\\"change\\"</span>)\\n  }\\n}\\na.show() <span class=\\"hljs-comment\\">// 5 未生效</span>\\n<span class=\\"hljs-keyword\\">var</span> a2=<span class=\\"hljs-keyword\\">new</span> A(<span class=\\"hljs-number\\">5</span>)\\na2.show() <span class=\\"hljs-comment\\">// change 生效</span></code></pre></code></pre>\\n<p>再看class</p>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">A</span></span>{\\n  <span class=\\"hljs-keyword\\">constructor</span>(n){\\n    <span class=\\"hljs-keyword\\">this</span>.id=n\\n  }\\n  show(){\\n    <span class=\\"hljs-built_in\\">console</span>.log(<span class=\\"hljs-keyword\\">this</span>.id)\\n  }\\n}\\n<span class=\\"hljs-keyword\\">var</span> a=<span class=\\"hljs-keyword\\">new</span> A(<span class=\\"hljs-number\\">8</span>)\\na.show() <span class=\\"hljs-comment\\">// 8</span></code></pre></code></pre>\\n<p>改变prototype</p>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">// 一：更改prototype上的属性</span>\\nA.prototype.show=<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>)</span>{\\n  <span class=\\"hljs-built_in\\">console</span>.log(<span class=\\"hljs-string\\">\\"change\\"</span>)\\n}\\na.show() <span class=\\"hljs-comment\\">// change 生效</span>\\n\\n<span class=\\"hljs-comment\\">// 二：直接更改整个prototype</span>\\nA.prototype={\\n  <span class=\\"hljs-attr\\">show</span>:<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>)</span>{\\n    <span class=\\"hljs-built_in\\">console</span>.log(<span class=\\"hljs-string\\">\\"change\\"</span>)\\n  }\\n}\\na.show() <span class=\\"hljs-comment\\">// 8 未生效</span>\\n<span class=\\"hljs-keyword\\">var</span> a2=<span class=\\"hljs-keyword\\">new</span> A(<span class=\\"hljs-number\\">5</span>)\\na2.show() <span class=\\"hljs-comment\\">// 5 未生效</span></code></pre></code></pre>\\n<p>结论：</p>\\n<ol>\\n<li>非class模式下，直接修改整个prototype并不能影响已经创建的实例，但对后来创建的实例有影响</li>\\n<li>class模式下，直接修改整个prototype既不能影响已经创建实例，也不能影响后来创建的实例</li>\\n</ol>\\n","toc":[{"anchor":"forof","level":4,"text":"for...of"},{"anchor":"forin-he-in","level":4,"text":"for...in和in"},{"anchor":"yuan-xing-lian-ji-cheng","level":4,"text":"原型链继承"},{"anchor":"setprototypeofgetprototypeofisprototypeof","level":4,"text":"setPrototypeOf,getPrototypeOf,isPrototypeOf"},{"anchor":"class-de-prototype","level":4,"text":"class的prototype"}],"relatedTags":null,"created_at":"2018-06-26","timeArr":[2018,5,26,0,0,0,0],"title":"一些被忽略的js知识3","uuid":"0c8cd68f3ca83da85ae41e597f8b4869615a425b","summary":"<p>一些JS基础(3)</p>\\n<h4>for...of</h4>\\n<p><code>for..of</code>会寻找内置或者自定义的 @@iterator 对象并调用它的 next() 方法来遍历数据值</p>\\n<p>array默认带有iterator，因此可以直接使用for...of</p>\\n<pre class=\\"hljs\\"><code><span class=\\"hljs-keyword\\">var</span> arr=[<span class=\\"hljs-number\\">1</span>,<span class=\\"hljs-number\\">2</span>,<span class=\\"hljs-number\\">3</span>];\\n<span class=\\"hljs-keyword\\">var</span> it=arr[Symbo...</code></pre>","slug":"yi-xie-bei-hu-lve-de-js-zhi-shi-3","sha":"4fd90b9ee966a8e1972197c101a2e960a01d9493"}')}}]);