(window.webpackJsonp=window.webpackJsonp||[]).push([[1253],{2051:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">n</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> grayCode = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">n</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(n===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span> [<span class=\\"hljs-number\\">0</span>]\\n  <span class=\\"hljs-keyword\\">let</span> cache={}\\n  <span class=\\"hljs-keyword\\">let</span> str=<span class=\\"hljs-string\\">\\"0\\"</span>.repeat(n)\\n  <span class=\\"hljs-keyword\\">let</span> result=[str]\\n  cache[str]=<span class=\\"hljs-number\\">1</span>\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">checkNoExist</span>(<span class=\\"hljs-params\\">str</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(cache[str])<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n    cache[str]=<span class=\\"hljs-number\\">1</span>\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n  }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">backtrack</span>(<span class=\\"hljs-params\\">str</span>)</span>{\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;n;i++){\\n      <span class=\\"hljs-keyword\\">let</span> curIdx=str[i]===<span class=\\"hljs-string\\">\\"0\\"</span>?<span class=\\"hljs-string\\">\\"1\\"</span>:<span class=\\"hljs-string\\">\\"0\\"</span>\\n      <span class=\\"hljs-keyword\\">let</span> newStr=str.substring(<span class=\\"hljs-number\\">0</span>,i)+curIdx+str.substring(i+<span class=\\"hljs-number\\">1</span>,n)\\n      <span class=\\"hljs-keyword\\">if</span>(checkNoExist(newStr)){\\n        result.push(newStr)\\n        <span class=\\"hljs-keyword\\">return</span> backtrack(newStr)\\n      }\\n    }\\n  }\\n  backtrack(str)\\n  <span class=\\"hljs-keyword\\">return</span> result.map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">n</span>=&gt;</span><span class=\\"hljs-built_in\\">parseInt</span>(n,<span class=\\"hljs-number\\">2</span>))\\n};\\n</code></pre>\\n"],"querySlug":"gray-code","created_at":"2019-04-18","timeArr":[2019,3,18,11,36,42,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>2种思路，一种是回溯，定义一个初始状态<code>00000...</code>(n个0)。</p>\\n<p>对这个数字每一位都尝试翻转(0变1,1变0)，并且用<code>hash</code>保存，检查以避免重复。</p>\\n<pre class=\\"hljs\\"><code>/**\\n * @param {number} n\\n * @return {number[]}\\n */\\nvar grayCode = function(n) {\\n  if(n===0)return [0]\\n  let cache={}, str=&quot;0&quot;.repeat(n)\\n  let result=[str]\\n  cache[str]=1\\n  function checkNoExist(str){\\n    if(cache[str])return false\\n    cache[str]=1\\n    return true\\n  }\\n  function backtrack(str){\\n    for(let i=0;i&lt;n;i++){\\n      let curIdx=str[i]===&quot;0&quot;?&quot;1&quot;:&quot;0&quot;\\n      let newStr=str.substring(0,i)+curIdx+str.substring(i+1,n)\\n      if(checkNoExist(newStr)){\\n        result.push(newStr)\\n        return backtrack(newStr)\\n      }\\n    }\\n  }\\n  backtrack(str)\\n  return result.map(n=&gt;parseInt(n,2))\\n};\\n</code></pre>\\n<p>另一种方法是找出规律，我们要计算<code>n</code>的格雷编码，先计算出<code>n-1</code>的格雷编码，然后对于<code>n-1</code>，正序遍历头部添加<code>0</code>，再逆序遍历头部添加<code>1</code>。</p>\\n","content":"<p>格雷编码是一个二进制数字系统，在该系统中，两个连续的数值仅有一个位数的差异。</p>\\n\\n<p>给定一个代表编码总位数的非负整数<em> n</em>，打印其格雷编码序列。即使有多个不同答案，你也只需要返回其中一种。</p>\\n\\n<p>格雷编码序列必须以 0 开头。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1:</strong></p>\\n\\n<pre><strong>输入:</strong>&nbsp;2\\n<strong>输出:</strong>&nbsp;<code>[0,1,3,2]</code>\\n<strong>解释:</strong>\\n00 - 0\\n01 - 1\\n11 - 3\\n10 - 2\\n\\n对于给定的&nbsp;<em>n</em>，其格雷编码序列并不唯一。\\n例如，<code>[0,2,3,1]</code>&nbsp;也是一个有效的格雷编码序列。\\n\\n00 - 0\\n10 - 2\\n11 - 3\\n01 - 1</pre>\\n\\n<p><strong>示例&nbsp;2:</strong></p>\\n\\n<pre><strong>输入:</strong>&nbsp;0\\n<strong>输出:</strong>&nbsp;<code>[0]\\n<strong>解释:</strong> 我们定义</code>格雷编码序列必须以 0 开头。<code>\\n&nbsp;    给定</code>编码总位数为<code> <em>n</em> 的格雷编码序列，其长度为 2<sup>n</sup></code>。<code>当 <em>n</em> = 0 时，长度为 2<sup>0</sup> = 1。\\n&nbsp;    因此，当 <em>n</em> = 0 时，其格雷编码序列为 [0]。</code>\\n</pre>\\n","title":"89. 格雷编码","relatedTags":["位运算","数学","回溯"],"difficult":"Middle","lang":["javascript"],"uniqueID":"89","slug":"89-Gray-Code"}')}}]);