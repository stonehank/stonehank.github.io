(window.webpackJsonp=window.webpackJsonp||[]).push([[1072],{1870:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">N</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">blacklist</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> Solution = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">N, blacklist</span>) </span>{\\n  <span class=\\"hljs-keyword\\">this</span>.hash={}\\n  <span class=\\"hljs-keyword\\">this</span>.rest=N-blacklist.length\\n  <span class=\\"hljs-keyword\\">let</span> last=N<span class=\\"hljs-number\\">-1</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;blacklist.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> cur=blacklist[i]\\n    <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-keyword\\">this</span>.hash[cur]==<span class=\\"hljs-literal\\">null</span>)\\n      <span class=\\"hljs-keyword\\">this</span>.hash[cur]=last--\\n  }\\n  <span class=\\"hljs-comment\\">// 路径压缩</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> n <span class=\\"hljs-keyword\\">of</span> blacklist){\\n    <span class=\\"hljs-keyword\\">if</span>(n&gt;=<span class=\\"hljs-keyword\\">this</span>.rest)<span class=\\"hljs-keyword\\">continue</span>\\n    <span class=\\"hljs-keyword\\">let</span> cur=<span class=\\"hljs-keyword\\">this</span>.hash[n]\\n    <span class=\\"hljs-keyword\\">while</span>(<span class=\\"hljs-keyword\\">this</span>.hash[cur]!=<span class=\\"hljs-literal\\">null</span>){\\n      cur=<span class=\\"hljs-keyword\\">this</span>.hash[cur]\\n    }\\n    <span class=\\"hljs-keyword\\">this</span>.hash[n]=cur\\n  }\\n};\\n\\n<span class=\\"hljs-comment\\">/**\\n * @return {number}\\n */</span>\\nSolution.prototype.pick = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> rd=<span class=\\"hljs-built_in\\">Math</span>.floor(<span class=\\"hljs-built_in\\">Math</span>.random()*<span class=\\"hljs-keyword\\">this</span>.rest)\\n  <span class=\\"hljs-comment\\">// console.log(this.hash)</span>\\n  <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-keyword\\">this</span>.hash[rd]!=<span class=\\"hljs-literal\\">null</span>){\\n    rd=<span class=\\"hljs-keyword\\">this</span>.hash[rd]\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> rd\\n};\\n\\n<span class=\\"hljs-comment\\">/** \\n * Your Solution object will be instantiated and called as such:\\n * var obj = Object.create(Solution).createNew(N, blacklist)\\n * var param_1 = obj.pick()\\n */</span>\\n</code></pre>\\n","<pre class=\\"hljs\\"><code><span class=\\"hljs-keyword\\">import</span> random\\n<span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Solution</span><span class=\\"hljs-params\\">(object)</span>:</span>\\n\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">__init__</span><span class=\\"hljs-params\\">(self, N, blacklist)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type N: int\\n        :type blacklist: List[int]\\n        \\"\\"\\"</span>\\n        bLen=len(blacklist)\\n        allLen=N\\n        self.mem={}\\n        self.rest=allLen-bLen\\n        replace=N<span class=\\"hljs-number\\">-1</span>\\n        <span class=\\"hljs-comment\\"># 建立黑名单中的替代路径</span>\\n        <span class=\\"hljs-keyword\\">for</span> n <span class=\\"hljs-keyword\\">in</span> blacklist:\\n          self.mem.setdefault(n,replace)\\n          replace-=<span class=\\"hljs-number\\">1</span>\\n          \\n        <span class=\\"hljs-comment\\"># 路径压缩</span>\\n        <span class=\\"hljs-keyword\\">for</span> n <span class=\\"hljs-keyword\\">in</span> blacklist:\\n          <span class=\\"hljs-keyword\\">if</span> n&gt;=self.rest:<span class=\\"hljs-keyword\\">continue</span>\\n          <span class=\\"hljs-keyword\\">if</span> n <span class=\\"hljs-keyword\\">in</span> self.mem:\\n            nxt=self.mem[n]\\n            <span class=\\"hljs-keyword\\">while</span> nxt <span class=\\"hljs-keyword\\">in</span> self.mem:\\n              nxt=self.mem[nxt]\\n            self.mem[n]=nxt\\n            \\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">pick</span><span class=\\"hljs-params\\">(self)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :rtype: int\\n        \\"\\"\\"</span>\\n        rd=int(random.random()*self.rest)\\n        <span class=\\"hljs-keyword\\">if</span> self.mem.has_key(rd):\\n          rd=self.mem[rd]\\n        <span class=\\"hljs-keyword\\">return</span> rd\\n        \\n\\n\\n<span class=\\"hljs-comment\\"># Your Solution object will be instantiated and called as such:</span>\\n<span class=\\"hljs-comment\\"># obj = Solution(N, blacklist)</span>\\n<span class=\\"hljs-comment\\"># param_1 = obj.pick()</span>\\n</code></pre>\\n"],"querySlug":"random-pick-with-blacklist","hasThinking":false,"content":"<p>给定一个包含 <code>[0，n)</code> 中不重复整数的黑名单 <code>blacklist</code> ，写一个函数从 <code>[0, n)</code> 中返回一个<strong>不在</strong> <code>blacklist</code> 中的随机整数。</p>\\n\\n<p>对它进行优化使其尽量少调用系统方法 <code>Math.random()</code> 。</p>\\n\\n<p><strong>提示:</strong></p>\\n\\n<ol>\\n\\t<li><code>1 <= n <= 1000000000</code></li>\\n\\t<li><code>0 <= blacklist.length < min(100000, N)</code></li>\\n\\t<li><code>[0, n)</code> 不包含 <code>n</code> ，详细参见 <a href=\\"https://en.wikipedia.org/wiki/Interval_(mathematics)\\" target=\\"_blank\\">interval notation</a> 。</li>\\n</ol>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：\\n</strong>[\\"Solution\\",\\"pick\\",\\"pick\\",\\"pick\\"]\\n[[1,[]],[],[],[]]\\n<strong>输出：</strong>[null,0,0,0]\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：\\n</strong>[\\"Solution\\",\\"pick\\",\\"pick\\",\\"pick\\"]\\n[[2,[]],[],[],[]]\\n<strong>输出：</strong>[null,1,1,1]\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：\\n</strong>[\\"Solution\\",\\"pick\\",\\"pick\\",\\"pick\\"]\\n[[3,[1]],[],[],[]]\\n<strong>输出：</strong>[null,0,0,2]\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre>\\n<strong>输入： \\n</strong>[\\"Solution\\",\\"pick\\",\\"pick\\",\\"pick\\"]\\n[[4,[2]],[],[],[]]\\n<strong>输出：</strong>[null,1,3,1]\\n</pre>\\n\\n<p><strong>输入语法说明：</strong></p>\\n\\n<p>输入是两个列表：调用成员函数名和调用的参数。<code>Solution</code>的构造函数有两个参数，<code>n</code> 和黑名单 <code>blacklist</code>。<code>pick</code> 没有参数，输入参数是一个列表，即使参数为空，也会输入一个 <code>[]</code> 空列表。</p>\\n","title":"710. 黑名单中的随机数","relatedTags":["哈希表","数学","二分查找","排序","随机化"],"difficult":"Hard","lang":["javascript","python"],"uniqueID":"710","slug":"710-Random-Pick-with-Blacklist"}')}}]);