(window.webpackJsonp=window.webpackJsonp||[]).push([[319],{1117:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">s</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">t</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> numDistinct = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">s, t</span>) </span>{\\n    <span class=\\"hljs-keyword\\">let</span> m=t.length, n=s.length\\n    <span class=\\"hljs-keyword\\">let</span> dp=<span class=\\"hljs-built_in\\">Array</span>(m+<span class=\\"hljs-number\\">1</span>).fill().map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span>=&gt;</span><span class=\\"hljs-built_in\\">Array</span>(n+<span class=\\"hljs-number\\">1</span>).fill(<span class=\\"hljs-number\\">0</span>))\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;n+<span class=\\"hljs-number\\">1</span>;i++){\\n        dp[<span class=\\"hljs-number\\">0</span>][i]=<span class=\\"hljs-number\\">1</span>\\n    }\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">1</span>;i&lt;m+<span class=\\"hljs-number\\">1</span>;i++){\\n        <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">1</span>;j&lt;n+<span class=\\"hljs-number\\">1</span>;j++){\\n            <span class=\\"hljs-keyword\\">if</span>(s[j<span class=\\"hljs-number\\">-1</span>]===t[i<span class=\\"hljs-number\\">-1</span>]){\\n                dp[i][j]=dp[i<span class=\\"hljs-number\\">-1</span>][j<span class=\\"hljs-number\\">-1</span>]+dp[i][j<span class=\\"hljs-number\\">-1</span>]\\n            }<span class=\\"hljs-keyword\\">else</span>{\\n                dp[i][j]=dp[i][j<span class=\\"hljs-number\\">-1</span>]\\n            }\\n        }\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> dp[m][n]\\n};\\n</code></pre>\\n","<pre class=\\"hljs\\"><code><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Solution</span><span class=\\"hljs-params\\">(object)</span>:</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">numDistinct</span><span class=\\"hljs-params\\">(self, s, t)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type s: str\\n        :type t: str\\n        :rtype: int\\n        \\"\\"\\"</span>\\n        m=len(t)\\n        n=len(s)\\n        dp=[[<span class=\\"hljs-number\\">0</span>]*(n+<span class=\\"hljs-number\\">1</span>) <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(m+<span class=\\"hljs-number\\">1</span>)]\\n        <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(n+<span class=\\"hljs-number\\">1</span>):\\n          dp[<span class=\\"hljs-number\\">0</span>][i]=<span class=\\"hljs-number\\">1</span>\\n        <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(<span class=\\"hljs-number\\">1</span>,m+<span class=\\"hljs-number\\">1</span>):\\n          <span class=\\"hljs-keyword\\">for</span> j <span class=\\"hljs-keyword\\">in</span> range(<span class=\\"hljs-number\\">1</span>,n+<span class=\\"hljs-number\\">1</span>):\\n            <span class=\\"hljs-keyword\\">if</span> s[j<span class=\\"hljs-number\\">-1</span>]==t[i<span class=\\"hljs-number\\">-1</span>]:\\n              dp[i][j]=dp[i<span class=\\"hljs-number\\">-1</span>][j<span class=\\"hljs-number\\">-1</span>]+dp[i][j<span class=\\"hljs-number\\">-1</span>]\\n            <span class=\\"hljs-keyword\\">else</span>:\\n              dp[i][j]=dp[i][j<span class=\\"hljs-number\\">-1</span>]\\n        <span class=\\"hljs-comment\\"># print dp</span>\\n        <span class=\\"hljs-keyword\\">return</span> dp[m][n]\\n</code></pre>\\n"],"querySlug":"distinct-subsequences","hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>DP，<code>dp[i][j]</code>表示<code>[0,i]</code>区间的<code>t</code>和<code>[0,j]</code>区间的<code>s</code>，之间有多少个独立子序列。</p>\\n<p>设置所有<code>dp[0][i]</code>为<code>true</code>，表示当<code>t</code>为空字符串时，总是存在1个独立子序列。</p>\\n<p>当<code>s[j-1]===t[i-1]</code>，那么<code>dp[i][j]</code>就是除了当前相等的两个的序列数(<code>dp[i-1][j-1]</code>)和上一个<code>s</code>和当前<code>j</code>能匹配的序列数(<code>dp[i][j-1]</code>)。</p>\\n<p>方程为：<code>dp[i][j]=dp[i-1][j-1]+dp[i][j-1]</code></p>\\n<p>当<code>s[j-1]!==t[i-1]</code>，那么只需要将上一次<code>s</code>与当前<code>j</code>的匹配数赋值给当前<code>dp[i][j]</code>。</p>\\n<p>方程为：<code>dp[i][j]=dp[i][j-1]</code></p>\\n","content":"<p>给定一个字符串 <code>s</code><strong> </strong>和一个字符串 <code>t</code> ，计算在 <code>s</code> 的子序列中 <code>t</code> 出现的个数。</p>\\n\\n<p>字符串的一个 <strong>子序列</strong> 是指，通过删除一些（也可以不删除）字符且不干扰剩余字符相对位置所组成的新字符串。（例如，<code>\\"ACE\\"</code> 是 <code>\\"ABCDE\\"</code> 的一个子序列，而 <code>\\"AEC\\"</code> 不是）</p>\\n\\n<p>题目数据保证答案符合 32 位带符号整数范围。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = \\"rabbbit\\", t = \\"rabbit\\"<code>\\n<strong>输出</strong></code><strong>：</strong><code>3\\n</code><strong>解释：</strong>\\n如下图所示, 有 3 种可以从 s 中得到 <code>\\"rabbit\\" 的方案</code>。\\n<code><strong><u>rabb</u></strong>b<strong><u>it</u></strong></code>\\n<code><strong><u>ra</u></strong>b<strong><u>bbit</u></strong></code>\\n<code><strong><u>rab</u></strong>b<strong><u>bit</u></strong></code></pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = \\"babgbag\\", t = \\"bag\\"\\n<code><strong>输出</strong></code><strong>：</strong><code>5\\n</code><strong>解释：</strong>\\n如下图所示, 有 5 种可以从 s 中得到 <code>\\"bag\\" 的方案</code>。 \\n<code><strong><u>ba</u></strong>b<u><strong>g</strong></u>bag</code>\\n<code><strong><u>ba</u></strong>bgba<strong><u>g</u></strong></code>\\n<code><u><strong>b</strong></u>abgb<strong><u>ag</u></strong></code>\\n<code>ba<u><strong>b</strong></u>gb<u><strong>ag</strong></u></code>\\n<code>babg<strong><u>bag</u></strong></code>\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>0 <= s.length, t.length <= 1000</code></li>\\n\\t<li><code>s</code> 和 <code>t</code> 由英文字母组成</li>\\n</ul>\\n","title":"115. 不同的子序列","relatedTags":["字符串","动态规划"],"difficult":"Hard","lang":["javascript","python"],"uniqueID":"115","slug":"115-Distinct-Subsequences"}')}}]);