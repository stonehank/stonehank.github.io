(window.webpackJsonp=window.webpackJsonp||[]).push([[538],{1336:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Solution</span><span class=\\"hljs-params\\">(object)</span>:</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">maxProduct</span><span class=\\"hljs-params\\">(self, nums)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type nums: List[int]\\n        :rtype: int\\n        \\"\\"\\"</span>\\n        N=len(nums)\\n        maxP,minP=<span class=\\"hljs-number\\">1</span>,<span class=\\"hljs-number\\">1</span>\\n        res=float(<span class=\\"hljs-string\\">\'-inf\'</span>)\\n        \\n        <span class=\\"hljs-keyword\\">for</span> num <span class=\\"hljs-keyword\\">in</span> nums:\\n          \\n          <span class=\\"hljs-comment\\"># if num==0:</span>\\n          <span class=\\"hljs-comment\\">#   maxP,minP=1,1</span>\\n          <span class=\\"hljs-comment\\">#   res=max(res,0)</span>\\n          <span class=\\"hljs-comment\\">#   continue</span>\\n          curmaxP=maxP*num\\n          curminP=minP*num\\n          maxP=max(curmaxP,curminP,num)\\n          minP=min(curmaxP,curminP,num)\\n          res=max(res,maxP)\\n          \\n        <span class=\\"hljs-keyword\\">return</span> res\\n        \\n        \\n</code></pre>\\n"],"querySlug":"maximum-product-subarray","created_at":"2019-03-01","timeArr":[2019,2,1,11,55,44,0],"hasThinking":false,"content":"<p>给你一个整数数组 <code>nums</code>&nbsp;，请你找出数组中乘积最大的连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1:</strong></p>\\n\\n<pre><strong>输入:</strong> [2,3,-2,4]\\n<strong>输出:</strong> <code>6</code>\\n<strong>解释:</strong>&nbsp;子数组 [2,3] 有最大乘积 6。\\n</pre>\\n\\n<p><strong>示例 2:</strong></p>\\n\\n<pre><strong>输入:</strong> [-2,0,-1]\\n<strong>输出:</strong> 0\\n<strong>解释:</strong>&nbsp;结果不能为 2, 因为 [-2,-1] 不是子数组。</pre>\\n","title":"152. 乘积最大子数组","relatedTags":["数组","动态规划"],"difficult":"Middle","lang":["python"],"uniqueID":"152","slug":"152-Maximum-Product-Subarray"}')}}]);