(window.webpackJsonp=window.webpackJsonp||[]).push([[177],{659:function(n){n.exports=JSON.parse('{"content":"<p>一些JS基础(4)</p>\\n<h4 id=\\"an-zhi-chuan-di-he-an-yin-yong-chuan-di\\">按值传递和按引用传递</h4>\\n<p>按值传递的例子：</p>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">passByValue</span>(<span class=\\"hljs-params\\">x</span>)</span>{\\n  x=<span class=\\"hljs-number\\">999</span>\\n}\\n<span class=\\"hljs-keyword\\">var</span> a=<span class=\\"hljs-number\\">5</span>;\\n<span class=\\"hljs-keyword\\">var</span> b={<span class=\\"hljs-attr\\">a</span>:<span class=\\"hljs-number\\">1</span>}\\npassByValue(a);\\npassByValue(b)\\na   <span class=\\"hljs-comment\\">// 5</span>\\nb   <span class=\\"hljs-comment\\">// {a:1}</span></code></pre></code></pre>\\n<p>按引用传递的例子(虚构)：</p>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">passByReference</span>(<span class=\\"hljs-params\\">x</span>)</span>{\\n  x=<span class=\\"hljs-number\\">999</span>\\n}\\n<span class=\\"hljs-keyword\\">var</span> a=<span class=\\"hljs-number\\">5</span>;\\n<span class=\\"hljs-keyword\\">var</span> b={<span class=\\"hljs-attr\\">a</span>:<span class=\\"hljs-number\\">1</span>}\\npassByReference(a);\\npassByReference(b)\\na   <span class=\\"hljs-comment\\">// 999</span>\\nb   <span class=\\"hljs-comment\\">// 999</span></code></pre></code></pre>\\n<h4 id=\\"jsonstringify\\">JSON.stringify()</h4>\\n<p>支持转换安全的JSON结构</p>\\n<p>不安全的 JSON 值：</p>\\n<p> <code>undefined</code>、 <code>function</code>、 <code>symbol</code>\\n（ES6+）和包含循环引用（对象之间相互引用，形成一个无限循环）的对象都不符合 JSON\\n结构标准</p>\\n<p>那么遇到不安全JSON值怎么处理呢？有2种方法</p>\\n<p>一、</p>\\n<p>使用<code>toJSON</code>，如果对象内部用<code>toJSON</code>方法，<code>JSON.stringify</code>的时候回首先执行<code>toJSON</code>，\\n再对其返回值进行处理</p>\\n<p>例如：</p>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-keyword\\">var</span> a={<span class=\\"hljs-attr\\">x</span>:<span class=\\"hljs-number\\">1</span>,<span class=\\"hljs-attr\\">y</span>:<span class=\\"hljs-number\\">2</span>}\\n<span class=\\"hljs-built_in\\">Object</span>.setPrototypeOf(a,{<span class=\\"hljs-attr\\">z</span>:<span class=\\"hljs-number\\">3</span>})\\n<span class=\\"hljs-built_in\\">JSON</span>.stringify(a)   <span class=\\"hljs-comment\\">// \\"{\\"x\\":1,\\"y\\":2}\\"</span>\\n\\na.toJSON=<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>)</span>{\\n  <span class=\\"hljs-comment\\">// 注意：返回的是对象，不是字符串</span>\\n  <span class=\\"hljs-keyword\\">return</span> {<span class=\\"hljs-attr\\">z</span>:<span class=\\"hljs-keyword\\">this</span>.z}\\n}\\n<span class=\\"hljs-built_in\\">JSON</span>.stringify(a)   <span class=\\"hljs-comment\\">// \\"{\\"z\\":3}\\"</span></code></pre></code></pre>\\n<p>二、</p>\\n<p>使用参数，<code>JSON.stringify</code>还有第二和第三个参数</p>\\n<ul>\\n<li>第二个参数<code>replace</code></li>\\n</ul>\\n<p>为数组时，表示需要进行字符串化的对象</p>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-keyword\\">var</span> a={<span class=\\"hljs-attr\\">x</span>:<span class=\\"hljs-number\\">1</span>,<span class=\\"hljs-attr\\">y</span>:<span class=\\"hljs-number\\">2</span>,<span class=\\"hljs-attr\\">z</span>:<span class=\\"hljs-number\\">3</span>}\\n<span class=\\"hljs-built_in\\">JSON</span>.stringify(a,[<span class=\\"hljs-string\\">\\"x\\"</span>,<span class=\\"hljs-string\\">\\"z\\"</span>])   <span class=\\"hljs-comment\\">// \\"{\\"x\\":1,\\"z\\":3}\\"</span></code></pre></code></pre>\\n<p>为函数时，接受2个参数(k,v)，k表示每一个键值对对应的key，v表示对应的value，\\n<strong><em>遇到value也为可遍历对象时，递归遍历</em></strong></p>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-keyword\\">var</span> a={<span class=\\"hljs-attr\\">x</span>:<span class=\\"hljs-number\\">1</span>,<span class=\\"hljs-attr\\">y</span>:<span class=\\"hljs-number\\">2</span>,<span class=\\"hljs-attr\\">z</span>:{<span class=\\"hljs-attr\\">x</span>:<span class=\\"hljs-number\\">3</span>,<span class=\\"hljs-attr\\">y</span>:<span class=\\"hljs-number\\">4</span>,<span class=\\"hljs-attr\\">z</span>:<span class=\\"hljs-number\\">5</span>}}\\n<span class=\\"hljs-built_in\\">JSON</span>.stringify(a,<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">k,v</span>)</span>{\\n  <span class=\\"hljs-keyword\\">if</span>(k!==<span class=\\"hljs-string\\">\'y\'</span>){\\n    <span class=\\"hljs-keyword\\">return</span> v\\n  }\\n})\\n<span class=\\"hljs-comment\\">// \\"{\\"x\\":1,\\"z\\":{\\"x\\":3,\\"z\\":5}}\\"</span>\\n<span class=\\"hljs-comment\\">// z里面的y也被去除</span></code></pre></code></pre>\\n<ul>\\n<li>第三个参数<code>space</code></li>\\n</ul>\\n<p>可以是正整数或者字符串，指定输出的缩进格式</p>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">// 正整数</span>\\n<span class=\\"hljs-keyword\\">var</span> a={<span class=\\"hljs-attr\\">x</span>:<span class=\\"hljs-number\\">1</span>,<span class=\\"hljs-attr\\">y</span>:<span class=\\"hljs-number\\">2</span>,<span class=\\"hljs-attr\\">z</span>:{<span class=\\"hljs-attr\\">x</span>:<span class=\\"hljs-number\\">3</span>,<span class=\\"hljs-attr\\">y</span>:<span class=\\"hljs-number\\">4</span>,<span class=\\"hljs-attr\\">z</span>:<span class=\\"hljs-number\\">5</span>}}\\n<span class=\\"hljs-built_in\\">JSON</span>.stringify(a,<span class=\\"hljs-literal\\">null</span>,<span class=\\"hljs-number\\">2</span>)  <span class=\\"hljs-comment\\">// 2格缩进</span>\\n<span class=\\"hljs-comment\\">/*\\n\\"{\\n  \\"x\\": 1,\\n  \\"y\\": 2,\\n  \\"z\\": {\\n    \\"x\\": 3,\\n    \\"y\\": 4,\\n    \\"z\\": 5\\n  }\\n}\\"\\n*/</span>\\n\\n<span class=\\"hljs-comment\\">// 字符串</span>\\n<span class=\\"hljs-keyword\\">var</span> a={<span class=\\"hljs-attr\\">x</span>:<span class=\\"hljs-number\\">1</span>,<span class=\\"hljs-attr\\">y</span>:<span class=\\"hljs-number\\">2</span>,<span class=\\"hljs-attr\\">z</span>:{<span class=\\"hljs-attr\\">x</span>:<span class=\\"hljs-number\\">3</span>,<span class=\\"hljs-attr\\">y</span>:<span class=\\"hljs-number\\">4</span>,<span class=\\"hljs-attr\\">z</span>:<span class=\\"hljs-number\\">5</span>}}\\n<span class=\\"hljs-built_in\\">JSON</span>.stringify(a,<span class=\\"hljs-literal\\">null</span>,<span class=\\"hljs-string\\">\\"--\\"</span>)  <span class=\\"hljs-comment\\">// 2个-缩进</span>\\n<span class=\\"hljs-comment\\">/*\\n\\"{\\n--\\"x\\": 1,\\n--\\"y\\": 2,\\n--\\"z\\": {\\n----\\"x\\": 3,\\n----\\"y\\": 4,\\n----\\"z\\": 5\\n--}\\n}\\"\\n*/</span></code></pre></code></pre>\\n","toc":[{"anchor":"an-zhi-chuan-di-he-an-yin-yong-chuan-di","level":4,"text":"按值传递和按引用传递"},{"anchor":"jsonstringify","level":4,"text":"JSON.stringify()"}],"relatedTags":null,"created_at":"2018-07-09","timeArr":[2018,6,9,0,0,0,0],"title":"一些被忽略的JS知识4","uuid":"fd8492b29dfac9fa4e50c5b2b4926048c19a0553","summary":"<p>一些JS基础(4)</p>\\n<h4>按值传递和按引用传递</h4>\\n<p>按值传递的例子：</p>\\n<pre class=\\"hljs\\"><code><span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">passByValue</span>(<span class=\\"hljs-params\\">x</span>)</span>{\\n  x=<span class=\\"hljs-number\\">999</span>\\n}\\n<span class=\\"hljs-keyword\\">var</span> a=<span class=\\"hljs-number\\">5</span>;\\n<span class=\\"hljs-keyword\\">var</span> b={<span class=\\"hljs-attr\\">a</span>:<span class=\\"hljs-number\\">1</span>}\\npassByValue(a);\\npassByValue(b)\\na   <span class=\\"hljs-comment\\">// 5</span>\\nb   <span class=\\"hljs-comment\\">// {a:1}</span>\\n</code></pre>\\n<p>按引用传...</p>","slug":"yi-xie-bei-hu-lve-de-JS-zhi-shi-4","sha":"340d5e43659ef754ccb360908ba8d5206f671aab"}')}}]);