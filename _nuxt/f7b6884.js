(window.webpackJsonp=window.webpackJsonp||[]).push([[1320],{2118:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\"># Definition for a binary tree node.</span>\\n<span class=\\"hljs-comment\\"># class TreeNode(object):</span>\\n<span class=\\"hljs-comment\\">#     def __init__(self, x):</span>\\n<span class=\\"hljs-comment\\">#         self.val = x</span>\\n<span class=\\"hljs-comment\\">#         self.left = None</span>\\n<span class=\\"hljs-comment\\">#         self.right = None</span>\\n\\n<span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Solution</span><span class=\\"hljs-params\\">(object)</span>:</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">generateTrees</span><span class=\\"hljs-params\\">(self, n)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type n: int\\n        :rtype: List[TreeNode]\\n        \\"\\"\\"</span>\\n        <span class=\\"hljs-keyword\\">if</span> n==<span class=\\"hljs-number\\">0</span>:<span class=\\"hljs-keyword\\">return</span> []\\n        <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">createTree</span><span class=\\"hljs-params\\">(lo,hi)</span>:</span>\\n          <span class=\\"hljs-keyword\\">if</span> lo&gt;hi:\\n            <span class=\\"hljs-keyword\\">return</span> [<span class=\\"hljs-literal\\">None</span>]\\n          <span class=\\"hljs-keyword\\">if</span> lo==hi:\\n            <span class=\\"hljs-keyword\\">return</span> [TreeNode(lo)]\\n          ans=[]\\n          <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(lo,hi+<span class=\\"hljs-number\\">1</span>):\\n            left=createTree(lo,i<span class=\\"hljs-number\\">-1</span>)\\n            right=createTree(i+<span class=\\"hljs-number\\">1</span>,hi)\\n            <span class=\\"hljs-keyword\\">for</span> j <span class=\\"hljs-keyword\\">in</span> range(len(left)):\\n              <span class=\\"hljs-keyword\\">for</span> k <span class=\\"hljs-keyword\\">in</span> range(len(right)):\\n                root=TreeNode(i)\\n                root.left=left[j]\\n                root.right=right[k]\\n                ans.append(root)\\n          <span class=\\"hljs-keyword\\">return</span> ans\\n        <span class=\\"hljs-keyword\\">return</span> createTree(<span class=\\"hljs-number\\">1</span>,n)\\n</code></pre>\\n"],"querySlug":"unique-binary-search-trees-ii","created_at":"2019-02-28","timeArr":[2019,1,28,16,29,53,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p><code>分而治之</code>的思想，例如<code>[1,5]</code>这一段，根据<code>BST</code>的性质，可以分割成如下：</p>\\n<pre class=\\"hljs\\"><code>   左   root   右\\n  null   1    [2,5]\\n  [1,1]  2    [3,5]\\n  [1,2]  3    [4,5]\\n  [1,3]  4    [5,5]\\n  [1,4]  5    null\\n</code></pre>\\n<p>上面的<code>左</code>和<code>右</code>又可以按照同样的规则继续划分。</p>\\n","content":"<p>给你一个整数 <code>n</code> ，请你生成并返回所有由 <code>n</code> 个节点组成且节点值从 <code>1</code> 到 <code>n</code> 互不相同的不同 <strong>二叉搜索树</strong><em> </em>。可以按 <strong>任意顺序</strong> 返回答案。</p>\\n\\n<p> </p>\\n\\n<div class=\\"original__bRMd\\">\\n<div>\\n<p><strong>示例 1：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2021/01/18/uniquebstn3.jpg\\" style=\\"width: 600px; height: 148px;\\" />\\n<pre>\\n<strong>输入：</strong>n = 3\\n<strong>输出：</strong>[[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>n = 1\\n<strong>输出：</strong>[[1]]\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= n <= 8</code></li>\\n</ul>\\n</div>\\n</div>\\n","title":"95. 不同的二叉搜索树 II","relatedTags":["树","二叉搜索树","动态规划","回溯","二叉树"],"difficult":"Middle","lang":["python"],"uniqueID":"95","slug":"95-Unique-Binary-Search-Trees-II"}')}}]);