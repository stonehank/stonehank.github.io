(window.webpackJsonp=window.webpackJsonp||[]).push([[585],{1383:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">n</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> countVowelStrings = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">n</span>) </span>{\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">resolve</span>(<span class=\\"hljs-params\\">n</span>)</span>{\\n        <span class=\\"hljs-keyword\\">if</span>(n===<span class=\\"hljs-number\\">1</span>)<span class=\\"hljs-keyword\\">return</span> [<span class=\\"hljs-number\\">1</span>,<span class=\\"hljs-number\\">1</span>,<span class=\\"hljs-number\\">1</span>,<span class=\\"hljs-number\\">1</span>,<span class=\\"hljs-number\\">1</span>]\\n        <span class=\\"hljs-keyword\\">let</span> [a,e,i,o,u]=resolve(n<span class=\\"hljs-number\\">-1</span>)\\n        <span class=\\"hljs-keyword\\">return</span> [a,e+a,i+a+e,o+a+e+i,u+a+e+i+o]\\n    }\\n    <span class=\\"hljs-keyword\\">let</span> arr= resolve(n)\\n    <span class=\\"hljs-keyword\\">return</span> arr.reduce(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">a,b</span>)=&gt;</span>a+b)\\n};\\n</code></pre>\\n"],"querySlug":"count-sorted-vowel-strings","created_at":"2021-03-04","timeArr":[2021,2,4,8,34,47,0],"hasThinking":false,"content":"<p>给你一个整数 <code>n</code>，请返回长度为 <code>n</code> 、仅由元音 (<code>a</code>, <code>e</code>, <code>i</code>, <code>o</code>, <code>u</code>) 组成且按 <strong>字典序排列</strong> 的字符串数量。</p>\\n\\n<p>字符串 <code>s</code> 按 <strong>字典序排列</strong> 需要满足：对于所有有效的 <code>i</code>，<code>s[i]</code> 在字母表中的位置总是与 <code>s[i+1]</code> 相同或在 <code>s[i+1]</code> 之前。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>n = 1\\n<strong>输出：</strong>5\\n<strong>解释：</strong>仅由元音组成的 5 个字典序字符串为 <code>[\\"a\\",\\"e\\",\\"i\\",\\"o\\",\\"u\\"]</code>\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>n = 2\\n<strong>输出：</strong>15\\n<strong>解释：</strong>仅由元音组成的 15 个字典序字符串为\\n[\\"aa\\",\\"ae\\",\\"ai\\",\\"ao\\",\\"au\\",\\"ee\\",\\"ei\\",\\"eo\\",\\"eu\\",\\"ii\\",\\"io\\",\\"iu\\",\\"oo\\",\\"ou\\",\\"uu\\"]\\n注意，\\"ea\\" 不是符合题意的字符串，因为 \'e\' 在字母表中的位置比 \'a\' 靠后\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>n = 33\\n<strong>输出：</strong>66045\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= n <= 50</code> </li>\\n</ul>\\n","title":"1641. 统计字典序元音字符串的数目","relatedTags":["动态规划"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1641","slug":"1641-Count-Sorted-Vowel-Strings"}')}}]);