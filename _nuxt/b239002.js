(window.webpackJsonp=window.webpackJsonp||[]).push([[595],{1393:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">nums</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">x</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> minOperations = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">nums, x</span>) </span>{\\n    <span class=\\"hljs-keyword\\">let</span> sum=nums.reduce(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">a,b</span>)=&gt;</span>a+b)\\n    <span class=\\"hljs-keyword\\">let</span> target=sum-x\\n    <span class=\\"hljs-keyword\\">if</span>(target&lt;<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">-1</span>\\n    <span class=\\"hljs-keyword\\">let</span> l=<span class=\\"hljs-number\\">0</span>,r=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">let</span> len=nums.length\\n    <span class=\\"hljs-keyword\\">let</span> currentSum=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">let</span> step=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-literal\\">Infinity</span>\\n    <span class=\\"hljs-keyword\\">while</span>(l&lt;len){\\n        <span class=\\"hljs-keyword\\">if</span>(r&lt;len){\\n            currentSum+=nums[r++]\\n        }\\n        <span class=\\"hljs-keyword\\">while</span>(currentSum&gt;target &amp;&amp; l&lt;len ){\\n            currentSum-=nums[l++]\\n        }\\n        <span class=\\"hljs-keyword\\">if</span>(currentSum===target){\\n            <span class=\\"hljs-comment\\">// console.log(l,r)</span>\\n            res=<span class=\\"hljs-built_in\\">Math</span>.min(res,len-(r-l))\\n        }\\n        <span class=\\"hljs-keyword\\">if</span>(r===len){\\n            l++\\n        }\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> res===<span class=\\"hljs-literal\\">Infinity</span> ? <span class=\\"hljs-number\\">-1</span> : res\\n};\\n</code></pre>\\n"],"querySlug":"minimum-operations-to-reduce-x-to-zero","created_at":"2020-11-22","timeArr":[2020,10,22,11,21,10,0],"hasThinking":false,"content":"<p>给你一个整数数组 <code>nums</code> 和一个整数 <code>x</code> 。每一次操作时，你应当移除数组 <code>nums</code> 最左边或最右边的元素，然后从 <code>x</code> 中减去该元素的值。请注意，需要 <strong>修改</strong> 数组以供接下来的操作使用。</p>\\n\\n<p>如果可以将 <code>x</code> <strong>恰好</strong> 减到 <code>0</code> ，返回<strong> 最小操作数 </strong>；否则，返回 <code>-1</code> 。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [1,1,4,2,3], x = 5\\n<strong>输出：</strong>2\\n<strong>解释：</strong>最佳解决方案是移除后两个元素，将 x 减到 0 。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [5,6,7,8,9], x = 4\\n<strong>输出：</strong>-1\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [3,2,20,1,1,3], x = 10\\n<strong>输出：</strong>5\\n<strong>解释：</strong>最佳解决方案是移除后三个元素和前两个元素（总共 5 次操作），将 x 减到 0 。\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= nums.length <= 10<sup>5</sup></code></li>\\n\\t<li><code>1 <= nums[i] <= 10<sup>4</sup></code></li>\\n\\t<li><code>1 <= x <= 10<sup>9</sup></code></li>\\n</ul>\\n","title":"1658. 将 x 减到 0 的最小操作数","relatedTags":["数组","哈希表","双指针","二分查找","前缀和"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1658","slug":"1658-Minimum-Operations-to-Reduce-X-to-Zero"}')}}]);