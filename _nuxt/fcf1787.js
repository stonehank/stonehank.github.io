(window.webpackJsonp=window.webpackJsonp||[]).push([[574],{1372:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">big</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">medium</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">small</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> ParkingSystem = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">big, medium, small</span>) </span>{\\n    <span class=\\"hljs-keyword\\">this</span>.carSpot=[<span class=\\"hljs-literal\\">null</span>,big,medium,small]\\n};\\n\\n<span class=\\"hljs-comment\\">/** \\n * @param {number} carType\\n * @return {boolean}\\n */</span>\\nParkingSystem.prototype.addCar = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">carType</span>) </span>{\\n    <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-keyword\\">this</span>.carSpot[carType]===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n    <span class=\\"hljs-keyword\\">this</span>.carSpot[carType]--\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n};\\n\\n<span class=\\"hljs-comment\\">/**\\n * Your ParkingSystem object will be instantiated and called as such:\\n * var obj = new ParkingSystem(big, medium, small)\\n * var param_1 = obj.addCar(carType)\\n */</span>\\n</code></pre>\\n"],"querySlug":"design-parking-system","created_at":"2021-03-19","timeArr":[2021,2,19,7,8,9,0],"hasThinking":false,"content":"<p>请你给一个停车场设计一个停车系统。停车场总共有三种不同大小的车位：大，中和小，每种尺寸分别有固定数目的车位。</p>\\n\\n<p>请你实现 <code>ParkingSystem</code> 类：</p>\\n\\n<ul>\\n\\t<li><code>ParkingSystem(int big, int medium, int small)</code> 初始化 <code>ParkingSystem</code> 类，三个参数分别对应每种停车位的数目。</li>\\n\\t<li><code>bool addCar(int carType)</code> 检查是否有 <code>carType</code> 对应的停车位。 <code>carType</code> 有三种类型：大，中，小，分别用数字 <code>1</code>， <code>2</code> 和 <code>3</code> 表示。<strong>一辆车只能停在</strong> <strong> </strong><code>carType</code> 对应尺寸的停车位中。如果没有空车位，请返回 <code>false</code> ，否则将该车停入车位并返回 <code>true</code> 。</li>\\n</ul>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>\\n[\\"ParkingSystem\\", \\"addCar\\", \\"addCar\\", \\"addCar\\", \\"addCar\\"]\\n[[1, 1, 0], [1], [2], [3], [1]]\\n<strong>输出：</strong>\\n[null, true, true, false, false]\\n\\n<strong>解释：</strong>\\nParkingSystem parkingSystem = new ParkingSystem(1, 1, 0);\\nparkingSystem.addCar(1); // 返回 true ，因为有 1 个空的大车位\\nparkingSystem.addCar(2); // 返回 true ，因为有 1 个空的中车位\\nparkingSystem.addCar(3); // 返回 false ，因为没有空的小车位\\nparkingSystem.addCar(1); // 返回 false ，因为没有空的大车位，唯一一个大车位已经被占据了\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>0 <= big, medium, small <= 1000</code></li>\\n\\t<li><code>carType</code> 取值为 <code>1</code>， <code>2</code> 或 <code>3</code></li>\\n\\t<li>最多会调用 <code>addCar</code> 函数 <code>1000</code> 次</li>\\n</ul>\\n","title":"1603. 设计停车系统","relatedTags":["设计","计数","模拟"],"difficult":"Easy","lang":["javascript"],"uniqueID":"1603","slug":"1603-Design-Parking-System"}')}}]);