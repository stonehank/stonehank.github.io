(window.webpackJsonp=window.webpackJsonp||[]).push([[407],{1205:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">s</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{string[][]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> partition = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">s</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> res=[]\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">isP</span>(<span class=\\"hljs-params\\">str</span>)</span>{\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;str.length/<span class=\\"hljs-number\\">2</span>;i++){\\n      <span class=\\"hljs-keyword\\">if</span>(str[i]!==str[str.length<span class=\\"hljs-number\\">-1</span>-i])<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n  }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">backtrack</span>(<span class=\\"hljs-params\\">i,arr</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(isP(arr[arr.length<span class=\\"hljs-number\\">-1</span>])){\\n      <span class=\\"hljs-keyword\\">if</span>(i===s.length)<span class=\\"hljs-keyword\\">return</span> res.push(arr.slice())\\n      arr.push(s[i])\\n      backtrack(i+<span class=\\"hljs-number\\">1</span>,arr)\\n      arr.pop()\\n    }\\n    <span class=\\"hljs-keyword\\">if</span>(i===s.length)<span class=\\"hljs-keyword\\">return</span>\\n    <span class=\\"hljs-keyword\\">let</span> last=arr[arr.length<span class=\\"hljs-number\\">-1</span>]\\n    arr[arr.length<span class=\\"hljs-number\\">-1</span>]=last+s[i]\\n    backtrack(i+<span class=\\"hljs-number\\">1</span>,arr)\\n    arr[arr.length<span class=\\"hljs-number\\">-1</span>]=last\\n  }\\n  backtrack(<span class=\\"hljs-number\\">1</span>,[s[<span class=\\"hljs-number\\">0</span>]])\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"palindrome-partitioning","created_at":"2019-04-18","timeArr":[2019,3,18,13,9,40,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>回溯，<code>start</code>为从当前哪个索引开始，检测以<code>start</code>为开头的每一个子字符串，如果存在回文字符串，就添加到<code>arr</code>中，直到<code>start===s.length</code>，\\n说明当前<code>arr</code>为其中一个解，添加到结果<code>result</code>中。</p>\\n","content":"<p>给你一个字符串 <code>s</code>，请你将<em> </em><code>s</code><em> </em>分割成一些子串，使每个子串都是 <strong>回文串</strong> 。返回 <code>s</code> 所有可能的分割方案。</p>\\n\\n<p><strong>回文串</strong> 是正着读和反着读都一样的字符串。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = \\"aab\\"\\n<strong>输出：</strong>[[\\"a\\",\\"a\\",\\"b\\"],[\\"aa\\",\\"b\\"]]\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = \\"a\\"\\n<strong>输出：</strong>[[\\"a\\"]]\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= s.length <= 16</code></li>\\n\\t<li><code>s</code> 仅由小写英文字母组成</li>\\n</ul>\\n","title":"131. 分割回文串","relatedTags":["字符串","动态规划","回溯"],"difficult":"Middle","lang":["javascript"],"uniqueID":"131","slug":"131-Palindrome-Partitioning"}')}}]);