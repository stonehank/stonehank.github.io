(window.webpackJsonp=window.webpackJsonp||[]).push([[957],{1755:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">intervals</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[][]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> merge = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">intervals</span>) </span>{\\n  intervals.sort(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">a,b</span>)=&gt;</span>a[<span class=\\"hljs-number\\">0</span>]===b[<span class=\\"hljs-number\\">0</span>]?a[<span class=\\"hljs-number\\">1</span>]-b[<span class=\\"hljs-number\\">1</span>]:a[<span class=\\"hljs-number\\">0</span>]-b[<span class=\\"hljs-number\\">0</span>])\\n  <span class=\\"hljs-keyword\\">let</span> result=[]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> [x,y] <span class=\\"hljs-keyword\\">of</span> intervals){\\n    <span class=\\"hljs-keyword\\">if</span>(result.length===<span class=\\"hljs-number\\">0</span>){\\n      result.push([x,y])\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      <span class=\\"hljs-keyword\\">let</span> last=result[result.length<span class=\\"hljs-number\\">-1</span>]\\n      <span class=\\"hljs-keyword\\">if</span>(x&gt;last[<span class=\\"hljs-number\\">1</span>]){\\n        result.push([x,y])\\n      }<span class=\\"hljs-keyword\\">else</span>{\\n        last[<span class=\\"hljs-number\\">1</span>]=<span class=\\"hljs-built_in\\">Math</span>.max(last[<span class=\\"hljs-number\\">1</span>],y)\\n      }\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> result\\n};\\n</code></pre>\\n"],"querySlug":"merge-intervals","created_at":"2019-04-26","timeArr":[2019,3,26,13,57,51,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>定义一个新数组<code>result</code>，用于存放更新后的所有区间。</p>\\n<p>先按照起点排序，如果当前区间的起点和上一个区间的终点存在交集，则更新上一个区间终点的位置为当前区间终点的位置；</p>\\n<p>否则，直接<code>push</code>当前区间。</p>\\n","content":"<p>以数组 <code>intervals</code> 表示若干个区间的集合，其中单个区间为 <code>intervals[i] = [start<sub>i</sub>, end<sub>i</sub>]</code> 。请你合并所有重叠的区间，并返回一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>intervals = [[1,3],[2,6],[8,10],[15,18]]\\n<strong>输出：</strong>[[1,6],[8,10],[15,18]]\\n<strong>解释：</strong>区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>intervals = [[1,4],[4,5]]\\n<strong>输出：</strong>[[1,5]]\\n<strong>解释：</strong>区间 [1,4] 和 [4,5] 可被视为重叠区间。</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= intervals.length <= 10<sup>4</sup></code></li>\\n\\t<li><code>intervals[i].length == 2</code></li>\\n\\t<li><code>0 <= start<sub>i</sub> <= end<sub>i</sub> <= 10<sup>4</sup></code></li>\\n</ul>\\n","title":"56. 合并区间","relatedTags":["数组","排序"],"difficult":"Middle","lang":["javascript"],"uniqueID":"56","slug":"56-Merge-Intervals"}')}}]);