(window.webpackJsonp=window.webpackJsonp||[]).push([[1059],{1857:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">nums</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">k</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{boolean}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> canPartitionKSubsets = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">nums, k</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> mem={}\\n  <span class=\\"hljs-keyword\\">let</span> sum=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;nums.length;i++){\\n    sum+=nums[i]\\n    <span class=\\"hljs-keyword\\">if</span>(mem[nums[i]]==<span class=\\"hljs-literal\\">null</span>)mem[nums[i]]=<span class=\\"hljs-number\\">1</span>\\n    <span class=\\"hljs-keyword\\">else</span> mem[nums[i]]++\\n  }\\n  <span class=\\"hljs-keyword\\">if</span>(sum%k!==<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n  <span class=\\"hljs-keyword\\">let</span> initTarget=sum/k\\n\\n  <span class=\\"hljs-keyword\\">let</span> marked=<span class=\\"hljs-built_in\\">Array</span>(nums.length).fill(<span class=\\"hljs-literal\\">false</span>)\\n  \\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">check</span>(<span class=\\"hljs-params\\">target,k,start,marked</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(k===<span class=\\"hljs-number\\">1</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n    <span class=\\"hljs-keyword\\">if</span>(target===<span class=\\"hljs-number\\">0</span>){\\n      <span class=\\"hljs-keyword\\">return</span> check(initTarget,k<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">0</span>,marked)\\n    }\\n    <span class=\\"hljs-keyword\\">if</span>(target&lt;<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=start;i&lt;nums.length;i++){\\n      <span class=\\"hljs-keyword\\">if</span>(marked[i])<span class=\\"hljs-keyword\\">continue</span>\\n      <span class=\\"hljs-keyword\\">let</span> cur=nums[i]\\n      marked[i]=<span class=\\"hljs-literal\\">true</span>\\n      <span class=\\"hljs-keyword\\">if</span>(check(target-cur,k,i+<span class=\\"hljs-number\\">1</span>,marked))<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n      marked[i]=<span class=\\"hljs-literal\\">false</span>\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n  }\\n\\n  <span class=\\"hljs-keyword\\">return</span> check(initTarget,k,<span class=\\"hljs-number\\">0</span>,marked)\\n};\\n</code></pre>\\n","<pre class=\\"hljs\\"><code><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Solution</span><span class=\\"hljs-params\\">(object)</span>:</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">canPartitionKSubsets</span><span class=\\"hljs-params\\">(self, nums, k)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: bool\\n        \\"\\"\\"</span>\\n        N=len(nums)\\n        sums=sum(nums)\\n        <span class=\\"hljs-keyword\\">if</span> sums % k!=<span class=\\"hljs-number\\">0</span>:\\n          <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">False</span>\\n        initTarget=sums/k\\n        visited=[<span class=\\"hljs-literal\\">False</span>]*N\\n        <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">dfs</span><span class=\\"hljs-params\\">(target,k,start)</span>:</span>\\n          <span class=\\"hljs-keyword\\">if</span> target&lt;<span class=\\"hljs-number\\">0</span>:<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">False</span>\\n          <span class=\\"hljs-keyword\\">if</span> k==<span class=\\"hljs-number\\">1</span>:<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">True</span>\\n          <span class=\\"hljs-keyword\\">if</span> target==<span class=\\"hljs-number\\">0</span>:\\n            <span class=\\"hljs-keyword\\">return</span> dfs(initTarget,k<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">0</span>)\\n          res=<span class=\\"hljs-literal\\">False</span>\\n          <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(start,N):\\n            <span class=\\"hljs-keyword\\">if</span> visited[i]:<span class=\\"hljs-keyword\\">continue</span>\\n            visited[i]=<span class=\\"hljs-literal\\">True</span>\\n            res=dfs(target-nums[i],k,i+<span class=\\"hljs-number\\">1</span>)\\n            <span class=\\"hljs-keyword\\">if</span> res:<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">True</span>\\n            visited[i]=<span class=\\"hljs-literal\\">False</span>\\n          <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">False</span>\\n        <span class=\\"hljs-keyword\\">return</span> dfs(initTarget,k,<span class=\\"hljs-number\\">0</span>)\\n</code></pre>\\n"],"querySlug":"partition-to-k-equal-sum-subsets","hasThinking":false,"content":"<p>给定一个整数数组&nbsp;&nbsp;<code>nums</code> 和一个正整数 <code>k</code>，找出是否有可能把这个数组分成 <code>k</code> 个非空子集，其总和都相等。</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong> nums = [4, 3, 2, 3, 5, 2, 1], k = 4\\n<strong>输出：</strong> True\\n<strong>说明：</strong> 有可能将其分成 4 个子集（5），（1,4），（2,3），（2,3）等于总和。</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= k &lt;= len(nums) &lt;= 16</code></li>\\n\\t<li><code>0 &lt; nums[i] &lt; 10000</code></li>\\n</ul>\\n","title":"698. 划分为k个相等的子集","relatedTags":["位运算","记忆化搜索","数组","动态规划","回溯","状态压缩"],"difficult":"Middle","lang":["javascript","python"],"uniqueID":"698","slug":"698-Partition-to-K-Equal-Sum-Subsets"}')}}]);