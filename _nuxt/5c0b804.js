(window.webpackJsonp=window.webpackJsonp||[]).push([[1295],{2093:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Solution</span><span class=\\"hljs-params\\">(object)</span>:</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">threeEqualParts</span><span class=\\"hljs-params\\">(self, A)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type A: List[int]\\n        :rtype: List[int]\\n        \\"\\"\\"</span>\\n        N=len(A)\\n        aux=[A[<span class=\\"hljs-number\\">0</span>]]\\n        <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(<span class=\\"hljs-number\\">1</span>,N):\\n          aux.append(aux[i<span class=\\"hljs-number\\">-1</span>]+A[i])\\n        <span class=\\"hljs-keyword\\">if</span> aux[<span class=\\"hljs-number\\">-1</span>]==<span class=\\"hljs-number\\">0</span>: <span class=\\"hljs-keyword\\">return</span> [<span class=\\"hljs-number\\">0</span>,N<span class=\\"hljs-number\\">-1</span>]\\n        <span class=\\"hljs-keyword\\">if</span> aux[<span class=\\"hljs-number\\">-1</span>] % <span class=\\"hljs-number\\">3</span>!=<span class=\\"hljs-number\\">0</span>:<span class=\\"hljs-keyword\\">return</span> [<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">-1</span>]\\n        partit=aux[<span class=\\"hljs-number\\">-1</span>]/<span class=\\"hljs-number\\">3</span>\\n        l1,r1,l2,r2,l3,r3=<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">-1</span>\\n        <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(N):\\n          <span class=\\"hljs-keyword\\">if</span> l1==<span class=\\"hljs-number\\">-1</span> <span class=\\"hljs-keyword\\">and</span> aux[i]==<span class=\\"hljs-number\\">1</span>:l1=i\\n          <span class=\\"hljs-keyword\\">if</span> r1==<span class=\\"hljs-number\\">-1</span> <span class=\\"hljs-keyword\\">and</span> aux[i]==partit:r1=i+<span class=\\"hljs-number\\">1</span>\\n          <span class=\\"hljs-keyword\\">if</span> l2==<span class=\\"hljs-number\\">-1</span> <span class=\\"hljs-keyword\\">and</span> aux[i]==partit+<span class=\\"hljs-number\\">1</span>:l2=i\\n          <span class=\\"hljs-keyword\\">if</span> r2==<span class=\\"hljs-number\\">-1</span> <span class=\\"hljs-keyword\\">and</span> aux[i]==partit*<span class=\\"hljs-number\\">2</span>:r2=i+<span class=\\"hljs-number\\">1</span>\\n          <span class=\\"hljs-keyword\\">if</span> l3==<span class=\\"hljs-number\\">-1</span> <span class=\\"hljs-keyword\\">and</span> aux[i]==partit*<span class=\\"hljs-number\\">2</span>+<span class=\\"hljs-number\\">1</span>:l3=i\\n          <span class=\\"hljs-keyword\\">if</span> r3==<span class=\\"hljs-number\\">-1</span> <span class=\\"hljs-keyword\\">and</span> aux[i]==partit*<span class=\\"hljs-number\\">3</span>:r3=i+<span class=\\"hljs-number\\">1</span>\\n        <span class=\\"hljs-keyword\\">if</span> r1-l1!=r2-l2 <span class=\\"hljs-keyword\\">or</span> r1-l1!=r3-l3:<span class=\\"hljs-keyword\\">return</span> [<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">-1</span>]\\n        <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(r1-l1):\\n          <span class=\\"hljs-keyword\\">if</span> A[l1+i]!=A[l2+i] <span class=\\"hljs-keyword\\">or</span> A[l1+i]!=A[l3+i]: <span class=\\"hljs-keyword\\">return</span> [<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">-1</span>]\\n        zero3=N-r3\\n        zero2=l3-r2\\n        zero1=l2-r1\\n        <span class=\\"hljs-keyword\\">if</span> zero1&lt;zero3 <span class=\\"hljs-keyword\\">or</span> zero2&lt;zero3:<span class=\\"hljs-keyword\\">return</span>[<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">-1</span>]\\n        <span class=\\"hljs-keyword\\">return</span> [r1<span class=\\"hljs-number\\">-1</span>+zero3,r2+zero3]\\n</code></pre>\\n"],"querySlug":"three-equal-parts","created_at":"2019-02-27","timeArr":[2019,1,27,15,6,17,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>这道题我最初思路是<code>window slide</code>，通过设定2个指针，<code>left</code>和<code>right</code>，每次移动判断当前应该<code>left</code>增减还是<code>right</code>增加。</p>\\n<p>结果是<code>TLE</code>，给定的数组范围是<code>[3,30000]</code>，这道题是存在<code>O(N)</code>的解，充分利用只存在<code>0</code>和<code>1</code>这一特性。</p>\\n<p>思路：所有的<code>0</code>作为每一个字符串的开头，相当于没有</p>\\n<ol>\\n<li>因为可能存在<code>[0,0,1,0]</code>与<code>[1,0]</code>相等的情况，因此对于<code>0</code>，首先不去处理，只记录<code>1</code>的数量和1的位置。</li>\\n<li>对于所有的<code>1</code>，将数组分割成3段具有相同<code>1</code>的数量的，如果无法分割，则无解。</li>\\n<li>对于<code>[1,0,1,0,1,0]</code>这种情况，我们分割了<code>1</code>，接着处理每一段<code>1</code><strong>后面</strong>的<code>0</code>，前面的不需要处理。</li>\\n<li>对于第一段和第二段，它们后面的<code>0</code>，可以超过第三段，但不能少于第三段，这是因为如果第一段后的<code>0</code>更多，\\n可以让它接在第二段开头，如果第二段后面<code>0</code>更多，可以让它接在第三段开头，但是如果第三段后面的<code>0</code>更多，再没有能给它接的。</li>\\n</ol>\\n","content":"<p>给定一个由 <code>0</code> 和 <code>1</code> 组成的数组&nbsp;<code>A</code>，将数组分成 3&nbsp;个非空的部分，使得所有这些部分表示相同的二进制值。</p>\\n\\n<p>如果可以做到，请返回<strong>任何</strong>&nbsp;<code>[i, j]</code>，其中 <code>i+1 &lt; j</code>，这样一来：</p>\\n\\n<ul>\\n\\t<li><code>A[0], A[1], ..., A[i]</code>&nbsp;组成第一部分；</li>\\n\\t<li><code>A[i+1], A[i+2], ..., A[j-1]</code>&nbsp;作为第二部分；</li>\\n\\t<li><code>A[j], A[j+1], ..., A[A.length - 1]</code> 是第三部分。</li>\\n\\t<li>这三个部分所表示的二进制值相等。</li>\\n</ul>\\n\\n<p>如果无法做到，就返回&nbsp;<code>[-1, -1]</code>。</p>\\n\\n<p>注意，在考虑每个部分所表示的二进制时，应当将其看作一个整体。例如，<code>[1,1,0]</code>&nbsp;表示十进制中的&nbsp;<code>6</code>，而不会是&nbsp;<code>3</code>。此外，前导零也是被允许的，所以&nbsp;<code>[0,1,1]</code> 和&nbsp;<code>[1,1]</code>&nbsp;表示相同的值。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>[1,0,1,0,1]\\n<strong>输出：</strong>[0,3]\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输出：</strong>[1,1,0,1,1]\\n<strong>输出：</strong>[-1,-1]</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ol>\\n\\t<li><code>3 &lt;= A.length &lt;= 30000</code></li>\\n\\t<li><code>A[i] == 0</code>&nbsp;或&nbsp;<code>A[i] == 1</code></li>\\n</ol>\\n\\n<p>&nbsp;</p>\\n","title":"927. 三等分","relatedTags":["数组","数学"],"difficult":"Hard","lang":["python"],"uniqueID":"927","slug":"927-Three-Equal-Parts"}')}}]);