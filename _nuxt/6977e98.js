(window.webpackJsonp=window.webpackJsonp||[]).push([[236],{1034:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">A</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> longestArithSeqLength = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">A</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> aux=<span class=\\"hljs-built_in\\">Array</span>(A.length).fill().map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span>=&gt;</span><span class=\\"hljs-keyword\\">new</span> <span class=\\"hljs-built_in\\">Map</span>())\\n  <span class=\\"hljs-keyword\\">let</span> maxLen=<span class=\\"hljs-number\\">2</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">1</span>;i&lt;A.length;i++){\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;i;j++){\\n      <span class=\\"hljs-keyword\\">let</span> gap=A[i]-A[j]\\n      <span class=\\"hljs-keyword\\">if</span>(aux[j].has(gap)){\\n        aux[i].set(gap,aux[j].get(gap)+<span class=\\"hljs-number\\">1</span>)\\n      }<span class=\\"hljs-keyword\\">else</span>{\\n        aux[i].set(gap,<span class=\\"hljs-number\\">2</span>)\\n      }\\n      maxLen=<span class=\\"hljs-built_in\\">Math</span>.max(maxLen,aux[i].get(gap))\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> maxLen\\n};\\n</code></pre>\\n"],"querySlug":"longest-arithmetic-subsequence","created_at":"2019-05-15","timeArr":[2019,4,15,14,43,14,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p><code>DP</code>，建立一个<code>aux</code>，作用是保存每一个索引上和之前的数存在的差距。</p>\\n<p>遍历<code>A</code>，对每一个<code>A[i]</code>，找出它和它前面每一个<code>A[j]</code>的差距<code>gap</code>，如果<code>aux[j]</code>上存在这个<code>gap</code>，那么<code>aux[i][gap]=aux[j][gap]+1</code>。</p>\\n<p>如果<code>aux[j]</code>不存在<code>gap</code>，那么将<code>aux[i][gap]=2</code>，即设置为一个新的等差序列。</p>\\n","content":"<p>给定一个整数数组&nbsp;<code>A</code>，返回 <code>A</code>&nbsp;中最长等差子序列的<strong>长度</strong>。</p>\\n\\n<p>回想一下，<code>A</code>&nbsp;的子序列是列表&nbsp;<code>A[i_1], A[i_2], ..., A[i_k]</code> 其中&nbsp;<code>0 &lt;= i_1 &lt; i_2 &lt; ... &lt; i_k &lt;= A.length - 1</code>。并且如果&nbsp;<code>B[i+1] - B[i]</code>(&nbsp;<code>0 &lt;= i &lt; B.length - 1</code>) 的值都相同，那么序列&nbsp;<code>B</code>&nbsp;是等差的。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>[3,6,9,12]\\n<strong>输出：</strong>4\\n<strong>解释： </strong>\\n整个数组是公差为 3 的等差数列。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>[9,4,7,2,10]\\n<strong>输出：</strong>3\\n<strong>解释：</strong>\\n最长的等差子序列是 [4,7,10]。\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>[20,1,15,3,10,5,8]\\n<strong>输出：</strong>4\\n<strong>解释：</strong>\\n最长的等差子序列是 [20,15,10,5]。\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ol>\\n\\t<li><code>2 &lt;= A.length &lt;= 2000</code></li>\\n\\t<li><code>0 &lt;= A[i] &lt;= 10000</code></li>\\n</ol>\\n","title":"1027. 最长等差数列","relatedTags":["数组","哈希表","二分查找","动态规划"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1027","slug":"1027-Longest-Arithmetic-Subsequence"}')}}]);