(window.webpackJsonp=window.webpackJsonp||[]).push([[861],{1659:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">points</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> findMinArrowShots = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">points</span>) </span>{\\n  <span class=\\"hljs-comment\\">// if(points.length===0)return 0</span>\\n  points.sort(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">a,b</span>)=&gt;</span>a[<span class=\\"hljs-number\\">0</span>]===b[<span class=\\"hljs-number\\">0</span>]?a[<span class=\\"hljs-number\\">1</span>]-b[<span class=\\"hljs-number\\">1</span>]:a[<span class=\\"hljs-number\\">0</span>]-b[<span class=\\"hljs-number\\">0</span>])  \\n  <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-number\\">0</span>,itv=[<span class=\\"hljs-literal\\">Infinity</span>,-<span class=\\"hljs-literal\\">Infinity</span>]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;points.length;i++){\\n    itv[<span class=\\"hljs-number\\">0</span>]=<span class=\\"hljs-built_in\\">Math</span>.max(points[i][<span class=\\"hljs-number\\">0</span>],itv[<span class=\\"hljs-number\\">0</span>])\\n    itv[<span class=\\"hljs-number\\">1</span>]=<span class=\\"hljs-built_in\\">Math</span>.min(points[i][<span class=\\"hljs-number\\">1</span>],itv[<span class=\\"hljs-number\\">1</span>])\\n    <span class=\\"hljs-keyword\\">if</span>(itv[<span class=\\"hljs-number\\">0</span>]&gt;itv[<span class=\\"hljs-number\\">1</span>]){\\n      res++\\n      itv[<span class=\\"hljs-number\\">0</span>]=points[i][<span class=\\"hljs-number\\">0</span>]\\n      itv[<span class=\\"hljs-number\\">1</span>]=points[i][<span class=\\"hljs-number\\">1</span>]\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"minimum-number-of-arrows-to-burst-balloons","created_at":"2019-04-13","timeArr":[2019,3,13,16,13,36,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>对这道题的解法，就是对每一个气球，尽量找到更多的能与它存在相交的气球。</p>\\n<p>首先对<code>points</code>排序，按照索引<code>0</code>的升序排序，如果相等则按照索引<code>1</code>的升序排序。</p>\\n<p>这么排序的好处是能让每一个气球尽快的找到能与它存在交集的气球。</p>\\n<p>遍历<code>points</code>，对每一个<code>points[i]</code>，查看是否与上一次的交集<code>itv</code>也存在交集，存在则更新<code>itv</code>，\\n不存在则说明无法一箭同时穿过这两个气球，那么箭数量加一<code>res++</code>，并且重置<code>itv</code>为当前气球的范围，继续遍历检查下一个。</p>\\n","content":"<p>在二维空间中有许多球形的气球。对于每个气球，提供的输入是水平方向上，气球直径的开始和结束坐标。由于它是水平的，所以纵坐标并不重要，因此只要知道开始和结束的横坐标就足够了。开始坐标总是小于结束坐标。</p>\\n\\n<p>一支弓箭可以沿着 x 轴从不同点完全垂直地射出。在坐标 x 处射出一支箭，若有一个气球的直径的开始和结束坐标为 <code>x</code><sub><code>start</code>，</sub><code>x</code><sub><code>end</code>，</sub> 且满足  <code>x<sub>start</sub> ≤ x ≤ x</code><sub><code>end</code>，</sub>则该气球会被引爆<sub>。</sub>可以射出的弓箭的数量没有限制。 弓箭一旦被射出之后，可以无限地前进。我们想找到使得所有气球全部被引爆，所需的弓箭的最小数量。</p>\\n\\n<p>给你一个数组 <code>points</code> ，其中 <code>points [i] = [x<sub>start</sub>,x<sub>end</sub>]</code> ，返回引爆所有气球所必须射出的最小弓箭数。</p>\\n \\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>points = [[10,16],[2,8],[1,6],[7,12]]\\n<strong>输出：</strong>2\\n<strong>解释：</strong>对于该样例，x = 6 可以射爆 [2,8],[1,6] 两个气球，以及 x = 11 射爆另外两个气球</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>points = [[1,2],[3,4],[5,6],[7,8]]\\n<strong>输出：</strong>4\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>points = [[1,2],[2,3],[3,4],[4,5]]\\n<strong>输出：</strong>2\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>points = [[1,2]]\\n<strong>输出：</strong>1\\n</pre>\\n\\n<p><strong>示例 5：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>points = [[2,3],[2,3]]\\n<strong>输出：</strong>1\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= points.length <= 10<sup>4</sup></code></li>\\n\\t<li><code>points[i].length == 2</code></li>\\n\\t<li><code>-2<sup>31</sup> <= x<sub>start</sub> < x<sub>end</sub> <= 2<sup>31</sup> - 1</code></li>\\n</ul>\\n","title":"452. 用最少数量的箭引爆气球","relatedTags":["贪心","数组","排序"],"difficult":"Middle","lang":["javascript"],"uniqueID":"452","slug":"452-Minimum-Number-of-Arrows-to-Burst-Balloons"}')}}]);