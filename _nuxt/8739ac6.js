(window.webpackJsonp=window.webpackJsonp||[]).push([[335],{1133:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">s</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">queries</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{boolean[]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> canMakePaliQueries = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">s, queries</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> res=[]\\n  <span class=\\"hljs-keyword\\">let</span> cache=<span class=\\"hljs-built_in\\">Array</span>(<span class=\\"hljs-number\\">26</span>).fill(<span class=\\"hljs-number\\">0</span>)\\n  <span class=\\"hljs-keyword\\">let</span> prefixC=[cache]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">1</span>;i&lt;=s.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> code=s.charCodeAt(i<span class=\\"hljs-number\\">-1</span>)<span class=\\"hljs-number\\">-97</span>\\n    <span class=\\"hljs-keyword\\">let</span> preC=prefixC[i<span class=\\"hljs-number\\">-1</span>]\\n    <span class=\\"hljs-keyword\\">let</span> curCache=preC.slice()\\n    curCache[code]++\\n    prefixC[i]=curCache\\n    \\n  }\\n  <span class=\\"hljs-built_in\\">console</span>.log(prefixC)\\n  \\n  \\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;queries.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> [<span class=\\"hljs-keyword\\">from</span>,to,k]=queries[i]\\n    <span class=\\"hljs-keyword\\">let</span> str=s.slice(<span class=\\"hljs-keyword\\">from</span>,to+<span class=\\"hljs-number\\">1</span>)\\n    <span class=\\"hljs-keyword\\">let</span> needPair=<span class=\\"hljs-built_in\\">Math</span>.floor(str.length/<span class=\\"hljs-number\\">2</span>)\\n    <span class=\\"hljs-keyword\\">let</span> pCache=prefixC[<span class=\\"hljs-keyword\\">from</span>]\\n    <span class=\\"hljs-keyword\\">let</span> aCache=prefixC[to+<span class=\\"hljs-number\\">1</span>]\\n    <span class=\\"hljs-keyword\\">let</span> curCache=<span class=\\"hljs-built_in\\">Array</span>(<span class=\\"hljs-number\\">26</span>).fill(<span class=\\"hljs-number\\">0</span>)\\n    <span class=\\"hljs-keyword\\">let</span> pair=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;<span class=\\"hljs-number\\">26</span>;i++){\\n      curCache[i]=aCache[i]-pCache[i]\\n      pair+=<span class=\\"hljs-built_in\\">Math</span>.floor(curCache[i] /<span class=\\"hljs-number\\">2</span>)\\n    }\\n    <span class=\\"hljs-keyword\\">if</span>(pair+k&gt;=needPair){\\n      res.push(<span class=\\"hljs-literal\\">true</span>)\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      res.push(<span class=\\"hljs-literal\\">false</span>)\\n    }\\n\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n\\n};\\n</code></pre>\\n"],"querySlug":"can-make-palindrome-from-substring","created_at":"2019-09-01","timeArr":[2019,8,1,11,30,15,0],"hasThinking":false,"content":"<p>给你一个字符串&nbsp;<code>s</code>，请你对&nbsp;<code>s</code>&nbsp;的子串进行检测。</p>\\n\\n<p>每次检测，待检子串都可以表示为&nbsp;<code>queries[i] = [left, right, k]</code>。我们可以 <strong>重新排列</strong> 子串&nbsp;<code>s[left], ..., s[right]</code>，并从中选择 <strong>最多</strong> <code>k</code>&nbsp;项替换成任何小写英文字母。&nbsp;</p>\\n\\n<p>如果在上述检测过程中，子串可以变成回文形式的字符串，那么检测结果为&nbsp;<code>true</code>，否则结果为&nbsp;<code>false</code>。</p>\\n\\n<p>返回答案数组&nbsp;<code>answer[]</code>，其中&nbsp;<code>answer[i]</code>&nbsp;是第&nbsp;<code>i</code>&nbsp;个待检子串&nbsp;<code>queries[i]</code>&nbsp;的检测结果。</p>\\n\\n<p>注意：在替换时，子串中的每个字母都必须作为 <strong>独立的</strong> 项进行计数，也就是说，如果&nbsp;<code>s[left..right] = &quot;aaa&quot;</code>&nbsp;且&nbsp;<code>k = 2</code>，我们只能替换其中的两个字母。（另外，任何检测都不会修改原始字符串 <code>s</code>，可以认为每次检测都是独立的）</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例：</strong></p>\\n\\n<pre><strong>输入：</strong>s = &quot;abcda&quot;, queries = [[3,3,0],[1,2,0],[0,3,1],[0,3,2],[0,4,1]]\\n<strong>输出：</strong>[true,false,false,true,true]\\n<strong>解释：</strong>\\nqueries[0] : 子串 = &quot;d&quot;，回文。\\nqueries[1] :&nbsp;子串 = &quot;bc&quot;，不是回文。\\nqueries[2] :&nbsp;子串 = &quot;abcd&quot;，只替换 1 个字符是变不成回文串的。\\nqueries[3] :&nbsp;子串 = &quot;abcd&quot;，可以变成回文的 &quot;abba&quot;。 也可以变成 &quot;baab&quot;，先重新排序变成 &quot;bacd&quot;，然后把 &quot;cd&quot; 替换为 &quot;ab&quot;。\\nqueries[4] :&nbsp;子串 = &quot;abcda&quot;，可以变成回文的 &quot;abcba&quot;。\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= s.length,&nbsp;queries.length&nbsp;&lt;= 10^5</code></li>\\n\\t<li><code>0 &lt;= queries[i][0] &lt;= queries[i][1] &lt;&nbsp;s.length</code></li>\\n\\t<li><code>0 &lt;= queries[i][2] &lt;= s.length</code></li>\\n\\t<li><code>s</code> 中只有小写英文字母</li>\\n</ul>\\n","title":"1177. 构建回文串检测","relatedTags":["位运算","哈希表","字符串","前缀和"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1177","slug":"1177-Can-Make-Palindrome-from-Substring"}')}}]);