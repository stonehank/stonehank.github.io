(window.webpackJsonp=window.webpackJsonp||[]).push([[816],{1614:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">num</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">k</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{string}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> removeKdigits = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">num, k</span>) </span>{\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">_remove</span>(<span class=\\"hljs-params\\">num,k</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(num.length&lt;=k)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-string\\">\'\'</span>\\n    <span class=\\"hljs-keyword\\">if</span>(k===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span> num\\n    <span class=\\"hljs-keyword\\">let</span> idxes=<span class=\\"hljs-built_in\\">Array</span>(<span class=\\"hljs-number\\">10</span>).fill(<span class=\\"hljs-literal\\">null</span>)\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;num.length;i++){\\n      <span class=\\"hljs-keyword\\">if</span>(idxes[num[i]]==<span class=\\"hljs-literal\\">null</span>)idxes[num[i]]=i\\n    }\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;<span class=\\"hljs-number\\">10</span>;i++){\\n      <span class=\\"hljs-keyword\\">let</span> pos=idxes[i]\\n      <span class=\\"hljs-keyword\\">if</span>(pos!=<span class=\\"hljs-literal\\">null</span> &amp;&amp; pos&lt;=k){\\n        <span class=\\"hljs-keyword\\">return</span> num[pos] + _remove(num.slice(pos+<span class=\\"hljs-number\\">1</span>),k-pos)\\n      }\\n    }    \\n  }\\n  <span class=\\"hljs-keyword\\">let</span> res=_remove(num,k)\\n  <span class=\\"hljs-keyword\\">let</span> temp=<span class=\\"hljs-string\\">\'\'</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;res.length;i++){\\n    <span class=\\"hljs-keyword\\">if</span>(temp===<span class=\\"hljs-string\\">\'\'</span> &amp;&amp; res[i]===<span class=\\"hljs-string\\">\\"0\\"</span>)<span class=\\"hljs-keyword\\">continue</span>\\n    <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">return</span> res.substring(i)\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-string\\">\\"0\\"</span>\\n};\\n</code></pre>\\n"],"querySlug":"remove-k-digits","created_at":"2019-04-13","timeArr":[2019,3,13,13,18,47,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>2种思路：</p>\\n<ul>\\n<li>思路一：</li>\\n</ul>\\n<p>对每一个数字<code>num[i]</code>保存它第一个出现的索引，然后从<code>0</code>到<code>9</code>遍历，对每一个判断它前面的数是否小于<code>k</code>个，如果满足，则以它作为头部，继续递归处理后续字符串<code>num.substring(i+1)</code>。</p>\\n<p>注意：</p>\\n<ol>\\n<li>如果存在<code>num.length&lt;=k</code>，说明需要全部删除，返回<code>\'\'</code>。</li>\\n<li>如果<code>k===0</code>，说明无须删除，直接返回<code>num</code>。</li>\\n<li>最后的返回结果要处理<code>前导0</code>和空字符串<code>\'\'</code>。</li>\\n</ol>\\n<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">num</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">k</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{string}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> removeKdigits = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">num, k</span>) </span>{\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">_remove</span>(<span class=\\"hljs-params\\">num,k</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(num.length&lt;=k)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-string\\">\'\'</span>\\n    <span class=\\"hljs-keyword\\">if</span>(k===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span> num\\n    <span class=\\"hljs-keyword\\">let</span> idxes=<span class=\\"hljs-built_in\\">Array</span>(<span class=\\"hljs-number\\">10</span>).fill(<span class=\\"hljs-literal\\">null</span>)\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;num.length;i++){\\n      <span class=\\"hljs-keyword\\">if</span>(idxes[num[i]]==<span class=\\"hljs-literal\\">null</span>)idxes[num[i]]=i\\n    }\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;<span class=\\"hljs-number\\">10</span>;i++){\\n      <span class=\\"hljs-keyword\\">let</span> pos=idxes[i]\\n      <span class=\\"hljs-keyword\\">if</span>(pos!=<span class=\\"hljs-literal\\">null</span> &amp;&amp; pos&lt;=k){\\n        <span class=\\"hljs-keyword\\">return</span> num[pos] + _remove(num.slice(pos+<span class=\\"hljs-number\\">1</span>),k-pos)\\n      }\\n    }    \\n  }\\n  <span class=\\"hljs-keyword\\">let</span> res=_remove(num,k)\\n  <span class=\\"hljs-keyword\\">let</span> temp=<span class=\\"hljs-string\\">\'\'</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;res.length;i++){\\n    <span class=\\"hljs-keyword\\">if</span>(temp===<span class=\\"hljs-string\\">\'\'</span> &amp;&amp; res[i]===<span class=\\"hljs-string\\">\\"0\\"</span>)<span class=\\"hljs-keyword\\">continue</span>\\n    <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">return</span> res.substring(i)\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-string\\">\\"0\\"</span>\\n};\\n</code></pre>\\n<ul>\\n<li>思路二(更加优化)：</li>\\n</ul>\\n<p>无须构建索引，构建一个在删除<code>k</code>的范围内的最小的递增序列，最后在处理<code>前导0</code>和空字符串<code>\'\'</code>。</p>\\n","content":"<p>给你一个以字符串表示的非负整数 <code>num</code> 和一个整数 <code>k</code> ，移除这个数中的 <code>k</code><em> </em>位数字，使得剩下的数字最小。请你以字符串形式返回这个最小的数字。</p>\\n \\n\\n<p><strong>示例 1 ：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>num = \\"1432219\\", k = 3\\n<strong>输出：</strong>\\"1219\\"\\n<strong>解释：</strong>移除掉三个数字 4, 3, 和 2 形成一个新的最小的数字 1219 。\\n</pre>\\n\\n<p><strong>示例 2 ：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>num = \\"10200\\", k = 1\\n<strong>输出：</strong>\\"200\\"\\n<strong>解释：</strong>移掉首位的 1 剩下的数字为 200. 注意输出不能有任何前导零。\\n</pre>\\n\\n<p><strong>示例 3 ：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>num = \\"10\\", k = 2\\n<strong>输出：</strong>\\"0\\"\\n<strong>解释：</strong>从原数字移除所有的数字，剩余为空就是 0 。\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= k <= num.length <= 10<sup>5</sup></code></li>\\n\\t<li><code>num</code> 仅由若干位数字（0 - 9）组成</li>\\n\\t<li>除了 <strong>0</strong> 本身之外，<code>num</code> 不含任何前导零</li>\\n</ul>\\n","title":"402. 移掉 K 位数字","relatedTags":["栈","贪心","字符串","单调栈"],"difficult":"Middle","lang":["javascript"],"uniqueID":"402","slug":"402-Remove-K-Digits"}')}}]);