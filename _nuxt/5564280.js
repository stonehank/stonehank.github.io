(window.webpackJsonp=window.webpackJsonp||[]).push([[1376],{2174:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">cont</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> fraction = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">cont</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(cont.length===<span class=\\"hljs-number\\">1</span>)<span class=\\"hljs-keyword\\">return</span> [cont[<span class=\\"hljs-number\\">0</span>],<span class=\\"hljs-number\\">1</span>]\\n  <span class=\\"hljs-keyword\\">let</span> init=<span class=\\"hljs-literal\\">true</span>\\n  <span class=\\"hljs-keyword\\">let</span> last=[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">0</span>]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=cont.length<span class=\\"hljs-number\\">-1</span>;i&gt;=<span class=\\"hljs-number\\">0</span>;i--){\\n    <span class=\\"hljs-keyword\\">if</span>(i!==<span class=\\"hljs-number\\">0</span>){\\n      <span class=\\"hljs-keyword\\">if</span>(init){\\n        init=<span class=\\"hljs-literal\\">false</span>\\n        last=[<span class=\\"hljs-number\\">1</span>,cont[i]]\\n      }<span class=\\"hljs-keyword\\">else</span>{\\n        last[<span class=\\"hljs-number\\">0</span>]+=last[<span class=\\"hljs-number\\">1</span>]*cont[i]\\n        last=last.reverse()\\n      }\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n       last[<span class=\\"hljs-number\\">0</span>]+=last[<span class=\\"hljs-number\\">1</span>]*cont[i]\\n    }\\n  }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">gcd</span>(<span class=\\"hljs-params\\">a,b</span>)</span>{\\n    <span class=\\"hljs-keyword\\">return</span> b ? gcd(b,a%b) : a\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> g=gcd(last[<span class=\\"hljs-number\\">0</span>],last[<span class=\\"hljs-number\\">1</span>])\\n  <span class=\\"hljs-keyword\\">return</span> [last[<span class=\\"hljs-number\\">0</span>]/g,last[<span class=\\"hljs-number\\">1</span>]/g]\\n};\\n</code></pre>\\n","<pre class=\\"hljs\\"><code><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Solution</span><span class=\\"hljs-params\\">(object)</span>:</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">fraction</span><span class=\\"hljs-params\\">(self, cont)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type cont: List[int]\\n        :rtype: List[int]\\n        \\"\\"\\"</span>\\n        init=<span class=\\"hljs-literal\\">True</span>\\n        last=[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">0</span>]\\n        <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(len(cont)<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">-1</span>):\\n          <span class=\\"hljs-keyword\\">if</span> i!=<span class=\\"hljs-number\\">0</span>:\\n            <span class=\\"hljs-keyword\\">if</span> init:\\n              init=<span class=\\"hljs-literal\\">False</span>\\n              last=[<span class=\\"hljs-number\\">1</span>,cont[i]]\\n            <span class=\\"hljs-keyword\\">else</span>:\\n              last[<span class=\\"hljs-number\\">0</span>]=last[<span class=\\"hljs-number\\">0</span>]+last[<span class=\\"hljs-number\\">1</span>]*cont[i]\\n              last[<span class=\\"hljs-number\\">0</span>],last[<span class=\\"hljs-number\\">1</span>]=last[<span class=\\"hljs-number\\">1</span>],last[<span class=\\"hljs-number\\">0</span>]\\n          <span class=\\"hljs-keyword\\">else</span>:\\n            last[<span class=\\"hljs-number\\">0</span>]=last[<span class=\\"hljs-number\\">0</span>]+last[<span class=\\"hljs-number\\">1</span>]*cont[i]\\n        \\n        <span class=\\"hljs-comment\\"># def gcd(a,b):</span>\\n        <span class=\\"hljs-comment\\">#   if b&gt;0 :</span>\\n        <span class=\\"hljs-comment\\">#     return gcd(b,a%b)</span>\\n        <span class=\\"hljs-comment\\">#   else :</span>\\n        <span class=\\"hljs-comment\\">#     return a</span>\\n        <span class=\\"hljs-comment\\"># gc=gcd(last[0],last[1])</span>\\n        <span class=\\"hljs-keyword\\">return</span> last\\n        \\n</code></pre>\\n"],"querySlug":"deep-dark-fraction","hasThinking":false,"content":"<p>有一个同学在学习分式。他需要将一个连分数化成最简分数，你能帮助他吗？</p>\\n\\n<p><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/09/09/fraction_example_1.jpg\\" style=\\"height: 195px; width: 480px;\\" /></p>\\n\\n<p>连分数是形如上图的分式。在本题中，所有系数都是大于等于0的整数。</p>\\n\\n<p> </p>\\n\\n<p>输入的<code>cont</code>代表连分数的系数（<code>cont[0]</code>代表上图的<code>a<sub>0</sub></code>，以此类推）。返回一个长度为2的数组<code>[n, m]</code>，使得连分数的值等于<code>n / m</code>，且<code>n, m</code>最大公约数为1。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>cont = [3, 2, 0, 2]\\n<strong>输出：</strong>[13, 4]\\n<strong>解释：</strong>原连分数等价于3 + (1 / (2 + (1 / (0 + 1 / 2))))。注意[26, 8], [-13, -4]都不是正确答案。</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>cont = [0, 0, 3]\\n<strong>输出：</strong>[3, 1]\\n<strong>解释：</strong>如果答案是整数，令分母为1即可。</pre>\\n\\n<p> </p>\\n\\n<p><strong>限制：</strong></p>\\n\\n<ol>\\n\\t<li><code>cont[i] >= 0</code></li>\\n\\t<li><code>1 <= cont的长度 <= 10</code></li>\\n\\t<li><code>cont</code>最后一个元素不等于0</li>\\n\\t<li>答案的<code>n, m</code>的取值都能被32位int整型存下（即不超过<code>2 ^ 31 - 1</code>）。</li>\\n</ol>\\n","title":"LCP 02. 分式化简","relatedTags":["数组","数学","数论","模拟"],"difficult":"Easy","lang":["javascript","python"],"uniqueID":"LCP 02","slug":"LCP-02-Deep-Dark-Fraction"}')}}]);