(window.webpackJsonp=window.webpackJsonp||[]).push([[1172],{1970:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">S</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{string[]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> ambiguousCoordinates = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">S</span>) </span>{\\n  S=S.substring(<span class=\\"hljs-number\\">1</span>,S.length<span class=\\"hljs-number\\">-1</span>)\\n  <span class=\\"hljs-keyword\\">let</span> res=[]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">1</span>;i&lt;S.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> temp=checkPermutation(S.substring(<span class=\\"hljs-number\\">0</span>,i),S.substring(i))\\n    res=res.concat(temp)\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">checkPermutation</span>(<span class=\\"hljs-params\\">left,right</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> leftValid=showPerms(left),\\n        rightValid=showPerms(right)\\n    <span class=\\"hljs-keyword\\">let</span> res=[]\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;leftValid.length;i++){\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;rightValid.length;j++){\\n        res.push(<span class=\\"hljs-string\\">\\"(\\"</span>+leftValid[i]+<span class=\\"hljs-string\\">\\", \\"</span>+rightValid[j]+<span class=\\"hljs-string\\">\\")\\"</span>)\\n      }\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> res\\n  }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">showPerms</span>(<span class=\\"hljs-params\\">str</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> res=[]\\n    <span class=\\"hljs-keyword\\">if</span>(isValid(str))res.push(str)\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">1</span>;i&lt;str.length;i++){\\n      <span class=\\"hljs-keyword\\">let</span> cur=str.substring(<span class=\\"hljs-number\\">0</span>,i)+<span class=\\"hljs-string\\">\'.\'</span>+str.substring(i)\\n      <span class=\\"hljs-keyword\\">if</span>(isValid(cur))res.push(cur)\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> res\\n  }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">isValid</span>(<span class=\\"hljs-params\\">str</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> hasPoint=<span class=\\"hljs-literal\\">false</span>,nonZeroNum=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">let</span> pointIdx=str.indexOf(<span class=\\"hljs-string\\">\'.\'</span>)\\n    <span class=\\"hljs-keyword\\">if</span>(pointIdx===<span class=\\"hljs-number\\">-1</span>){\\n      <span class=\\"hljs-keyword\\">if</span>(str.length&gt;<span class=\\"hljs-number\\">1</span> &amp;&amp; str[<span class=\\"hljs-number\\">0</span>]===<span class=\\"hljs-string\\">\\"0\\"</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      <span class=\\"hljs-keyword\\">if</span>((pointIdx&gt;<span class=\\"hljs-number\\">1</span> &amp;&amp; str[<span class=\\"hljs-number\\">0</span>]===<span class=\\"hljs-string\\">\\"0\\"</span>) || str[str.length<span class=\\"hljs-number\\">-1</span>]===<span class=\\"hljs-string\\">\\"0\\"</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"ambiguous-coordinates","created_at":"2019-03-28","timeArr":[2019,2,28,12,4,37,0],"hasThinking":false,"content":"<p>我们有一些二维坐标，如&nbsp;<code>&quot;(1, 3)&quot;</code>&nbsp;或&nbsp;<code>&quot;(2, 0.5)&quot;</code>，然后我们移除所有逗号，小数点和空格，得到一个字符串<code>S</code>。返回所有可能的原始字符串到一个列表中。</p>\\n\\n<p>原始的坐标表示法不会存在多余的零，所以不会出现类似于&quot;00&quot;, &quot;0.0&quot;, &quot;0.00&quot;, &quot;1.0&quot;, &quot;001&quot;, &quot;00.01&quot;或一些其他更小的数来表示坐标。此外，一个小数点前至少存在一个数，所以也不会出现&ldquo;.1&rdquo;形式的数字。</p>\\n\\n<p>最后返回的列表可以是任意顺序的。而且注意返回的两个数字中间（逗号之后）都有一个空格。</p>\\n\\n<p>&nbsp;</p>\\n\\n<pre>\\n<strong>示例 1:</strong>\\n<strong>输入:</strong> &quot;(123)&quot;\\n<strong>输出:</strong> [&quot;(1, 23)&quot;, &quot;(12, 3)&quot;, &quot;(1.2, 3)&quot;, &quot;(1, 2.3)&quot;]\\n</pre>\\n\\n<pre>\\n<strong>示例 2:</strong>\\n<strong>输入:</strong> &quot;(00011)&quot;\\n<strong>输出:</strong> &nbsp;[&quot;(0.001, 1)&quot;, &quot;(0, 0.011)&quot;]\\n<strong>解释:</strong> \\n0.0, 00, 0001 或 00.01 是不被允许的。\\n</pre>\\n\\n<pre>\\n<strong>示例 3:</strong>\\n<strong>输入:</strong> &quot;(0123)&quot;\\n<strong>输出:</strong> [&quot;(0, 123)&quot;, &quot;(0, 12.3)&quot;, &quot;(0, 1.23)&quot;, &quot;(0.1, 23)&quot;, &quot;(0.1, 2.3)&quot;, &quot;(0.12, 3)&quot;]\\n</pre>\\n\\n<pre>\\n<strong>示例 4:</strong>\\n<strong>输入:</strong> &quot;(100)&quot;\\n<strong>输出:</strong> [(10, 0)]\\n<strong>解释:</strong> \\n1.0 是不被允许的。\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示: </strong></p>\\n\\n<ul>\\n\\t<li><code>4 &lt;= S.length &lt;= 12</code>.</li>\\n\\t<li><code>S[0]</code> = &quot;(&quot;, <code>S[S.length - 1]</code> = &quot;)&quot;, 且字符串&nbsp;<code>S</code>&nbsp;中的其他元素都是数字。</li>\\n</ul>\\n\\n<p>&nbsp;</p>\\n","title":"816. 模糊坐标","relatedTags":["字符串","回溯"],"difficult":"Middle","lang":["javascript"],"uniqueID":"816","slug":"816-Ambiguous-Coordinates"}')}}]);