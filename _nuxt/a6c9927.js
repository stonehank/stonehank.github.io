(window.webpackJsonp=window.webpackJsonp||[]).push([[426],{1224:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">n</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">edges</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">distanceThreshold</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> findTheCity = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">n, edges, distanceThreshold</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> path=<span class=\\"hljs-built_in\\">Array</span>(n).fill().map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span>=&gt;</span><span class=\\"hljs-built_in\\">Array</span>(n).fill(<span class=\\"hljs-literal\\">Infinity</span>))\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;n;i++){\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;n;j++){\\n      <span class=\\"hljs-keyword\\">if</span>(i===j)path[i][j]=<span class=\\"hljs-number\\">0</span>\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;edges.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> [<span class=\\"hljs-keyword\\">from</span>,to,w]=edges[i]\\n    path[<span class=\\"hljs-keyword\\">from</span>][to]=w\\n    path[to][<span class=\\"hljs-keyword\\">from</span>]=w\\n  }\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> k=<span class=\\"hljs-number\\">0</span>;k&lt;n;k++){\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;n;i++){\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;n;j++){\\n        <span class=\\"hljs-keyword\\">if</span>(path[i][j]&gt;path[i][k]+path[k][j]){\\n          path[i][j]=path[i][k]+path[k][j]\\n        }\\n      }\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> record=<span class=\\"hljs-built_in\\">Array</span>(n).fill(<span class=\\"hljs-number\\">0</span>)\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;n;i++){\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;n;j++){\\n      <span class=\\"hljs-keyword\\">if</span>(i===j)<span class=\\"hljs-keyword\\">continue</span>\\n      <span class=\\"hljs-keyword\\">if</span>(path[i][j]&lt;=distanceThreshold){\\n        record[i]++\\n      }\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> min=<span class=\\"hljs-literal\\">Infinity</span>\\n  <span class=\\"hljs-keyword\\">let</span> ans=<span class=\\"hljs-literal\\">null</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=record.length<span class=\\"hljs-number\\">-1</span>;i&gt;=<span class=\\"hljs-number\\">0</span>;i--){\\n    <span class=\\"hljs-keyword\\">if</span>(record[i]&lt;min){\\n      min=record[i]\\n      ans=i\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> ans\\n};\\n</code></pre>\\n"],"querySlug":"find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance","created_at":"2020-01-31","timeArr":[2020,0,31,14,27,32,0],"hasThinking":false,"content":"<p>有 <code>n</code> 个城市，按从 <code>0</code> 到 <code>n-1</code> 编号。给你一个边数组 <code>edges</code>，其中 <code>edges[i] = [from<sub>i</sub>, to<sub>i</sub>, weight<sub>i</sub>]</code> 代表 <code>from<sub>i</sub></code> 和 <code>to<sub>i</sub></code><sub> </sub>两个城市之间的双向加权边，距离阈值是一个整数 <code>distanceThreshold</code>。</p>\\n\\n<p>返回能通过某些路径到达其他城市数目最少、且路径距离 <strong>最大</strong> 为 <code>distanceThreshold</code> 的城市。如果有多个这样的城市，则返回编号最大的城市。</p>\\n\\n<p>注意，连接城市 <em><strong>i</strong></em> 和 <em><strong>j</strong></em> 的路径的距离等于沿该路径的所有边的权重之和。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<p><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/26/find_the_city_01.png\\" style=\\"height: 225px; width: 300px;\\" /></p>\\n\\n<pre>\\n<strong>输入：</strong>n = 4, edges = [[0,1,3],[1,2,1],[1,3,4],[2,3,1]], distanceThreshold = 4\\n<strong>输出：</strong>3\\n<strong>解释：</strong>城市分布图如上。\\n每个城市阈值距离 distanceThreshold = 4 内的邻居城市分别是：\\n城市 0 -> [城市 1, 城市 2] \\n城市 1 -> [城市 0, 城市 2, 城市 3] \\n城市 2 -> [城市 0, 城市 1, 城市 3] \\n城市 3 -> [城市 1, 城市 2] \\n城市 0 和 3 在阈值距离 4 以内都有 2 个邻居城市，但是我们必须返回城市 3，因为它的编号最大。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<p><strong><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/26/find_the_city_02.png\\" style=\\"height: 225px; width: 300px;\\" /></strong></p>\\n\\n<pre>\\n<strong>输入：</strong>n = 5, edges = [[0,1,2],[0,4,8],[1,2,3],[1,4,2],[2,3,1],[3,4,1]], distanceThreshold = 2\\n<strong>输出：</strong>0\\n<strong>解释：</strong>城市分布图如上。 \\n每个城市阈值距离 distanceThreshold = 2 内的邻居城市分别是：\\n城市 0 -> [城市 1] \\n城市 1 -> [城市 0, 城市 4] \\n城市 2 -> [城市 3, 城市 4] \\n城市 3 -> [城市 2, 城市 4]\\n城市 4 -> [城市 1, 城市 2, 城市 3] \\n城市 0 在阈值距离 2 以内只有 1 个邻居城市。\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>2 <= n <= 100</code></li>\\n\\t<li><code>1 <= edges.length <= n * (n - 1) / 2</code></li>\\n\\t<li><code>edges[i].length == 3</code></li>\\n\\t<li><code>0 <= from<sub>i</sub> < to<sub>i</sub> < n</code></li>\\n\\t<li><code>1 <= weight<sub>i</sub>, distanceThreshold <= 10^4</code></li>\\n\\t<li>所有 <code>(from<sub>i</sub>, to<sub>i</sub>)</code> 都是不同的。</li>\\n</ul>\\n","title":"1334. 阈值距离内邻居最少的城市","relatedTags":["图","动态规划","最短路"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1334","slug":"1334-Find-the-City-With-the-Smallest-Number-of-Neighbors-at-a-Threshold-Distance"}')}}]);