(window.webpackJsonp=window.webpackJsonp||[]).push([[1133],{1931:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">sx</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">sy</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">tx</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">ty</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{boolean}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> reachingPoints = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">sx, sy, tx, ty</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(sx&gt;tx || sy&gt;ty)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n  <span class=\\"hljs-keyword\\">while</span>(sx&lt;tx &amp;&amp; sy&lt;ty){\\n    <span class=\\"hljs-keyword\\">if</span>(tx&lt;ty) ty%=tx\\n    <span class=\\"hljs-keyword\\">else</span> tx%=ty\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> (sx===tx &amp;&amp; (ty-sy) % sx===<span class=\\"hljs-number\\">0</span>) || (sy===ty &amp;&amp; (tx-sx) % sy===<span class=\\"hljs-number\\">0</span>)\\n};\\n</code></pre>\\n"],"querySlug":"reaching-points","created_at":"2019-04-02","timeArr":[2019,3,2,9,57,51,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>从<code>sx,sy</code>开始计算，如果<code>sx,sy</code>初始很小，那么很容易<code>TLE</code>。</p>\\n<p>反向观察，<code>tx</code>其实就是<code>a*sx+b*sy</code>组成的,<code>ty</code>其实就是<code>c*sx+d*sy</code>组成的。</p>\\n<p>如果<code>ty&gt;tx</code>，那么<code>ty-tx</code>其实也是由<code>m*sx+n*sy</code>组成，这里<code>m</code>和<code>n</code>一定是正整数。</p>\\n<p>继续比较<code>tx</code>和<code>ty-tx</code>，只要满足条件<code>sx&lt;tx &amp;&amp; sy&lt;ty</code>，重复执行上面的计算。</p>\\n<p>优化：使用<code>ty%=tx</code>代替<code>while...ty-=tx...</code></p>\\n","content":"<p>从点&nbsp;<code>(x, y)</code>&nbsp;可以<strong>转换</strong>到&nbsp;<code>(x, x+y)</code>&nbsp; 或者&nbsp;<code>(x+y, y)</code>。</p>\\n\\n<p>给定一个起点&nbsp;<code>(sx, sy)</code>&nbsp;和一个终点&nbsp;<code>(tx, ty)</code>，如果通过一系列的<strong>转换</strong>可以从起点到达终点，则返回 <code>True&nbsp;</code>，否则返回&nbsp;<code>False</code>。</p>\\n\\n<pre>\\n<strong>示例:</strong>\\n<strong>输入:</strong> sx = 1, sy = 1, tx = 3, ty = 5\\n<strong>输出:</strong> True\\n<strong>解释:\\n</strong>可以通过以下一系列<strong>转换</strong>从起点转换到终点：\\n(1, 1) -&gt; (1, 2)\\n(1, 2) -&gt; (3, 2)\\n(3, 2) -&gt; (3, 5)\\n\\n<strong>输入:</strong> sx = 1, sy = 1, tx = 2, ty = 2\\n<strong>输出:</strong> False\\n\\n<strong>输入:</strong> sx = 1, sy = 1, tx = 1, ty = 1\\n<strong>输出:</strong> True\\n\\n</pre>\\n\\n<p><strong>注意:</strong></p>\\n\\n<ul>\\n\\t<li><code>sx, sy, tx, ty</code>&nbsp;是范围在&nbsp;<code>[1, 10^9]</code>&nbsp;的整数。</li>\\n</ul>\\n","title":"780. 到达终点","relatedTags":["数学"],"difficult":"Hard","lang":["javascript"],"uniqueID":"780","slug":"780-Reaching-Points"}')}}]);