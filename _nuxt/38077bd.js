(window.webpackJsonp=window.webpackJsonp||[]).push([[322],{1120:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">text</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> maxRepOpt1 = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">text</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> arr=<span class=\\"hljs-built_in\\">Array</span>(<span class=\\"hljs-number\\">26</span>).fill().map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span>=&gt;</span>[])\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;text.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> code=text.charCodeAt(i)<span class=\\"hljs-number\\">-97</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;<span class=\\"hljs-number\\">26</span>;j++){\\n      <span class=\\"hljs-keyword\\">if</span>(j!==code){\\n        <span class=\\"hljs-keyword\\">if</span>(arr[j].length%<span class=\\"hljs-number\\">2</span>===<span class=\\"hljs-number\\">1</span>){\\n          arr[j].push(<span class=\\"hljs-number\\">-1</span>)\\n        }<span class=\\"hljs-keyword\\">else</span>{\\n          <span class=\\"hljs-keyword\\">if</span>(arr[j].length===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">continue</span>\\n          arr[j][arr[j].length<span class=\\"hljs-number\\">-1</span>]--\\n        }\\n      }\\n    }\\n    <span class=\\"hljs-keyword\\">if</span>(arr[code].length%<span class=\\"hljs-number\\">2</span>===<span class=\\"hljs-number\\">0</span>){\\n      arr[code].push(<span class=\\"hljs-number\\">1</span>)\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      arr[code][arr[code].length<span class=\\"hljs-number\\">-1</span>]++\\n    }\\n  }\\n  <span class=\\"hljs-comment\\">// console.log(arr)</span>\\n  <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-number\\">-1</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;<span class=\\"hljs-number\\">26</span>;i++){\\n    <span class=\\"hljs-keyword\\">let</span> maxLen=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;arr[i].length;j++){\\n      <span class=\\"hljs-keyword\\">if</span>(arr[i][j]&gt;<span class=\\"hljs-number\\">0</span>){\\n        maxLen=<span class=\\"hljs-built_in\\">Math</span>.max(maxLen,arr[i][j])\\n      }<span class=\\"hljs-keyword\\">else</span>{\\n        <span class=\\"hljs-keyword\\">let</span> count\\n        <span class=\\"hljs-keyword\\">if</span>(arr[i][j]===<span class=\\"hljs-number\\">-1</span> &amp;&amp; j!==arr[i].length<span class=\\"hljs-number\\">-1</span>){\\n          count=arr[i][j<span class=\\"hljs-number\\">-1</span>]+arr[i][j+<span class=\\"hljs-number\\">1</span>]\\n          <span class=\\"hljs-keyword\\">if</span>(j&lt;arr[i].length<span class=\\"hljs-number\\">-2</span> || j&gt;<span class=\\"hljs-number\\">1</span>)count++\\n        }<span class=\\"hljs-keyword\\">else</span>{\\n          count=arr[i][j<span class=\\"hljs-number\\">-1</span>]\\n          <span class=\\"hljs-keyword\\">if</span>(j&lt;arr[i].length<span class=\\"hljs-number\\">-1</span> || j&gt;<span class=\\"hljs-number\\">1</span>)count++\\n        }\\n        maxLen=<span class=\\"hljs-built_in\\">Math</span>.max(maxLen,count)\\n      }\\n    }\\n    <span class=\\"hljs-comment\\">// console.log(i,maxLen)</span>\\n    res=<span class=\\"hljs-built_in\\">Math</span>.max(res,maxLen)\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"swap-for-longest-repeated-character-substring","created_at":"2019-08-11","timeArr":[2019,7,11,12,7,18,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>时间复杂度O(26N)</p>\\n<p>将每一个字母对应的位置整理成 <code>[连续的次数（正数），隔开的间隔（负数），连续的次数，隔开的间隔...]</code>(保证第一个一定是连续的次数)</p>\\n<pre class=\\"hljs\\"><code>例如 ： aaabbabab\\n\\na:[3,-2,1,-1,1,-1]\\nb:[2,-1,1,-1,1]\\n</code></pre>\\n<p>如果知道svg，就有点像<code>dasharray</code>的格式</p>\\n<p>然后遍历26个字母的数组，对于每一个字母，定义一个count表示当前能组成的最大连续次数，</p>\\n<p>如果当前是连续次数(&gt;0)，那么<code>count</code> = 连续的次数</p>\\n<p>如果当前是隔开的间隔(&lt;0)，</p>\\n<p>如果隔开的间隔是 -1, 需要检查：</p>\\n<ol>\\n<li>后面是否还存在连续的次数，如果存在，那么 <code>count</code>至少为 上一个连续次数+下一个连续次数</li>\\n<li>继续检查，是否存在上上一个连续次数 或者 是否存在下下一个连续次数，如果存在，那么当前的间隔(-1)就能被替换，那么<code>count++</code></li>\\n</ol>\\n<p>如果隔开的间隔不是 -1，<code>count</code>至少是上一个连续次数，并且检查：\\n是否存在上上一个连续次数 或者 是否存在下下一个连续次数，存在则 <code>count++</code></p>\\n<p>最后筛选出最大值。</p>\\n","content":"<p>如果字符串中的所有字符都相同，那么这个字符串是单字符重复的字符串。</p>\\n\\n<p>给你一个字符串&nbsp;<code>text</code>，你只能交换其中两个字符一次或者什么都不做，然后得到一些单字符重复的子串。返回其中最长的子串的长度。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>text = &quot;ababa&quot;\\n<strong>输出：</strong>3\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>text = &quot;aaabaaa&quot;\\n<strong>输出：</strong>6\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>text = &quot;aaabbaaa&quot;\\n<strong>输出：</strong>4\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre><strong>输入：</strong>text = &quot;aaaaa&quot;\\n<strong>输出：</strong>5\\n</pre>\\n\\n<p><strong>示例 5：</strong></p>\\n\\n<pre><strong>输入：</strong>text = &quot;abcdef&quot;\\n<strong>输出：</strong>1\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= text.length &lt;= 20000</code></li>\\n\\t<li><code>text</code> 仅由小写英文字母组成。</li>\\n</ul>\\n","title":"1156. 单字符重复子串的最大长度","relatedTags":["字符串","滑动窗口"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1156","slug":"1156-Swap-For-Longest-Repeated-Character-Substring"}')}}]);