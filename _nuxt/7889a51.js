(window.webpackJsonp=window.webpackJsonp||[]).push([[1136],{1934:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for a binary tree node.\\n * function TreeNode(val, left, right) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.left = (left===undefined ? null : left)\\n *     this.right = (right===undefined ? null : right)\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{TreeNode}</span> <span class=\\"hljs-variable\\">root</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> minDiffInBST = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">root</span>) </span>{\\n    <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-literal\\">Infinity</span>\\n    <span class=\\"hljs-keyword\\">let</span> last=<span class=\\"hljs-literal\\">null</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">dfs</span>(<span class=\\"hljs-params\\">root</span>)</span>{\\n        <span class=\\"hljs-keyword\\">let</span> val=root.val\\n        <span class=\\"hljs-keyword\\">if</span>(root.left){\\n            dfs(root.left)\\n        }\\n        <span class=\\"hljs-keyword\\">if</span>(last!=<span class=\\"hljs-literal\\">null</span>){\\n            res=<span class=\\"hljs-built_in\\">Math</span>.min(res,val-last)\\n        }\\n        last=val\\n        <span class=\\"hljs-keyword\\">if</span>(root.right){\\n            dfs(root.right)\\n        }\\n    }\\n    dfs(root)\\n    <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"minimum-distance-between-bst-nodes","created_at":"2021-04-13","timeArr":[2021,3,13,7,26,49,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>与<code>NO.530</code>一致，根据<code>BST</code>的性质，使用中序排列(从小到大)，依次检查每一个节点值的差距。</p>\\n","content":"<p>给你一个二叉搜索树的根节点 <code>root</code> ，返回 <strong>树中任意两不同节点值之间的最小差值</strong> 。</p>\\n\\n<p><strong>注意：</strong>本题与 530：<a href=\\"https://leetcode-cn.com/problems/minimum-absolute-difference-in-bst/\\">https://leetcode-cn.com/problems/minimum-absolute-difference-in-bst/</a> 相同</p>\\n\\n<p> </p>\\n\\n<div class=\\"original__bRMd\\">\\n<div>\\n<p><strong>示例 1：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2021/02/05/bst1.jpg\\" style=\\"width: 292px; height: 301px;\\" />\\n<pre>\\n<strong>输入：</strong>root = [4,2,6,1,3]\\n<strong>输出：</strong>1\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2021/02/05/bst2.jpg\\" style=\\"width: 282px; height: 301px;\\" />\\n<pre>\\n<strong>输入：</strong>root = [1,0,48,null,null,12,49]\\n<strong>输出：</strong>1\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li>树中节点数目在范围 <code>[2, 100]</code> 内</li>\\n\\t<li><code>0 <= Node.val <= 10<sup>5</sup></code></li>\\n\\t<li>差值是一个正数，其数值等于两值之差的绝对值</li>\\n</ul>\\n</div>\\n</div>\\n","title":"783. 二叉搜索树节点最小距离","relatedTags":["树","深度优先搜索","广度优先搜索","二叉搜索树","二叉树"],"difficult":"Easy","lang":["javascript"],"uniqueID":"783","slug":"783-Minimum-Distance-Between-BST-Nodes"}')}}]);