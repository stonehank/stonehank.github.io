(window.webpackJsonp=window.webpackJsonp||[]).push([[1031],{1829:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">a</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">b</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{string}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> addBinary = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">a, b</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-string\\">\'\'</span>,carry=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">let</span> i=a.length<span class=\\"hljs-number\\">-1</span>,j=b.length<span class=\\"hljs-number\\">-1</span>\\n  <span class=\\"hljs-keyword\\">while</span>(i&gt;=<span class=\\"hljs-number\\">0</span> || j&gt;=<span class=\\"hljs-number\\">0</span>){\\n    <span class=\\"hljs-keyword\\">let</span> sum\\n    <span class=\\"hljs-keyword\\">if</span>(i===<span class=\\"hljs-number\\">-1</span>){\\n      sum=+b[j--]+carry\\n    }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(j===<span class=\\"hljs-number\\">-1</span>){\\n      sum=+a[i--]+carry\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      sum=+a[i--] + +b[j--] +carry\\n    }\\n    carry=<span class=\\"hljs-built_in\\">Math</span>.floor(sum/<span class=\\"hljs-number\\">2</span>)\\n    sum %=<span class=\\"hljs-number\\">2</span>\\n    res=sum+<span class=\\"hljs-string\\">\'\'</span>+res\\n  }\\n  <span class=\\"hljs-keyword\\">if</span>(carry&gt;<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span> carry+<span class=\\"hljs-string\\">\'\'</span>+res\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"add-binary","created_at":"2019-03-22","timeArr":[2019,2,22,18,52,55,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>字符串加法的原理，只是<code>10</code>进制转为<code>2</code>进制。</p>\\n","content":"<p>给你两个二进制字符串，返回它们的和（用二进制表示）。</p>\\n\\n<p>输入为 <strong>非空 </strong>字符串且只包含数字&nbsp;<code>1</code>&nbsp;和&nbsp;<code>0</code>。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例&nbsp;1:</strong></p>\\n\\n<pre><strong>输入:</strong> a = &quot;11&quot;, b = &quot;1&quot;\\n<strong>输出:</strong> &quot;100&quot;</pre>\\n\\n<p><strong>示例&nbsp;2:</strong></p>\\n\\n<pre><strong>输入:</strong> a = &quot;1010&quot;, b = &quot;1011&quot;\\n<strong>输出:</strong> &quot;10101&quot;</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li>每个字符串仅由字符 <code>&#39;0&#39;</code> 或 <code>&#39;1&#39;</code> 组成。</li>\\n\\t<li><code>1 &lt;= a.length, b.length &lt;= 10^4</code></li>\\n\\t<li>字符串如果不是 <code>&quot;0&quot;</code> ，就都不含前导零。</li>\\n</ul>\\n","title":"67. 二进制求和","relatedTags":["位运算","数学","字符串","模拟"],"difficult":"Easy","lang":["javascript"],"uniqueID":"67","slug":"67-Add-Binary"}')}}]);