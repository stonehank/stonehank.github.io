(window.webpackJsonp=window.webpackJsonp||[]).push([[482],{1280:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">n</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">k</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{string}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> getHappyString = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">n, k</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> res=[]\\n  <span class=\\"hljs-keyword\\">let</span> find=<span class=\\"hljs-literal\\">false</span>\\n  <span class=\\"hljs-keyword\\">let</span> initS=<span class=\\"hljs-string\\">\'\'</span>\\n  <span class=\\"hljs-keyword\\">if</span>(n===<span class=\\"hljs-number\\">1</span>)initS=<span class=\\"hljs-string\\">\'a\'</span>\\n  <span class=\\"hljs-keyword\\">else</span>{\\n    initS=(<span class=\\"hljs-string\\">\'ab\'</span>.repeat(<span class=\\"hljs-built_in\\">Math</span>.floor(n/<span class=\\"hljs-number\\">2</span>)))+(<span class=\\"hljs-string\\">\'a\'</span>.repeat(n%<span class=\\"hljs-number\\">2</span>))\\n  }\\n  backtrack(<span class=\\"hljs-string\\">\'\'</span>)\\n  <span class=\\"hljs-keyword\\">if</span>(k&gt;res.length)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-string\\">\'\'</span>\\n  <span class=\\"hljs-keyword\\">return</span> res[k<span class=\\"hljs-number\\">-1</span>]\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">backtrack</span>(<span class=\\"hljs-params\\">str</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(str.length===n){\\n      res.push(str)\\n      <span class=\\"hljs-keyword\\">return</span>\\n    }\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;<span class=\\"hljs-number\\">3</span>;i++){\\n      <span class=\\"hljs-keyword\\">let</span> s=<span class=\\"hljs-built_in\\">String</span>.fromCharCode(i+<span class=\\"hljs-number\\">97</span>)\\n      <span class=\\"hljs-keyword\\">if</span>(str.length&gt;<span class=\\"hljs-number\\">0</span> &amp;&amp; s===str[str.length<span class=\\"hljs-number\\">-1</span>])<span class=\\"hljs-keyword\\">continue</span>\\n      backtrack(str+s)\\n    }\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"the-k-th-lexicographical-string-of-all-happy-strings-of-length-n","created_at":"2020-04-18","timeArr":[2020,3,18,23,40,5,0],"hasThinking":false,"content":"<p>一个 「开心字符串」定义为：</p>\\n\\n<ul>\\n\\t<li>仅包含小写字母&nbsp;<code>[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</code>.</li>\\n\\t<li>对所有在&nbsp;<code>1</code>&nbsp;到&nbsp;<code>s.length - 1</code>&nbsp;之间的&nbsp;<code>i</code>&nbsp;，满足&nbsp;<code>s[i] != s[i + 1]</code>&nbsp;（字符串的下标从 1 开始）。</li>\\n</ul>\\n\\n<p>比方说，字符串&nbsp;<strong>&quot;abc&quot;</strong>，<strong>&quot;ac&quot;，&quot;b&quot;</strong> 和&nbsp;<strong>&quot;abcbabcbcb&quot;</strong>&nbsp;都是开心字符串，但是&nbsp;<strong>&quot;aa&quot;</strong>，<strong>&quot;baa&quot;</strong>&nbsp;和&nbsp;<strong>&quot;ababbc&quot;</strong>&nbsp;都不是开心字符串。</p>\\n\\n<p>给你两个整数 <code>n</code>&nbsp;和 <code>k</code>&nbsp;，你需要将长度为 <code>n</code>&nbsp;的所有开心字符串按字典序排序。</p>\\n\\n<p>请你返回排序后的第 k 个开心字符串，如果长度为 <code>n</code>&nbsp;的开心字符串少于 <code>k</code>&nbsp;个，那么请你返回 <strong>空字符串</strong>&nbsp;。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>n = 1, k = 3\\n<strong>输出：</strong>&quot;c&quot;\\n<strong>解释：</strong>列表 [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;] 包含了所有长度为 1 的开心字符串。按照字典序排序后第三个字符串为 &quot;c&quot; 。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>n = 1, k = 4\\n<strong>输出：</strong>&quot;&quot;\\n<strong>解释：</strong>长度为 1 的开心字符串只有 3 个。\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>n = 3, k = 9\\n<strong>输出：</strong>&quot;cab&quot;\\n<strong>解释：</strong>长度为 3 的开心字符串总共有 12 个 [&quot;aba&quot;, &quot;abc&quot;, &quot;aca&quot;, &quot;acb&quot;, &quot;bab&quot;, &quot;bac&quot;, &quot;bca&quot;, &quot;bcb&quot;, &quot;cab&quot;, &quot;cac&quot;, &quot;cba&quot;, &quot;cbc&quot;] 。第 9 个字符串为 &quot;cab&quot;\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre><strong>输入：</strong>n = 2, k = 7\\n<strong>输出：</strong>&quot;&quot;\\n</pre>\\n\\n<p><strong>示例 5：</strong></p>\\n\\n<pre><strong>输入：</strong>n = 10, k = 100\\n<strong>输出：</strong>&quot;abacbabacb&quot;\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= n &lt;= 10</code></li>\\n\\t<li><code>1 &lt;= k &lt;= 100</code></li>\\n</ul>\\n\\n<p>&nbsp;</p>\\n","title":"1415. 长度为 n 的开心字符串中字典序第 k 小的字符串","relatedTags":["字符串","回溯"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1415","slug":"1415-The-k-th-Lexicographical-String-of-All-Happy-Strings-of-Length-n"}')}}]);