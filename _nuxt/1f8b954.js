(window.webpackJsonp=window.webpackJsonp||[]).push([[880],{1678:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Solution</span><span class=\\"hljs-params\\">(object)</span>:</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">findAllConcatenatedWordsInADict</span><span class=\\"hljs-params\\">(self, words)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type words: List[str]\\n        :rtype: List[str]\\n        \\"\\"\\"</span>\\n        words = sorted(words,key=<span class=\\"hljs-keyword\\">lambda</span> t:len(t))\\n        word_dict = set()\\n        <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">isQualify</span><span class=\\"hljs-params\\">(w)</span>:</span>\\n            <span class=\\"hljs-keyword\\">if</span> w <span class=\\"hljs-keyword\\">in</span> word_dict:<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">True</span>\\n            <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(<span class=\\"hljs-number\\">1</span>,len(w)):\\n                <span class=\\"hljs-keyword\\">if</span> w[:i] <span class=\\"hljs-keyword\\">in</span> word_dict <span class=\\"hljs-keyword\\">and</span> isQualify(w[i:]):<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">True</span>\\n            <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">False</span>\\n        res = []\\n        <span class=\\"hljs-keyword\\">for</span> w <span class=\\"hljs-keyword\\">in</span> words:\\n            <span class=\\"hljs-keyword\\">if</span> isQualify(w):res.append(w)\\n            word_dict.add(w)\\n        <span class=\\"hljs-keyword\\">return</span> res\\n\\n\\n        \\n</code></pre>\\n"],"querySlug":"concatenated-words","created_at":"2019-03-04","timeArr":[2019,2,4,13,10,52,0],"hasThinking":false,"content":"<p>给定一个 <strong>不含重复 </strong>单词的字符串数组 <code>words</code> ，编写一个程序，返回&nbsp;<code>words</code> 中的所有 <strong>连接词</strong> 。</p>\\n\\n<p><strong>连接词</strong> 的定义为：一个字符串完全是由至少两个给定数组中的单词组成的。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>words = [\\"cat\\",\\"cats\\",\\"catsdogcats\\",\\"dog\\",\\"dogcatsdog\\",\\"hippopotamuses\\",\\"rat\\",\\"ratcatdogcat\\"]\\n<strong>输出：</strong>[\\"catsdogcats\\",\\"dogcatsdog\\",\\"ratcatdogcat\\"]\\n<strong>解释：</strong>\\"catsdogcats\\"由\\"cats\\", \\"dog\\" 和 \\"cats\\"组成; \\n     \\"dogcatsdog\\"由\\"dog\\", \\"cats\\"和\\"dog\\"组成; \\n     \\"ratcatdogcat\\"由\\"rat\\", \\"cat\\", \\"dog\\"和\\"cat\\"组成。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>words = [\\"cat\\",\\"dog\\",\\"catdog\\"]\\n<strong>输出：</strong>[\\"catdog\\"]</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= words.length &lt;= 10<sup>4</sup></code></li>\\n\\t<li><code>0 &lt;= words[i].length &lt;= 1000</code></li>\\n\\t<li><code>words[i]</code> 仅由小写字母组成</li>\\n\\t<li><code>0 &lt;= sum(words[i].length) &lt;= 10<sup>5</sup></code></li>\\n</ul>\\n","title":"472. 连接词","relatedTags":["深度优先搜索","字典树","字符串","动态规划"],"difficult":"Hard","lang":["python"],"uniqueID":"472","slug":"472-Concatenated-Words"}')}}]);