(window.webpackJsonp=window.webpackJsonp||[]).push([[923],{1721:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">n_rows</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">n_cols</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> Solution = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">n_rows, n_cols</span>) </span>{\\n  <span class=\\"hljs-keyword\\">this</span>.m=n_rows\\n  <span class=\\"hljs-keyword\\">this</span>.n=n_cols\\n  <span class=\\"hljs-keyword\\">this</span>.rest=<span class=\\"hljs-keyword\\">this</span>.m*<span class=\\"hljs-keyword\\">this</span>.n\\n  <span class=\\"hljs-keyword\\">this</span>.hash={}\\n};\\n\\n<span class=\\"hljs-comment\\">/**\\n * @return {number[]}\\n */</span>\\nSolution.prototype.flip = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> rd=<span class=\\"hljs-built_in\\">Math</span>.floor(<span class=\\"hljs-built_in\\">Math</span>.random()*<span class=\\"hljs-keyword\\">this</span>.rest)\\n  <span class=\\"hljs-keyword\\">this</span>.rest--\\n  <span class=\\"hljs-keyword\\">let</span> res=rd\\n  \\n  <span class=\\"hljs-comment\\">// 检查是否存在替代索引</span>\\n  <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-keyword\\">this</span>.hash[res]!=<span class=\\"hljs-literal\\">null</span>){\\n    res=<span class=\\"hljs-keyword\\">this</span>.hash[res]\\n  }\\n  \\n  <span class=\\"hljs-comment\\">// 路径压缩</span>\\n  <span class=\\"hljs-keyword\\">if</span>(rd&lt;<span class=\\"hljs-keyword\\">this</span>.rest){\\n    <span class=\\"hljs-keyword\\">this</span>.hash[rd]=<span class=\\"hljs-keyword\\">this</span>.rest\\n    <span class=\\"hljs-keyword\\">let</span> v=<span class=\\"hljs-keyword\\">this</span>.rest\\n    <span class=\\"hljs-keyword\\">while</span>(<span class=\\"hljs-keyword\\">this</span>.hash[v]!=<span class=\\"hljs-literal\\">null</span>){\\n      <span class=\\"hljs-keyword\\">if</span>(v===<span class=\\"hljs-keyword\\">this</span>.hash[v])<span class=\\"hljs-keyword\\">break</span>\\n      v=<span class=\\"hljs-keyword\\">this</span>.hash[v]\\n    }\\n    <span class=\\"hljs-keyword\\">this</span>.hash[rd]=v\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> [<span class=\\"hljs-built_in\\">Math</span>.floor(res/<span class=\\"hljs-keyword\\">this</span>.n),res%<span class=\\"hljs-keyword\\">this</span>.n]\\n};\\n\\n<span class=\\"hljs-comment\\">/**\\n * @return {void}\\n */</span>\\nSolution.prototype.reset = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{\\n  <span class=\\"hljs-keyword\\">this</span>.rest=<span class=\\"hljs-keyword\\">this</span>.m*<span class=\\"hljs-keyword\\">this</span>.n\\n  <span class=\\"hljs-keyword\\">this</span>.hash={}\\n};\\n\\n<span class=\\"hljs-comment\\">/** \\n * Your Solution object will be instantiated and called as such:\\n * var obj = new Solution(n_rows, n_cols)\\n * var param_1 = obj.flip()\\n * obj.reset()\\n */</span>\\n</code></pre>\\n"],"querySlug":"random-flip-matrix","created_at":"2019-04-29","timeArr":[2019,3,29,2,2,7,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>不需要构造一个二维矩阵，只需要将二维矩阵转换为一维数组，然后计算它的索引。</p>\\n<p>使用<code>fisher yates</code>洗牌算法思想，对于每次挑选的随机索引<code>rd</code>，首先检查它是否已经存在等价索引<code>hash[rd]</code>，并且与<code>this.rest</code>建立新的等价关系。</p>\\n","content":"<p>题中给出一个 <code>n_rows</code> 行 <code>n_cols</code> 列的二维矩阵，且所有值被初始化为 0。要求编写一个 <code>flip</code> 函数，<a href=\\"https://en.wikipedia.org/wiki/Discrete_uniform_distribution\\">均匀随机</a>的将矩阵中的 0 变为 1，并返回该值的位置下标 <code>[row_id,col_id]</code>；同样编写一个 <code>reset</code> 函数，将所有的值都重新置为 0。<strong>尽量最少调用随机函数 Math.random()</strong>，并且优化时间和空间复杂度。</p>\\n\\n<p><strong>注意:</strong></p>\\n\\n<ol>\\n\\t<li>1 &lt;= n_rows, n_cols &lt;= 10000</li>\\n\\t<li>0 &lt;= row.id &lt; n_rows 并且 0 &lt;= col.id &lt; n_cols</li>\\n\\t<li>当矩阵中没有值为 0 时，不可以调用 flip 函数</li>\\n\\t<li>调用 flip 和 reset 函数的次数加起来不会超过 1000 次</li>\\n</ol>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入: \\n</strong>[&quot;Solution&quot;,&quot;flip&quot;,&quot;flip&quot;,&quot;flip&quot;,&quot;flip&quot;]\\n[[2,3],[],[],[],[]]\\n<strong>输出: </strong>[null,[0,1],[1,2],[1,0],[1,1]]\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入: \\n</strong>[&quot;Solution&quot;,&quot;flip&quot;,&quot;flip&quot;,&quot;reset&quot;,&quot;flip&quot;]\\n[[1,2],[],[],[],[]]\\n<strong>输出: </strong>[null,[0,0],[0,1],null,[0,0]]</pre>\\n\\n<p><strong>输入语法解释：</strong></p>\\n\\n<p>输入包含两个列表：被调用的子程序和他们的参数。<code>Solution</code> 的构造函数有两个参数，分别为 <code>n_rows</code> 和 <code>n_cols</code>。<code>flip</code>&nbsp;和 <code>reset</code> 没有参数，参数总会以列表形式给出，哪怕该列表为空</p>\\n","title":"519. 随机翻转矩阵","relatedTags":["水塘抽样","哈希表","数学","随机化"],"difficult":"Middle","lang":["javascript"],"uniqueID":"519","slug":"519-Random-Flip-Matrix"}')}}]);