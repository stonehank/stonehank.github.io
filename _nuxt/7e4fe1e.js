(window.webpackJsonp=window.webpackJsonp||[]).push([[230],{1028:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">S</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{string}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> removeOuterParentheses = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">S</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> aux=[]\\n  <span class=\\"hljs-keyword\\">let</span> valid=<span class=\\"hljs-number\\">0</span>,start=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;S.length;i++){\\n    <span class=\\"hljs-keyword\\">if</span>(S[i]===<span class=\\"hljs-string\\">\\"(\\"</span>)valid++\\n    <span class=\\"hljs-keyword\\">else</span> valid--\\n    <span class=\\"hljs-keyword\\">if</span>(valid===<span class=\\"hljs-number\\">0</span>){\\n      aux.push(S.substring(start,i+<span class=\\"hljs-number\\">1</span>))\\n      start=i+<span class=\\"hljs-number\\">1</span>\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-string\\">\'\'</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;aux.length;i++){\\n    res+=aux[i].substring(<span class=\\"hljs-number\\">1</span>,aux[i].length<span class=\\"hljs-number\\">-1</span>)\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"remove-outermost-parentheses","created_at":"2019-04-07","timeArr":[2019,3,7,13,25,23,0],"hasThinking":false,"content":"<p>有效括号字符串为空 <code>\\"\\"</code>、<code>\\"(\\" + A + \\")\\"</code> 或 <code>A + B</code> ，其中 <code>A</code> 和 <code>B</code> 都是有效的括号字符串，<code>+</code> 代表字符串的连接。</p>\\n\\n<ul>\\n\\t<li>例如，<code>\\"\\"</code>，<code>\\"()\\"</code>，<code>\\"(())()\\"</code> 和 <code>\\"(()(()))\\"</code> 都是有效的括号字符串。</li>\\n</ul>\\n\\n<p>如果有效字符串 <code>s</code> 非空，且不存在将其拆分为 <code>s = A + B</code> 的方法，我们称其为<strong>原语（primitive）</strong>，其中 <code>A</code> 和 <code>B</code> 都是非空有效括号字符串。</p>\\n\\n<p>给出一个非空有效字符串 <code>s</code>，考虑将其进行原语化分解，使得：<code>s = P_1 + P_2 + ... + P_k</code>，其中 <code>P_i</code> 是有效括号字符串原语。</p>\\n\\n<p>对 <code>s</code> 进行原语化分解，删除分解中每个原语字符串的最外层括号，返回 <code>s</code> 。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = \\"(()())(())\\"\\n<strong>输出：</strong>\\"()()()\\"\\n<strong>解释：\\n</strong>输入字符串为 \\"(()())(())\\"，原语化分解得到 \\"(()())\\" + \\"(())\\"，\\n删除每个部分中的最外层括号后得到 \\"()()\\" + \\"()\\" = \\"()()()\\"。</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = \\"(()())(())(()(()))\\"\\n<strong>输出：</strong>\\"()()()()(())\\"\\n<strong>解释：</strong>\\n输入字符串为 \\"(()())(())(()(()))\\"，原语化分解得到 \\"(()())\\" + \\"(())\\" + \\"(()(()))\\"，\\n删除每个部分中的最外层括号后得到 \\"()()\\" + \\"()\\" + \\"()(())\\" = \\"()()()()(())\\"。\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = \\"()()\\"\\n<strong>输出：</strong>\\"\\"\\n<strong>解释：</strong>\\n输入字符串为 \\"()()\\"，原语化分解得到 \\"()\\" + \\"()\\"，\\n删除每个部分中的最外层括号后得到 \\"\\" + \\"\\" = \\"\\"。\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= s.length <= 10<sup>5</sup></code></li>\\n\\t<li><code>s[i]</code> 为 <code>\'(\'</code> 或 <code>\')\'</code></li>\\n\\t<li><code>s</code> 是一个有效括号字符串</li>\\n</ul>\\n","title":"1021. 删除最外层的括号","relatedTags":["栈","字符串"],"difficult":"Easy","lang":["javascript"],"uniqueID":"1021","slug":"1021-Remove-Outermost-Parentheses"}')}}]);