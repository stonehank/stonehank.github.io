(window.webpackJsonp=window.webpackJsonp||[]).push([[1257],{2055:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string[]}</span> <span class=\\"hljs-variable\\">A</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> numSpecialEquivGroups = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">A</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> visited=<span class=\\"hljs-built_in\\">Array</span>(A.length).fill(<span class=\\"hljs-literal\\">false</span>)\\n  <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">isValid</span>(<span class=\\"hljs-params\\">s1,s2</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> a1=s1.split(<span class=\\"hljs-string\\">\'\'</span>),a2=s2.split(<span class=\\"hljs-string\\">\'\'</span>)\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;a1.length;i++){\\n      <span class=\\"hljs-keyword\\">if</span>(a1[i]!==a2[i]){\\n        <span class=\\"hljs-keyword\\">let</span> id=i+<span class=\\"hljs-number\\">2</span>\\n        <span class=\\"hljs-keyword\\">while</span>(id&lt;a1.length &amp;&amp; a1[id]!==a2[i])id+=<span class=\\"hljs-number\\">2</span>\\n        <span class=\\"hljs-keyword\\">if</span>(a1[id]!==a2[i])<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n        <span class=\\"hljs-keyword\\">let</span> t=a1[i]\\n        a1[i]=a1[id]\\n        a1[id]=t\\n      }\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n  }\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;A.length;i++){\\n    <span class=\\"hljs-keyword\\">if</span>(visited[i])<span class=\\"hljs-keyword\\">continue</span>\\n    visited[i]=<span class=\\"hljs-literal\\">true</span>\\n    res++\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=i+<span class=\\"hljs-number\\">1</span>;j&lt;A.length;j++){\\n      <span class=\\"hljs-keyword\\">if</span>(isValid(A[i],A[j])){\\n        visited[j]=<span class=\\"hljs-literal\\">true</span>\\n      }\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"groups-of-special-equivalent-strings","created_at":"2019-03-28","timeArr":[2019,2,28,18,41,53,0],"hasThinking":false,"content":"<p>给你一个字符串数组 <code>words</code>。</p>\\n\\n<p>一步操作中，你可以交换字符串 <code>words[i]</code> 的任意两个偶数下标对应的字符或任意两个奇数下标对应的字符。</p>\\n\\n<p>对两个字符串&nbsp;<code>words[i]</code> 和 <code>words[j]</code> 而言，如果经过任意次数的操作，<code>words[i] == words[j]</code> ，那么这两个字符串是 <strong>特殊等价 </strong>的。</p>\\n\\n<ul>\\n\\t<li>例如，<code>words[i] = \\"zzxy\\"</code> 和 <code>words[j] = \\"xyzz\\"</code> 是一对 <strong>特殊等价</strong> 字符串，因为可以按 <code>\\"zzxy\\" -&gt; \\"xzzy\\" -&gt; \\"xyzz\\"</code> 的操作路径使&nbsp;<code>words[i] == words[j]</code> 。</li>\\n</ul>\\n\\n<p>现在规定，<strong><code>words</code> </strong>的 <strong>一组特殊等价字符串 </strong>就是 <code>words</code> 的一个同时满足下述条件的非空子集：</p>\\n\\n<ul>\\n\\t<li>该组中的每一对字符串都是<strong> 特殊等价 </strong>的</li>\\n\\t<li>该组字符串已经涵盖了该类别中的所有特殊等价字符串，容量达到理论上的最大值（也就是说，如果一个字符串不在该组中，那么这个字符串就 <strong>不会</strong> 与该组内任何字符串特殊等价）</li>\\n</ul>\\n\\n<p>返回 <code>words</code> 中 <strong>特殊等价字符串组</strong> 的数量。</p>\\n\\n<p>&nbsp;</p>\\n\\n<ul>\\n</ul>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>words = [\\"abcd\\",\\"cdab\\",\\"cbad\\",\\"xyzz\\",\\"zzxy\\",\\"zzyx\\"]\\n<strong>输出：</strong>3\\n<strong>解释：</strong>\\n其中一组为 [\\"abcd\\", \\"cdab\\", \\"cbad\\"]，因为它们是成对的特殊等价字符串，且没有其他字符串与这些字符串特殊等价。\\n另外两组分别是 [\\"xyzz\\", \\"zzxy\\"] 和 [\\"zzyx\\"]。特别需要注意的是，\\"zzxy\\" 不与 \\"zzyx\\" 特殊等价。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>words = [\\"abc\\",\\"acb\\",\\"bac\\",\\"bca\\",\\"cab\\",\\"cba\\"]\\n<strong>输出：</strong>3\\n<strong>解释：</strong>3 组 [\\"abc\\",\\"cba\\"]，[\\"acb\\",\\"bca\\"]，[\\"bac\\",\\"cab\\"]\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= words.length &lt;= 1000</code></li>\\n\\t<li><code>1 &lt;= words[i].length &lt;= 20</code></li>\\n\\t<li>所有 <code>words[i]</code>&nbsp;都只由小写字母组成。</li>\\n\\t<li>所有 <code>words[i]</code>&nbsp;都具有相同的长度。</li>\\n</ul>\\n","title":"893. 特殊等价字符串组","relatedTags":["数组","哈希表","字符串"],"difficult":"Middle","lang":["javascript"],"uniqueID":"893","slug":"893-Groups-of-Special-Equivalent-Strings"}')}}]);