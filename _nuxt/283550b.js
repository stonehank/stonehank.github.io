(window.webpackJsonp=window.webpackJsonp||[]).push([[753],{1551:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Solution</span><span class=\\"hljs-params\\">(object)</span>:</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">search</span><span class=\\"hljs-params\\">(self, nums, target)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: int\\n        \\"\\"\\"</span>\\n        <span class=\\"hljs-keyword\\">if</span> <span class=\\"hljs-keyword\\">not</span> len(nums):<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">-1</span>\\n        head=nums[<span class=\\"hljs-number\\">0</span>]\\n        tail=nums[<span class=\\"hljs-number\\">-1</span>]\\n        lo,hi=<span class=\\"hljs-number\\">0</span>,len(nums)<span class=\\"hljs-number\\">-1</span>\\n        <span class=\\"hljs-comment\\"># print lo,hi</span>\\n        <span class=\\"hljs-keyword\\">while</span> lo&lt;=hi:\\n            mid=(lo+hi) // <span class=\\"hljs-number\\">2</span>\\n            <span class=\\"hljs-comment\\"># print mid,nums[mid],target,head,tail</span>\\n            <span class=\\"hljs-keyword\\">if</span> nums[mid]==target:\\n                <span class=\\"hljs-keyword\\">return</span> mid\\n            <span class=\\"hljs-keyword\\">elif</span> nums[mid]&gt;tail <span class=\\"hljs-keyword\\">and</span> target&lt;=tail:\\n                lo=mid+<span class=\\"hljs-number\\">1</span>\\n            <span class=\\"hljs-keyword\\">elif</span> nums[mid]&lt;=tail <span class=\\"hljs-keyword\\">and</span> target&lt;=tail:\\n                <span class=\\"hljs-keyword\\">if</span> nums[mid]&lt;target:\\n                    lo=mid+<span class=\\"hljs-number\\">1</span>\\n                <span class=\\"hljs-keyword\\">else</span>:\\n                    hi=mid<span class=\\"hljs-number\\">-1</span>\\n            <span class=\\"hljs-keyword\\">elif</span> nums[mid]&lt;head <span class=\\"hljs-keyword\\">and</span> target&gt;=head:\\n                hi=mid<span class=\\"hljs-number\\">-1</span>\\n            <span class=\\"hljs-keyword\\">elif</span> nums[mid]&gt;=head <span class=\\"hljs-keyword\\">and</span> target&gt;=head:\\n                <span class=\\"hljs-keyword\\">if</span> nums[mid]&lt;target:\\n                    lo=mid+<span class=\\"hljs-number\\">1</span>\\n                <span class=\\"hljs-keyword\\">else</span>:\\n                    hi=mid<span class=\\"hljs-number\\">-1</span>\\n            <span class=\\"hljs-keyword\\">else</span>:\\n                <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">-1</span>\\n        <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">-1</span>\\n</code></pre>\\n"],"querySlug":"search-in-rotated-sorted-array","created_at":"2019-02-23","timeArr":[2019,1,23,13,36,34,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p><code>二分</code>，首先要找到旋转点；</p>\\n<ul>\\n<li>\\n<p>找旋转点：选择一个随机位置<code>mid</code>，如果这个位置比<code>nums[0]</code>大，那么说明旋转点还在右边；\\n如果这个位置比<code>nums[0]</code>更小，说明旋转点就是当前点或者在当前点的左边。</p>\\n<p>找出旋转点后，整个数组就被分割成了旋转点以左和旋转点以右，这两边都是有序的。</p>\\n</li>\\n<li>\\n<p>找<code>target</code>点：判断<code>target</code>在左侧还是在右侧，接着用最基本的二分查找<code>target</code>。</p>\\n</li>\\n</ul>\\n","content":"<p>整数数组 <code>nums</code> 按升序排列，数组中的值 <strong>互不相同</strong> 。</p>\\n\\n<p>在传递给函数之前，<code>nums</code> 在预先未知的某个下标 <code>k</code>（<code>0 <= k < nums.length</code>）上进行了 <strong>旋转</strong>，使数组变为 <code>[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]</code>（下标 <strong>从 0 开始</strong> 计数）。例如， <code>[0,1,2,4,5,6,7]</code> 在下标 <code>3</code> 处经旋转后可能变为 <code>[4,5,6,7,0,1,2]</code> 。</p>\\n\\n<p>给你 <strong>旋转后</strong> 的数组 <code>nums</code> 和一个整数 <code>target</code> ，如果 <code>nums</code> 中存在这个目标值 <code>target</code> ，则返回它的下标，否则返回 <code>-1</code> 。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [<code>4,5,6,7,0,1,2]</code>, target = 0\\n<strong>输出：</strong>4\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [<code>4,5,6,7,0,1,2]</code>, target = 3\\n<strong>输出：</strong>-1</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [1], target = 0\\n<strong>输出：</strong>-1\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= nums.length <= 5000</code></li>\\n\\t<li><code>-10^4 <= nums[i] <= 10^4</code></li>\\n\\t<li><code>nums</code> 中的每个值都 <strong>独一无二</strong></li>\\n\\t<li>题目数据保证 <code>nums</code> 在预先未知的某个下标上进行了旋转</li>\\n\\t<li><code>-10^4 <= target <= 10^4</code></li>\\n</ul>\\n\\n<p> </p>\\n\\n<p><strong>进阶：</strong>你可以设计一个时间复杂度为 <code>O(log n)</code> 的解决方案吗？</p>\\n","title":"33. 搜索旋转排序数组","relatedTags":["数组","二分查找"],"difficult":"Middle","lang":["python"],"uniqueID":"33","slug":"33-Search-in-Rotated-Sorted-Array"}')}}]);