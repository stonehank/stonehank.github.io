(window.webpackJsonp=window.webpackJsonp||[]).push([[1177],{1975:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string[]}</span> <span class=\\"hljs-variable\\">words</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> minimumLengthEncoding = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">words</span>) </span>{\\n  words.sort(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">a,b</span>)=&gt;</span>b.length-a.length)\\n  <span class=\\"hljs-keyword\\">let</span> hash={}\\n  <span class=\\"hljs-keyword\\">let</span> len=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">let</span> wordList=[]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> word <span class=\\"hljs-keyword\\">of</span> words){\\n    <span class=\\"hljs-keyword\\">if</span>(hash[word]){\\n      <span class=\\"hljs-keyword\\">continue</span>\\n    }\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;word.length;i++){\\n      hash[word.slice(i)]=<span class=\\"hljs-literal\\">true</span>\\n    }\\n    len+=word.length+<span class=\\"hljs-number\\">1</span>\\n    wordList.push(word)\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> len\\n};\\n</code></pre>\\n"],"querySlug":"short-encoding-of-words","created_at":"2020-03-28","timeArr":[2020,2,28,17,59,59,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>根据题意，一个单词如果是其他<strong>任何</strong>单词的后缀，那么这个单词可以忽略。</p>\\n<p>使用<code>map</code>保存所有单词，然后按单词长度从长到短排序(因为长的可能包含短的)，对每个单词进行它的后缀检测，如果<code>map</code>存在这个后缀，\\n从<code>map</code>中删除这个后缀，检查完毕，给当前<code>words[i]</code>添加<code>#</code>(也就是<code>len+=words[i].length+1</code>)，并且把当前单词也从<code>map</code>中删除。</p>\\n","content":"<p>单词数组 <code>words</code> 的 <strong>有效编码</strong> 由任意助记字符串 <code>s</code> 和下标数组 <code>indices</code> 组成，且满足：</p>\\n\\n<ul>\\n\\t<li><code>words.length == indices.length</code></li>\\n\\t<li>助记字符串 <code>s</code> 以 <code>\'#\'</code> 字符结尾</li>\\n\\t<li>对于每个下标 <code>indices[i]</code> ，<code>s</code> 的一个从 <code>indices[i]</code> 开始、到下一个 <code>\'#\'</code> 字符结束（但不包括 <code>\'#\'</code>）的 <strong>子字符串</strong> 恰好与 <code>words[i]</code> 相等</li>\\n</ul>\\n\\n<p>给你一个单词数组 <code>words</code> ，返回成功对 <code>words</code> 进行编码的最小助记字符串 <code>s</code> 的长度 。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>words = [\\"time\\", \\"me\\", \\"bell\\"]\\n<strong>输出：</strong>10\\n<strong>解释：</strong>一组有效编码为 s = <code>\\"time#bell#\\" 和 indices = [0, 2, 5</code>] 。\\nwords[0] = \\"time\\" ，s 开始于 indices[0] = 0 到下一个 \'#\' 结束的子字符串，如加粗部分所示 \\"<strong>time</strong>#bell#\\"\\nwords[1] = \\"me\\" ，s 开始于 indices[1] = 2 到下一个 \'#\' 结束的子字符串，如加粗部分所示 \\"ti<strong>me</strong>#bell#\\"\\nwords[2] = \\"bell\\" ，s 开始于 indices[2] = 5 到下一个 \'#\' 结束的子字符串，如加粗部分所示 \\"time#<strong>bell</strong>#\\"\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>words = [\\"t\\"]\\n<strong>输出：</strong>2\\n<strong>解释：</strong>一组有效编码为 s = \\"t#\\" 和 indices = [0] 。\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= words.length <= 2000</code></li>\\n\\t<li><code>1 <= words[i].length <= 7</code></li>\\n\\t<li><code>words[i]</code> 仅由小写字母组成</li>\\n</ul>\\n","title":"820. 单词的压缩编码","relatedTags":["字典树","数组","哈希表","字符串"],"difficult":"Middle","lang":["javascript"],"uniqueID":"820","slug":"820-Short-Encoding-of-Words"}')}}]);