(window.webpackJsonp=window.webpackJsonp||[]).push([[668],{1466:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{character[][]}</span> <span class=\\"hljs-variable\\">board</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string[]}</span> <span class=\\"hljs-variable\\">words</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{string[]}</span></span>\\n */</span>\\n<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">findWords</span>(<span class=\\"hljs-params\\">board, words</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> tire={}\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;words.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> t=tire\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;words[i].length;j++){\\n      <span class=\\"hljs-keyword\\">let</span> l=words[i][j]\\n      <span class=\\"hljs-keyword\\">if</span>(t[l]==<span class=\\"hljs-literal\\">null</span>)t[l]={}\\n      <span class=\\"hljs-keyword\\">if</span>(j===words[i].length<span class=\\"hljs-number\\">-1</span>){\\n        t[l].word=words[i]\\n      }\\n      t=t[l]\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> res=[]\\n  <span class=\\"hljs-keyword\\">let</span> m=board.length,n=board[<span class=\\"hljs-number\\">0</span>].length\\n  <span class=\\"hljs-keyword\\">let</span> moves=[[<span class=\\"hljs-number\\">1</span>,<span class=\\"hljs-number\\">0</span>],[<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">0</span>],[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">1</span>],[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">-1</span>]]\\n  <span class=\\"hljs-keyword\\">let</span> used=<span class=\\"hljs-built_in\\">Array</span>(m).fill().map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span>=&gt;</span><span class=\\"hljs-built_in\\">Array</span>(n).fill(<span class=\\"hljs-number\\">0</span>)),uniq=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span> (<span class=\\"hljs-keyword\\">let</span> i = <span class=\\"hljs-number\\">0</span>; i &lt; board.length; i++) {\\n    <span class=\\"hljs-keyword\\">for</span> (<span class=\\"hljs-keyword\\">let</span> j = <span class=\\"hljs-number\\">0</span>; j &lt; board[<span class=\\"hljs-number\\">0</span>].length; j++) {\\n      <span class=\\"hljs-keyword\\">if</span>(tire[board[i][j]]==<span class=\\"hljs-literal\\">null</span>)<span class=\\"hljs-keyword\\">continue</span>\\n      uniq++\\n      dfs([i,j],tire[board[i][j]])\\n    }\\n  }\\n\\n  <span class=\\"hljs-keyword\\">return</span> res\\n\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">dfs</span>(<span class=\\"hljs-params\\">[x,y],tire</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(tire.word){\\n      res.push(tire.word)    \\n      tire.word=<span class=\\"hljs-literal\\">null</span>\\n    }\\n    used[x][y]=uniq\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> [dX,dY] <span class=\\"hljs-keyword\\">of</span> moves){\\n      <span class=\\"hljs-keyword\\">let</span> nX=x+dX,nY=y+dY\\n      <span class=\\"hljs-keyword\\">if</span>(nX&lt;<span class=\\"hljs-number\\">0</span> || nY&lt;<span class=\\"hljs-number\\">0</span> || nX&gt;=m || nY&gt;=n)<span class=\\"hljs-keyword\\">continue</span>\\n      <span class=\\"hljs-keyword\\">if</span>(used[nX][nY]===uniq)<span class=\\"hljs-keyword\\">continue</span>\\n      <span class=\\"hljs-keyword\\">if</span>(tire[board[nX][nY]]==<span class=\\"hljs-literal\\">null</span>)<span class=\\"hljs-keyword\\">continue</span>\\n      dfs([nX,nY],tire[board[nX][nY]])\\n    }\\n    used[x][y]=uniq<span class=\\"hljs-number\\">-1</span>\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"word-search-ii","created_at":"2019-04-18","timeArr":[2019,3,18,16,2,43,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>先对<code>words</code>构建<code>Tire</code>树，接着对<code>board</code>上每一个点作为起点，<code>dfs</code>遍历查找是否存在<code>tire.word</code>，<code>tire.word</code>意味着单词背查找到，\\n如果存在，将<code>tire.word</code>添加到结果中并且设置为<code>null</code>(避免重复查找)。</p>\\n","content":"<p>给定一个 <code>m x n</code> 二维字符网格 <code>board</code><strong> </strong>和一个单词（字符串）列表 <code>words</code>，找出所有同时在二维网格和字典中出现的单词。</p>\\n\\n<p>单词必须按照字母顺序，通过 <strong>相邻的单元格</strong> 内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母在一个单词中不允许被重复使用。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2020/11/07/search1.jpg\\" style=\\"width: 322px; height: 322px;\\" />\\n<pre>\\n<strong>输入：</strong>board = [[\\"o\\",\\"a\\",\\"a\\",\\"n\\"],[\\"e\\",\\"t\\",\\"a\\",\\"e\\"],[\\"i\\",\\"h\\",\\"k\\",\\"r\\"],[\\"i\\",\\"f\\",\\"l\\",\\"v\\"]], words = [\\"oath\\",\\"pea\\",\\"eat\\",\\"rain\\"]\\n<strong>输出：</strong>[\\"eat\\",\\"oath\\"]\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2020/11/07/search2.jpg\\" style=\\"width: 162px; height: 162px;\\" />\\n<pre>\\n<strong>输入：</strong>board = [[\\"a\\",\\"b\\"],[\\"c\\",\\"d\\"]], words = [\\"abcb\\"]\\n<strong>输出：</strong>[]\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>m == board.length</code></li>\\n\\t<li><code>n == board[i].length</code></li>\\n\\t<li><code>1 <= m, n <= 12</code></li>\\n\\t<li><code>board[i][j]</code> 是一个小写英文字母</li>\\n\\t<li><code>1 <= words.length <= 3 * 10<sup>4</sup></code></li>\\n\\t<li><code>1 <= words[i].length <= 10</code></li>\\n\\t<li><code>words[i]</code> 由小写英文字母组成</li>\\n\\t<li><code>words</code> 中的所有字符串互不相同</li>\\n</ul>\\n","title":"212. 单词搜索 II","relatedTags":["字典树","数组","字符串","回溯","矩阵"],"difficult":"Hard","lang":["javascript"],"uniqueID":"212","slug":"212-Word-Search-II"}')}}]);