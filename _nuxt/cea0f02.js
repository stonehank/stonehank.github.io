(window.webpackJsonp=window.webpackJsonp||[]).push([[873],{1671:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">grid</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> islandPerimeter = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">grid</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> perimeter=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">let</span> moves=[[<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">0</span>],[<span class=\\"hljs-number\\">1</span>,<span class=\\"hljs-number\\">0</span>],[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">1</span>],[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">-1</span>]]\\n  <span class=\\"hljs-keyword\\">let</span> m=grid.length,n=grid[<span class=\\"hljs-number\\">0</span>].length\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;m;i++){\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;n;j++){\\n      <span class=\\"hljs-keyword\\">if</span>(grid[i][j]!==<span class=\\"hljs-number\\">1</span>)<span class=\\"hljs-keyword\\">continue</span>\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> [dx,dy] <span class=\\"hljs-keyword\\">of</span> moves){\\n        <span class=\\"hljs-keyword\\">let</span> nx=i+dx,ny=j+dy\\n        <span class=\\"hljs-keyword\\">if</span>(nx&lt;<span class=\\"hljs-number\\">0</span> || ny &lt;<span class=\\"hljs-number\\">0</span> || nx&gt;=m || ny&gt;=n){\\n          perimeter++\\n          <span class=\\"hljs-keyword\\">continue</span>\\n        }\\n        <span class=\\"hljs-keyword\\">if</span>(grid[nx][ny]===<span class=\\"hljs-number\\">0</span>)perimeter++\\n      }\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> perimeter\\n};\\n</code></pre>\\n"],"querySlug":"island-perimeter","created_at":"2019-04-05","timeArr":[2019,3,5,22,59,48,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>遍历<code>grid</code>，发现<code>1</code>时，检查周围4个方向， 如果存在<code>0</code>或者是<code>grid</code>的边缘，则说明这一条边是对着外面的，可以算为周长。</p>\\n","content":"<p>给定一个 <code>row x col</code> 的二维网格地图 <code>grid</code> ，其中：<code>grid[i][j] = 1</code> 表示陆地， <code>grid[i][j] = 0</code> 表示水域。</p>\\n\\n<p>网格中的格子 <strong>水平和垂直</strong> 方向相连（对角线方向不相连）。整个网格被水完全包围，但其中恰好有一个岛屿（或者说，一个或多个表示陆地的格子相连组成的岛屿）。</p>\\n\\n<p>岛屿中没有“湖”（“湖” 指水域在岛屿内部且不和岛屿周围的水相连）。格子是边长为 1 的正方形。网格为长方形，且宽度和高度均不超过 100 。计算这个岛屿的周长。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<p><img src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/island.png\\" /></p>\\n\\n<pre>\\n<strong>输入：</strong>grid = [[0,1,0,0],[1,1,1,0],[0,1,0,0],[1,1,0,0]]\\n<strong>输出：</strong>16\\n<strong>解释：</strong>它的周长是上面图片中的 16 个黄色的边</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>grid = [[1]]\\n<strong>输出：</strong>4\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>grid = [[1,0]]\\n<strong>输出：</strong>4\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>row == grid.length</code></li>\\n\\t<li><code>col == grid[i].length</code></li>\\n\\t<li><code>1 <= row, col <= 100</code></li>\\n\\t<li><code>grid[i][j]</code> 为 <code>0</code> 或 <code>1</code></li>\\n</ul>\\n","title":"463. 岛屿的周长","relatedTags":["深度优先搜索","广度优先搜索","数组","矩阵"],"difficult":"Easy","lang":["javascript"],"uniqueID":"463","slug":"463-Island-Perimeter"}')}}]);