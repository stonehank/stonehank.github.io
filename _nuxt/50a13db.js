(window.webpackJsonp=window.webpackJsonp||[]).push([[456],{1254:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * // Definition for a Node.\\n * function Node(val,next,random) {\\n *    this.val = val;\\n *    this.next = next;\\n *    this.random = random;\\n * };\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{Node}</span> <span class=\\"hljs-variable\\">head</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{Node}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> copyRandomList = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">head</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> cur = head\\n  <span class=\\"hljs-keyword\\">while</span> (cur) {\\n    cur.next = <span class=\\"hljs-keyword\\">new</span> Node(cur.val, cur.next)\\n    cur = cur.next.next\\n  }\\n  cur = head\\n  <span class=\\"hljs-keyword\\">while</span> (cur) {\\n    <span class=\\"hljs-keyword\\">if</span> (cur.random) {\\n      cur.next.random = cur.random.next\\n    }\\n    cur = cur.next.next\\n  }\\n  cur = head\\n  <span class=\\"hljs-keyword\\">let</span> cloned = <span class=\\"hljs-keyword\\">new</span> Node()\\n  <span class=\\"hljs-keyword\\">let</span> cloned_cur = cloned\\n  <span class=\\"hljs-keyword\\">while</span> (cur) {\\n    <span class=\\"hljs-keyword\\">const</span> nn = cur.next.next\\n    cloned_cur = cloned_cur.next = cur.next\\n    cur = cur.next = nn\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> cloned.next\\n};\\n</code></pre>\\n","<pre class=\\"hljs\\"><code><span class=\\"hljs-string\\">\\"\\"\\"\\n# Definition for a Node.\\nclass Node(object):\\n    def __init__(self, val, next, random):\\n        self.val = val\\n        self.next = next\\n        self.random = random\\n\\"\\"\\"</span>\\n<span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Solution</span><span class=\\"hljs-params\\">(object)</span>:</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">copyRandomList</span><span class=\\"hljs-params\\">(self, head)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type head: Node\\n        :rtype: Node\\n        \\"\\"\\"</span>\\n        <span class=\\"hljs-keyword\\">if</span> <span class=\\"hljs-keyword\\">not</span> head:<span class=\\"hljs-keyword\\">return</span> head\\n        node=head\\n        <span class=\\"hljs-keyword\\">while</span> node:\\n          nxt=node.next\\n          copy=Node(node.val,nxt,<span class=\\"hljs-literal\\">None</span>)\\n          node.next=copy\\n          node=node.next.next\\n        \\n        node=head\\n        <span class=\\"hljs-keyword\\">while</span> node:\\n          rd=node.random\\n          <span class=\\"hljs-keyword\\">if</span> rd:\\n            node.next.random=rd.next  \\n          node=node.next.next\\n          \\n        result=Node(<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-literal\\">None</span>,<span class=\\"hljs-literal\\">None</span>)\\n        r=result\\n        node=head\\n        <span class=\\"hljs-keyword\\">while</span> node:\\n          copy=node.next\\n          nxt=node.next.next\\n          r.next=copy\\n          r=r.next\\n          node.next=nxt\\n          node=node.next\\n\\n        <span class=\\"hljs-keyword\\">return</span> result.next     \\n</code></pre>\\n"],"querySlug":"copy-list-with-random-pointer","hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>第一次遍历：在每一个节点后面添加一个<code>val</code>相同的节点<code>copy</code>。</p>\\n<p>第二次遍历：对每一个<code>新</code>节点添加<code>random</code>属性，<code>copy.random = oldNode.random.next</code></p>\\n<p>第三次遍历：将<code>copy</code>单独提取出，删除原链表中的所有<code>copy</code>。</p>\\n","content":"<p>给你一个长度为 <code>n</code> 的链表，每个节点包含一个额外增加的随机指针 <code>random</code> ，该指针可以指向链表中的任何节点或空节点。</p>\\n\\n<p>构造这个链表的 <strong><a href=\\"https://baike.baidu.com/item/深拷贝/22785317?fr=aladdin\\" target=\\"_blank\\">深拷贝</a></strong>。 深拷贝应该正好由 <code>n</code> 个 <strong>全新</strong> 节点组成，其中每个新节点的值都设为其对应的原节点的值。新节点的 <code>next</code> 指针和 <code>random</code> 指针也都应指向复制链表中的新节点，并使原链表和复制链表中的这些指针能够表示相同的链表状态。<strong>复制链表中的指针都不应指向原链表中的节点 </strong>。</p>\\n\\n<p>例如，如果原链表中有 <code>X</code> 和 <code>Y</code> 两个节点，其中 <code>X.random --\x3e Y</code> 。那么在复制链表中对应的两个节点 <code>x</code> 和 <code>y</code> ，同样有 <code>x.random --\x3e y</code> 。</p>\\n\\n<p>返回复制链表的头节点。</p>\\n\\n<p>用一个由 <code>n</code> 个节点组成的链表来表示输入/输出中的链表。每个节点用一个 <code>[val, random_index]</code> 表示：</p>\\n\\n<ul>\\n\\t<li><code>val</code>：一个表示 <code>Node.val</code> 的整数。</li>\\n\\t<li><code>random_index</code>：随机指针指向的节点索引（范围从 <code>0</code> 到 <code>n-1</code>）；如果不指向任何节点，则为  <code>null</code> 。</li>\\n</ul>\\n\\n<p>你的代码 <strong>只</strong> 接受原链表的头节点 <code>head</code> 作为传入参数。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<p><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/09/e1.png\\" style=\\"height: 138px; width: 680px;\\" /></p>\\n\\n<pre>\\n<strong>输入：</strong>head = [[7,null],[13,0],[11,4],[10,2],[1,0]]\\n<strong>输出：</strong>[[7,null],[13,0],[11,4],[10,2],[1,0]]\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<p><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/09/e2.png\\" style=\\"height: 111px; width: 680px;\\" /></p>\\n\\n<pre>\\n<strong>输入：</strong>head = [[1,1],[2,1]]\\n<strong>输出：</strong>[[1,1],[2,1]]\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<p><strong><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/09/e3.png\\" style=\\"height: 119px; width: 680px;\\" /></strong></p>\\n\\n<pre>\\n<strong>输入：</strong>head = [[3,null],[3,0],[3,null]]\\n<strong>输出：</strong>[[3,null],[3,0],[3,null]]\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>head = []\\n<strong>输出：</strong>[]\\n<strong>解释：</strong>给定的链表为空（空指针），因此返回 null。\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>0 <= n <= 1000</code></li>\\n\\t<li><code>-10000 <= Node.val <= 10000</code></li>\\n\\t<li><code>Node.random</code> 为空（null）或指向链表中的节点。</li>\\n</ul>\\n","title":"138. 复制带随机指针的链表","relatedTags":["哈希表","链表"],"difficult":"Middle","lang":["javascript","python"],"uniqueID":"138","slug":"138-Copy-List-with-Random-Pointer"}')}}]);