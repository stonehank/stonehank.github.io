(window.webpackJsonp=window.webpackJsonp||[]).push([[430],{1228:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">gas</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">cost</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> canCompleteCircuit = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">gas, cost</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> atLeast=<span class=\\"hljs-number\\">0</span>,curSum=<span class=\\"hljs-number\\">0</span>,start=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;gas.length;i++){\\n    curSum+=gas[i]-cost[i]\\n    <span class=\\"hljs-keyword\\">if</span>(curSum&lt;<span class=\\"hljs-number\\">0</span>){\\n      atLeast+= -curSum\\n      curSum=<span class=\\"hljs-number\\">0</span>\\n      start=i+<span class=\\"hljs-number\\">1</span>\\n    }\\n  }\\n  <span class=\\"hljs-comment\\">// console.log(curSum,atLeast)</span>\\n  <span class=\\"hljs-keyword\\">if</span>(curSum&lt;atLeast)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">-1</span>\\n  <span class=\\"hljs-keyword\\">return</span> start\\n};\\n</code></pre>\\n"],"querySlug":"gas-station","created_at":"2019-04-12","timeArr":[2019,3,12,19,27,45,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>假设在某一个点，如果发现<code>cost[i]&gt;gas[i]</code>说明过不去，也就是说需要绕一圈可能才能通过，那么在尾巴的那里必须至少还有<code>cost[i]-gas[i]</code>的汽油，\\n才能通过当前点。</p>\\n<p>我们定义几个变量：</p>\\n<ul>\\n<li><code>start</code>：表示当前的出发点。</li>\\n<li><code>curSum</code>：表示从出发点到目前点，汽油补充和消耗的差值。</li>\\n<li><code>atLeast</code>：表示在尾巴部分，最少需要多少汽油，才能绕一圈继续通过头部。</li>\\n</ul>\\n<p>如果遍历的过程中，<code>curSum&lt;0</code>，说明当前<code>start</code>作为起点是无法通过的，需要尝试转一圈，因此<code>atLeast+=(-curSum)</code>，\\n并且将<code>start</code>设置为下一个点。</p>\\n<p>最后遍历完，检查<code>curSum&lt;atLeast</code>，如果为<code>true</code>，说明当前所累积的油<code>curSum</code>还是不能通过完整一圈。</p>\\n<p>否则，就可以返回<code>start</code>。</p>\\n","content":"<p>在一条环路上有&nbsp;<em>N</em>&nbsp;个加油站，其中第&nbsp;<em>i</em>&nbsp;个加油站有汽油&nbsp;<code>gas[i]</code><em>&nbsp;</em>升。</p>\\n\\n<p>你有一辆油箱容量无限的的汽车，从第<em> i </em>个加油站开往第<em> i+1&nbsp;</em>个加油站需要消耗汽油&nbsp;<code>cost[i]</code><em>&nbsp;</em>升。你从其中的一个加油站出发，开始时油箱为空。</p>\\n\\n<p>如果你可以绕环路行驶一周，则返回出发时加油站的编号，否则返回 -1。</p>\\n\\n<p><strong>说明:</strong>&nbsp;</p>\\n\\n<ul>\\n\\t<li>如果题目有解，该答案即为唯一答案。</li>\\n\\t<li>输入数组均为非空数组，且长度相同。</li>\\n\\t<li>输入数组中的元素均为非负数。</li>\\n</ul>\\n\\n<p><strong>示例&nbsp;1:</strong></p>\\n\\n<pre><strong>输入:</strong> \\ngas  = [1,2,3,4,5]\\ncost = [3,4,5,1,2]\\n\\n<strong>输出:</strong> 3\\n\\n<strong>解释:\\n</strong>从 3 号加油站(索引为 3 处)出发，可获得 4 升汽油。此时油箱有 = 0 + 4 = 4 升汽油\\n开往 4 号加油站，此时油箱有 4 - 1 + 5 = 8 升汽油\\n开往 0 号加油站，此时油箱有 8 - 2 + 1 = 7 升汽油\\n开往 1 号加油站，此时油箱有 7 - 3 + 2 = 6 升汽油\\n开往 2 号加油站，此时油箱有 6 - 4 + 3 = 5 升汽油\\n开往 3 号加油站，你需要消耗 5 升汽油，正好足够你返回到 3 号加油站。\\n因此，3 可为起始索引。</pre>\\n\\n<p><strong>示例 2:</strong></p>\\n\\n<pre><strong>输入:</strong> \\ngas  = [2,3,4]\\ncost = [3,4,3]\\n\\n<strong>输出:</strong> -1\\n\\n<strong>解释:\\n</strong>你不能从 0 号或 1 号加油站出发，因为没有足够的汽油可以让你行驶到下一个加油站。\\n我们从 2 号加油站出发，可以获得 4 升汽油。 此时油箱有 = 0 + 4 = 4 升汽油\\n开往 0 号加油站，此时油箱有 4 - 3 + 2 = 3 升汽油\\n开往 1 号加油站，此时油箱有 3 - 3 + 3 = 3 升汽油\\n你无法返回 2 号加油站，因为返程需要消耗 4 升汽油，但是你的油箱只有 3 升汽油。\\n因此，无论怎样，你都不可能绕环路行驶一周。</pre>\\n","title":"134. 加油站","relatedTags":["贪心","数组"],"difficult":"Middle","lang":["javascript"],"uniqueID":"134","slug":"134-Gas-Station"}')}}]);