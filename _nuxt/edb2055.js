(window.webpackJsonp=window.webpackJsonp||[]).push([[661],{1459:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for singly-linked list.\\n * function ListNode(val) {\\n *     this.val = val;\\n *     this.next = null;\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{ListNode}</span> <span class=\\"hljs-variable\\">head</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{ListNode}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> reverseList = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">head</span>) </span>{\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">iteratively</span> (<span class=\\"hljs-params\\">node</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> prev=<span class=\\"hljs-literal\\">null</span>\\n    <span class=\\"hljs-keyword\\">while</span>(node){\\n      <span class=\\"hljs-keyword\\">let</span> next=node.next\\n      node.next=prev\\n      prev=node\\n      node=next\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> prev\\n  }\\n\\n\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">recursively</span> (<span class=\\"hljs-params\\">node</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(!node || !node.next)<span class=\\"hljs-keyword\\">return</span> node\\n    <span class=\\"hljs-keyword\\">let</span> r=recursively(node.next)\\n    node.next.next=node\\n    node.next=<span class=\\"hljs-literal\\">null</span>\\n    <span class=\\"hljs-keyword\\">return</span> r\\n  }\\n\\n  <span class=\\"hljs-keyword\\">return</span> recursively(head)\\n};\\n</code></pre>\\n"],"querySlug":"reverse-linked-list","created_at":"2020-03-02","timeArr":[2020,2,2,23,44,4,0],"hasThinking":false,"content":"给你单链表的头节点 <code>head</code> ，请你反转链表，并返回反转后的链表。\\n<div class=\\"original__bRMd\\">\\n<div>\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg\\" style=\\"width: 542px; height: 222px;\\" />\\n<pre>\\n<strong>输入：</strong>head = [1,2,3,4,5]\\n<strong>输出：</strong>[5,4,3,2,1]\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2021/02/19/rev1ex2.jpg\\" style=\\"width: 182px; height: 222px;\\" />\\n<pre>\\n<strong>输入：</strong>head = [1,2]\\n<strong>输出：</strong>[2,1]\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>head = []\\n<strong>输出：</strong>[]\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li>链表中节点的数目范围是 <code>[0, 5000]</code></li>\\n\\t<li><code>-5000 <= Node.val <= 5000</code></li>\\n</ul>\\n\\n<p> </p>\\n\\n<p><strong>进阶：</strong>链表可以选用迭代或递归方式完成反转。你能否用两种方法解决这道题？</p>\\n</div>\\n</div>\\n","title":"206. 反转链表","relatedTags":["递归","链表"],"difficult":"Easy","lang":["javascript"],"uniqueID":"206","slug":"206-Reverse-Linked-List"}')}}]);