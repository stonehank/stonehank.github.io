(window.webpackJsonp=window.webpackJsonp||[]).push([[362],{1160:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">queens</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">king</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[][]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> queensAttacktheKing = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">queens, king</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> [kx,ky]=king\\n  <span class=\\"hljs-keyword\\">let</span> hash={}\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> [x,y] <span class=\\"hljs-keyword\\">of</span> queens){\\n    hash[x+<span class=\\"hljs-string\\">\' \'</span>+y]=<span class=\\"hljs-literal\\">true</span>\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> res=[]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> q <span class=\\"hljs-keyword\\">of</span> queens){\\n    <span class=\\"hljs-keyword\\">if</span>(canAttack(q)){\\n      res.push(q)\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n  \\n  \\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">canAttack</span>(<span class=\\"hljs-params\\">q</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> [qx,qy]=q\\n    <span class=\\"hljs-keyword\\">let</span> dx=qx-kx\\n    <span class=\\"hljs-keyword\\">let</span> dy=qy-ky\\n    <span class=\\"hljs-keyword\\">let</span> absDx=<span class=\\"hljs-built_in\\">Math</span>.abs(dx)\\n    <span class=\\"hljs-keyword\\">let</span> absDy=<span class=\\"hljs-built_in\\">Math</span>.abs(dy)\\n    <span class=\\"hljs-keyword\\">if</span>(absDx===absDy){\\n      <span class=\\"hljs-keyword\\">let</span> gapX=dx/absDx\\n      <span class=\\"hljs-keyword\\">let</span> gapY=dy/absDy\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">1</span>;i&lt;absDx;i++){\\n        <span class=\\"hljs-keyword\\">let</span> nx=qx-gapX*i\\n        <span class=\\"hljs-keyword\\">let</span> ny=qy-gapY*i\\n        <span class=\\"hljs-keyword\\">if</span>(hash[nx+<span class=\\"hljs-string\\">\' \'</span>+ny]){\\n          <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n        }\\n      }\\n      <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n    }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(dx===<span class=\\"hljs-number\\">0</span>){\\n      <span class=\\"hljs-keyword\\">let</span> gapY=dy/absDy\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">1</span>;i&lt;absDy;i++){\\n        <span class=\\"hljs-keyword\\">let</span> ny=qy-gapY*i\\n        <span class=\\"hljs-comment\\">// console.log(dx,dy,gapY,ny)</span>\\n        <span class=\\"hljs-keyword\\">if</span>(hash[qx+<span class=\\"hljs-string\\">\' \'</span>+ny]){\\n          <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n        }\\n      }\\n      <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n    }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(dy===<span class=\\"hljs-number\\">0</span>){\\n      <span class=\\"hljs-keyword\\">let</span> gapX=dx/absDx\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">1</span>;i&lt;absDx;i++){\\n        <span class=\\"hljs-keyword\\">let</span> nx=qx-gapX*i\\n        <span class=\\"hljs-keyword\\">if</span>(hash[nx+<span class=\\"hljs-string\\">\' \'</span>+qy]){\\n          <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n        }\\n      }\\n      <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"queens-that-can-attack-the-king","created_at":"2019-10-13","timeArr":[2019,9,13,10,48,45,0],"hasThinking":false,"content":"<p>在一个 <strong>8x8</strong> 的棋盘上，放置着若干「黑皇后」和一个「白国王」。</p>\\n\\n<p>「黑皇后」在棋盘上的位置分布用整数坐标数组 <code>queens</code> 表示，「白国王」的坐标用数组 <code>king</code> 表示。</p>\\n\\n<p>「黑皇后」的行棋规定是：横、直、斜都可以走，步数不受限制，但是，不能越子行棋。</p>\\n\\n<p>请你返回可以直接攻击到「白国王」的所有「黑皇后」的坐标（任意顺序）。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<p><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/10/13/untitled-diagram.jpg\\" style=\\"width: 250px;\\" /></p>\\n\\n<pre>\\n<strong>输入：</strong>queens = [[0,1],[1,0],[4,0],[0,4],[3,3],[2,4]], king = [0,0]\\n<strong>输出：</strong>[[0,1],[1,0],[3,3]]\\n<strong>解释：</strong> \\n[0,1] 的皇后可以攻击到国王，因为他们在同一行上。 \\n[1,0] 的皇后可以攻击到国王，因为他们在同一列上。 \\n[3,3] 的皇后可以攻击到国王，因为他们在同一条对角线上。 \\n[0,4] 的皇后无法攻击到国王，因为她被位于 [0,1] 的皇后挡住了。 \\n[4,0] 的皇后无法攻击到国王，因为她被位于 [1,0] 的皇后挡住了。 \\n[2,4] 的皇后无法攻击到国王，因为她和国王不在同一行/列/对角线上。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<p><strong><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/10/13/untitled-diagram-1.jpg\\" style=\\"height: 321px; width: 321px;\\" /></strong></p>\\n\\n<pre>\\n<strong>输入：</strong>queens = [[0,0],[1,1],[2,2],[3,4],[3,5],[4,4],[4,5]], king = [3,3]\\n<strong>输出：</strong>[[2,2],[3,4],[4,4]]\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<p><strong><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/10/13/untitled-diagram-2.jpg\\" style=\\"height: 321px; width: 321px;\\" /></strong></p>\\n\\n<pre>\\n<strong>输入：</strong>queens = [[5,6],[7,7],[2,1],[0,7],[1,6],[5,1],[3,7],[0,3],[4,0],[1,2],[6,3],[5,0],[0,4],[2,2],[1,1],[6,4],[5,4],[0,0],[2,6],[4,5],[5,2],[1,4],[7,5],[2,3],[0,5],[4,2],[1,0],[2,7],[0,1],[4,6],[6,1],[0,6],[4,3],[1,7]], king = [3,4]\\n<strong>输出：</strong>[[2,3],[1,4],[1,6],[3,7],[4,3],[5,4],[4,5]]\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= queens.length <= 63</code></li>\\n\\t<li><code>queens[i].length == 2</code></li>\\n\\t<li><code>0 <= queens[i][j] < 8</code></li>\\n\\t<li><code>king.length == 2</code></li>\\n\\t<li><code>0 <= king[0], king[1] < 8</code></li>\\n\\t<li>一个棋盘格上最多只能放置一枚棋子。</li>\\n</ul>\\n","title":"1222. 可以攻击国王的皇后","relatedTags":["数组","矩阵","模拟"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1222","slug":"1222-Queens-That-Can-Attack-the-King"}')}}]);