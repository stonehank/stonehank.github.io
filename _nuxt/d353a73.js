(window.webpackJsonp=window.webpackJsonp||[]).push([[381],{1179:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">beginWord</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">endWord</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string[]}</span> <span class=\\"hljs-variable\\">wordList</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> ladderLength = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">beginWord, endWord, wordList</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(!wordList.includes(endWord))<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">let</span> hash=<span class=\\"hljs-keyword\\">new</span> <span class=\\"hljs-built_in\\">Map</span>()\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> word <span class=\\"hljs-keyword\\">of</span> wordList)hash.set(word,<span class=\\"hljs-literal\\">true</span>)\\n  <span class=\\"hljs-keyword\\">let</span> arr=[beginWord]\\n  <span class=\\"hljs-keyword\\">let</span> step=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">while</span>(arr.length&gt;<span class=\\"hljs-number\\">0</span>){\\n    step++\\n    <span class=\\"hljs-keyword\\">let</span> len=arr.length\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;len;i++){\\n      <span class=\\"hljs-keyword\\">let</span> cur=arr.shift()\\n      <span class=\\"hljs-keyword\\">let</span> newStr=<span class=\\"hljs-string\\">\'\'</span>\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;cur.length;j++){\\n        <span class=\\"hljs-keyword\\">let</span> l=cur.substring(<span class=\\"hljs-number\\">0</span>,j),r=cur.substring(j+<span class=\\"hljs-number\\">1</span>)\\n        <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> k=<span class=\\"hljs-number\\">0</span>;k&lt;<span class=\\"hljs-number\\">26</span>;k++){\\n          newStr=l+<span class=\\"hljs-built_in\\">String</span>.fromCharCode(k+<span class=\\"hljs-number\\">97</span>)+r\\n          <span class=\\"hljs-keyword\\">if</span>(hash.has(newStr)){\\n            <span class=\\"hljs-keyword\\">if</span>(newStr===endWord)<span class=\\"hljs-keyword\\">return</span> step+<span class=\\"hljs-number\\">1</span>\\n            arr.push(newStr)\\n            hash.delete(newStr)\\n          }\\n        }\\n      }\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>\\n};\\n</code></pre>\\n"],"querySlug":"word-ladder","created_at":"2019-04-15","timeArr":[2019,3,15,17,6,5,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p><code>BFS</code>。</p>\\n<p>思路一：</p>\\n<p>首先将<code>startWord</code>添加到<code>arr</code>中，对<code>arr</code>内部的每个字符串，从<code>wordList</code>找出与它只相差<code>1</code>个字母的字符串，添加到<code>arr</code>中。</p>\\n<p>思路二：</p>\\n<p>同样将<code>startWord</code>添加到<code>arr</code>中，对<code>arr</code>内部的每个字符串的每个字母，不断替换它为另外的其他<code>25</code>个字母，\\n然后查看<code>hash</code>(wordList)中是否存在，如果存在，添加到<code>arr</code>并且删除当前字符串的<code>hash</code>，因为不需要再次使用。</p>\\n<p>注意：</p>\\n<p><code>思路一</code>的缺陷就是如果<code>wordList</code>过大，相对的每次查找相差<code>1</code>字母的时间也同样增加；</p>\\n<p><code>思路二</code>不需要考虑<code>wordList</code>的长度，但它的缺陷在于每一个字符都要替换<code>26</code>次，因此如果每一个字符串的长度过长，同样会出现性能问题。</p>\\n","content":"<p>字典 <code>wordList</code> 中从单词 <code>beginWord</code><em> </em>和 <code>endWord</code> 的 <strong>转换序列 </strong>是一个按下述规格形成的序列：</p>\\n\\n<ul>\\n\\t<li>序列中第一个单词是 <code>beginWord</code> 。</li>\\n\\t<li>序列中最后一个单词是 <code>endWord</code> 。</li>\\n\\t<li>每次转换只能改变一个字母。</li>\\n\\t<li>转换过程中的中间单词必须是字典 <code>wordList</code> 中的单词。</li>\\n</ul>\\n\\n<p>给你两个单词<em> </em><code>beginWord</code><em> </em>和 <code>endWord</code> 和一个字典 <code>wordList</code> ，找到从 <code>beginWord</code> 到 <code>endWord</code> 的 <strong>最短转换序列</strong> 中的 <strong>单词数目</strong> 。如果不存在这样的转换序列，返回 0。</p>\\n \\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>beginWord = \\"hit\\", endWord = \\"cog\\", wordList = [\\"hot\\",\\"dot\\",\\"dog\\",\\"lot\\",\\"log\\",\\"cog\\"]\\n<strong>输出：</strong>5\\n<strong>解释：</strong>一个最短转换序列是 \\"hit\\" -> \\"hot\\" -> \\"dot\\" -> \\"dog\\" -> \\"cog\\", 返回它的长度 5。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>beginWord = \\"hit\\", endWord = \\"cog\\", wordList = [\\"hot\\",\\"dot\\",\\"dog\\",\\"lot\\",\\"log\\"]\\n<strong>输出：</strong>0\\n<strong>解释：</strong>endWord \\"cog\\" 不在字典中，所以无法进行转换。</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= beginWord.length <= 10</code></li>\\n\\t<li><code>endWord.length == beginWord.length</code></li>\\n\\t<li><code>1 <= wordList.length <= 5000</code></li>\\n\\t<li><code>wordList[i].length == beginWord.length</code></li>\\n\\t<li><code>beginWord</code>、<code>endWord</code> 和 <code>wordList[i]</code> 由小写英文字母组成</li>\\n\\t<li><code>beginWord != endWord</code></li>\\n\\t<li><code>wordList</code> 中的所有字符串 <strong>互不相同</strong></li>\\n</ul>\\n","title":"127. 单词接龙","relatedTags":["广度优先搜索","哈希表","字符串"],"difficult":"Hard","lang":["javascript"],"uniqueID":"127","slug":"127-Word-Ladder"}')}}]);