(window.webpackJsonp=window.webpackJsonp||[]).push([[444],{1242:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">n</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">leftChild</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">rightChild</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{boolean}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> validateBinaryTreeNodes = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">n, leftChild, rightChild</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> used=<span class=\\"hljs-built_in\\">Array</span>(n).fill(<span class=\\"hljs-literal\\">false</span>)\\n  <span class=\\"hljs-keyword\\">let</span> uf=<span class=\\"hljs-built_in\\">Array</span>(n).fill().map(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">e,i</span>)=&gt;</span>i)\\n  <span class=\\"hljs-keyword\\">let</span> group=n\\n  used[<span class=\\"hljs-number\\">0</span>]=<span class=\\"hljs-literal\\">true</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;n;i++){\\n    <span class=\\"hljs-keyword\\">let</span> left=leftChild[i]\\n    <span class=\\"hljs-keyword\\">let</span> right=rightChild[i]\\n    <span class=\\"hljs-comment\\">// </span>\\n    <span class=\\"hljs-comment\\">// </span>\\n    <span class=\\"hljs-keyword\\">if</span>(left!==<span class=\\"hljs-number\\">-1</span>){\\n      <span class=\\"hljs-keyword\\">if</span>(used[left])<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n      union(i,left)\\n      used[left]=<span class=\\"hljs-literal\\">true</span>\\n    }\\n    <span class=\\"hljs-keyword\\">if</span>(right!==<span class=\\"hljs-number\\">-1</span>){\\n      <span class=\\"hljs-keyword\\">if</span>(used[right])<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n      union(i,right)\\n      used[right]=<span class=\\"hljs-literal\\">true</span>\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> group===<span class=\\"hljs-number\\">1</span>\\n\\n\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">find</span>(<span class=\\"hljs-params\\">i</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(i!==uf[i]){\\n      uf[i]=find(uf[i])\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> uf[i]\\n  }\\n\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">union</span>(<span class=\\"hljs-params\\">a,b</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> i=find(a),\\n      j=find(b)\\n    <span class=\\"hljs-keyword\\">if</span>(i===j)<span class=\\"hljs-keyword\\">return</span>\\n    uf[i]=j\\n    group--\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"validate-binary-tree-nodes","created_at":"2020-02-23","timeArr":[2020,1,23,10,47,44,0],"hasThinking":false,"content":"<p>二叉树上有 <code>n</code>&nbsp;个节点，按从&nbsp;<code>0</code>&nbsp;到 <code>n - 1</code>&nbsp;编号，其中节点&nbsp;<code>i</code>&nbsp;的两个子节点分别是&nbsp;<code>leftChild[i]</code>&nbsp;和&nbsp;<code>rightChild[i]</code>。</p>\\n\\n<p>只有 <strong>所有</strong> 节点能够形成且 <strong>只</strong> 形成 <strong>一颗</strong>&nbsp;有效的二叉树时，返回&nbsp;<code>true</code>；否则返回 <code>false</code>。</p>\\n\\n<p>如果节点&nbsp;<code>i</code>&nbsp;没有左子节点，那么&nbsp;<code>leftChild[i]</code>&nbsp;就等于&nbsp;<code>-1</code>。右子节点也符合该规则。</p>\\n\\n<p>注意：节点没有值，本问题中仅仅使用节点编号。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<p><strong><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/02/23/1503_ex1.png\\" style=\\"height: 287px; width: 195px;\\"></strong></p>\\n\\n<pre><strong>输入：</strong>n = 4, leftChild = [1,-1,3,-1], rightChild = [2,-1,-1,-1]\\n<strong>输出：</strong>true\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<p><strong><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/02/23/1503_ex2.png\\" style=\\"height: 272px; width: 183px;\\"></strong></p>\\n\\n<pre><strong>输入：</strong>n = 4, leftChild = [1,-1,3,-1], rightChild = [2,3,-1,-1]\\n<strong>输出：</strong>false\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<p><strong><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/02/23/1503_ex3.png\\" style=\\"height: 174px; width: 82px;\\"></strong></p>\\n\\n<pre><strong>输入：</strong>n = 2, leftChild = [1,0], rightChild = [-1,-1]\\n<strong>输出：</strong>false\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<p><strong><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/02/23/1503_ex4.png\\" style=\\"height: 191px; width: 470px;\\"></strong></p>\\n\\n<pre><strong>输入：</strong>n = 6, leftChild = [1,-1,-1,4,-1,-1], rightChild = [2,-1,-1,5,-1,-1]\\n<strong>输出：</strong>false\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= n &lt;= 10^4</code></li>\\n\\t<li><code>leftChild.length == rightChild.length == n</code></li>\\n\\t<li><code>-1 &lt;= leftChild[i], rightChild[i] &lt;= n - 1</code></li>\\n</ul>\\n","title":"1361. 验证二叉树","relatedTags":["树","深度优先搜索","广度优先搜索","并查集","图","二叉树"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1361","slug":"1361-Validate-Binary-Tree-Nodes"}')}}]);