(window.webpackJsonp=window.webpackJsonp||[]).push([[1007],{1805:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Initialize your data structure here. Set the size of the deque to be k.\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">k</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> MyCircularDeque = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">k</span>) </span>{\\n  <span class=\\"hljs-keyword\\">this</span>.list=[]\\n  <span class=\\"hljs-keyword\\">this</span>.limit=k\\n};\\n\\n<span class=\\"hljs-comment\\">/**\\n * Adds an item at the front of Deque. Return true if the operation is successful. \\n * @param {number} value\\n * @return {boolean}\\n */</span>\\nMyCircularDeque.prototype.insertFront = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">value</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-keyword\\">this</span>.isFull())<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n  <span class=\\"hljs-keyword\\">this</span>.list.unshift(value)\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n};\\n\\n<span class=\\"hljs-comment\\">/**\\n * Adds an item at the rear of Deque. Return true if the operation is successful. \\n * @param {number} value\\n * @return {boolean}\\n */</span>\\nMyCircularDeque.prototype.insertLast = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">value</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-keyword\\">this</span>.isFull())<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n  <span class=\\"hljs-keyword\\">this</span>.list.push(value)\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>  \\n};\\n\\n<span class=\\"hljs-comment\\">/**\\n * Deletes an item from the front of Deque. Return true if the operation is successful.\\n * @return {boolean}\\n */</span>\\nMyCircularDeque.prototype.deleteFront = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-keyword\\">this</span>.isEmpty())<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n  <span class=\\"hljs-keyword\\">this</span>.list.shift()\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n};\\n\\n<span class=\\"hljs-comment\\">/**\\n * Deletes an item from the rear of Deque. Return true if the operation is successful.\\n * @return {boolean}\\n */</span>\\nMyCircularDeque.prototype.deleteLast = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-keyword\\">this</span>.isEmpty())<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n  <span class=\\"hljs-keyword\\">this</span>.list.pop()\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n};\\n\\n<span class=\\"hljs-comment\\">/**\\n * Get the front item from the deque.\\n * @return {number}\\n */</span>\\nMyCircularDeque.prototype.getFront = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-keyword\\">this</span>.isEmpty())<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">-1</span>\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-keyword\\">this</span>.list[<span class=\\"hljs-number\\">0</span>]\\n};\\n\\n<span class=\\"hljs-comment\\">/**\\n * Get the last item from the deque.\\n * @return {number}\\n */</span>\\nMyCircularDeque.prototype.getRear = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-keyword\\">this</span>.isEmpty())<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">-1</span>\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-keyword\\">this</span>.list[<span class=\\"hljs-keyword\\">this</span>.list.length<span class=\\"hljs-number\\">-1</span>] \\n};\\n\\n<span class=\\"hljs-comment\\">/**\\n * Checks whether the circular deque is empty or not.\\n * @return {boolean}\\n */</span>\\nMyCircularDeque.prototype.isEmpty = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-keyword\\">this</span>.list.length===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n};\\n\\n<span class=\\"hljs-comment\\">/**\\n * Checks whether the circular deque is full or not.\\n * @return {boolean}\\n */</span>\\nMyCircularDeque.prototype.isFull = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-keyword\\">this</span>.list.length===<span class=\\"hljs-keyword\\">this</span>.limit)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>    \\n};\\n\\n<span class=\\"hljs-comment\\">/** \\n * Your MyCircularDeque object will be instantiated and called as such:\\n * var obj = Object.create(MyCircularDeque).createNew(k)\\n * var param_1 = obj.insertFront(value)\\n * var param_2 = obj.insertLast(value)\\n * var param_3 = obj.deleteFront()\\n * var param_4 = obj.deleteLast()\\n * var param_5 = obj.getFront()\\n * var param_6 = obj.getRear()\\n * var param_7 = obj.isEmpty()\\n * var param_8 = obj.isFull()\\n */</span>\\n</code></pre>\\n"],"querySlug":"design-circular-deque","created_at":"2019-04-19","timeArr":[2019,3,19,16,16,7,0],"hasThinking":false,"content":"<p>设计实现双端队列。<br>\\n你的实现需要支持以下操作：</p>\\n\\n<ul>\\n\\t<li>MyCircularDeque(k)：构造函数,双端队列的大小为k。</li>\\n\\t<li>insertFront()：将一个元素添加到双端队列头部。 如果操作成功返回 true。</li>\\n\\t<li>insertLast()：将一个元素添加到双端队列尾部。如果操作成功返回 true。</li>\\n\\t<li>deleteFront()：从双端队列头部删除一个元素。 如果操作成功返回 true。</li>\\n\\t<li>deleteLast()：从双端队列尾部删除一个元素。如果操作成功返回 true。</li>\\n\\t<li>getFront()：从双端队列头部获得一个元素。如果双端队列为空，返回 -1。</li>\\n\\t<li>getRear()：获得双端队列的最后一个元素。&nbsp;如果双端队列为空，返回 -1。</li>\\n\\t<li>isEmpty()：检查双端队列是否为空。</li>\\n\\t<li>isFull()：检查双端队列是否满了。</li>\\n</ul>\\n\\n<p><strong>示例：</strong></p>\\n\\n<pre>MyCircularDeque circularDeque = new MycircularDeque(3); // 设置容量大小为3\\ncircularDeque.insertLast(1);\\t\\t\\t        // 返回 true\\ncircularDeque.insertLast(2);\\t\\t\\t        // 返回 true\\ncircularDeque.insertFront(3);\\t\\t\\t        // 返回 true\\ncircularDeque.insertFront(4);\\t\\t\\t        // 已经满了，返回 false\\ncircularDeque.getRear();  \\t\\t\\t\\t// 返回 2\\ncircularDeque.isFull();\\t\\t\\t\\t        // 返回 true\\ncircularDeque.deleteLast();\\t\\t\\t        // 返回 true\\ncircularDeque.insertFront(4);\\t\\t\\t        // 返回 true\\ncircularDeque.getFront();\\t\\t\\t\\t// 返回 4\\n&nbsp;</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li>所有值的范围为 [1, 1000]</li>\\n\\t<li>操作次数的范围为 [1, 1000]</li>\\n\\t<li>请不要使用内置的双端队列库。</li>\\n</ul>\\n","title":"641. 设计循环双端队列","relatedTags":["设计","队列","数组","链表"],"difficult":"Middle","lang":["javascript"],"uniqueID":"641","slug":"641-Design-Circular-Deque"}')}}]);