(window.webpackJsonp=window.webpackJsonp||[]).push([[788],{1586:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">nums</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">target</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> combinationSum4 = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">nums, target</span>) </span>{\\n    <span class=\\"hljs-comment\\">/*\\n    1 2 3\\n 0  0 0 0 0\\n 1  1 0 0 1\\n 2  1 1 0 2\\n 3  2 1 1 4\\n 4  4 2 1 7\\n*/</span>\\n    <span class=\\"hljs-keyword\\">let</span> dp=<span class=\\"hljs-built_in\\">Array</span>(target+<span class=\\"hljs-number\\">1</span>).fill().map(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">_,idx</span>)=&gt;</span><span class=\\"hljs-built_in\\">Array</span>(nums.length+<span class=\\"hljs-number\\">1</span>).fill(<span class=\\"hljs-number\\">0</span>))\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">1</span>;i&lt;dp.length;i++){\\n        <span class=\\"hljs-keyword\\">let</span> curTargetSum=<span class=\\"hljs-number\\">0</span>\\n        <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">1</span>;j&lt;dp[i].length;j++){\\n            <span class=\\"hljs-keyword\\">let</span> curN=nums[j<span class=\\"hljs-number\\">-1</span>]\\n            <span class=\\"hljs-keyword\\">if</span>(i&lt;curN){\\n                dp[i][j]=<span class=\\"hljs-number\\">0</span>\\n            }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(i===curN){\\n                dp[i][j]=<span class=\\"hljs-number\\">1</span>   \\n            }<span class=\\"hljs-keyword\\">else</span>{\\n                dp[i][j]=dp[i-curN][<span class=\\"hljs-number\\">0</span>]\\n            }\\n            curTargetSum+=dp[i][j]\\n        }\\n        dp[i][<span class=\\"hljs-number\\">0</span>]=curTargetSum\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> dp[target][<span class=\\"hljs-number\\">0</span>]\\n};\\n</code></pre>\\n","<pre class=\\"hljs\\"><code><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Solution</span><span class=\\"hljs-params\\">(object)</span>:</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">combinationSum4</span><span class=\\"hljs-params\\">(self, nums, target)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: int\\n        \\"\\"\\"</span>\\n        n=len(nums)\\n        dp=[<span class=\\"hljs-number\\">0</span>]*(target+<span class=\\"hljs-number\\">1</span>)\\n        dp[<span class=\\"hljs-number\\">0</span>]=<span class=\\"hljs-number\\">1</span>\\n        <span class=\\"hljs-keyword\\">for</span> j <span class=\\"hljs-keyword\\">in</span> range(<span class=\\"hljs-number\\">1</span>,target+<span class=\\"hljs-number\\">1</span>):\\n          <span class=\\"hljs-keyword\\">for</span> k <span class=\\"hljs-keyword\\">in</span> range(n):\\n            <span class=\\"hljs-keyword\\">if</span> j&gt;=nums[k]:dp[j]+=dp[j-nums[k]]\\n        <span class=\\"hljs-keyword\\">return</span> dp[<span class=\\"hljs-number\\">-1</span>]\\n</code></pre>\\n"],"querySlug":"combination-sum-iv","hasThinking":false,"content":"<p>给你一个由 <strong>不同</strong> 整数组成的数组 <code>nums</code> ，和一个目标整数 <code>target</code> 。请你从 <code>nums</code> 中找出并返回总和为 <code>target</code> 的元素组合的个数。</p>\\n\\n<p>题目数据保证答案符合 32 位整数范围。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [1,2,3], target = 4\\n<strong>输出：</strong>7\\n<strong>解释：</strong>\\n所有可能的组合为：\\n(1, 1, 1, 1)\\n(1, 1, 2)\\n(1, 2, 1)\\n(1, 3)\\n(2, 1, 1)\\n(2, 2)\\n(3, 1)\\n请注意，顺序不同的序列被视作不同的组合。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [9], target = 3\\n<strong>输出：</strong>0\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= nums.length <= 200</code></li>\\n\\t<li><code>1 <= nums[i] <= 1000</code></li>\\n\\t<li><code>nums</code> 中的所有元素 <strong>互不相同</strong></li>\\n\\t<li><code>1 <= target <= 1000</code></li>\\n</ul>\\n\\n<p> </p>\\n\\n<p><strong>进阶：</strong>如果给定的数组中含有负数会发生什么？问题会产生何种变化？如果允许负数出现，需要向题目中添加哪些限制条件？</p>\\n","title":"377. 组合总和 Ⅳ","relatedTags":["数组","动态规划"],"difficult":"Middle","lang":["javascript","python"],"uniqueID":"377","slug":"377-Combination-Sum-IV"}')}}]);