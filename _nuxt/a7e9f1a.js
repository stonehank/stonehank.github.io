(window.webpackJsonp=window.webpackJsonp||[]).push([[1365],{2163:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string[]}</span> <span class=\\"hljs-variable\\">equations</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{boolean}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> equationsPossible = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">equations</span>) </span>{\\n    <span class=\\"hljs-keyword\\">let</span> uf=[]\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;<span class=\\"hljs-number\\">26</span>;i++){\\n      uf[i]=i\\n    }\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">union</span>(<span class=\\"hljs-params\\">a,b</span>)</span>{\\n      <span class=\\"hljs-keyword\\">let</span> i=find(a),\\n          j=find(b)\\n      <span class=\\"hljs-keyword\\">if</span>(i===j)<span class=\\"hljs-keyword\\">return</span>\\n      uf[i]=j\\n    }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">find</span>(<span class=\\"hljs-params\\">i</span>)</span>{\\n    <span class=\\"hljs-keyword\\">while</span>(i!==uf[i]){\\n      i=uf[i]\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> i\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> acode=<span class=\\"hljs-string\\">\'a\'</span>.charCodeAt(<span class=\\"hljs-number\\">0</span>)\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;equations.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> cur=equations[i]\\n    <span class=\\"hljs-keyword\\">let</span> xcode=cur.charCodeAt(<span class=\\"hljs-number\\">0</span>)-acode,\\n        ycode=cur.charCodeAt(<span class=\\"hljs-number\\">3</span>)-acode\\n    <span class=\\"hljs-keyword\\">if</span>(cur[<span class=\\"hljs-number\\">1</span>]===<span class=\\"hljs-string\\">\\"=\\"</span>){\\n      union(xcode,ycode)\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      <span class=\\"hljs-keyword\\">let</span> ux=find(xcode),\\n          uy=find(ycode)\\n      <span class=\\"hljs-keyword\\">if</span>(ux===uy)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;equations.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> cur=equations[i]\\n    <span class=\\"hljs-keyword\\">let</span> xcode=cur.charCodeAt(<span class=\\"hljs-number\\">0</span>)-acode,\\n        ycode=cur.charCodeAt(<span class=\\"hljs-number\\">3</span>)-acode\\n    <span class=\\"hljs-keyword\\">if</span>(cur[<span class=\\"hljs-number\\">1</span>]===<span class=\\"hljs-string\\">\\"!\\"</span>){\\n      <span class=\\"hljs-keyword\\">let</span> ux=find(xcode),\\n          uy=find(ycode)\\n      <span class=\\"hljs-keyword\\">if</span>(ux===uy)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n};\\n</code></pre>\\n"],"querySlug":"satisfiability-of-equality-equations","created_at":"2019-02-10","timeArr":[2019,1,10,11,7,12,0],"hasThinking":false,"content":"<p>给定一个由表示变量之间关系的字符串方程组成的数组，每个字符串方程 <code>equations[i]</code> 的长度为 <code>4</code>，并采用两种不同的形式之一：<code>&quot;a==b&quot;</code> 或&nbsp;<code>&quot;a!=b&quot;</code>。在这里，a 和 b 是小写字母（不一定不同），表示单字母变量名。</p>\\n\\n<p>只有当可以将整数分配给变量名，以便满足所有给定的方程时才返回&nbsp;<code>true</code>，否则返回 <code>false</code>。&nbsp;</p>\\n\\n<p>&nbsp;</p>\\n\\n<ol>\\n</ol>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>[&quot;a==b&quot;,&quot;b!=a&quot;]\\n<strong>输出：</strong>false\\n<strong>解释：</strong>如果我们指定，a = 1 且 b = 1，那么可以满足第一个方程，但无法满足第二个方程。没有办法分配变量同时满足这两个方程。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>[&quot;b==a&quot;,&quot;a==b&quot;]\\n<strong>输出：</strong>true\\n<strong>解释：</strong>我们可以指定 a = 1 且 b = 1 以满足满足这两个方程。\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>[&quot;a==b&quot;,&quot;b==c&quot;,&quot;a==c&quot;]\\n<strong>输出：</strong>true\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre><strong>输入：</strong>[&quot;a==b&quot;,&quot;b!=c&quot;,&quot;c==a&quot;]\\n<strong>输出：</strong>false\\n</pre>\\n\\n<p><strong>示例 5：</strong></p>\\n\\n<pre><strong>输入：</strong>[&quot;c==c&quot;,&quot;b==d&quot;,&quot;x!=z&quot;]\\n<strong>输出：</strong>true\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ol>\\n\\t<li><code>1 &lt;= equations.length &lt;= 500</code></li>\\n\\t<li><code>equations[i].length == 4</code></li>\\n\\t<li><code>equations[i][0]</code> 和&nbsp;<code>equations[i][3]</code>&nbsp;是小写字母</li>\\n\\t<li><code>equations[i][1]</code> 要么是&nbsp;<code>&#39;=&#39;</code>，要么是&nbsp;<code>&#39;!&#39;</code></li>\\n\\t<li><code>equations[i][2]</code>&nbsp;是&nbsp;<code>&#39;=&#39;</code></li>\\n</ol>\\n","title":"990. 等式方程的可满足性","relatedTags":["并查集","图","数组","字符串"],"difficult":"Middle","lang":["javascript"],"uniqueID":"990","slug":"990-Satisfiability-of-Equality-Equations"}')}}]);