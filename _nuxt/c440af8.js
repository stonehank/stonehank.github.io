(window.webpackJsonp=window.webpackJsonp||[]).push([[1209],{2007:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Solution</span><span class=\\"hljs-params\\">(object)</span>:</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">maximalRectangle</span><span class=\\"hljs-params\\">(self, matrix)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type matrix: List[List[str]]\\n        :rtype: int\\n        \\"\\"\\"</span>\\n        r=len(matrix)\\n        <span class=\\"hljs-keyword\\">if</span> r==<span class=\\"hljs-number\\">0</span>:<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>\\n        c=len(matrix[<span class=\\"hljs-number\\">0</span>])\\n        dp=[<span class=\\"hljs-number\\">0</span>]*c\\n        <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">calcMaxArea</span><span class=\\"hljs-params\\">(arr)</span>:</span>\\n          stack=[]\\n          maxA=<span class=\\"hljs-number\\">0</span>\\n          i=<span class=\\"hljs-number\\">0</span>\\n          <span class=\\"hljs-keyword\\">while</span> i&lt;len(arr):\\n            <span class=\\"hljs-keyword\\">if</span> <span class=\\"hljs-keyword\\">not</span> stack <span class=\\"hljs-keyword\\">or</span> arr[stack[<span class=\\"hljs-number\\">-1</span>]]&lt;=arr[i]:\\n              stack.append(i)\\n              i+=<span class=\\"hljs-number\\">1</span>\\n            <span class=\\"hljs-keyword\\">else</span>:\\n              pre=stack.pop()\\n              <span class=\\"hljs-keyword\\">if</span> <span class=\\"hljs-keyword\\">not</span> stack:maxA=max(maxA,arr[pre]*i)\\n              <span class=\\"hljs-keyword\\">else</span>:maxA=max(maxA,arr[pre]*(i-stack[<span class=\\"hljs-number\\">-1</span>]<span class=\\"hljs-number\\">-1</span>))\\n          <span class=\\"hljs-keyword\\">while</span> stack:\\n            pre=stack.pop()\\n            <span class=\\"hljs-keyword\\">if</span> <span class=\\"hljs-keyword\\">not</span> stack:maxA=max(maxA,arr[pre]*i)\\n            <span class=\\"hljs-keyword\\">else</span>:maxA=max(maxA,arr[pre]*(i-stack[<span class=\\"hljs-number\\">-1</span>]<span class=\\"hljs-number\\">-1</span>))      \\n          <span class=\\"hljs-keyword\\">return</span> maxA\\n        ans=<span class=\\"hljs-number\\">0</span>\\n        <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(r):\\n          <span class=\\"hljs-keyword\\">for</span> j <span class=\\"hljs-keyword\\">in</span> range(c):\\n            <span class=\\"hljs-keyword\\">if</span> matrix[i][j]==<span class=\\"hljs-string\\">\\"0\\"</span>:\\n              dp[j]=<span class=\\"hljs-number\\">0</span>\\n            <span class=\\"hljs-keyword\\">else</span>:\\n              dp[j]+=<span class=\\"hljs-number\\">1</span>\\n            \\n          ans=max(ans,calcMaxArea(dp))\\n        <span class=\\"hljs-keyword\\">return</span> ans\\n</code></pre>\\n"],"querySlug":"maximal-rectangle","created_at":"2019-02-28","timeArr":[2019,1,28,13,33,43,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p><code>DP+Stack</code>，<code>heights</code>表示在当前行以上的整个状态，例如</p>\\n<pre class=\\"hljs\\"><code>[\\n  [&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;],\\n  [&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;],\\n  [&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;],\\n  [&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;]\\n]\\n</code></pre>\\n<p>第一行，<code>heights=[1,0,1,0,0]</code>，表示它内部有2个高度为<code>1</code>的矩形；</p>\\n<p>第二行，<code>heights=[2,0,2,1,1]</code>，表示第一列高度为<code>2</code>，第二列高度为<code>0</code>...；</p>\\n<p>第三行，<code>heights=[3,1,3,2,2]</code>；</p>\\n<p>第四行，<code>heights=[1,0,0,3,0]</code>，注意，因为第<code>2</code>列、第<code>3</code>列和第<code>5</code>列在当前行都是<code>0</code>，因此<code>heights[i]=0</code>。</p>\\n<p>对于每一行的状态<code>heights</code>，利用<code>NO.84</code>的方法求出最大面积，最后筛选出最大面积。</p>\\n","content":"<p>给定一个仅包含 <code>0</code> 和 <code>1</code> 、大小为 <code>rows x cols</code> 的二维二进制矩阵，找出只包含 <code>1</code> 的最大矩形，并返回其面积。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2020/09/14/maximal.jpg\\" style=\\"width: 402px; height: 322px;\\" />\\n<pre>\\n<strong>输入：</strong>matrix = [[\\"1\\",\\"0\\",\\"1\\",\\"0\\",\\"0\\"],[\\"1\\",\\"0\\",\\"1\\",\\"1\\",\\"1\\"],[\\"1\\",\\"1\\",\\"1\\",\\"1\\",\\"1\\"],[\\"1\\",\\"0\\",\\"0\\",\\"1\\",\\"0\\"]]\\n<strong>输出：</strong>6\\n<strong>解释：</strong>最大矩形如上图所示。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>matrix = []\\n<strong>输出：</strong>0\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>matrix = [[\\"0\\"]]\\n<strong>输出：</strong>0\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>matrix = [[\\"1\\"]]\\n<strong>输出：</strong>1\\n</pre>\\n\\n<p><strong>示例 5：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>matrix = [[\\"0\\",\\"0\\"]]\\n<strong>输出：</strong>0\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>rows == matrix.length</code></li>\\n\\t<li><code>cols == matrix[0].length</code></li>\\n\\t<li><code>0 <= row, cols <= 200</code></li>\\n\\t<li><code>matrix[i][j]</code> 为 <code>\'0\'</code> 或 <code>\'1\'</code></li>\\n</ul>\\n","title":"85. 最大矩形","relatedTags":["栈","数组","动态规划","矩阵","单调栈"],"difficult":"Hard","lang":["python"],"uniqueID":"85","slug":"85-Maximal-Rectangle"}')}}]);