(window.webpackJsonp=window.webpackJsonp||[]).push([[1079],{1877:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Solution</span><span class=\\"hljs-params\\">(object)</span>:</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">smallestDistancePair</span><span class=\\"hljs-params\\">(self, nums, k)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        \\"\\"\\"</span>\\n        N=len(nums)\\n        allCount=N*(N<span class=\\"hljs-number\\">-1</span>)/<span class=\\"hljs-number\\">2</span>\\n        nums.sort()\\n        lo,hi=<span class=\\"hljs-number\\">0</span>,nums[<span class=\\"hljs-number\\">-1</span>]-nums[<span class=\\"hljs-number\\">0</span>]\\n        <span class=\\"hljs-keyword\\">while</span> lo&lt;hi:\\n          mid=(lo+hi)//<span class=\\"hljs-number\\">2</span>\\n          i,j=N<span class=\\"hljs-number\\">-1</span>,N<span class=\\"hljs-number\\">-2</span>\\n          count=<span class=\\"hljs-number\\">0</span>\\n          <span class=\\"hljs-keyword\\">while</span> i&gt;=<span class=\\"hljs-number\\">0</span> <span class=\\"hljs-keyword\\">and</span> j&gt;=<span class=\\"hljs-number\\">0</span>:\\n            gap=nums[i]-nums[j]\\n            <span class=\\"hljs-keyword\\">if</span> gap&lt;=mid:\\n              j-=<span class=\\"hljs-number\\">1</span>\\n            <span class=\\"hljs-keyword\\">elif</span> gap&gt;mid:\\n              count+=j+<span class=\\"hljs-number\\">1</span>\\n              i-=<span class=\\"hljs-number\\">1</span>\\n          realCount=allCount-count\\n          <span class=\\"hljs-keyword\\">if</span> realCount&lt;k:\\n            lo=mid+<span class=\\"hljs-number\\">1</span>\\n          <span class=\\"hljs-keyword\\">else</span>:\\n            hi=mid\\n        <span class=\\"hljs-keyword\\">return</span> lo\\n</code></pre>\\n"],"querySlug":"find-k-th-smallest-pair-distance","created_at":"2019-02-26","timeArr":[2019,1,26,16,15,53,0],"hasThinking":false,"content":"<p>给定一个整数数组，返回所有数对之间的第 k 个最小<strong>距离</strong>。一对 (A, B) 的距离被定义为 A 和 B 之间的绝对差值。</p>\\n\\n<p><strong>示例 1:</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>\\nnums = [1,3,1]\\nk = 1\\n<strong>输出：0</strong> \\n<strong>解释：</strong>\\n所有数对如下：\\n(1,3) -&gt; 2\\n(1,1) -&gt; 0\\n(3,1) -&gt; 2\\n因此第 1 个最小距离的数对是 (1,1)，它们之间的距离为 0。\\n</pre>\\n\\n<p><strong>提示:</strong></p>\\n\\n<ol>\\n\\t<li><code>2 &lt;= len(nums) &lt;= 10000</code>.</li>\\n\\t<li><code>0 &lt;= nums[i] &lt; 1000000</code>.</li>\\n\\t<li><code>1 &lt;= k &lt;= len(nums) * (len(nums) - 1) / 2</code>.</li>\\n</ol>\\n","title":"719. 找出第 k 小的距离对","relatedTags":["数组","双指针","二分查找","排序"],"difficult":"Hard","lang":["python"],"uniqueID":"719","slug":"719-Find-K-th-Smallest-Pair-Distance"}')}}]);