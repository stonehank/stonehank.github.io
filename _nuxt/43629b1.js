(window.webpackJsonp=window.webpackJsonp||[]).push([[1371],{2169:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">A</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> numSquarefulPerms = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">A</span>) </span>{\\n  A.sort(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">a,b</span>)=&gt;</span>a-b)\\n  <span class=\\"hljs-keyword\\">let</span> used=<span class=\\"hljs-built_in\\">Array</span>(A.length).fill(<span class=\\"hljs-literal\\">false</span>)\\n  <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">dfs</span>(<span class=\\"hljs-params\\">arr</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(arr.length===A.length)res++\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;A.length;i++){\\n      <span class=\\"hljs-keyword\\">if</span>(i&gt;<span class=\\"hljs-number\\">0</span> &amp;&amp; !used[i<span class=\\"hljs-number\\">-1</span>] &amp;&amp; A[i]===A[i<span class=\\"hljs-number\\">-1</span>])<span class=\\"hljs-keyword\\">continue</span>\\n      <span class=\\"hljs-keyword\\">if</span>(used[i])<span class=\\"hljs-keyword\\">continue</span>\\n      <span class=\\"hljs-keyword\\">if</span>(arr.length===<span class=\\"hljs-number\\">0</span> || valid(A[i]+arr[arr.length<span class=\\"hljs-number\\">-1</span>])){\\n        arr.push(A[i])\\n        used[i]=<span class=\\"hljs-literal\\">true</span>\\n        dfs(arr)\\n        used[i]=<span class=\\"hljs-literal\\">false</span>\\n        arr.pop()\\n      }\\n    }\\n  }\\n  dfs([])\\n  <span class=\\"hljs-keyword\\">return</span> res\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">valid</span>(<span class=\\"hljs-params\\">N</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> sqrt=<span class=\\"hljs-built_in\\">Math</span>.sqrt(N)\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-built_in\\">Math</span>.floor(sqrt)===sqrt\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"number-of-squareful-arrays","created_at":"2019-04-04","timeArr":[2019,3,4,14,58,27,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p><code>回溯法</code>，但是要处理重复。</p>\\n<p>例如： <code>[2,2,2]</code>，第一次的(<em>括号内是索引</em>)<code>[2(0),2(1),2(2)]</code>是被允许的，即使每个都相同，但是后续的<code>[2(1),2(0),2(2)]</code>都是不允许。</p>\\n<p>重复判断：<code>i&gt;0 &amp;&amp; A[i]===A[i-1] &amp;&amp; !used[i-1]</code></p>\\n<p>这里<code>used</code>是记录之前是否已经使用某个索引，如果发现重复，并且上一个重复的并未使用，\\n那就是说明当前排列在之前肯定出现过，并且这次就算是重复了，可以跳过；</p>\\n<p>如果上一个重复已经被使用，说明这次排列是第一次的排列，因为按索引从小到大的顺序就是如此，不能跳过。</p>\\n","content":"<p>给定一个非负整数数组&nbsp;<code>A</code>，如果该数组每对相邻元素之和是一个完全平方数，则称这一数组为<em>正方形</em>数组。</p>\\n\\n<p>返回 A 的正方形排列的数目。两个排列 <code>A1</code> 和 <code>A2</code> 不同的充要条件是存在某个索引 <code>i</code>，使得 A1[i] != A2[i]。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>[1,17,8]\\n<strong>输出：</strong>2\\n<strong>解释：</strong>\\n[1,8,17] 和 [17,8,1] 都是有效的排列。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>[2,2,2]\\n<strong>输出：</strong>1\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ol>\\n\\t<li><code>1 &lt;= A.length &lt;= 12</code></li>\\n\\t<li><code>0 &lt;= A[i] &lt;= 1e9</code></li>\\n</ol>\\n","title":"996. 正方形数组的数目","relatedTags":["位运算","数组","数学","动态规划","回溯","状态压缩"],"difficult":"Hard","lang":["javascript"],"uniqueID":"996","slug":"996-Number-of-Squareful-Arrays"}')}}]);