(window.webpackJsonp=window.webpackJsonp||[]).push([[104],{586:function(e){e.exports=JSON.parse('{"content":"<h3 id=\\"custom-elements\\">custom elements</h3>\\n<p>作用：将HTML页面的功能封装为<code>custom elements</code>(自定义标签)</p>\\n<blockquote>\\n<p><code>shadow root</code>：渲染隔离</p>\\n</blockquote>\\n<h3 id=\\"api\\">API</h3>\\n<ul>\\n<li><p>customElement.define()</p>\\n<p>  定义一个新的 自定义元素。</p>\\n<p>  参数1：<code>name</code>自定义元素名.\\n  参数2：<code>constructor</code>自定义元素构造器.\\n  参数3：<code>options</code> 目前有一个选项支持:<code>extends</code>指定继承的已创建的元素. 被用于创建自定义元素.\\n  例如：<code>{extends:&#39;p&#39;}继承p元素</code>，构造组件时<code>class MyEle extends HTMLParagraphElement{...}</code></p>\\n<blockquote>\\n<p>Autonomous custom elements 总是继承自HTMLElement</p>\\n</blockquote>\\n</li>\\n<li><p>customElement.get()</p>\\n<p>  返回指定自定义元素的构造函数，如果未定义自定义元素，则返回undefined。</p>\\n</li>\\n<li><p>customElement.whenDefined()</p>\\n<p>  返回当使用给定名称定义自定义元素时(必须使用有效名称)将会执行的promise(无参数)。</p>\\n<blockquote>\\n<p>有效的名称：<code>[a-z]xx-xxx</code>\\n具体参考:<a href=\\"https://html.spec.whatwg.org/multipage/custom-elements.html#prod-pcenchar\\">https://html.spec.whatwg.org/multipage/custom-elements.html#prod-pcenchar</a></p>\\n</blockquote>\\n<p>  例子：</p>\\n<pre><code><pre class=\\"hljs\\"><code>  customElements.whenDefined(&quot;my-ele&quot;).then(()=&gt;{\\n    // 此处无参数传递\\n    console.log(&quot;defined&quot;)\\n  })\\n  class MyEle extends HTMLElement {\\n    constructor() {\\n      // 必须首先调用 super方法 \\n      super(); \\n      // 元素的功能代码写在这里\\n    }\\n  }\\n  customElements.define(\'my-ele\', MyEle );</code></pre></code></pre></li>\\n</ul>\\n<h3 id=\\"da-pei-shadow-root-xiao-li-zi\\">搭配<code>shadow root</code>小例子</h3>\\n<pre><code><pre class=\\"hljs\\"><code>class MyEle extends HTMLElement {\\n  constructor() {\\n    super(); \\n    // 启动shadowRoot\\n    var shadow = this.attachShadow({mode: \'open\'});\\n\\n    var wrapper = document.createElement(\'span\');\\n    wrapper.setAttribute(\'class\',\'wrapper\');\\n    const style = document.createElement(\'style\');\\n    style.textContent = `\\n      .wrapper {\\n        background:blue;\\n      }\\n    `\\n    shadow.appendChild(wrapper);\\n  }\\n}\\ncustomElements.define(\'my-ele\', MyEle);</code></pre></code></pre><p>此处定义了一个<code>custom Element</code>，(包括启动<code>shadowRoot</code>和<code>define</code>)，其内部的<code>.wrapper</code>背景是蓝色，与外部的<code>.wrapper</code>不冲突。</p>\\n<h2 id=\\"sheng-ming-zhou-qi\\">生命周期</h2>\\n<ul>\\n<li>connectedCallback：当<code>custom element</code>首次被插入文档DOM时，被调用。</li>\\n<li>disconnectedCallback：当<code>custom element</code>从文档DOM中删除时，被调用。</li>\\n<li>adoptedCallback：当<code>custom element</code>被移动到新的文档时，被调用。</li>\\n<li>attributeChangedCallback:(多次被调用) 当<code>custom element</code>增加、删除、修改自身属性时，被调用。</li>\\n</ul>\\n","toc":[{"anchor":"custom-elements","level":3,"text":"custom elements"},{"anchor":"api","level":3,"text":"API"},{"anchor":"da-pei-shadow-root-xiao-li-zi","level":3,"text":"搭配<code>shadow root</code>小例子"},{"anchor":"sheng-ming-zhou-qi","level":2,"text":"生命周期"}],"relatedTags":null,"created_at":"2018-12-06","timeArr":[2018,11,6,0,0,0,0],"title":"customElements简述-笔记","uuid":"b921517a71d6975276b0a16acc18047667769321","summary":"<h4>custom elements</h4>\\n<p>作用：将HTML页面的功能封装为<code>custom elements</code>(自定义标签)</p>\\n<blockquote>\\n<p><code>shadow root</code>：渲染隔离</p>\\n</blockquote>\\n<h4>API</h4>\\n<ul>\\n<li>\\n<p>customElement.define()</p>\\n<p>定义一个新的 自定义元素。</p>\\n<p>参数1：<code>name</code>自定义...</p>\\n</li>\\n</ul>","slug":"customElements-jian-shu-bi-ji","sha":"a05dffbbc1c300934bccf6d802d61ea2a8458807"}')}}]);