(window.webpackJsonp=window.webpackJsonp||[]).push([[895],{1693:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">board</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">hand</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> findMinStep = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">board, hand</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> all=<span class=\\"hljs-string\\">\'RYBGW\'</span>\\n  <span class=\\"hljs-keyword\\">let</span> handHash={}\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> a <span class=\\"hljs-keyword\\">of</span> all)handHash[a]=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> s <span class=\\"hljs-keyword\\">of</span> hand)handHash[s]++\\n  <span class=\\"hljs-keyword\\">let</span> hash={}\\n  <span class=\\"hljs-keyword\\">let</span> minStep=backtrack(<span class=\\"hljs-number\\">0</span>,board)\\n  <span class=\\"hljs-keyword\\">if</span>(minStep===<span class=\\"hljs-literal\\">Infinity</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">-1</span>\\n  <span class=\\"hljs-keyword\\">return</span> minStep\\n  \\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">backtrack</span>(<span class=\\"hljs-params\\">start,str</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(str===<span class=\\"hljs-string\\">\\"\\"</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">if</span>(hash[str]!=<span class=\\"hljs-literal\\">null</span>)<span class=\\"hljs-keyword\\">return</span> hash[str]\\n    <span class=\\"hljs-keyword\\">let</span> step=<span class=\\"hljs-literal\\">Infinity</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=start;i&lt;=str.length;i++){\\n      <span class=\\"hljs-keyword\\">if</span>(i===str.length || (i&gt;start &amp;&amp; str[i]!==str[i<span class=\\"hljs-number\\">-1</span>])){\\n        <span class=\\"hljs-keyword\\">let</span> c=<span class=\\"hljs-built_in\\">Math</span>.max(<span class=\\"hljs-number\\">3</span>-(i-start),<span class=\\"hljs-number\\">0</span>)\\n        <span class=\\"hljs-keyword\\">if</span>(handHash[str[i<span class=\\"hljs-number\\">-1</span>]]&lt;c){\\n          start=i\\n          <span class=\\"hljs-keyword\\">continue</span>\\n        }\\n        handHash[str[i<span class=\\"hljs-number\\">-1</span>]]-=c\\n        step=<span class=\\"hljs-built_in\\">Math</span>.min(step,backtrack(<span class=\\"hljs-number\\">0</span>,str.substring(<span class=\\"hljs-number\\">0</span>,start)+str.substring(i))+c)\\n        handHash[str[i<span class=\\"hljs-number\\">-1</span>]]+=c   \\n\\t\\t    start=i     \\n      }\\n    }\\n    hash[str]=step\\n    <span class=\\"hljs-keyword\\">return</span> step\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"zuma-game","created_at":"2019-04-09","timeArr":[2019,3,9,16,47,11,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>回溯，每次检查一种颜色，如果当前球<code>board[i]===board[i-1]</code>说明当前还是同一种颜色连续的，继续检查下一个球直到<code>board[i]!==board[i-1]</code>，\\n设定当前这种颜色的连续范围为<code>[start,i)</code>，尝试消除这种颜色。</p>\\n<p>当尝试消除这种颜色返回后或者无法消除这种颜色(手中的球不够)，更新<code>start=i</code>，继续递归，检查下一种颜色。</p>\\n","content":"<p>回忆一下祖玛游戏。现在桌上有一串球，颜色有红色(R)，黄色(Y)，蓝色(B)，绿色(G)，还有白色(W)。 现在你手里也有几个球。</p>\\n\\n<p>每一次，你可以从手里的球选一个，然后把这个球插入到一串球中的某个位置上（包括最左端，最右端）。接着，如果有出现三个或者三个以上颜色相同的球相连的话，就把它们移除掉。重复这一步骤直到桌上所有的球都被移除。</p>\\n\\n<p>找到插入并可以移除掉桌上所有球所需的最少的球数。如果不能移除桌上所有的球，输出 -1 。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>board = \\"WRRBBW\\", hand = \\"RB\\"\\n<strong>输出：</strong>-1\\n<strong>解释：</strong>WRRBBW -> WRR[R]BBW -> WBBW -> WBB[B]W -> WW\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>board = \\"WWRRBBWW\\", hand = \\"WRBRW\\"\\n<strong>输出：</strong>2\\n<strong>解释：</strong>WWRRBBWW -> WWRR[R]BBWW -> WWBBWW -> WWBB[B]WW -> WWWW -> empty\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>board = \\"G\\", hand = \\"GGGGG\\"\\n<strong>输出：</strong>2\\n<strong>解释：</strong>G -> G[G] -> GG[G] -> empty \\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>board = \\"RBYYBBRRB\\", hand = \\"YRBGB\\"\\n<strong>输出：</strong>3\\n<strong>解释：</strong>RBYYBBRRB -> RBYY[Y]BBRRB -> RBBBRRB -> RRRB -> B -> B[B] -> BB[B] -> empty \\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li>你可以假设桌上一开始的球中，不会有三个及三个以上颜色相同且连着的球。</li>\\n\\t<li><code>1 <= board.length <= 16</code></li>\\n\\t<li><code>1 <= hand.length <= 5</code></li>\\n\\t<li>输入的两个字符串均为非空字符串，且只包含字符 \'R\',\'Y\',\'B\',\'G\',\'W\'。</li>\\n</ul>\\n","title":"488. 祖玛游戏","relatedTags":["字符串","回溯"],"difficult":"Hard","lang":["javascript"],"uniqueID":"488","slug":"488-Zuma-Game"}')}}]);