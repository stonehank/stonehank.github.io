(window.webpackJsonp=window.webpackJsonp||[]).push([[1076],{1874:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code>\\n<span class=\\"hljs-keyword\\">var</span> RangeModule = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{\\n  <span class=\\"hljs-keyword\\">this</span>.interval=[]\\n};\\n\\n<span class=\\"hljs-comment\\">/** \\n * @param {number} left \\n * @param {number} right\\n * @return {void}\\n */</span>\\nRangeModule.prototype.addRange = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">left, right</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> itv=[]\\n  <span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>,len=<span class=\\"hljs-keyword\\">this</span>.interval.length\\n  \\n  <span class=\\"hljs-keyword\\">for</span>(;i&lt;len;i++){\\n    <span class=\\"hljs-keyword\\">let</span> cur=<span class=\\"hljs-keyword\\">this</span>.interval[i]\\n    <span class=\\"hljs-keyword\\">if</span>(cur[<span class=\\"hljs-number\\">1</span>]&lt;left){\\n      itv.push(cur)\\n    }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(cur[<span class=\\"hljs-number\\">0</span>]&gt;right){\\n      <span class=\\"hljs-keyword\\">break</span>\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      left=<span class=\\"hljs-built_in\\">Math</span>.min(left,cur[<span class=\\"hljs-number\\">0</span>])\\n      right=<span class=\\"hljs-built_in\\">Math</span>.max(right,cur[<span class=\\"hljs-number\\">1</span>])\\n    }\\n  }\\n  \\n  itv.push([left,right])\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=i;j&lt;len;j++)itv.push(<span class=\\"hljs-keyword\\">this</span>.interval[j])\\n  <span class=\\"hljs-keyword\\">this</span>.interval=itv\\n};\\n\\n<span class=\\"hljs-comment\\">/** \\n * @param {number} left \\n * @param {number} right\\n * @return {boolean}\\n */</span>\\nRangeModule.prototype.queryRange = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">left, right</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> len=<span class=\\"hljs-keyword\\">this</span>.interval.length\\n  <span class=\\"hljs-keyword\\">if</span>(len===<span class=\\"hljs-number\\">0</span> || <span class=\\"hljs-keyword\\">this</span>.interval[len<span class=\\"hljs-number\\">-1</span>][<span class=\\"hljs-number\\">1</span>]&lt;right)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n  \\n  <span class=\\"hljs-keyword\\">let</span> lo=<span class=\\"hljs-number\\">0</span>,hi=len<span class=\\"hljs-number\\">-1</span>\\n  <span class=\\"hljs-keyword\\">while</span>(lo&lt;hi){\\n    <span class=\\"hljs-keyword\\">let</span> mid=<span class=\\"hljs-built_in\\">Math</span>.floor((lo+hi)/<span class=\\"hljs-number\\">2</span>)\\n    <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-keyword\\">this</span>.interval[mid][<span class=\\"hljs-number\\">1</span>]&lt;left)lo=mid+<span class=\\"hljs-number\\">1</span>\\n    <span class=\\"hljs-keyword\\">else</span> hi=mid\\n  }\\n\\n  <span class=\\"hljs-keyword\\">let</span> itv=<span class=\\"hljs-keyword\\">this</span>.interval[hi]\\n  <span class=\\"hljs-keyword\\">if</span>(itv[<span class=\\"hljs-number\\">0</span>]&lt;=left &amp;&amp; right&lt;=itv[<span class=\\"hljs-number\\">1</span>])<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n};\\n\\n<span class=\\"hljs-comment\\">/** \\n * @param {number} left \\n * @param {number} right\\n * @return {void}\\n */</span>\\nRangeModule.prototype.removeRange = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">left, right</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> itv=[],temp=[]\\n  <span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>,len=<span class=\\"hljs-keyword\\">this</span>.interval.length\\n  \\n  <span class=\\"hljs-keyword\\">for</span>(;i&lt;len;i++){\\n    <span class=\\"hljs-keyword\\">let</span> cur=<span class=\\"hljs-keyword\\">this</span>.interval[i]\\n    <span class=\\"hljs-keyword\\">if</span>(cur[<span class=\\"hljs-number\\">1</span>]&lt;left){\\n      itv.push(cur)\\n    }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(cur[<span class=\\"hljs-number\\">0</span>]&gt;right){\\n      <span class=\\"hljs-keyword\\">break</span>\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      <span class=\\"hljs-keyword\\">if</span>(cur[<span class=\\"hljs-number\\">0</span>]&lt;left)temp.push([cur[<span class=\\"hljs-number\\">0</span>],left])\\n      <span class=\\"hljs-keyword\\">if</span>(cur[<span class=\\"hljs-number\\">1</span>]&gt;right)temp.push([right,cur[<span class=\\"hljs-number\\">1</span>]])\\n    }\\n  }\\n  \\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;temp.length;j++)itv.push(temp[j])\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=i;j&lt;len;j++)itv.push(<span class=\\"hljs-keyword\\">this</span>.interval[j])\\n  <span class=\\"hljs-keyword\\">this</span>.interval=itv\\n};\\n\\n<span class=\\"hljs-comment\\">/** \\n * Your RangeModule object will be instantiated and called as such:\\n * var obj = Object.create(RangeModule).createNew()\\n * obj.addRange(left,right)\\n * var param_2 = obj.queryRange(left,right)\\n * obj.removeRange(left,right)\\n */</span>\\n</code></pre>\\n","<pre class=\\"hljs\\"><code><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">RangeModule</span><span class=\\"hljs-params\\">(object)</span>:</span>\\n\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">__init__</span><span class=\\"hljs-params\\">(self)</span>:</span>\\n        self.range=[]\\n\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">addRange</span><span class=\\"hljs-params\\">(self, left, right)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type left: int\\n        :type right: int\\n        :rtype: None\\n        \\"\\"\\"</span>\\n        length=len(self.range)\\n        newRange=[]\\n        i=<span class=\\"hljs-number\\">0</span>\\n        <span class=\\"hljs-keyword\\">while</span> i&lt;length:\\n          itv=self.range[i]\\n          <span class=\\"hljs-keyword\\">if</span> itv[<span class=\\"hljs-number\\">1</span>]&lt;left:\\n            newRange.append(itv)\\n          <span class=\\"hljs-keyword\\">elif</span> itv[<span class=\\"hljs-number\\">0</span>]&gt;right:\\n            <span class=\\"hljs-keyword\\">break</span>\\n          <span class=\\"hljs-keyword\\">else</span>:\\n            left=min(left,itv[<span class=\\"hljs-number\\">0</span>])\\n            right=max(right,itv[<span class=\\"hljs-number\\">1</span>])\\n          i+=<span class=\\"hljs-number\\">1</span>\\n            \\n        newRange.append([left,right])\\n        <span class=\\"hljs-keyword\\">for</span> j <span class=\\"hljs-keyword\\">in</span> range(i,length):\\n          newRange.append(self.range[j])\\n        self.range=newRange\\n        \\n        \\n\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">queryRange</span><span class=\\"hljs-params\\">(self, left, right)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type left: int\\n        :type right: int\\n        :rtype: bool\\n        \\"\\"\\"</span>\\n        length=len(self.range)\\n        <span class=\\"hljs-keyword\\">if</span> length==<span class=\\"hljs-number\\">0</span> <span class=\\"hljs-keyword\\">or</span> self.range[<span class=\\"hljs-number\\">-1</span>][<span class=\\"hljs-number\\">1</span>]&lt;right: <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">False</span>\\n        lo,hi=<span class=\\"hljs-number\\">0</span>,length<span class=\\"hljs-number\\">-1</span>\\n        <span class=\\"hljs-keyword\\">while</span> lo&lt;hi:\\n          mid=(lo+hi) // <span class=\\"hljs-number\\">2</span>\\n          <span class=\\"hljs-keyword\\">if</span> self.range[mid][<span class=\\"hljs-number\\">1</span>]&lt;left: lo=mid+<span class=\\"hljs-number\\">1</span>\\n          <span class=\\"hljs-keyword\\">else</span>: hi=mid\\n            \\n        itv=self.range[hi]\\n        <span class=\\"hljs-keyword\\">if</span> itv[<span class=\\"hljs-number\\">0</span>]&lt;=left <span class=\\"hljs-keyword\\">and</span> right&lt;=itv[<span class=\\"hljs-number\\">1</span>]: <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">True</span>\\n        <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">False</span>\\n\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">removeRange</span><span class=\\"hljs-params\\">(self, left, right)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type left: int\\n        :type right: int\\n        :rtype: None\\n        \\"\\"\\"</span>\\n        length=len(self.range)\\n        newRange,temp=[],[]\\n        i=<span class=\\"hljs-number\\">0</span>\\n        <span class=\\"hljs-keyword\\">while</span> i&lt;length:\\n          itv=self.range[i]\\n          <span class=\\"hljs-keyword\\">if</span> itv[<span class=\\"hljs-number\\">1</span>]&lt;left:\\n            newRange.append(itv)\\n          <span class=\\"hljs-keyword\\">elif</span> itv[<span class=\\"hljs-number\\">0</span>]&gt;right:\\n            <span class=\\"hljs-keyword\\">break</span>\\n          <span class=\\"hljs-keyword\\">else</span>:\\n            <span class=\\"hljs-keyword\\">if</span> itv[<span class=\\"hljs-number\\">0</span>]&lt;left: temp.append([itv[<span class=\\"hljs-number\\">0</span>],left])\\n            <span class=\\"hljs-keyword\\">if</span> itv[<span class=\\"hljs-number\\">1</span>]&gt;right: temp.append([right,itv[<span class=\\"hljs-number\\">1</span>]])\\n          i+=<span class=\\"hljs-number\\">1</span>\\n            \\n        <span class=\\"hljs-keyword\\">for</span> j <span class=\\"hljs-keyword\\">in</span> range(len(temp)):\\n          newRange.append(temp[j])\\n        <span class=\\"hljs-keyword\\">for</span> j <span class=\\"hljs-keyword\\">in</span> range(i,length):\\n          newRange.append(self.range[j])\\n\\n        self.range=newRange        \\n\\n<span class=\\"hljs-comment\\"># Your RangeModule object will be instantiated and called as such:</span>\\n<span class=\\"hljs-comment\\"># obj = RangeModule()</span>\\n<span class=\\"hljs-comment\\"># obj.addRange(left,right)</span>\\n<span class=\\"hljs-comment\\"># param_2 = obj.queryRange(left,right)</span>\\n<span class=\\"hljs-comment\\"># obj.removeRange(left,right)</span>\\n</code></pre>\\n"],"querySlug":"range-module","hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<ul>\\n<li>addRange</li>\\n</ul>\\n<p>在<code>addRange</code>，需要找到当前需要更新的区间；</p>\\n<p>定义一个空数组<code>itv</code>，用于保存更新后的所有区间，</p>\\n<p>如果<code>this.interval[i][1]&lt;left</code>，说明需要增加的区间在当前区间之后，直接将当前区间<code>push</code>到<code>itv</code>内；</p>\\n<p>如果<code>this.interval[i][0]&gt;right</code>，说明需要增加的区间在当前区间之前，已经处理完更新了，后面的所有区间都直接<code>push</code>即可；</p>\\n<p>其他情况，说明当前区间需要被<code>left</code>，<code>right</code>更新，求它们的并集即可：</p>\\n<pre class=\\"hljs\\"><code>left=Math.min(left,cur[0])\\nright=Math.max(right,cur[1])\\n</code></pre>\\n<ul>\\n<li>removeRange</li>\\n</ul>\\n<p>在<code>removeRange</code>情况下，与<code>addRange</code>类似，但是需要另外一个数组<code>temp</code>专门保存更新的区间，因为需要删除的<code>[left,right]</code>范围可能很大，横跨好几个区间；</p>\\n<p>如果<code>this.interval[i][1]&lt;left</code>，说明需要增加的区间在当前区间之后，直接将当前区间<code>push</code>到<code>itv</code>内；</p>\\n<p>如果<code>this.interval[i][0]&gt;right</code>，说明需要增加的区间在当前区间之前，已经处理完更新了，后面的所有区间都直接<code>push</code>即可；</p>\\n<p>其他情况，说明当前区间需要被<code>left</code>，<code>right</code>分割，求它们的非交集即可，</p>\\n<pre class=\\"hljs\\"><code>if(cur[0]&lt;left)temp.push([cur[0],left])\\nif(cur[1]&gt;right)temp.push([right,cur[1]])\\n</code></pre>\\n<ul>\\n<li>queryRange</li>\\n</ul>\\n<p><code>queryRange</code>就是遍历当前区间，查看<code>left,right</code>是否小于任意一个区间，当然也可以使用二分法。</p>\\n","content":"<p>Range 模块是跟踪数字范围的模块。你的任务是以一种有效的方式设计和实现以下接口。</p>\\n\\n<ul>\\n\\t<li><code>addRange(int left, int right)</code> 添加半开区间&nbsp;<code>[left, right)</code>，跟踪该区间中的每个实数。添加与当前跟踪的数字部分重叠的区间时，应当添加在区间&nbsp;<code>[left, right)</code>&nbsp;中尚未跟踪的任何数字到该区间中。</li>\\n\\t<li><code>queryRange(int left, int right)</code>&nbsp;只有在当前正在跟踪区间&nbsp;<code>[left, right)</code>&nbsp;中的每一个实数时，才返回 true。</li>\\n\\t<li><code>removeRange(int left, int right)</code>&nbsp;停止跟踪区间&nbsp;<code>[left, right)</code>&nbsp;中当前正在跟踪的每个实数。</li>\\n</ul>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例：</strong></p>\\n\\n<pre><strong>addRange(10, 20)</strong>: null\\n<strong>removeRange(14, 16)</strong>: null\\n<strong>queryRange(10, 14)</strong>: true （区间 [10, 14) 中的每个数都正在被跟踪）\\n<strong>queryRange(13, 15)</strong>: false （未跟踪区间 [13, 15) 中像 14, 14.03, 14.17 这样的数字）\\n<strong>queryRange(16, 17)</strong>: true （尽管执行了删除操作，区间 [16, 17) 中的数字 16 仍然会被跟踪）\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li>半开区间&nbsp;<code>[left, right)</code>&nbsp;表示所有满足&nbsp;<code>left &lt;= x &lt; right</code>&nbsp;的实数。</li>\\n\\t<li>对&nbsp;<code>addRange, queryRange, removeRange</code>&nbsp;的所有调用中&nbsp;<code>0 &lt; left &lt; right &lt; 10^9</code>。</li>\\n\\t<li>在单个测试用例中，对&nbsp;<code>addRange</code>&nbsp;的调用总数不超过&nbsp;<code>1000</code>&nbsp;次。</li>\\n\\t<li>在单个测试用例中，对&nbsp; <code>queryRange</code> 的调用总数不超过 <code>5000</code> 次。</li>\\n\\t<li>在单个测试用例中，对 <code>removeRange</code> 的调用总数不超过&nbsp;<code>1000</code>&nbsp;次。</li>\\n</ul>\\n\\n<p>&nbsp;</p>\\n","title":"715. Range 模块","relatedTags":["设计","线段树","有序集合"],"difficult":"Hard","lang":["javascript","python"],"uniqueID":"715","slug":"715-Range-Module"}')}}]);