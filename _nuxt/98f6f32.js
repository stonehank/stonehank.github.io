(window.webpackJsonp=window.webpackJsonp||[]).push([[503],{1301:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">sentence</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">searchWord</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> isPrefixOfWord = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">sentence, searchWord</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> s=sentence.split(<span class=\\"hljs-string\\">\' \'</span>)\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;s.length;i++){\\n    <span class=\\"hljs-keyword\\">if</span>(s[i].startsWith(searchWord)){\\n      <span class=\\"hljs-keyword\\">return</span> i+<span class=\\"hljs-number\\">1</span>\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">-1</span>\\n};\\n</code></pre>\\n"],"querySlug":"check-if-a-word-occurs-as-a-prefix-of-any-word-in-a-sentence","created_at":"2020-05-24","timeArr":[2020,4,24,10,32,53,0],"hasThinking":false,"content":"<p>给你一个字符串 <code>sentence</code> 作为句子并指定检索词为 <code>searchWord</code> ，其中句子由若干用 <strong>单个空格</strong> 分隔的单词组成。</p>\\n\\n<p>请你检查检索词 <code>searchWord</code> 是否为句子 <code>sentence</code> 中任意单词的前缀。</p>\\n\\n<ul>\\n\\t<li>如果 <code>searchWord</code> 是某一个单词的前缀，则返回句子 <code>sentence</code> 中该单词所对应的下标（<strong>下标从 1 开始</strong>）。</li>\\n\\t<li>如果 <code>searchWord</code> 是多个单词的前缀，则返回匹配的第一个单词的下标（<strong>最小下标</strong>）。</li>\\n\\t<li>如果 <code>searchWord</code> 不是任何单词的前缀，则返回 <strong>-1 </strong>。</li>\\n</ul>\\n\\n<p>字符串 <code>S</code> 的 <strong>前缀</strong> 是 <code>S</code> 的任何前导连续子字符串。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>sentence = \\"i love eating burger\\", searchWord = \\"burg\\"\\n<strong>输出：</strong>4\\n<strong>解释：</strong>\\"burg\\" 是 \\"burger\\" 的前缀，而 \\"burger\\" 是句子中第 4 个单词。</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>sentence = \\"this problem is an easy problem\\", searchWord = \\"pro\\"\\n<strong>输出：</strong>2\\n<strong>解释：</strong>\\"pro\\" 是 \\"problem\\" 的前缀，而 \\"problem\\" 是句子中第 2 个也是第 6 个单词，但是应该返回最小下标 2 。\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>sentence = \\"i am tired\\", searchWord = \\"you\\"\\n<strong>输出：</strong>-1\\n<strong>解释：</strong>\\"you\\" 不是句子中任何单词的前缀。\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>sentence = \\"i use triple pillow\\", searchWord = \\"pill\\"\\n<strong>输出：</strong>4\\n</pre>\\n\\n<p><strong>示例 5：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>sentence = \\"hello from the other side\\", searchWord = \\"they\\"\\n<strong>输出：</strong>-1\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= sentence.length <= 100</code></li>\\n\\t<li><code>1 <= searchWord.length <= 10</code></li>\\n\\t<li><code>sentence</code> 由小写英文字母和空格组成。</li>\\n\\t<li><code>searchWord</code> 由小写英文字母组成。</li>\\n\\t<li>前缀就是紧密附着于词根的语素，中间不能插入其它成分，并且它的位置是固定的——-位于词根之前。（引用自 <a href=\\"https://baike.baidu.com/item/%E5%89%8D%E7%BC%80\\" target=\\"_blank\\">前缀_百度百科</a> ）</li>\\n</ul>\\n","title":"1455. 检查单词是否为句中其他单词的前缀","relatedTags":["字符串","字符串匹配"],"difficult":"Easy","lang":["javascript"],"uniqueID":"1455","slug":"1455-Check-If-a-Word-Occurs-As-a-Prefix-of-Any-Word-in-a-Sentence"}')}}]);