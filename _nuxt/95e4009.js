(window.webpackJsonp=window.webpackJsonp||[]).push([[790],{1588:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">n</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{string}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> countAndSay = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">n</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> s=<span class=\\"hljs-string\\">\'1\'</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">2</span>;i&lt;=n;i++){\\n    <span class=\\"hljs-keyword\\">let</span> cur=s[<span class=\\"hljs-number\\">0</span>],count=<span class=\\"hljs-number\\">1</span>,news=<span class=\\"hljs-string\\">\'\'</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">1</span>;j&lt;s.length;j++){\\n      <span class=\\"hljs-keyword\\">if</span>(s[j]===s[j<span class=\\"hljs-number\\">-1</span>]){\\n        count++\\n      }<span class=\\"hljs-keyword\\">else</span>{\\n        news+=count+<span class=\\"hljs-string\\">\'\'</span>+cur\\n        cur=s[j]\\n        count=<span class=\\"hljs-number\\">1</span>\\n      }\\n    }\\n    s=news+count+cur\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> s\\n};\\n</code></pre>\\n"],"querySlug":"count-and-say","created_at":"2019-03-22","timeArr":[2019,2,22,10,43,18,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>按照题意从<code>i===2</code>开始，读出<code>s</code>，并且更新<code>s</code>，直到<code>i&gt;n</code>。</p>\\n<p>这里的<code>读</code>，就是对连续数字一个合并，例如<code>11112</code>，前面有<code>4</code>个<code>1</code>连续，因此读为<code>41</code>，后面<code>1</code>个<code>2</code>，读为<code>12</code>，连在一起就是<code>4112</code>。</p>\\n","content":"<p>给定一个正整数 <code>n</code> ，输出外观数列的第 <code>n</code> 项。</p>\\n\\n<p>「外观数列」是一个整数序列，从数字 1 开始，序列中的每一项都是对前一项的描述。</p>\\n\\n<p>你可以将其视作是由递归公式定义的数字字符串序列：</p>\\n\\n<ul>\\n\\t<li><code>countAndSay(1) = \\"1\\"</code></li>\\n\\t<li><code>countAndSay(n)</code> 是对 <code>countAndSay(n-1)</code> 的描述，然后转换成另一个数字字符串。</li>\\n</ul>\\n\\n<p>前五项如下：</p>\\n\\n<pre>\\n1.     1\\n2.     11\\n3.     21\\n4.     1211\\n5.     111221\\n第一项是数字 1 \\n描述前一项，这个数是 <code>1</code> 即 “ 一 个 1 ”，记作 <code>\\"11\\"\\n</code>描述前一项，这个数是 <code>11</code> 即 “ 二 个 1 ” ，记作 <code>\\"21\\"\\n</code>描述前一项，这个数是 <code>21</code> 即 “ 一 个 2 + 一 个 1 ” ，记作 \\"<code>1211\\"\\n</code>描述前一项，这个数是 <code>1211</code> 即 “ 一 个 1 + 一 个 2 + 二 个 1 ” ，记作 \\"<code>111221\\"</code>\\n</pre>\\n\\n<p>要 <strong>描述</strong> 一个数字字符串，首先要将字符串分割为 <strong>最小</strong> 数量的组，每个组都由连续的最多 <strong>相同字符</strong> 组成。然后对于每个组，先描述字符的数量，然后描述字符，形成一个描述组。要将描述转换为数字字符串，先将每组中的字符数量用数字替换，再将所有描述组连接起来。</p>\\n\\n<p>例如，数字字符串 <code>\\"3322251\\"</code> 的描述如下图：</p>\\n<img alt=\\"\\" src=\\"https://pic.leetcode-cn.com/1629874763-TGmKUh-image.png\\" style=\\"width: 581px; height: 172px;\\" />\\n<ul>\\n</ul>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>n = 1\\n<strong>输出：</strong>\\"1\\"\\n<strong>解释：</strong>这是一个基本样例。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>n = 4\\n<strong>输出：</strong>\\"1211\\"\\n<strong>解释：</strong>\\ncountAndSay(1) = \\"1\\"\\ncountAndSay(2) = 读 \\"1\\" = 一 个 1 = \\"11\\"\\ncountAndSay(3) = 读 \\"11\\" = 二 个 1 = \\"21\\"\\ncountAndSay(4) = 读 \\"21\\" = 一 个 2 + 一 个 1 = \\"12\\" + \\"11\\" = \\"1211\\"\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= n &lt;= 30</code></li>\\n</ul>\\n","title":"38. 外观数列","relatedTags":["字符串"],"difficult":"Middle","lang":["javascript"],"uniqueID":"38","slug":"38-Count-and-Say"}')}}]);