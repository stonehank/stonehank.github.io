(window.webpackJsonp=window.webpackJsonp||[]).push([[477],{1275:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for singly-linked list.\\n * function ListNode(val) {\\n *     this.val = val;\\n *     this.next = null;\\n * }\\n */</span>\\n\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{ListNode}</span> <span class=\\"hljs-variable\\">head</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{boolean}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> hasCycle = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">head</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> fast=head,slow=head\\n  <span class=\\"hljs-keyword\\">while</span>(fast &amp;&amp; fast.next){\\n    slow=slow.next\\n    fast=fast.next.next\\n    <span class=\\"hljs-keyword\\">if</span>(fast===slow)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n};\\n</code></pre>\\n"],"querySlug":"linked-list-cycle","created_at":"2019-04-11","timeArr":[2019,3,11,16,13,43,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>双指针，<code>fast</code>每次跳2下，<code>slow</code>每次跳1下，如果<code>fast</code>能重遇<code>slow</code>，说明有环。</p>\\n","content":"<p>给定一个链表，判断链表中是否有环。</p>\\n\\n<p>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，我们使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。<strong>注意：<code>pos</code> 不作为参数进行传递</strong>，仅仅是为了标识链表的实际情况。</p>\\n\\n<p>如果链表中存在环，则返回 <code>true</code> 。 否则，返回 <code>false</code> 。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>进阶：</strong></p>\\n\\n<p>你能用 <em>O(1)</em>（即，常量）内存解决此问题吗？</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<p><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist.png\\" style=\\"height: 97px; width: 300px;\\"></p>\\n\\n<pre><strong>输入：</strong>head = [3,2,0,-4], pos = 1\\n<strong>输出：</strong>true\\n<strong>解释：</strong>链表中有一个环，其尾部连接到第二个节点。\\n</pre>\\n\\n<p><strong>示例&nbsp;2：</strong></p>\\n\\n<p><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png\\" style=\\"height: 74px; width: 141px;\\"></p>\\n\\n<pre><strong>输入：</strong>head = [1,2], pos = 0\\n<strong>输出：</strong>true\\n<strong>解释：</strong>链表中有一个环，其尾部连接到第一个节点。\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<p><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png\\" style=\\"height: 45px; width: 45px;\\"></p>\\n\\n<pre><strong>输入：</strong>head = [1], pos = -1\\n<strong>输出：</strong>false\\n<strong>解释：</strong>链表中没有环。\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li>链表中节点的数目范围是 <code>[0, 10<sup>4</sup>]</code></li>\\n\\t<li><code>-10<sup>5</sup> &lt;= Node.val &lt;= 10<sup>5</sup></code></li>\\n\\t<li><code>pos</code> 为 <code>-1</code> 或者链表中的一个 <strong>有效索引</strong> 。</li>\\n</ul>\\n","title":"141. 环形链表","relatedTags":["哈希表","链表","双指针"],"difficult":"Easy","lang":["javascript"],"uniqueID":"141","slug":"141-Linked-List-Cycle"}')}}]);