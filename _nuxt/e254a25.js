(window.webpackJsonp=window.webpackJsonp||[]).push([[1030],{1828:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{TreeNode}</span> <span class=\\"hljs-variable\\">root</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">L</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">R</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{TreeNode}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> trimBST = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">root, L, R</span>) </span>{\\n    <span class=\\"hljs-keyword\\">if</span>(root===<span class=\\"hljs-literal\\">null</span>){<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">null</span>}\\n    <span class=\\"hljs-keyword\\">if</span>(root.val&lt;L){<span class=\\"hljs-keyword\\">return</span> trimBST(root.right,L,R)}\\n    <span class=\\"hljs-keyword\\">if</span>(root.val&gt;R){<span class=\\"hljs-keyword\\">return</span> trimBST(root.left,L,R)}\\n    \\n    root.left=trimBST(root.left,L,R)\\n    root.right=trimBST(root.right,L,R)\\n    <span class=\\"hljs-keyword\\">return</span> root\\n};\\n</code></pre>\\n"],"querySlug":"trim-a-binary-search-tree","created_at":"2019-03-19","timeArr":[2019,2,19,16,35,13,0],"hasThinking":false,"content":"<p>给你二叉搜索树的根节点 <code>root</code> ，同时给定最小边界<code>low</code> 和最大边界 <code>high</code>。通过修剪二叉搜索树，使得所有节点的值在<code>[low, high]</code>中。修剪树不应该改变保留在树中的元素的相对结构（即，如果没有被移除，原有的父代子代关系都应当保留）。 可以证明，存在唯一的答案。</p>\\n\\n<p>所以结果应当返回修剪好的二叉搜索树的新的根节点。注意，根节点可能会根据给定的边界发生改变。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2020/09/09/trim1.jpg\\" style=\\"width: 450px; height: 126px;\\" />\\n<pre>\\n<strong>输入：</strong>root = [1,0,2], low = 1, high = 2\\n<strong>输出：</strong>[1,null,2]\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2020/09/09/trim2.jpg\\" style=\\"width: 450px; height: 277px;\\" />\\n<pre>\\n<strong>输入：</strong>root = [3,0,4,null,2,null,null,1], low = 1, high = 3\\n<strong>输出：</strong>[3,2,null,1]\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>root = [1], low = 1, high = 2\\n<strong>输出：</strong>[1]\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>root = [1,null,2], low = 1, high = 3\\n<strong>输出：</strong>[1,null,2]\\n</pre>\\n\\n<p><strong>示例 5：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>root = [1,null,2], low = 2, high = 4\\n<strong>输出：</strong>[2]\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li>树中节点数在范围 <code>[1, 10<sup>4</sup>]</code> 内</li>\\n\\t<li><code>0 <= Node.val <= 10<sup>4</sup></code></li>\\n\\t<li>树中每个节点的值都是唯一的</li>\\n\\t<li>题目数据保证输入是一棵有效的二叉搜索树</li>\\n\\t<li><code>0 <= low <= high <= 10<sup>4</sup></code></li>\\n</ul>\\n","title":"669. 修剪二叉搜索树","relatedTags":["树","深度优先搜索","二叉搜索树","二叉树"],"difficult":"Middle","lang":["javascript"],"uniqueID":"669","slug":"669-Trim-a-Binary-Search-Tree"}')}}]);