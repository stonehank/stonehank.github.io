(window.webpackJsonp=window.webpackJsonp||[]).push([[1188],{1986:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">S</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[][]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> largeGroupPositions = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">S</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> temp=[<span class=\\"hljs-number\\">0</span>],res=[]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">1</span>;i&lt;=S.length;i++){\\n    <span class=\\"hljs-keyword\\">if</span>(i===S.length || S[i]!==S[i<span class=\\"hljs-number\\">-1</span>]){\\n      temp[<span class=\\"hljs-number\\">1</span>]=i<span class=\\"hljs-number\\">-1</span>\\n      <span class=\\"hljs-keyword\\">if</span>(i-temp[<span class=\\"hljs-number\\">0</span>]&gt;=<span class=\\"hljs-number\\">3</span>){\\n        res.push(temp.slice())\\n      }\\n      temp=[i]\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"positions-of-large-groups","created_at":"2019-03-15","timeArr":[2019,2,15,20,3,19,0],"hasThinking":false,"content":"<p>在一个由小写字母构成的字符串 <code>s</code> 中，包含由一些连续的相同字符所构成的分组。</p>\\n\\n<p>例如，在字符串 <code>s = \\"abbxxxxzyy\\"</code> 中，就含有 <code>\\"a\\"</code>, <code>\\"bb\\"</code>, <code>\\"xxxx\\"</code>, <code>\\"z\\"</code> 和 <code>\\"yy\\"</code> 这样的一些分组。</p>\\n\\n<p>分组可以用区间 <code>[start, end]</code> 表示，其中 <code>start</code> 和 <code>end</code> 分别表示该分组的起始和终止位置的下标。上例中的 <code>\\"xxxx\\"</code> 分组用区间表示为 <code>[3,6]</code> 。</p>\\n\\n<p>我们称所有包含大于或等于三个连续字符的分组为 <strong>较大分组</strong> 。</p>\\n\\n<p>找到每一个 <strong>较大分组</strong> 的区间，<strong>按起始位置下标递增顺序排序后</strong>，返回结果。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = \\"abbxxxxzzy\\"\\n<strong>输出：</strong>[[3,6]]\\n<strong>解释</strong><strong>：</strong><code>\\"xxxx\\" 是一个起始于 3 且终止于 6 的较大分组</code>。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = \\"abc\\"\\n<strong>输出：</strong>[]\\n<strong>解释：</strong>\\"a\\",\\"b\\" 和 \\"c\\" 均不是符合要求的较大分组。\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = \\"abcdddeeeeaabbbcd\\"\\n<strong>输出：</strong>[[3,5],[6,9],[12,14]]\\n<strong>解释：</strong>较大分组为 \\"ddd\\", \\"eeee\\" 和 \\"bbb\\"</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = \\"aba\\"\\n<strong>输出：</strong>[]\\n</pre>\\n \\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= s.length <= 1000</code></li>\\n\\t<li><code>s</code> 仅含小写英文字母</li>\\n</ul>\\n","title":"830. 较大分组的位置","relatedTags":["字符串"],"difficult":"Easy","lang":["javascript"],"uniqueID":"830","slug":"830-Positions-of-Large-Groups"}')}}]);