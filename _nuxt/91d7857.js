(window.webpackJsonp=window.webpackJsonp||[]).push([[185],{667:function(n){n.exports=JSON.parse('{"content":"<p>本次解析将分为2篇文章，当前是第二篇，第一篇在<a href=\\"./07-20-%E8%A7%A3%E6%9E%90anime%E6%A0%B8%E5%BF%83(1).md\\">这里</a></p>\\n<p>另外，为了能更好的理解这个库，个人写了一个此库的压缩版，实现了核心的功能(主要也是为了更好理解核心功能)，内容更少方便阅读，\\n地址在<a href=\\"https://github.com/stonehank/simplify-anime\\">这里</a></p>\\n<hr>\\n<p>继续上一篇，先把结构图拉过来：</p>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">// anime主体</span>\\n<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">anime</span>(<span class=\\"hljs-params\\">params</span>)</span>{\\n\\n  <span class=\\"hljs-comment\\">// 定义instance 也是最终返回值</span>\\n  <span class=\\"hljs-keyword\\">let</span> instance = createNewInstance(params);\\n\\n  <span class=\\"hljs-comment\\">// 外部API 从当前位置开始执行动画</span>\\n  instance.play = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{}\\n\\n  <span class=\\"hljs-comment\\">// 配置 startTime 和 engineTime(关键)</span>\\n   instance.tick = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">t</span>) </span>{}\\n\\n  <span class=\\"hljs-comment\\">// 对当前engineTime进行判断，确定动画方案(关键)</span>\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">setInstanceProgress</span>(<span class=\\"hljs-params\\">engineTime</span>) </span>{}\\n\\n  <span class=\\"hljs-comment\\">// 计算动画当前位置 并且赋值(关键)</span>\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">setAnimationsProgress</span>(<span class=\\"hljs-params\\">insTime</span>)</span>{}\\n\\n  <span class=\\"hljs-comment\\">// 直接跳到参数time的时间所在的位置</span>\\n  instance.seek = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">time</span>) </span>{}\\n  <span class=\\"hljs-comment\\">// 外部API 暂停</span>\\n  instance.pause = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{}\\n  <span class=\\"hljs-comment\\">// 外部API 反转</span>\\n  instance.reverse = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{}\\n  <span class=\\"hljs-comment\\">// 外部API reset</span>\\n  instance.reset = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{}\\n  <span class=\\"hljs-comment\\">// 外部API 重新开始</span>\\n  instance.restart = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{}\\n  <span class=\\"hljs-comment\\">/*...*/</span>\\n  <span class=\\"hljs-keyword\\">return</span> instance\\n}</code></pre></code></pre>\\n<ul>\\n<li>setAnimationsProgress(省略了一些配置的定义)</li>\\n</ul>\\n<p>这个函数接受一个参数，就是当前位置所消耗时间(动画起始点)，然后在里面计算出每一个动画目标的位置，并且赋值</p>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">// 计算动画当前位置 并且赋值</span>\\n<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">setAnimationsProgress</span>(<span class=\\"hljs-params\\">insTime</span>) </span>{\\n  <span class=\\"hljs-comment\\">/* ... */</span>\\n  <span class=\\"hljs-comment\\">// 这个while逐个计算当前实例中的每个动画的当前位置(通过时间和算法)</span>\\n  <span class=\\"hljs-keyword\\">while</span> (i &lt; animationsLength) {\\n      <span class=\\"hljs-comment\\">/* ... */</span>\\n    <span class=\\"hljs-comment\\">// 消耗的时间占总持续时间的比例 在起点终点之间</span>\\n    <span class=\\"hljs-keyword\\">const</span> elapsed = minMaxValue(insTime - tween.start - tween.delay, <span class=\\"hljs-number\\">0</span>, tween.duration) / tween.duration;\\n    <span class=\\"hljs-comment\\">// 通过算法计算当前进度</span>\\n    <span class=\\"hljs-keyword\\">const</span> eased = <span class=\\"hljs-built_in\\">isNaN</span>(elapsed) ? <span class=\\"hljs-number\\">1</span> : tween.easing(elapsed, tween.elasticity);\\n    <span class=\\"hljs-comment\\">/* ... */</span>\\n    <span class=\\"hljs-comment\\">// 遍历每一个到达点执行</span>\\n    <span class=\\"hljs-keyword\\">for</span> (<span class=\\"hljs-keyword\\">let</span> n = <span class=\\"hljs-number\\">0</span>; n &lt; toNumbersLength; n++) {\\n      <span class=\\"hljs-keyword\\">let</span> value;\\n      <span class=\\"hljs-keyword\\">const</span> toNumber = tween.to.numbers[n];\\n      <span class=\\"hljs-keyword\\">const</span> fromNumber = tween.from.numbers[n];\\n      <span class=\\"hljs-keyword\\">if</span> (!tween.isPath) {\\n        <span class=\\"hljs-comment\\">// 计算当前具体位置</span>\\n        value = fromNumber + (eased * (toNumber - fromNumber));\\n      } <span class=\\"hljs-keyword\\">else</span> {\\n        <span class=\\"hljs-comment\\">// 进行SVG path计算</span>\\n        value = getPathProgress(tween.value, eased * toNumber);\\n      }\\n      <span class=\\"hljs-comment\\">/* ... */</span>\\n      numbers.push(value);\\n    }\\n         <span class=\\"hljs-comment\\">/* ... */</span>\\n        <span class=\\"hljs-keyword\\">if</span> (!<span class=\\"hljs-built_in\\">isNaN</span>(n)) {\\n          <span class=\\"hljs-comment\\">// 组合单位 \'135.546\'+\'px\'</span>\\n          <span class=\\"hljs-keyword\\">if</span> (!b) {\\n            progress += n + <span class=\\"hljs-string\\">\' \'</span>;\\n          } <span class=\\"hljs-keyword\\">else</span> {\\n            progress += n + b;\\n          }\\n        }\\n    <span class=\\"hljs-comment\\">/* ... */</span>\\n    <span class=\\"hljs-comment\\">// 组合结果 \'translateX(\'+\'135.546px\'+\')`</span>\\n    setTweenProgress[anim.type](animatable.target, anim.property, progress, transforms, animatable.id);\\n    anim.currentValue = progress;\\n    i++;\\n  }\\n  <span class=\\"hljs-comment\\">// 遍历结果，逐个target赋值</span>\\n  <span class=\\"hljs-keyword\\">const</span> transformsLength = <span class=\\"hljs-built_in\\">Object</span>.keys(transforms).length;\\n  <span class=\\"hljs-keyword\\">if</span> (transformsLength) {\\n    <span class=\\"hljs-keyword\\">for</span> (<span class=\\"hljs-keyword\\">let</span> id = <span class=\\"hljs-number\\">0</span>; id &lt; transformsLength; id++) {\\n      <span class=\\"hljs-keyword\\">if</span> (!transformString) {\\n        <span class=\\"hljs-keyword\\">const</span> t = <span class=\\"hljs-string\\">\'transform\'</span>;\\n        <span class=\\"hljs-comment\\">// 配置兼容性</span>\\n        transformString = (getCSSValue(<span class=\\"hljs-built_in\\">document</span>.body, t) ? t : <span class=\\"hljs-string\\">`-webkit-<span class=\\"hljs-subst\\">${t}</span>`</span>);\\n      }\\n      <span class=\\"hljs-comment\\">// 设置style</span>\\n      instance.animatables[id].target.style[transformString] = transforms[id].join(<span class=\\"hljs-string\\">\' \'</span>);\\n    }\\n  }\\n  <span class=\\"hljs-comment\\">// 记录当前位置所对应的时间</span>\\n  instance.currentTime = insTime;\\n  <span class=\\"hljs-comment\\">// 设置进度</span>\\n  instance.progress = (insTime / instance.duration) * <span class=\\"hljs-number\\">100</span>;\\n}</code></pre></code></pre>\\n<p>剩下的就是一些操作函数了：</p>\\n<ul>\\n<li><p>instance.seek </p>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">// 直接跳到参数time的时间所在的位置</span>\\ninstance.seek = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">time</span>) </span>{\\nsetInstanceProgress(adjustTime(time));\\n}</code></pre></code></pre>\\n</li>\\n<li><p>instance.pause</p>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">// 外部API 暂停</span>\\ninstance.pause = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{\\n<span class=\\"hljs-keyword\\">const</span> i = activeInstances.indexOf(instance);\\n<span class=\\"hljs-comment\\">// 删除activeInstances 后续engine中找不到便不会执行</span>\\n<span class=\\"hljs-keyword\\">if</span> (i &gt; <span class=\\"hljs-number\\">-1</span>) activeInstances.splice(i, <span class=\\"hljs-number\\">1</span>);\\ninstance.paused = <span class=\\"hljs-literal\\">true</span>;\\n}</code></pre></code></pre>\\n</li>\\n<li><p>instance.reverse</p>\\n</li>\\n</ul>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">// 外部API 反转</span>\\ninstance.reverse = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{\\n  toggleInstanceDirection();\\n  startTime = <span class=\\"hljs-number\\">0</span>;\\n  lastTime = adjustTime(instance.currentTime);\\n}</code></pre></code></pre>\\n<ul>\\n<li>instance.restart</li>\\n</ul>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">// 外部API 重新执行</span>\\ninstance.restart = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{\\n  instance.pause();\\n  instance.reset();\\n  instance.play();\\n}</code></pre></code></pre>\\n<ul>\\n<li>instance.reset<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">// 外部API reset</span>\\ninstance.reset = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{\\n<span class=\\"hljs-keyword\\">const</span> direction = instance.direction;\\n<span class=\\"hljs-keyword\\">const</span> loops = instance.loop;\\n<span class=\\"hljs-comment\\">// 当前位置,进度 归零</span>\\ninstance.currentTime = <span class=\\"hljs-number\\">0</span>;\\ninstance.progress = <span class=\\"hljs-number\\">0</span>;\\ninstance.paused = <span class=\\"hljs-literal\\">true</span>;\\ninstance.began = <span class=\\"hljs-literal\\">false</span>;\\ninstance.completed = <span class=\\"hljs-literal\\">false</span>;\\ninstance.reversed = direction === <span class=\\"hljs-string\\">\'reverse\'</span>;\\ninstance.remaining = direction === <span class=\\"hljs-string\\">\'alternate\'</span> &amp;&amp; loops === <span class=\\"hljs-number\\">1</span> ? <span class=\\"hljs-number\\">2</span> : loops;\\nsetAnimationsProgress(<span class=\\"hljs-number\\">0</span>);\\n<span class=\\"hljs-keyword\\">for</span> (<span class=\\"hljs-keyword\\">let</span> i = instance.children.length; i--; ){\\n  instance.children[i].reset();\\n}\\n}</code></pre></code></pre>\\n</li>\\n</ul>\\n<h2 id=\\"zong-jie\\">总结</h2>\\n<ol>\\n<li>使用了<code>requestAnimateFrame</code>和<code>CSS</code>动画提高流畅度。</li>\\n<li>使用了缓动函数，只需要通过<code>当前动画消耗的时间</code>，搭配其他定义的配置项，就可以计算出当前动画具体位置。</li>\\n</ol>\\n<p>此次解析就到这里结束，如有错误，敬请指出，感谢！</p>\\n","toc":[{"anchor":"zong-jie","level":2,"text":"总结"}],"relatedTags":null,"created_at":"2018-07-22","timeArr":[2018,6,22,0,0,0,0],"title":"源码阅读-解析anime核心(2)","uuid":"2a9c7da01d48a31e62efc8c651405161597524f1","summary":"<p>本次解析将分为2篇文章，当前是第二篇，第一篇在<a href=\\"./07-20-%E8%A7%A3%E6%9E%90anime%E6%A0%B8%E5%BF%83(1).md\\">这里</a></p>\\n<p>另外，为了能更好的理解这个库，个人写了一个此库的压缩版，实现了核心的功能(主要也是为了更好理解核心功能)，内容更少方便阅读，\\n地址在[这里](https://github.com/stonehank/simpli...</p>","slug":"yuan-ma-yue-du-jie-xi-anime-he-xin-(2)","sha":"a9f78f786c764a619cefc5156e3120771d547641"}')}}]);