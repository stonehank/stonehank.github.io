(window.webpackJsonp=window.webpackJsonp||[]).push([[754],{1552:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">nums</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">n</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> minPatches = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">nums, n</span>) </span>{\\n  <span class=\\"hljs-comment\\">// 学习点：只要sum(0...i) &gt;= nums[next]，说明在sum之内都存在组合。</span>\\n  <span class=\\"hljs-keyword\\">let</span> preSum=<span class=\\"hljs-number\\">0</span>,next=<span class=\\"hljs-number\\">1</span>\\n  <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-number\\">0</span>,i=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">while</span>(preSum&lt;n){\\n    <span class=\\"hljs-keyword\\">if</span>(i&lt;nums.length &amp;&amp; nums[i]&lt;=next){\\n      preSum+=nums[i++]\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      res++\\n      preSum+=next\\n    }\\n    next=preSum+<span class=\\"hljs-number\\">1</span>\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"patching-array","created_at":"2019-04-13","timeArr":[2019,3,13,13,37,34,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<blockquote>\\n<p>学习点：如果<code>sum(0...i) &gt;= nums[i+1]</code>，说明在<code>sum</code>之内都存在组合，执行<code>sum+=nums[i+1]</code>，否则需要补充<code>sum(0...i)+1</code></p>\\n</blockquote>\\n<p>例如：<code>1,3,7,10</code></p>\\n<p>当<code>i</code>为1，<code>sum(0..i)</code>为4，<code>nums[i+1]</code>为7，因为<code>4&lt;7</code>，因此需要补充<code>5</code>。</p>\\n<p>补充完5后，当<code>i</code>为2，<code>sum(0..i)</code>为<code>1+3+5+7=</code>16，<code>nums[i+1]</code>为10，因为<code>16&gt;=10</code>，因此不需要补充，<code>sum+=nums[i+1]</code></p>\\n<p>最终，只需要补充5，这段数组<code>[1,3,5,7,10]</code>就可以表示26以内的所有数字。</p>\\n","content":"<p>给定一个已排序的正整数数组 <em>nums，</em>和一个正整数&nbsp;<em>n 。</em>从&nbsp;<code>[1, n]</code>&nbsp;区间内选取任意个数字补充到&nbsp;<em>nums&nbsp;</em>中，使得&nbsp;<code>[1, n]</code>&nbsp;区间内的任何数字都可以用&nbsp;<em>nums&nbsp;</em>中某几个数字的和来表示。请输出满足上述要求的最少需要补充的数字个数。</p>\\n\\n<p><strong>示例&nbsp;1:</strong></p>\\n\\n<pre><strong>输入: </strong><em>nums</em> = <code>[1,3]</code>, <em>n</em> = <code>6</code>\\n<strong>输出: </strong>1 \\n<strong>解释:</strong>\\n根据<em> nums&nbsp;</em>里现有的组合&nbsp;<code>[1], [3], [1,3]</code>，可以得出&nbsp;<code>1, 3, 4</code>。\\n现在如果我们将&nbsp;<code>2</code>&nbsp;添加到&nbsp;<em>nums 中，</em>&nbsp;组合变为: <code>[1], [2], [3], [1,3], [2,3], [1,2,3]</code>。\\n其和可以表示数字&nbsp;<code>1, 2, 3, 4, 5, 6</code>，能够覆盖&nbsp;<code>[1, 6]</code>&nbsp;区间里所有的数。\\n所以我们最少需要添加一个数字。</pre>\\n\\n<p><strong>示例 2:</strong></p>\\n\\n<pre><strong>输入: </strong><em>nums</em> = <code>[1,5,10]</code>, <em>n</em> = <code>20</code>\\n<strong>输出:</strong> 2\\n<strong>解释: </strong>我们需要添加&nbsp;<code>[2, 4]</code>。\\n</pre>\\n\\n<p><strong>示例&nbsp;3:</strong></p>\\n\\n<pre><strong>输入: </strong><em>nums</em> = <code>[1,2,2]</code>, <em>n</em> = <code>5</code>\\n<strong>输出:</strong> 0\\n</pre>\\n","title":"330. 按要求补齐数组","relatedTags":["贪心","数组"],"difficult":"Hard","lang":["javascript"],"uniqueID":"330","slug":"330-Patching-Array"}')}}]);