(window.webpackJsonp=window.webpackJsonp||[]).push([[405],{1203:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string[]}</span> <span class=\\"hljs-variable\\">words</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">result</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{boolean}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> isSolvable = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">words, result</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> maxInLeft=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">let</span> maxInRight=result.length\\n\\n  <span class=\\"hljs-keyword\\">let</span> wordsFirst={}\\n  <span class=\\"hljs-keyword\\">let</span> letter2Idx={}\\n  <span class=\\"hljs-keyword\\">let</span> allWords=<span class=\\"hljs-string\\">\'\'</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;words.length;i++){\\n    wordsFirst[allWords.length]=<span class=\\"hljs-literal\\">true</span>\\n    allWords+=words[i]\\n    <span class=\\"hljs-keyword\\">if</span>(words[i].length&gt;maxInLeft){\\n      maxInLeft=words[i].length\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> startResultIdx=allWords.length\\n  <span class=\\"hljs-keyword\\">if</span>(maxInLeft&gt;maxInRight)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n  \\n  wordsFirst[allWords.length]=<span class=\\"hljs-literal\\">true</span>\\n  allWords+=result\\n\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;allWords.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> letter=allWords[i]\\n    <span class=\\"hljs-keyword\\">if</span>(letter2Idx[letter]==<span class=\\"hljs-literal\\">null</span>){\\n      letter2Idx[letter]=[i]\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      letter2Idx[letter].push(i)\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> find=<span class=\\"hljs-literal\\">null</span>\\n  <span class=\\"hljs-keyword\\">let</span> usedNum=<span class=\\"hljs-built_in\\">Array</span>(<span class=\\"hljs-number\\">10</span>).fill(<span class=\\"hljs-literal\\">false</span>)\\n  <span class=\\"hljs-keyword\\">let</span> hash={}\\n  <span class=\\"hljs-comment\\">// console.log(allWords,letter2Idx,wordsFirst)</span>\\n  backtrack(<span class=\\"hljs-number\\">0</span>,allWords)\\n  <span class=\\"hljs-keyword\\">return</span> !!find\\n  \\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">backtrack</span>(<span class=\\"hljs-params\\">idx,curNumStr</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(find)<span class=\\"hljs-keyword\\">return</span>\\n    <span class=\\"hljs-keyword\\">if</span>(idx&gt;=startResultIdx){\\n      <span class=\\"hljs-keyword\\">let</span> leftSum=calcLeftSum(curNumStr)\\n      <span class=\\"hljs-keyword\\">if</span>(validate(leftSum,curNumStr,usedNum)){\\n        <span class=\\"hljs-keyword\\">return</span> find=<span class=\\"hljs-literal\\">true</span>\\n      }\\n      <span class=\\"hljs-keyword\\">return</span>\\n    }\\n    <span class=\\"hljs-comment\\">// console.log(idx,curNumStr)</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;<span class=\\"hljs-number\\">10</span>;i++){\\n      <span class=\\"hljs-keyword\\">if</span>(find)<span class=\\"hljs-keyword\\">return</span>\\n      <span class=\\"hljs-comment\\">// console.log(usedNum[i])</span>\\n      <span class=\\"hljs-keyword\\">if</span>(usedNum[i])<span class=\\"hljs-keyword\\">continue</span>\\n      <span class=\\"hljs-keyword\\">if</span>(i===<span class=\\"hljs-number\\">0</span> &amp;&amp; wordsFirst[idx])<span class=\\"hljs-keyword\\">continue</span>\\n      <span class=\\"hljs-keyword\\">let</span> letter=allWords[idx]\\n      <span class=\\"hljs-keyword\\">let</span> pos=letter2Idx[letter]\\n      <span class=\\"hljs-keyword\\">let</span> newStr=curNumStr\\n      <span class=\\"hljs-comment\\">// console.log(newStr,pos,letter)</span>\\n      <span class=\\"hljs-keyword\\">let</span> old=newStr[pos[<span class=\\"hljs-number\\">0</span>]]\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;pos.length;j++){\\n        newStr=newStr.slice(<span class=\\"hljs-number\\">0</span>,pos[j])+i+newStr.slice(pos[j]+<span class=\\"hljs-number\\">1</span>)\\n      }\\n      usedNum[i]=<span class=\\"hljs-literal\\">true</span>\\n      <span class=\\"hljs-keyword\\">let</span> nxt=idx+<span class=\\"hljs-number\\">1</span>\\n      <span class=\\"hljs-keyword\\">while</span>(nxt&lt;newStr.length &amp;&amp; <span class=\\"hljs-regexp\\">/\\\\d/</span>.test(newStr[nxt])){\\n        nxt+=<span class=\\"hljs-number\\">1</span>\\n      }\\n      backtrack(nxt,newStr)\\n      \\n      usedNum[i]=<span class=\\"hljs-literal\\">false</span>\\n    }\\n  }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">calcLeftSum</span>(<span class=\\"hljs-params\\">str</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> leftSum=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">let</span> start=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;words.length;i++){\\n      <span class=\\"hljs-keyword\\">let</span> len=words[i].length\\n      leftSum += +str.slice(start,start+len)\\n      start+=len\\n    }    \\n    <span class=\\"hljs-keyword\\">return</span> leftSum\\n  }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">validate</span>(<span class=\\"hljs-params\\">sum,str,usedNum</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> sumStr=sum+<span class=\\"hljs-string\\">\'\'</span>\\n    <span class=\\"hljs-keyword\\">let</span> rightStr=str.slice(startResultIdx)\\n    <span class=\\"hljs-keyword\\">if</span>(sumStr.length!==rightStr.length)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;rightStr.length;i++){\\n      <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-regexp\\">/\\\\d/</span>.test(rightStr[i]) &amp;&amp; rightStr[i]!==sumStr[i])<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n      <span class=\\"hljs-keyword\\">if</span>(!<span class=\\"hljs-regexp\\">/\\\\d/</span>.test(rightStr[i])){\\n        <span class=\\"hljs-keyword\\">if</span>(usedNum[sumStr[i]])<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n      }\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"verbal-arithmetic-puzzle","created_at":"2019-12-29","timeArr":[2019,11,29,11,48,0,0],"hasThinking":false,"content":"<p>给你一个方程，左边用&nbsp;<code>words</code>&nbsp;表示，右边用&nbsp;<code>result</code> 表示。</p>\\n\\n<p>你需要根据以下规则检查方程是否可解：</p>\\n\\n<ul>\\n\\t<li>每个字符都会被解码成一位数字（0 - 9）。</li>\\n\\t<li>每对不同的字符必须映射到不同的数字。</li>\\n\\t<li>每个 <code>words[i]</code> 和 <code>result</code>&nbsp;都会被解码成一个没有前导零的数字。</li>\\n\\t<li>左侧数字之和（<code>words</code>）等于右侧数字（<code>result</code>）。&nbsp;</li>\\n</ul>\\n\\n<p>如果方程可解，返回&nbsp;<code>True</code>，否则返回&nbsp;<code>False</code>。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>words = [&quot;SEND&quot;,&quot;MORE&quot;], result = &quot;MONEY&quot;\\n<strong>输出：</strong>true\\n<strong>解释：</strong>映射 &#39;S&#39;-&gt; 9, &#39;E&#39;-&gt;5, &#39;N&#39;-&gt;6, &#39;D&#39;-&gt;7, &#39;M&#39;-&gt;1, &#39;O&#39;-&gt;0, &#39;R&#39;-&gt;8, &#39;Y&#39;-&gt;&#39;2&#39;\\n所以 &quot;SEND&quot; + &quot;MORE&quot; = &quot;MONEY&quot; ,  9567 + 1085 = 10652</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>words = [&quot;SIX&quot;,&quot;SEVEN&quot;,&quot;SEVEN&quot;], result = &quot;TWENTY&quot;\\n<strong>输出：</strong>true\\n<strong>解释：</strong>映射 &#39;S&#39;-&gt; 6, &#39;I&#39;-&gt;5, &#39;X&#39;-&gt;0, &#39;E&#39;-&gt;8, &#39;V&#39;-&gt;7, &#39;N&#39;-&gt;2, &#39;T&#39;-&gt;1, &#39;W&#39;-&gt;&#39;3&#39;, &#39;Y&#39;-&gt;4\\n所以 &quot;SIX&quot; + &quot;SEVEN&quot; + &quot;SEVEN&quot; = &quot;TWENTY&quot; ,  650 + 68782 + 68782 = 138214</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>words = [&quot;THIS&quot;,&quot;IS&quot;,&quot;TOO&quot;], result = &quot;FUNNY&quot;\\n<strong>输出：</strong>true\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre><strong>输入：</strong>words = [&quot;LEET&quot;,&quot;CODE&quot;], result = &quot;POINT&quot;\\n<strong>输出：</strong>false\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>2 &lt;= words.length &lt;= 5</code></li>\\n\\t<li><code>1 &lt;= words[i].length,&nbsp;results.length&nbsp;&lt;= 7</code></li>\\n\\t<li><code>words[i], result</code>&nbsp;只含有大写英文字母</li>\\n\\t<li>表达式中使用的不同字符数最大为&nbsp;10</li>\\n</ul>\\n","title":"1307. 口算难题","relatedTags":["数组","数学","字符串","回溯"],"difficult":"Hard","lang":["javascript"],"uniqueID":"1307","slug":"1307-Verbal-Arithmetic-Puzzle"}')}}]);