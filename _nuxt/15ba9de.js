(window.webpackJsonp=window.webpackJsonp||[]).push([[534],{1332:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">n</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">edges</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">succProb</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">start</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">end</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> maxProbability = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">n, edges, succProb, start, end</span>) </span>{\\n    <span class=\\"hljs-keyword\\">let</span> g=<span class=\\"hljs-built_in\\">Array</span>(n).fill().map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span>=&gt;</span>[])\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;edges.length;i++){\\n        <span class=\\"hljs-keyword\\">let</span> [f,t]=edges[i]\\n        g[f].push([t,succProb[i]])\\n        g[t].push([f,succProb[i]])\\n    }\\n    <span class=\\"hljs-keyword\\">let</span> visited=[]\\n    <span class=\\"hljs-keyword\\">let</span> succSave=[]\\n    <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">let</span> arr=[[start,<span class=\\"hljs-number\\">1</span>]]\\n    <span class=\\"hljs-keyword\\">while</span>(arr.length&gt;<span class=\\"hljs-number\\">0</span>){\\n        <span class=\\"hljs-keyword\\">let</span> len=arr.length\\n        <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;len;i++){\\n            <span class=\\"hljs-keyword\\">let</span> [curNode,curSucc]=arr.shift()\\n            <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;g[curNode].length;j++){\\n                <span class=\\"hljs-keyword\\">let</span> [nxtNode,succ]=g[curNode][j]\\n                <span class=\\"hljs-keyword\\">let</span> nxtSucc=succ*curSucc\\n                <span class=\\"hljs-keyword\\">if</span>(nxtNode===end){\\n                    res=<span class=\\"hljs-built_in\\">Math</span>.max(res,nxtSucc)\\n                }\\n                <span class=\\"hljs-keyword\\">if</span>(visited[nxtNode]){\\n                    <span class=\\"hljs-keyword\\">if</span>(succSave[nxtNode]&lt;nxtSucc){\\n                        succSave[nxtNode]=nxtSucc\\n                        arr.push([nxtNode,nxtSucc])\\n                    }\\n                }<span class=\\"hljs-keyword\\">else</span>{\\n                    visited[nxtNode]=<span class=\\"hljs-literal\\">true</span>\\n                    succSave[nxtNode]=nxtSucc\\n                    arr.push([nxtNode,nxtSucc])\\n                }\\n            }\\n        }\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"path-with-maximum-probability","created_at":"2020-07-18","timeArr":[2020,6,18,20,40,15,0],"hasThinking":false,"content":"<p>给你一个由 <code>n</code> 个节点（下标从 0 开始）组成的无向加权图，该图由一个描述边的列表组成，其中 <code>edges[i] = [a, b]</code> 表示连接节点 a 和 b 的一条无向边，且该边遍历成功的概率为 <code>succProb[i]</code> 。</p>\\n\\n<p>指定两个节点分别作为起点 <code>start</code> 和终点 <code>end</code> ，请你找出从起点到终点成功概率最大的路径，并返回其成功概率。</p>\\n\\n<p>如果不存在从 <code>start</code> 到 <code>end</code> 的路径，请 <strong>返回 0</strong> 。只要答案与标准答案的误差不超过 <strong>1e-5 </strong>，就会被视作正确答案。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<p><strong><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/07/12/1558_ex1.png\\" style=\\"height: 186px; width: 187px;\\"></strong></p>\\n\\n<pre><strong>输入：</strong>n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.2], start = 0, end = 2\\n<strong>输出：</strong>0.25000\\n<strong>解释：</strong>从起点到终点有两条路径，其中一条的成功概率为 0.2 ，而另一条为 0.5 * 0.5 = 0.25\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<p><strong><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/07/12/1558_ex2.png\\" style=\\"height: 186px; width: 189px;\\"></strong></p>\\n\\n<pre><strong>输入：</strong>n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.3], start = 0, end = 2\\n<strong>输出：</strong>0.30000\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<p><strong><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/07/12/1558_ex3.png\\" style=\\"height: 191px; width: 215px;\\"></strong></p>\\n\\n<pre><strong>输入：</strong>n = 3, edges = [[0,1]], succProb = [0.5], start = 0, end = 2\\n<strong>输出：</strong>0.00000\\n<strong>解释：</strong>节点 0 和 节点 2 之间不存在路径\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>2 &lt;= n &lt;= 10^4</code></li>\\n\\t<li><code>0 &lt;= start, end &lt; n</code></li>\\n\\t<li><code>start != end</code></li>\\n\\t<li><code>0 &lt;= a, b &lt; n</code></li>\\n\\t<li><code>a != b</code></li>\\n\\t<li><code>0 &lt;= succProb.length == edges.length &lt;= 2*10^4</code></li>\\n\\t<li><code>0 &lt;= succProb[i] &lt;= 1</code></li>\\n\\t<li>每两个节点之间最多有一条边</li>\\n</ul>\\n","title":"1514. 概率最大的路径","relatedTags":["图","最短路","堆（优先队列）"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1514","slug":"1514-Path-with-Maximum-Probability"}')}}]);