(window.webpackJsonp=window.webpackJsonp||[]).push([[548],{1346:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">nums</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> findMin = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">nums</span>) </span>{\\n    <span class=\\"hljs-keyword\\">let</span> l=<span class=\\"hljs-number\\">0</span>, h=nums.length<span class=\\"hljs-number\\">-1</span>\\n    <span class=\\"hljs-keyword\\">while</span>(l&lt;=h){\\n        <span class=\\"hljs-comment\\">// console.log(l,h)</span>\\n        <span class=\\"hljs-keyword\\">let</span> m=~~((l+h)/<span class=\\"hljs-number\\">2</span>)\\n        <span class=\\"hljs-keyword\\">let</span> mV=nums[m]\\n        <span class=\\"hljs-keyword\\">if</span>(mV&gt;nums[h]){\\n            l=m+<span class=\\"hljs-number\\">1</span>\\n        }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(mV&lt;nums[l]){\\n            h=m\\n        }<span class=\\"hljs-keyword\\">else</span>{\\n            h--\\n        }\\n    }\\n    <span class=\\"hljs-comment\\">// console.log(l)</span>\\n    <span class=\\"hljs-keyword\\">return</span> nums[l]\\n};\\n</code></pre>\\n","<pre class=\\"hljs\\"><code><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Solution</span><span class=\\"hljs-params\\">(object)</span>:</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">findMin</span><span class=\\"hljs-params\\">(self, nums)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type nums: List[int]\\n        :rtype: int\\n        \\"\\"\\"</span>\\n        lo,hi=<span class=\\"hljs-number\\">0</span>,len(nums)<span class=\\"hljs-number\\">-1</span>\\n        <span class=\\"hljs-keyword\\">while</span> lo&lt;hi:\\n            mid=(lo+hi) // <span class=\\"hljs-number\\">2</span>\\n            <span class=\\"hljs-keyword\\">if</span> nums[hi]&lt;nums[mid]:\\n                lo=mid+<span class=\\"hljs-number\\">1</span>\\n            <span class=\\"hljs-keyword\\">elif</span> nums[mid]&lt;nums[lo]:\\n                hi=mid\\n            <span class=\\"hljs-keyword\\">else</span>:\\n                hi-=<span class=\\"hljs-number\\">1</span>\\n        <span class=\\"hljs-keyword\\">return</span> nums[lo]\\n</code></pre>\\n"],"querySlug":"find-minimum-in-rotated-sorted-array-ii","hasThinking":false,"content":"已知一个长度为 <code>n</code> 的数组，预先按照升序排列，经由 <code>1</code> 到 <code>n</code> 次 <strong>旋转</strong> 后，得到输入数组。例如，原数组 <code>nums = [0,1,4,4,5,6,7]</code> 在变化后可能得到：\\n<ul>\\n\\t<li>若旋转 <code>4</code> 次，则可以得到 <code>[4,5,6,7,0,1,4]</code></li>\\n\\t<li>若旋转 <code>7</code> 次，则可以得到 <code>[0,1,4,4,5,6,7]</code></li>\\n</ul>\\n\\n<p>注意，数组 <code>[a[0], a[1], a[2], ..., a[n-1]]</code> <strong>旋转一次</strong> 的结果为数组 <code>[a[n-1], a[0], a[1], a[2], ..., a[n-2]]</code> 。</p>\\n\\n<p>给你一个可能存在 <strong>重复</strong> 元素值的数组 <code>nums</code> ，它原来是一个升序排列的数组，并按上述情形进行了多次旋转。请你找出并返回数组中的 <strong>最小元素</strong> 。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [1,3,5]\\n<strong>输出：</strong>1\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [2,2,2,0,1]\\n<strong>输出：</strong>0\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>n == nums.length</code></li>\\n\\t<li><code>1 <= n <= 5000</code></li>\\n\\t<li><code>-5000 <= nums[i] <= 5000</code></li>\\n\\t<li><code>nums</code> 原来是一个升序排序的数组，并进行了 <code>1</code> 至 <code>n</code> 次旋转</li>\\n</ul>\\n\\n<p> </p>\\n\\n<p><strong>进阶：</strong></p>\\n\\n<ul>\\n\\t<li>这道题是 <a href=\\"https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/description/\\">寻找旋转排序数组中的最小值</a> 的延伸题目。</li>\\n\\t<li>允许重复会影响算法的时间复杂度吗？会如何影响，为什么？</li>\\n</ul>\\n","title":"154. 寻找旋转排序数组中的最小值 II","relatedTags":["数组","二分查找"],"difficult":"Hard","lang":["javascript","python"],"uniqueID":"154","slug":"154-Find-Minimum-in-Rotated-Sorted-Array-II"}')}}]);