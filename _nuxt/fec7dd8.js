(window.webpackJsonp=window.webpackJsonp||[]).push([[1338],{2136:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string[]}</span> <span class=\\"hljs-variable\\">wordlist</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string[]}</span> <span class=\\"hljs-variable\\">queries</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{string[]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> spellchecker = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">wordlist, queries</span>) </span>{\\n    <span class=\\"hljs-keyword\\">let</span> result=[]\\n    <span class=\\"hljs-keyword\\">let</span> wLow=[]\\n    <span class=\\"hljs-keyword\\">let</span> a=[<span class=\\"hljs-string\\">\'a\'</span>,<span class=\\"hljs-string\\">\'e\'</span>,<span class=\\"hljs-string\\">\'i\'</span>,<span class=\\"hljs-string\\">\'o\'</span>,<span class=\\"hljs-string\\">\'u\'</span>]\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;wordlist.length;i++){\\n        wLow[i]=wordlist[i].toLowerCase()\\n    }\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;queries.length;i++){\\n        <span class=\\"hljs-keyword\\">let</span> cur=queries[i]\\n        <span class=\\"hljs-keyword\\">if</span>(wordlist.includes(cur)){\\n            result.push(cur)\\n            <span class=\\"hljs-keyword\\">continue</span>\\n        }\\n        <span class=\\"hljs-keyword\\">let</span> curLow=cur.toLowerCase()\\n        <span class=\\"hljs-keyword\\">let</span> idx=wLow.indexOf(curLow)\\n        <span class=\\"hljs-comment\\">// console.log(idx,curLow,wLow)</span>\\n        <span class=\\"hljs-keyword\\">if</span>(idx!==<span class=\\"hljs-number\\">-1</span>){\\n            result.push(wordlist[idx])\\n            <span class=\\"hljs-keyword\\">continue</span>\\n        }\\n\\n        <span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>, flag=<span class=\\"hljs-literal\\">true</span>\\n        <span class=\\"hljs-keyword\\">for</span>(;j&lt;wLow.length;j++){\\n            flag=<span class=\\"hljs-literal\\">true</span>\\n            <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> k=<span class=\\"hljs-number\\">0</span>;k&lt;wLow[j].length;k++){\\n                <span class=\\"hljs-keyword\\">let</span> inL=wLow[j][k],inC=curLow[k]\\n                <span class=\\"hljs-keyword\\">if</span>(inL!==inC &amp;&amp; (!a.includes(inC) || !a.includes(inL))){\\n                    flag=<span class=\\"hljs-literal\\">false</span>\\n                    <span class=\\"hljs-keyword\\">break</span>\\n                }\\n            }\\n            <span class=\\"hljs-keyword\\">if</span>(flag)<span class=\\"hljs-keyword\\">break</span>\\n        }\\n        <span class=\\"hljs-keyword\\">if</span>(!flag){\\n            result.push(<span class=\\"hljs-string\\">\'\'</span>)\\n            <span class=\\"hljs-keyword\\">continue</span>\\n        }<span class=\\"hljs-keyword\\">else</span> {\\n \\n            result.push(wordlist[j])\\n        }\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> result\\n};\\n</code></pre>\\n"],"querySlug":"vowel-spellchecker","created_at":"2018-12-30","timeArr":[2018,11,30,11,10,32,0],"hasThinking":false,"content":"<p>在给定单词列表&nbsp;<code>wordlist</code>&nbsp;的情况下，我们希望实现一个拼写检查器，将查询单词转换为正确的单词。</p>\\n\\n<p>对于给定的查询单词&nbsp;<code>query</code>，拼写检查器将会处理两类拼写错误：</p>\\n\\n<ul>\\n\\t<li>大小写：如果查询匹配单词列表中的某个单词（<strong>不区分大小写</strong>），则返回的正确单词与单词列表中的大小写相同。\\n\\n\\t<ul>\\n\\t\\t<li>例如：<code>wordlist = [&quot;yellow&quot;]</code>, <code>query = &quot;YellOw&quot;</code>: <code>correct = &quot;yellow&quot;</code></li>\\n\\t\\t<li>例如：<code>wordlist = [&quot;Yellow&quot;]</code>, <code>query = &quot;yellow&quot;</code>: <code>correct = &quot;Yellow&quot;</code></li>\\n\\t\\t<li>例如：<code>wordlist = [&quot;yellow&quot;]</code>, <code>query = &quot;yellow&quot;</code>: <code>correct = &quot;yellow&quot;</code></li>\\n\\t</ul>\\n\\t</li>\\n\\t<li>元音错误：如果在将查询单词中的元音（&lsquo;a&rsquo;、&lsquo;e&rsquo;、&lsquo;i&rsquo;、&lsquo;o&rsquo;、&lsquo;u&rsquo;）分别替换为任何元音后，能与单词列表中的单词匹配（<strong>不区分大小写</strong>），则返回的正确单词与单词列表中的匹配项大小写相同。\\n\\t<ul>\\n\\t\\t<li>例如：<code>wordlist = [&quot;YellOw&quot;]</code>, <code>query = &quot;yollow&quot;</code>: <code>correct = &quot;YellOw&quot;</code></li>\\n\\t\\t<li>例如：<code>wordlist = [&quot;YellOw&quot;]</code>, <code>query = &quot;yeellow&quot;</code>: <code>correct = &quot;&quot;</code> （无匹配项）</li>\\n\\t\\t<li>例如：<code>wordlist = [&quot;YellOw&quot;]</code>, <code>query = &quot;yllw&quot;</code>: <code>correct = &quot;&quot;</code> （无匹配项）</li>\\n\\t</ul>\\n\\t</li>\\n</ul>\\n\\n<p>此外，拼写检查器还按照以下优先级规则操作：</p>\\n\\n<ul>\\n\\t<li>当查询完全匹配单词列表中的某个单词（<strong>区分大小写</strong>）时，应返回相同的单词。</li>\\n\\t<li>当查询匹配到大小写问题的单词时，您应该返回单词列表中的第一个这样的匹配项。</li>\\n\\t<li>当查询匹配到元音错误的单词时，您应该返回单词列表中的第一个这样的匹配项。</li>\\n\\t<li>如果该查询在单词列表中没有匹配项，则应返回空字符串。</li>\\n</ul>\\n\\n<p>给出一些查询 <code>queries</code>，返回一个单词列表 <code>answer</code>，其中 <code>answer[i]</code> 是由查询 <code>query = queries[i]</code> 得到的正确单词。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例：</strong></p>\\n\\n<pre><strong>输入：</strong>wordlist = [&quot;KiTe&quot;,&quot;kite&quot;,&quot;hare&quot;,&quot;Hare&quot;], queries = [&quot;kite&quot;,&quot;Kite&quot;,&quot;KiTe&quot;,&quot;Hare&quot;,&quot;HARE&quot;,&quot;Hear&quot;,&quot;hear&quot;,&quot;keti&quot;,&quot;keet&quot;,&quot;keto&quot;]\\n<strong>输出：</strong>[&quot;kite&quot;,&quot;KiTe&quot;,&quot;KiTe&quot;,&quot;Hare&quot;,&quot;hare&quot;,&quot;&quot;,&quot;&quot;,&quot;KiTe&quot;,&quot;&quot;,&quot;KiTe&quot;]</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ol>\\n\\t<li><code>1 &lt;= wordlist.length &lt;= 5000</code></li>\\n\\t<li><code>1 &lt;= queries.length &lt;= 5000</code></li>\\n\\t<li><code>1 &lt;= wordlist[i].length &lt;= 7</code></li>\\n\\t<li><code>1 &lt;= queries[i].length &lt;= 7</code></li>\\n\\t<li><code>wordlist</code> 和&nbsp;<code>queries</code>&nbsp;中的所有字符串仅由<strong>英文</strong>字母组成。</li>\\n</ol>\\n","title":"966. 元音拼写检查器","relatedTags":["数组","哈希表","字符串"],"difficult":"Middle","lang":["javascript"],"uniqueID":"966","slug":"966-Vowel-Spellchecker"}')}}]);