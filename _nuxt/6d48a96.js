(window.webpackJsonp=window.webpackJsonp||[]).push([[603],{1401:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-keyword\\">var</span> FrontMiddleBackQueue = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{\\n    <span class=\\"hljs-keyword\\">this</span>.arr=[]\\n    <span class=\\"hljs-keyword\\">this</span>.middle=<span class=\\"hljs-number\\">0</span>\\n};\\n\\n<span class=\\"hljs-comment\\">/** \\n * @param {number} val\\n * @return {void}\\n */</span>\\nFrontMiddleBackQueue.prototype.pushFront = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">val</span>) </span>{\\n    <span class=\\"hljs-keyword\\">this</span>.arr.unshift(val)\\n    <span class=\\"hljs-keyword\\">this</span>.middle=~~(<span class=\\"hljs-keyword\\">this</span>.arr.length/<span class=\\"hljs-number\\">2</span>)\\n};\\n\\n<span class=\\"hljs-comment\\">/** \\n * @param {number} val\\n * @return {void}\\n */</span>\\nFrontMiddleBackQueue.prototype.pushMiddle = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">val</span>) </span>{\\n    <span class=\\"hljs-keyword\\">this</span>.arr.splice(<span class=\\"hljs-keyword\\">this</span>.middle,<span class=\\"hljs-number\\">0</span>,val)\\n    <span class=\\"hljs-keyword\\">this</span>.middle=~~(<span class=\\"hljs-keyword\\">this</span>.arr.length/<span class=\\"hljs-number\\">2</span>)\\n};\\n\\n<span class=\\"hljs-comment\\">/** \\n * @param {number} val\\n * @return {void}\\n */</span>\\nFrontMiddleBackQueue.prototype.pushBack = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">val</span>) </span>{\\n    <span class=\\"hljs-keyword\\">this</span>.arr.push(val)\\n    <span class=\\"hljs-keyword\\">this</span>.middle=~~(<span class=\\"hljs-keyword\\">this</span>.arr.length/<span class=\\"hljs-number\\">2</span>)\\n};\\n\\n<span class=\\"hljs-comment\\">/**\\n * @return {number}\\n */</span>\\nFrontMiddleBackQueue.prototype.popFront = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{\\n    <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-keyword\\">this</span>.arr.length===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">-1</span>\\n    <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-keyword\\">this</span>.arr.shift()\\n    <span class=\\"hljs-keyword\\">this</span>.middle=~~(<span class=\\"hljs-keyword\\">this</span>.arr.length/<span class=\\"hljs-number\\">2</span>)\\n    <span class=\\"hljs-keyword\\">return</span> res\\n};\\n\\n<span class=\\"hljs-comment\\">/**\\n * @return {number}\\n */</span>\\nFrontMiddleBackQueue.prototype.popMiddle = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{\\n    <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-keyword\\">this</span>.arr.length===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">-1</span>\\n    <span class=\\"hljs-keyword\\">let</span> mid=<span class=\\"hljs-keyword\\">this</span>.middle\\n    <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-keyword\\">this</span>.arr.length % <span class=\\"hljs-number\\">2</span>===<span class=\\"hljs-number\\">0</span>){\\n        mid--\\n    }\\n    <span class=\\"hljs-keyword\\">let</span> res= <span class=\\"hljs-keyword\\">this</span>.arr.splice(mid,<span class=\\"hljs-number\\">1</span>)\\n    <span class=\\"hljs-keyword\\">this</span>.middle=~~(<span class=\\"hljs-keyword\\">this</span>.arr.length/<span class=\\"hljs-number\\">2</span>)\\n    <span class=\\"hljs-keyword\\">return</span> res\\n};\\n\\n<span class=\\"hljs-comment\\">/**\\n * @return {number}\\n */</span>\\nFrontMiddleBackQueue.prototype.popBack = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{\\n    <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-keyword\\">this</span>.arr.length===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">-1</span>\\n    <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-keyword\\">this</span>.arr.pop()\\n    <span class=\\"hljs-keyword\\">this</span>.middle=~~(<span class=\\"hljs-keyword\\">this</span>.arr.length/<span class=\\"hljs-number\\">2</span>)\\n    <span class=\\"hljs-keyword\\">return</span> res\\n};\\n\\n<span class=\\"hljs-comment\\">/**\\n * Your FrontMiddleBackQueue object will be instantiated and called as such:\\n * var obj = new FrontMiddleBackQueue()\\n * obj.pushFront(val)\\n * obj.pushMiddle(val)\\n * obj.pushBack(val)\\n * var param_4 = obj.popFront()\\n * var param_5 = obj.popMiddle()\\n * var param_6 = obj.popBack()\\n */</span>\\n</code></pre>\\n"],"querySlug":"design-front-middle-back-queue","created_at":"2020-12-06","timeArr":[2020,11,6,10,50,3,0],"hasThinking":false,"content":"<p>请你设计一个队列，支持在前，中，后三个位置的 <code>push</code> 和 <code>pop</code> 操作。</p>\\n\\n<p>请你完成 <code>FrontMiddleBack</code> 类：</p>\\n\\n<ul>\\n\\t<li><code>FrontMiddleBack()</code> 初始化队列。</li>\\n\\t<li><code>void pushFront(int val)</code> 将 <code>val</code> 添加到队列的 <strong>最前面</strong> 。</li>\\n\\t<li><code>void pushMiddle(int val)</code> 将 <code>val</code> 添加到队列的 <strong>正中间</strong> 。</li>\\n\\t<li><code>void pushBack(int val)</code> 将 <code>val</code> 添加到队里的 <strong>最后面</strong> 。</li>\\n\\t<li><code>int popFront()</code> 将 <strong>最前面</strong> 的元素从队列中删除并返回值，如果删除之前队列为空，那么返回 <code>-1</code> 。</li>\\n\\t<li><code>int popMiddle()</code> 将 <b>正中间</b> 的元素从队列中删除并返回值，如果删除之前队列为空，那么返回 <code>-1</code> 。</li>\\n\\t<li><code>int popBack()</code> 将 <strong>最后面</strong> 的元素从队列中删除并返回值，如果删除之前队列为空，那么返回 <code>-1</code> 。</li>\\n</ul>\\n\\n<p>请注意当有 <strong>两个</strong> 中间位置的时候，选择靠前面的位置进行操作。比方说：</p>\\n\\n<ul>\\n\\t<li>将 <code>6</code> 添加到 <code>[1, 2, 3, 4, 5]</code> 的中间位置，结果数组为 <code>[1, 2, <strong>6</strong>, 3, 4, 5]</code> 。</li>\\n\\t<li>从 <code>[1, 2, <strong>3</strong>, 4, 5, 6]</code> 的中间位置弹出元素，返回 <code>3</code> ，数组变为 <code>[1, 2, 4, 5, 6]</code> 。</li>\\n</ul>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>\\n[\\"FrontMiddleBackQueue\\", \\"pushFront\\", \\"pushBack\\", \\"pushMiddle\\", \\"pushMiddle\\", \\"popFront\\", \\"popMiddle\\", \\"popMiddle\\", \\"popBack\\", \\"popFront\\"]\\n[[], [1], [2], [3], [4], [], [], [], [], []]\\n<strong>输出：</strong>\\n[null, null, null, null, null, 1, 3, 4, 2, -1]\\n\\n<strong>解释：</strong>\\nFrontMiddleBackQueue q = new FrontMiddleBackQueue();\\nq.pushFront(1);   // [<strong>1</strong>]\\nq.pushBack(2);    // [1, <strong>2</strong>]\\nq.pushMiddle(3);  // [1, <strong>3</strong>, 2]\\nq.pushMiddle(4);  // [1, <strong>4</strong>, 3, 2]\\nq.popFront();     // 返回 1 -> [4, 3, 2]\\nq.popMiddle();    // 返回 3 -> [4, 2]\\nq.popMiddle();    // 返回 4 -> [2]\\nq.popBack();      // 返回 2 -> []\\nq.popFront();     // 返回 -1 -> [] （队列为空）\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= val <= 10<sup>9</sup></code></li>\\n\\t<li>最多调用 <code>1000</code> 次 <code>pushFront</code>， <code>pushMiddle</code>， <code>pushBack</code>， <code>popFront</code>， <code>popMiddle</code> 和 <code>popBack</code> 。</li>\\n</ul>\\n","title":"1670. 设计前中后队列","relatedTags":["设计","队列","数组","链表","数据流"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1670","slug":"1670-Design-Front-Middle-Back-Queue"}')}}]);