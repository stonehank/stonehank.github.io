(window.webpackJsonp=window.webpackJsonp||[]).push([[962],{1760:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">nums</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> arrayNesting = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">nums</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> uf=[],weight=[]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;nums.length;i++){\\n    uf[i]=i\\n    weight[i]=<span class=\\"hljs-number\\">1</span>\\n  }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">find</span>(<span class=\\"hljs-params\\">i</span>)</span>{\\n    <span class=\\"hljs-keyword\\">while</span>(i!==uf[i]){\\n      i=uf[i]\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> i\\n  }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">union</span>(<span class=\\"hljs-params\\">a,b</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> i=find(a),\\n        j=find(b)\\n    <span class=\\"hljs-keyword\\">if</span>(i===j)<span class=\\"hljs-keyword\\">return</span>\\n    <span class=\\"hljs-keyword\\">if</span>(weight[i]&lt;weight[j]){\\n      weight[j]+=weight[i]\\n      uf[i]=j\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      weight[i]+=weight[j]\\n      uf[j]=i\\n    }\\n  }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">isConnect</span>(<span class=\\"hljs-params\\">a,b</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> i=find(a),\\n        j=find(b)\\n    <span class=\\"hljs-keyword\\">return</span> i===j\\n  }\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;nums.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> id=i\\n    <span class=\\"hljs-keyword\\">while</span>(!isConnect(id,nums[id])){\\n      union(id,nums[id])\\n      id=nums[id]\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-built_in\\">Math</span>.max.apply(<span class=\\"hljs-built_in\\">Math</span>,weight)\\n};\\n</code></pre>\\n"],"querySlug":"array-nesting","created_at":"2019-03-14","timeArr":[2019,2,14,10,48,59,0],"hasThinking":false,"content":"<p>索引从<code>0</code>开始长度为<code>N</code>的数组<code>A</code>，包含<code>0</code>到<code>N - 1</code>的所有整数。找到最大的集合<code>S</code>并返回其大小，其中 <code>S[i] = {A[i], A[A[i]], A[A[A[i]]], ... }</code>且遵守以下的规则。</p>\\n\\n<p>假设选择索引为<code>i</code>的元素<code>A[i]</code>为<code>S</code>的第一个元素，<code>S</code>的下一个元素应该是<code>A[A[i]]</code>，之后是<code>A[A[A[i]]]...</code> 以此类推，不断添加直到<code>S</code>出现重复的元素。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例&nbsp;1:</strong></p>\\n\\n<pre><strong>输入:</strong> A = [5,4,0,3,1,6,2]\\n<strong>输出:</strong> 4\\n<strong>解释:</strong> \\nA[0] = 5, A[1] = 4, A[2] = 0, A[3] = 3, A[4] = 1, A[5] = 6, A[6] = 2.\\n\\n其中一种最长的 S[K]:\\nS[0] = {A[0], A[5], A[6], A[2]} = {5, 6, 2, 0}\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ol>\\n\\t<li><code>N</code>是<code>[1, 20,000]</code>之间的整数。</li>\\n\\t<li><code>A</code>中不含有重复的元素。</li>\\n\\t<li><code>A</code>中的元素大小在<code>[0, N-1]</code>之间。</li>\\n</ol>\\n","title":"565. 数组嵌套","relatedTags":["深度优先搜索","数组"],"difficult":"Middle","lang":["javascript"],"uniqueID":"565","slug":"565-Array-Nesting"}')}}]);