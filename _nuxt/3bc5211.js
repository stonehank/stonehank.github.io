(window.webpackJsonp=window.webpackJsonp||[]).push([[1329],{2127:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{TreeNode}</span> <span class=\\"hljs-variable\\">root</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{boolean}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> isCompleteTree = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">root</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> arr=[root]\\n  <span class=\\"hljs-keyword\\">let</span> isFull=<span class=\\"hljs-literal\\">false</span>\\n  \\n  <span class=\\"hljs-keyword\\">while</span>(arr.length&gt;<span class=\\"hljs-number\\">0</span>){\\n    <span class=\\"hljs-keyword\\">let</span> len=arr.length\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;len;i++){\\n      <span class=\\"hljs-keyword\\">let</span> node=arr.shift()\\n      <span class=\\"hljs-keyword\\">if</span>(node.left){\\n        <span class=\\"hljs-keyword\\">if</span>(isFull)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n        arr.push(node.left)\\n      }<span class=\\"hljs-keyword\\">else</span> isFull=<span class=\\"hljs-literal\\">true</span>\\n      <span class=\\"hljs-keyword\\">if</span>(node.right){\\n        <span class=\\"hljs-keyword\\">if</span>(isFull)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n        arr.push(node.right)\\n      }<span class=\\"hljs-keyword\\">else</span> isFull=<span class=\\"hljs-literal\\">true</span>\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n};\\n</code></pre>\\n"],"querySlug":"check-completeness-of-a-binary-tree","created_at":"2019-03-21","timeArr":[2019,2,21,10,14,56,0],"hasThinking":false,"content":"<p>给定一个二叉树，确定它是否是一个<em>完全二叉树</em>。</p>\\n\\n<p><strong><a href=\\"https://baike.baidu.com/item/完全二叉树/7773232?fr=aladdin\\" target=\\"_blank\\">百度百科</a>中对完全二叉树的定义如下：</strong></p>\\n\\n<p>若设二叉树的深度为 h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，第 h 层所有的结点都连续集中在最左边，这就是完全二叉树。（注：第 h 层可能包含 1~&nbsp;2<sup>h</sup>&nbsp;个节点。）</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<p><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/15/complete-binary-tree-1.png\\" style=\\"height: 145px; width: 180px;\\"></p>\\n\\n<pre><strong>输入：</strong>[1,2,3,4,5,6]\\n<strong>输出：</strong>true\\n<strong>解释：</strong>最后一层前的每一层都是满的（即，结点值为 {1} 和 {2,3} 的两层），且最后一层中的所有结点（{4,5,6}）都尽可能地向左。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<p><strong><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/15/complete-binary-tree-2.png\\"></strong></p>\\n\\n<pre><strong>输入：</strong>[1,2,3,4,5,null,7]\\n<strong>输出：</strong>false\\n<strong>解释：</strong>值为 7 的结点没有尽可能靠向左侧。\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ol>\\n\\t<li>树中将会有 1 到 100 个结点。</li>\\n</ol>\\n","title":"958. 二叉树的完全性检验","relatedTags":["树","广度优先搜索","二叉树"],"difficult":"Middle","lang":["javascript"],"uniqueID":"958","slug":"958-Check-Completeness-of-a-Binary-Tree"}')}}]);