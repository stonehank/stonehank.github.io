(window.webpackJsonp=window.webpackJsonp||[]).push([[440],{1238:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">n</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">discount</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">products</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">prices</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> Cashier = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">n, discount, products, prices</span>) </span>{\\n  <span class=\\"hljs-keyword\\">this</span>.n=n\\n  <span class=\\"hljs-keyword\\">this</span>.customCount=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">this</span>.discount=discount\\n  <span class=\\"hljs-keyword\\">this</span>.productPrice={}\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;products.length;i++){\\n    <span class=\\"hljs-keyword\\">this</span>.productPrice[products[i]]=prices[i]\\n  }\\n};\\n\\n<span class=\\"hljs-comment\\">/** \\n * @param {number[]} product \\n * @param {number[]} amount\\n * @return {number}\\n */</span>\\nCashier.prototype.getBill = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">product, amount</span>) </span>{\\n  <span class=\\"hljs-keyword\\">this</span>.customCount++\\n  <span class=\\"hljs-keyword\\">let</span> isDiscount=<span class=\\"hljs-literal\\">false</span>\\n  <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-keyword\\">this</span>.customCount===<span class=\\"hljs-keyword\\">this</span>.n){\\n    <span class=\\"hljs-keyword\\">this</span>.customCount=<span class=\\"hljs-number\\">0</span>\\n    isDiscount=<span class=\\"hljs-literal\\">true</span>\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> allPrice=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;product.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> prod=product[i]\\n    <span class=\\"hljs-keyword\\">let</span> count=amount[i]\\n    <span class=\\"hljs-keyword\\">let</span> price=<span class=\\"hljs-keyword\\">this</span>.productPrice[prod]\\n    allPrice+=price * count\\n  }\\n  <span class=\\"hljs-keyword\\">if</span>(isDiscount)allPrice=allPrice * (<span class=\\"hljs-number\\">100</span> - <span class=\\"hljs-keyword\\">this</span>.discount) / <span class=\\"hljs-number\\">100</span>\\n  <span class=\\"hljs-keyword\\">return</span> allPrice\\n};\\n\\n<span class=\\"hljs-comment\\">/**\\n * Your Cashier object will be instantiated and called as such:\\n * var obj = new Cashier(n, discount, products, prices)\\n * var param_1 = obj.getBill(product,amount)\\n */</span>\\n</code></pre>\\n"],"querySlug":"apply-discount-every-n-orders","created_at":"2020-02-28","timeArr":[2020,1,28,15,12,47,0],"hasThinking":false,"content":"<p>超市里正在举行打折活动，每隔&nbsp;<code>n</code>&nbsp;个顾客会得到 <code>discount</code>&nbsp;的折扣。</p>\\n\\n<p>超市里有一些商品，第&nbsp;<code>i</code>&nbsp;种商品为&nbsp;<code>products[i]</code>&nbsp;且每件单品的价格为&nbsp;<code>prices[i]</code>&nbsp;。</p>\\n\\n<p>结账系统会统计顾客的数目，每隔&nbsp;<code>n</code>&nbsp;个顾客结账时，该顾客的账单都会打折，折扣为&nbsp;<code>discount</code>&nbsp;（也就是如果原本账单为&nbsp;<code>x</code>&nbsp;，那么实际金额会变成&nbsp;<code>x - (discount * x) / 100</code>&nbsp;），然后系统会重新开始计数。</p>\\n\\n<p>顾客会购买一些商品，&nbsp;<code>product[i]</code>&nbsp;是顾客购买的第&nbsp;<code>i</code>&nbsp;种商品，&nbsp;<code>amount[i]</code>&nbsp;是对应的购买该种商品的数目。</p>\\n\\n<p>请你实现&nbsp;<code>Cashier</code>&nbsp;类：</p>\\n\\n<ul>\\n\\t<li><code>Cashier(int n, int discount, int[] products, int[] prices)</code>&nbsp;初始化实例对象，参数分别为打折频率&nbsp;<code>n</code>&nbsp;，折扣大小 <code>discount</code>&nbsp;，超市里的商品列表 <code>products</code>&nbsp;和它们的价格 <code>prices</code>&nbsp;。</li>\\n\\t<li><code>double&nbsp;getBill(int[] product, int[] amount)</code>&nbsp;返回账单的实际金额（如果有打折，请返回打折后的结果）。返回结果与标准答案误差在&nbsp;<code>10^-5</code>&nbsp;以内都视为正确结果。</li>\\n</ul>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入</strong>\\n[&quot;Cashier&quot;,&quot;getBill&quot;,&quot;getBill&quot;,&quot;getBill&quot;,&quot;getBill&quot;,&quot;getBill&quot;,&quot;getBill&quot;,&quot;getBill&quot;]\\n[[3,50,[1,2,3,4,5,6,7],[100,200,300,400,300,200,100]],[[1,2],[1,2]],[[3,7],[10,10]],[[1,2,3,4,5,6,7],[1,1,1,1,1,1,1]],[[4],[10]],[[7,3],[10,10]],[[7,5,3,1,6,4,2],[10,10,10,9,9,9,7]],[[2,3,5],[5,3,2]]]\\n<strong>输出</strong>\\n[null,500.0,4000.0,800.0,4000.0,4000.0,7350.0,2500.0]\\n<strong>解释</strong>\\nCashier cashier = new Cashier(3,50,[1,2,3,4,5,6,7],[100,200,300,400,300,200,100]);\\ncashier.getBill([1,2],[1,2]);                        // 返回 500.0, 账单金额为 = 1 * 100 + 2 * 200 = 500.\\ncashier.getBill([3,7],[10,10]);                      // 返回 4000.0\\ncashier.getBill([1,2,3,4,5,6,7],[1,1,1,1,1,1,1]);    // 返回 800.0 ，账单原本为 1600.0 ，但由于该顾客是第三位顾客，他将得到 50% 的折扣，所以实际金额为 1600 - 1600 * (50 / 100) = 800 。\\ncashier.getBill([4],[10]);                           // 返回 4000.0\\ncashier.getBill([7,3],[10,10]);                      // 返回 4000.0\\ncashier.getBill([7,5,3,1,6,4,2],[10,10,10,9,9,9,7]); // 返回 7350.0 ，账单原本为 14700.0 ，但由于系统计数再次达到三，该顾客将得到 50% 的折扣，实际金额为 7350.0 。\\ncashier.getBill([2,3,5],[5,3,2]);                    // 返回 2500.0\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= n &lt;= 10^4</code></li>\\n\\t<li><code>0 &lt;= discount &lt;= 100</code></li>\\n\\t<li><code>1 &lt;= products.length &lt;= 200</code></li>\\n\\t<li><code>1 &lt;= products[i] &lt;= 200</code></li>\\n\\t<li><code>products</code>&nbsp;列表中&nbsp;<strong>不会</strong>&nbsp;有重复的元素。</li>\\n\\t<li><code>prices.length == products.length</code></li>\\n\\t<li><code>1 &lt;= prices[i] &lt;= 1000</code></li>\\n\\t<li><code>1 &lt;= product.length &lt;= products.length</code></li>\\n\\t<li><code>product[i]</code>&nbsp;在&nbsp;<code>products</code>&nbsp;出现过。</li>\\n\\t<li><code>amount.length == product.length</code></li>\\n\\t<li><code>1 &lt;= amount[i] &lt;= 1000</code></li>\\n\\t<li>最多有&nbsp;<code>1000</code> 次对&nbsp;<code>getBill</code>&nbsp;函数的调用。</li>\\n\\t<li>返回结果与标准答案误差在&nbsp;<code>10^-5</code>&nbsp;以内都视为正确结果。</li>\\n</ul>\\n","title":"1357. 每隔 n 个顾客打折","relatedTags":["设计","数组","哈希表"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1357","slug":"1357-Apply-Discount-Every-n-Orders"}')}}]);