(window.webpackJsonp=window.webpackJsonp||[]).push([[706],{1504:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">nums</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> singleNumber = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">nums</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> xor=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> num <span class=\\"hljs-keyword\\">of</span> nums)xor ^= num\\n  <span class=\\"hljs-comment\\">// 找出xor的二进制中最后一个1及后面的0代表的数字</span>\\n  <span class=\\"hljs-comment\\">// 这个最后一个1的位置 说明这两个出现1次的数在这个位置的数是1和0</span>\\n  <span class=\\"hljs-keyword\\">let</span> lastOneBit=<span class=\\"hljs-number\\">1</span>\\n  <span class=\\"hljs-keyword\\">while</span>(xor % <span class=\\"hljs-number\\">2</span>===<span class=\\"hljs-number\\">0</span>){\\n    xor /= <span class=\\"hljs-number\\">2</span>\\n    lastOneBit*=<span class=\\"hljs-number\\">2</span>\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> res=[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">0</span>]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> num <span class=\\"hljs-keyword\\">of</span> nums){\\n    <span class=\\"hljs-comment\\">// 这个位置是0的所有数</span>\\n    <span class=\\"hljs-keyword\\">if</span>((lastOneBit &amp; num)===<span class=\\"hljs-number\\">0</span>){\\n      res[<span class=\\"hljs-number\\">0</span>] ^= num\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      <span class=\\"hljs-comment\\">// 这个位置是1的所有数</span>\\n      res[<span class=\\"hljs-number\\">1</span>] ^= num\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"single-number-iii","created_at":"2019-04-20","timeArr":[2019,3,20,23,37,45,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>2次遍历，第一次遍历计算所有数的<code>xor</code>，计算<code>xor</code>的原因是因为只要找到<code>xor</code>二进制中最后一位<code>1</code>的位置，\\n那么说明那<code>2</code>个独立的数这个位置上的数字是不同的(这样它们才有可能异或<code>1</code>)。</p>\\n<p>第二次遍历，如果当前数的那个位置是<code>1</code>，单独计算异或值；如果是<code>0</code>，也单独计算异或值，最终得到2个不同的独立值。</p>\\n","content":"<p>给定一个整数数组 <code>nums</code>，其中恰好有两个元素只出现一次，其余所有元素均出现两次。 找出只出现一次的那两个元素。你可以按 <strong>任意顺序</strong> 返回答案。</p>\\n\\n<p> </p>\\n\\n<p><strong>进阶：</strong>你的算法应该具有线性时间复杂度。你能否仅使用常数空间复杂度来实现？</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [1,2,1,3,2,5]\\n<strong>输出：</strong>[3,5]\\n<strong>解释：</strong>[5, 3] 也是有效的答案。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [-1,0]\\n<strong>输出：</strong>[-1,0]\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [0,1]\\n<strong>输出：</strong>[1,0]\\n</pre>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>2 <= nums.length <= 3 * 10<sup>4</sup></code></li>\\n\\t<li><code>-2<sup>31</sup> <= nums[i] <= 2<sup>31</sup> - 1</code></li>\\n\\t<li>除两个只出现一次的整数外，<code>nums</code> 中的其他数字都出现两次</li>\\n</ul>\\n","title":"260. 只出现一次的数字 III","relatedTags":["位运算","数组"],"difficult":"Middle","lang":["javascript"],"uniqueID":"260","slug":"260-Single-Number-III"}')}}]);