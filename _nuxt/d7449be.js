(window.webpackJsonp=window.webpackJsonp||[]).push([[517],{1315:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string[]}</span> <span class=\\"hljs-variable\\">names</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{string[]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> getFolderNames = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">names</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> res=[]\\n  <span class=\\"hljs-keyword\\">let</span> used={}\\n  \\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;names.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> name=names[i]\\n    <span class=\\"hljs-keyword\\">let</span> nxtName=name\\n    <span class=\\"hljs-keyword\\">if</span>(used[name]==<span class=\\"hljs-literal\\">null</span>){\\n      used[name]=<span class=\\"hljs-number\\">0</span>\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      <span class=\\"hljs-keyword\\">let</span> nxtUnique=used[name]\\n      nxtUnique+=<span class=\\"hljs-number\\">1</span>\\n      nxtName=name+<span class=\\"hljs-string\\">`(<span class=\\"hljs-subst\\">${nxtUnique}</span>)`</span> \\n      <span class=\\"hljs-keyword\\">while</span>(used[nxtName]!=<span class=\\"hljs-literal\\">null</span>){\\n        nxtUnique++\\n        nxtName=nxtName.slice(<span class=\\"hljs-number\\">0</span>,nxtName.length<span class=\\"hljs-number\\">-3</span>)+<span class=\\"hljs-string\\">`(<span class=\\"hljs-subst\\">${nxtUnique}</span>)`</span>\\n         <span class=\\"hljs-comment\\">// console.log(nxtName)</span>\\n      }\\n      used[nxtName]=<span class=\\"hljs-number\\">0</span>\\n      used[name]=nxtUnique\\n    }\\n    res.push(nxtName)\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"making-file-names-unique","created_at":"2020-06-21","timeArr":[2020,5,21,10,52,37,0],"hasThinking":false,"content":"<p>给你一个长度为 <code>n</code> 的字符串数组 <code>names</code> 。你将会在文件系统中创建 <code>n</code> 个文件夹：在第 <code>i</code> 分钟，新建名为 <code>names[i]</code> 的文件夹。</p>\\n\\n<p>由于两个文件 <strong>不能</strong> 共享相同的文件名，因此如果新建文件夹使用的文件名已经被占用，系统会以 <code>(k)</code> 的形式为新文件夹的文件名添加后缀，其中 <code>k</code> 是能保证文件名唯一的 <strong>最小正整数</strong> 。</p>\\n\\n<p>返回长度为<em> <code>n</code></em> 的字符串数组，其中 <code>ans[i]</code> 是创建第 <code>i</code> 个文件夹时系统分配给该文件夹的实际名称。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>names = [&quot;pes&quot;,&quot;fifa&quot;,&quot;gta&quot;,&quot;pes(2019)&quot;]\\n<strong>输出：</strong>[&quot;pes&quot;,&quot;fifa&quot;,&quot;gta&quot;,&quot;pes(2019)&quot;]\\n<strong>解释：</strong>文件系统将会这样创建文件名：\\n&quot;pes&quot; --&gt; 之前未分配，仍为 &quot;pes&quot;\\n&quot;fifa&quot; --&gt; 之前未分配，仍为 &quot;fifa&quot;\\n&quot;gta&quot; --&gt; 之前未分配，仍为 &quot;gta&quot;\\n&quot;pes(2019)&quot; --&gt; 之前未分配，仍为 &quot;pes(2019)&quot;\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>names = [&quot;gta&quot;,&quot;gta(1)&quot;,&quot;gta&quot;,&quot;avalon&quot;]\\n<strong>输出：</strong>[&quot;gta&quot;,&quot;gta(1)&quot;,&quot;gta(2)&quot;,&quot;avalon&quot;]\\n<strong>解释：</strong>文件系统将会这样创建文件名：\\n&quot;gta&quot; --&gt; 之前未分配，仍为 &quot;gta&quot;\\n&quot;gta(1)&quot; --&gt; 之前未分配，仍为 &quot;gta(1)&quot;\\n&quot;gta&quot; --&gt; 文件名被占用，系统为该名称添加后缀 (k)，由于 &quot;gta(1)&quot; 也被占用，所以 k = 2 。实际创建的文件名为 &quot;gta(2)&quot; 。\\n&quot;avalon&quot; --&gt; 之前未分配，仍为 &quot;avalon&quot;\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>names = [&quot;onepiece&quot;,&quot;onepiece(1)&quot;,&quot;onepiece(2)&quot;,&quot;onepiece(3)&quot;,&quot;onepiece&quot;]\\n<strong>输出：</strong>[&quot;onepiece&quot;,&quot;onepiece(1)&quot;,&quot;onepiece(2)&quot;,&quot;onepiece(3)&quot;,&quot;onepiece(4)&quot;]\\n<strong>解释：</strong>当创建最后一个文件夹时，最小的正有效 k 为 4 ，文件名变为 &quot;onepiece(4)&quot;。\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre><strong>输入：</strong>names = [&quot;wano&quot;,&quot;wano&quot;,&quot;wano&quot;,&quot;wano&quot;]\\n<strong>输出：</strong>[&quot;wano&quot;,&quot;wano(1)&quot;,&quot;wano(2)&quot;,&quot;wano(3)&quot;]\\n<strong>解释：</strong>每次创建文件夹 &quot;wano&quot; 时，只需增加后缀中 k 的值即可。</pre>\\n\\n<p><strong>示例 5：</strong></p>\\n\\n<pre><strong>输入：</strong>names = [&quot;kaido&quot;,&quot;kaido(1)&quot;,&quot;kaido&quot;,&quot;kaido(1)&quot;]\\n<strong>输出：</strong>[&quot;kaido&quot;,&quot;kaido(1)&quot;,&quot;kaido(2)&quot;,&quot;kaido(1)(1)&quot;]\\n<strong>解释：</strong>注意，如果含后缀文件名被占用，那么系统也会按规则在名称后添加新的后缀 (k) 。\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= names.length &lt;= 5 * 10^4</code></li>\\n\\t<li><code>1 &lt;= names[i].length &lt;= 20</code></li>\\n\\t<li><code>names[i]</code> 由小写英文字母、数字和/或圆括号组成。</li>\\n</ul>\\n","title":"1487. 保证文件名唯一","relatedTags":["数组","哈希表","字符串"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1487","slug":"1487-Making-File-Names-Unique"}')}}]);