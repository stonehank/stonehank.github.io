(window.webpackJsonp=window.webpackJsonp||[]).push([[669],{1467:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">nums</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> rob = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">nums</span>) </span>{\\n<span class=\\"hljs-comment\\">/*\\n   200 3    140 20 10\\ny  200 3    340\\nn  0   200  200\\n*/</span>\\n    <span class=\\"hljs-keyword\\">if</span>(nums.length===<span class=\\"hljs-number\\">1</span>)<span class=\\"hljs-keyword\\">return</span> nums[<span class=\\"hljs-number\\">0</span>]\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">resolve</span>(<span class=\\"hljs-params\\">nums</span>)</span>{\\n        <span class=\\"hljs-keyword\\">let</span> len=nums.length\\n        <span class=\\"hljs-keyword\\">let</span> dp=<span class=\\"hljs-built_in\\">Array</span>(<span class=\\"hljs-number\\">2</span>).fill().map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span>=&gt;</span><span class=\\"hljs-built_in\\">Array</span>(len+<span class=\\"hljs-number\\">1</span>).fill(<span class=\\"hljs-number\\">0</span>))\\n        <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">1</span>;i&lt;=len;i++){\\n            dp[<span class=\\"hljs-number\\">0</span>][i]=dp[<span class=\\"hljs-number\\">1</span>][i<span class=\\"hljs-number\\">-1</span>]+nums[i<span class=\\"hljs-number\\">-1</span>]\\n            dp[<span class=\\"hljs-number\\">1</span>][i]=<span class=\\"hljs-built_in\\">Math</span>.max(dp[<span class=\\"hljs-number\\">0</span>][i<span class=\\"hljs-number\\">-1</span>],dp[<span class=\\"hljs-number\\">1</span>][i<span class=\\"hljs-number\\">-1</span>])\\n        }\\n        <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-built_in\\">Math</span>.max(dp[<span class=\\"hljs-number\\">0</span>][len],dp[<span class=\\"hljs-number\\">1</span>][len])\\n    }\\n\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-built_in\\">Math</span>.max(resolve(nums.slice(<span class=\\"hljs-number\\">0</span>,nums.length<span class=\\"hljs-number\\">-1</span>)),resolve(nums.slice(<span class=\\"hljs-number\\">1</span>)))\\n\\n};\\n</code></pre>\\n","<pre class=\\"hljs\\"><code><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Solution</span><span class=\\"hljs-params\\">(object)</span>:</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">rob</span><span class=\\"hljs-params\\">(self, nums)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type nums: List[int]\\n        :rtype: int\\n        \\"\\"\\"</span>\\n        n=len(nums)\\n        <span class=\\"hljs-keyword\\">if</span> n==<span class=\\"hljs-number\\">0</span>:<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>\\n        <span class=\\"hljs-keyword\\">if</span> n==<span class=\\"hljs-number\\">1</span>:<span class=\\"hljs-keyword\\">return</span> nums[<span class=\\"hljs-number\\">0</span>]\\n        dp=[[<span class=\\"hljs-number\\">0</span>]*(n+<span class=\\"hljs-number\\">1</span>) <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(<span class=\\"hljs-number\\">2</span>)]\\n        dp[<span class=\\"hljs-number\\">0</span>][<span class=\\"hljs-number\\">1</span>]=nums[<span class=\\"hljs-number\\">0</span>]\\n        dp[<span class=\\"hljs-number\\">1</span>][<span class=\\"hljs-number\\">2</span>]=nums[<span class=\\"hljs-number\\">1</span>]\\n        <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(<span class=\\"hljs-number\\">2</span>):\\n          <span class=\\"hljs-keyword\\">for</span> j <span class=\\"hljs-keyword\\">in</span> range(i+<span class=\\"hljs-number\\">2</span>,n+i):\\n            dp[i][j]=max(dp[i][j<span class=\\"hljs-number\\">-1</span>],dp[i][j<span class=\\"hljs-number\\">-2</span>]+nums[j<span class=\\"hljs-number\\">-1</span>])\\n        <span class=\\"hljs-comment\\"># print dp</span>\\n        <span class=\\"hljs-keyword\\">return</span> max(dp[<span class=\\"hljs-number\\">0</span>][<span class=\\"hljs-number\\">-2</span>],dp[<span class=\\"hljs-number\\">1</span>][<span class=\\"hljs-number\\">-1</span>])\\n</code></pre>\\n"],"querySlug":"house-robber-ii","hasThinking":false,"content":"<p>你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都 <strong>围成一圈</strong> ，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，<strong>如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警</strong> 。</p>\\n\\n<p>给定一个代表每个房屋存放金额的非负整数数组，计算你 <strong>在不触动警报装置的情况下</strong> ，今晚能够偷窃到的最高金额。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [2,3,2]\\n<strong>输出：</strong>3\\n<strong>解释：</strong>你不能先偷窃 1 号房屋（金额 = 2），然后偷窃 3 号房屋（金额 = 2）, 因为他们是相邻的。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [1,2,3,1]\\n<strong>输出：</strong>4\\n<strong>解释：</strong>你可以先偷窃 1 号房屋（金额 = 1），然后偷窃 3 号房屋（金额 = 3）。\\n     偷窃到的最高金额 = 1 + 3 = 4 。</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [0]\\n<strong>输出：</strong>0\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= nums.length <= 100</code></li>\\n\\t<li><code>0 <= nums[i] <= 1000</code></li>\\n</ul>\\n","title":"213. 打家劫舍 II","relatedTags":["数组","动态规划"],"difficult":"Middle","lang":["javascript","python"],"uniqueID":"213","slug":"213-House-Robber-II"}')}}]);