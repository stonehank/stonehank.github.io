(window.webpackJsonp=window.webpackJsonp||[]).push([[409],{1207:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string[][]}</span> <span class=\\"hljs-variable\\">watchedVideos</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">friends</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">id</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">level</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{string[]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> watchedVideosByFriends = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">watchedVideos, friends, id, level</span>) </span>{\\n  \\n  <span class=\\"hljs-keyword\\">return</span> findVideos(findLevelIDs(id,level))\\n  \\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">findVideos</span>(<span class=\\"hljs-params\\">ids</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> freq={}\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;ids.length;i++){\\n      <span class=\\"hljs-keyword\\">let</span> videos=watchedVideos[ids[i]]\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;videos.length;j++){\\n        <span class=\\"hljs-keyword\\">if</span>(freq[videos[j]]==<span class=\\"hljs-literal\\">null</span>){\\n          freq[videos[j]]=<span class=\\"hljs-number\\">1</span>\\n        }<span class=\\"hljs-keyword\\">else</span>{\\n          freq[videos[j]]++\\n        }\\n      }\\n    }\\n    <span class=\\"hljs-keyword\\">let</span> ans=[]\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> name <span class=\\"hljs-keyword\\">in</span> freq){\\n      ans.push([name,freq[name]])\\n    }\\n    ans.sort(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">a,b</span>)=&gt;</span>a[<span class=\\"hljs-number\\">1</span>]===b[<span class=\\"hljs-number\\">1</span>] ? a &lt; b ? <span class=\\"hljs-number\\">-1</span> : <span class=\\"hljs-number\\">1</span> : a[<span class=\\"hljs-number\\">1</span>]-b[<span class=\\"hljs-number\\">1</span>] )\\n    <span class=\\"hljs-keyword\\">return</span> ans.map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">a</span>=&gt;</span>a[<span class=\\"hljs-number\\">0</span>])\\n  }\\n  \\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">findLevelIDs</span>(<span class=\\"hljs-params\\">startId,level</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> arr=[startId]\\n    <span class=\\"hljs-keyword\\">let</span> step=level\\n    <span class=\\"hljs-keyword\\">let</span> hash={}\\n    hash[startId]=<span class=\\"hljs-literal\\">true</span>\\n    <span class=\\"hljs-keyword\\">while</span>(arr.length&gt;<span class=\\"hljs-number\\">0</span>){\\n      <span class=\\"hljs-keyword\\">if</span>(step===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span> arr\\n      step--\\n      <span class=\\"hljs-keyword\\">let</span> len=arr.length\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;len;i++){\\n        <span class=\\"hljs-keyword\\">let</span> curId=arr.shift()\\n        <span class=\\"hljs-keyword\\">let</span> nxtFriends=friends[curId]\\n        <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;nxtFriends.length;j++){\\n          <span class=\\"hljs-keyword\\">if</span>(hash[nxtFriends[j]])<span class=\\"hljs-keyword\\">continue</span>\\n          hash[nxtFriends[j]]=<span class=\\"hljs-literal\\">true</span>\\n          arr.push(nxtFriends[j])\\n        }\\n      }\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> arr\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"get-watched-videos-by-your-friends","created_at":"2020-01-05","timeArr":[2020,0,5,10,59,28,0],"hasThinking":false,"content":"<p>有&nbsp;<code>n</code> 个人，每个人都有一个&nbsp; <code>0</code>&nbsp;到&nbsp;<code>n-1</code>&nbsp;的唯一&nbsp;<em>id</em>&nbsp;。</p>\\n\\n<p>给你数组 <code>watchedVideos</code>&nbsp; 和&nbsp;<code>friends</code>&nbsp;，其中&nbsp;<code>watchedVideos[i]</code>&nbsp; 和&nbsp;<code>friends[i]</code>&nbsp;分别表示&nbsp;<code>id = i</code>&nbsp;的人观看过的视频列表和他的好友列表。</p>\\n\\n<p>Level&nbsp;<strong>1</strong>&nbsp;的视频包含所有你好友观看过的视频，level&nbsp;<strong>2</strong>&nbsp;的视频包含所有你好友的好友观看过的视频，以此类推。一般的，Level 为 <strong>k</strong>&nbsp;的视频包含所有从你出发，最短距离为&nbsp;<strong>k</strong>&nbsp;的好友观看过的视频。</p>\\n\\n<p>给定你的&nbsp;<code>id</code>&nbsp; 和一个&nbsp;<code>level</code>&nbsp;值，请你找出所有指定 <code>level</code> 的视频，并将它们按观看频率升序返回。如果有频率相同的视频，请将它们按字母顺序从小到大排列。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<p><strong><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/03/leetcode_friends_1.png\\" style=\\"height: 179px; width: 129px;\\"></strong></p>\\n\\n<pre><strong>输入：</strong>watchedVideos = [[&quot;A&quot;,&quot;B&quot;],[&quot;C&quot;],[&quot;B&quot;,&quot;C&quot;],[&quot;D&quot;]], friends = [[1,2],[0,3],[0,3],[1,2]], id = 0, level = 1\\n<strong>输出：</strong>[&quot;B&quot;,&quot;C&quot;] \\n<strong>解释：</strong>\\n你的 id 为 0（绿色），你的朋友包括（黄色）：\\nid 为 1 -&gt; watchedVideos = [&quot;C&quot;]&nbsp;\\nid 为 2 -&gt; watchedVideos = [&quot;B&quot;,&quot;C&quot;]&nbsp;\\n你朋友观看过视频的频率为：\\nB -&gt; 1&nbsp;\\nC -&gt; 2\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<p><strong><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/03/leetcode_friends_2.png\\" style=\\"height: 179px; width: 129px;\\"></strong></p>\\n\\n<pre><strong>输入：</strong>watchedVideos = [[&quot;A&quot;,&quot;B&quot;],[&quot;C&quot;],[&quot;B&quot;,&quot;C&quot;],[&quot;D&quot;]], friends = [[1,2],[0,3],[0,3],[1,2]], id = 0, level = 2\\n<strong>输出：</strong>[&quot;D&quot;]\\n<strong>解释：</strong>\\n你的 id 为 0（绿色），你朋友的朋友只有一个人，他的 id 为 3（黄色）。\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>n == watchedVideos.length ==&nbsp;friends.length</code></li>\\n\\t<li><code>2 &lt;= n&nbsp;&lt;= 100</code></li>\\n\\t<li><code>1 &lt;=&nbsp;watchedVideos[i].length &lt;= 100</code></li>\\n\\t<li><code>1 &lt;=&nbsp;watchedVideos[i][j].length &lt;= 8</code></li>\\n\\t<li><code>0 &lt;= friends[i].length &lt; n</code></li>\\n\\t<li><code>0 &lt;= friends[i][j]&nbsp;&lt; n</code></li>\\n\\t<li><code>0 &lt;= id &lt; n</code></li>\\n\\t<li><code>1 &lt;= level &lt; n</code></li>\\n\\t<li>如果&nbsp;<code>friends[i]</code> 包含&nbsp;<code>j</code>&nbsp;，那么&nbsp;<code>friends[j]</code> 包含&nbsp;<code>i</code></li>\\n</ul>\\n","title":"1311. 获取你好友已观看的视频","relatedTags":["广度优先搜索","数组","哈希表","排序"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1311","slug":"1311-Get-Watched-Videos-by-Your-Friends"}')}}]);