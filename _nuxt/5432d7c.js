(window.webpackJsonp=window.webpackJsonp||[]).push([[514],{1312:function(o){o.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">homepage</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> BrowserHistory = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">homepage</span>) </span>{\\n  <span class=\\"hljs-keyword\\">this</span>.list=[homepage]\\n  <span class=\\"hljs-keyword\\">this</span>.index=<span class=\\"hljs-number\\">0</span>\\n};\\n\\n<span class=\\"hljs-comment\\">/** \\n * @param {string} url\\n * @return {void}\\n */</span>\\nBrowserHistory.prototype.visit = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">url</span>) </span>{\\n  <span class=\\"hljs-keyword\\">this</span>.list=<span class=\\"hljs-keyword\\">this</span>.list.slice(<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-keyword\\">this</span>.index+<span class=\\"hljs-number\\">1</span>)\\n  <span class=\\"hljs-keyword\\">this</span>.list.push(url)\\n  <span class=\\"hljs-keyword\\">this</span>.index=<span class=\\"hljs-keyword\\">this</span>.list.length<span class=\\"hljs-number\\">-1</span>\\n    <span class=\\"hljs-comment\\">// console.log(this.list)</span>\\n};\\n\\n<span class=\\"hljs-comment\\">/** \\n * @param {number} steps\\n * @return {string}\\n */</span>\\nBrowserHistory.prototype.back = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">steps</span>) </span>{\\n  <span class=\\"hljs-keyword\\">this</span>.index=<span class=\\"hljs-built_in\\">Math</span>.max(<span class=\\"hljs-keyword\\">this</span>.index-steps,<span class=\\"hljs-number\\">0</span>)\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-keyword\\">this</span>.list[<span class=\\"hljs-keyword\\">this</span>.index]\\n};\\n\\n<span class=\\"hljs-comment\\">/** \\n * @param {number} steps\\n * @return {string}\\n */</span>\\nBrowserHistory.prototype.forward = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">steps</span>) </span>{\\n  <span class=\\"hljs-keyword\\">this</span>.index=<span class=\\"hljs-built_in\\">Math</span>.min(<span class=\\"hljs-keyword\\">this</span>.index+steps,<span class=\\"hljs-keyword\\">this</span>.list.length<span class=\\"hljs-number\\">-1</span>)\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-keyword\\">this</span>.list[<span class=\\"hljs-keyword\\">this</span>.index]\\n};\\n\\n<span class=\\"hljs-comment\\">/**\\n * Your BrowserHistory object will be instantiated and called as such:\\n * var obj = new BrowserHistory(homepage)\\n * obj.visit(url)\\n * var param_2 = obj.back(steps)\\n * var param_3 = obj.forward(steps)\\n */</span>\\n</code></pre>\\n"],"querySlug":"design-browser-history","created_at":"2020-06-07","timeArr":[2020,5,7,10,48,40,0],"hasThinking":false,"content":"<p>你有一个只支持单个标签页的 <strong>浏览器</strong>&nbsp;，最开始你浏览的网页是&nbsp;<code>homepage</code>&nbsp;，你可以访问其他的网站&nbsp;<code>url</code>&nbsp;，也可以在浏览历史中后退&nbsp;<code>steps</code>&nbsp;步或前进&nbsp;<code>steps</code>&nbsp;步。</p>\\n\\n<p>请你实现&nbsp;<code>BrowserHistory</code> 类：</p>\\n\\n<ul>\\n\\t<li><code>BrowserHistory(string homepage)</code>&nbsp;，用&nbsp;<code>homepage</code>&nbsp;初始化浏览器类。</li>\\n\\t<li><code>void visit(string url)</code>&nbsp;从当前页跳转访问 <code>url</code> 对应的页面&nbsp;&nbsp;。执行此操作会把浏览历史前进的记录全部删除。</li>\\n\\t<li><code>string back(int steps)</code>&nbsp;在浏览历史中后退&nbsp;<code>steps</code>&nbsp;步。如果你只能在浏览历史中后退至多&nbsp;<code>x</code> 步且&nbsp;<code>steps &gt; x</code>&nbsp;，那么你只后退&nbsp;<code>x</code>&nbsp;步。请返回后退 <strong>至多</strong> <code>steps</code>&nbsp;步以后的&nbsp;<code>url</code>&nbsp;。</li>\\n\\t<li><code>string forward(int steps)</code>&nbsp;在浏览历史中前进&nbsp;<code>steps</code>&nbsp;步。如果你只能在浏览历史中前进至多&nbsp;<code>x</code>&nbsp;步且&nbsp;<code>steps &gt; x</code>&nbsp;，那么你只前进 <code>x</code>&nbsp;步。请返回前进&nbsp;<strong>至多</strong>&nbsp;<code>steps</code>步以后的 <code>url</code>&nbsp;。</li>\\n</ul>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例：</strong></p>\\n\\n<pre><strong>输入：</strong>\\n[&quot;BrowserHistory&quot;,&quot;visit&quot;,&quot;visit&quot;,&quot;visit&quot;,&quot;back&quot;,&quot;back&quot;,&quot;forward&quot;,&quot;visit&quot;,&quot;forward&quot;,&quot;back&quot;,&quot;back&quot;]\\n[[&quot;leetcode.com&quot;],[&quot;google.com&quot;],[&quot;facebook.com&quot;],[&quot;youtube.com&quot;],[1],[1],[1],[&quot;linkedin.com&quot;],[2],[2],[7]]\\n<strong>输出：</strong>\\n[null,null,null,null,&quot;facebook.com&quot;,&quot;google.com&quot;,&quot;facebook.com&quot;,null,&quot;linkedin.com&quot;,&quot;google.com&quot;,&quot;leetcode.com&quot;]\\n\\n<strong>解释：</strong>\\nBrowserHistory browserHistory = new BrowserHistory(&quot;leetcode.com&quot;);\\nbrowserHistory.visit(&quot;google.com&quot;);       // 你原本在浏览 &quot;leetcode.com&quot; 。访问 &quot;google.com&quot;\\nbrowserHistory.visit(&quot;facebook.com&quot;);     // 你原本在浏览 &quot;google.com&quot; 。访问 &quot;facebook.com&quot;\\nbrowserHistory.visit(&quot;youtube.com&quot;);      // 你原本在浏览 &quot;facebook.com&quot; 。访问 &quot;youtube.com&quot;\\nbrowserHistory.back(1);                   // 你原本在浏览 &quot;youtube.com&quot; ，后退到 &quot;facebook.com&quot; 并返回 &quot;facebook.com&quot;\\nbrowserHistory.back(1);                   // 你原本在浏览 &quot;facebook.com&quot; ，后退到 &quot;google.com&quot; 并返回 &quot;google.com&quot;\\nbrowserHistory.forward(1);                // 你原本在浏览 &quot;google.com&quot; ，前进到 &quot;facebook.com&quot; 并返回 &quot;facebook.com&quot;\\nbrowserHistory.visit(&quot;linkedin.com&quot;);     // 你原本在浏览 &quot;facebook.com&quot; 。 访问 &quot;linkedin.com&quot;\\nbrowserHistory.forward(2);                // 你原本在浏览 &quot;linkedin.com&quot; ，你无法前进任何步数。\\nbrowserHistory.back(2);                   // 你原本在浏览 &quot;linkedin.com&quot; ，后退两步依次先到 &quot;facebook.com&quot; ，然后到 &quot;google.com&quot; ，并返回 &quot;google.com&quot;\\nbrowserHistory.back(7);                   // 你原本在浏览 &quot;google.com&quot;， 你只能后退一步到 &quot;leetcode.com&quot; ，并返回 &quot;leetcode.com&quot;\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= homepage.length &lt;= 20</code></li>\\n\\t<li><code>1 &lt;= url.length &lt;= 20</code></li>\\n\\t<li><code>1 &lt;= steps &lt;= 100</code></li>\\n\\t<li><code>homepage</code> 和&nbsp;<code>url</code>&nbsp;都只包含&nbsp;&#39;.&#39; 或者小写英文字母。</li>\\n\\t<li>最多调用&nbsp;<code>5000</code>&nbsp;次&nbsp;<code>visit</code>，&nbsp;<code>back</code>&nbsp;和&nbsp;<code>forward</code>&nbsp;函数。</li>\\n</ul>\\n","title":"1472. 设计浏览器历史记录","relatedTags":["栈","设计","数组","链表","数据流","双向链表"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1472","slug":"1472-Design-Browser-History"}')}}]);