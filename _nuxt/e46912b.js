(window.webpackJsonp=window.webpackJsonp||[]).push([[279],{1077:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">grid</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> shortestPathBinaryMatrix = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">grid</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> N=grid.length\\n  <span class=\\"hljs-keyword\\">if</span>(N===<span class=\\"hljs-number\\">1</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">1</span>\\n  <span class=\\"hljs-keyword\\">if</span>(grid[N<span class=\\"hljs-number\\">-1</span>][N<span class=\\"hljs-number\\">-1</span>]===<span class=\\"hljs-number\\">1</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">-1</span>\\n  <span class=\\"hljs-keyword\\">if</span>(grid[<span class=\\"hljs-number\\">0</span>][<span class=\\"hljs-number\\">0</span>]===<span class=\\"hljs-number\\">1</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">-1</span>\\n  <span class=\\"hljs-keyword\\">let</span> used=<span class=\\"hljs-built_in\\">Array</span>(N).fill().map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span>=&gt;</span><span class=\\"hljs-built_in\\">Array</span>(N).fill(<span class=\\"hljs-literal\\">false</span>))\\n  used[<span class=\\"hljs-number\\">0</span>][<span class=\\"hljs-number\\">0</span>]=<span class=\\"hljs-literal\\">true</span>\\n  <span class=\\"hljs-keyword\\">let</span> arr=[[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">0</span>]]\\n  <span class=\\"hljs-keyword\\">let</span> step=<span class=\\"hljs-number\\">1</span>\\n  <span class=\\"hljs-keyword\\">while</span>(arr.length&gt;<span class=\\"hljs-number\\">0</span>){\\n    <span class=\\"hljs-keyword\\">let</span> len=arr.length\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;len;i++){\\n      <span class=\\"hljs-keyword\\">let</span> [x,y]=arr.shift()\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">-1</span>;j&lt;=<span class=\\"hljs-number\\">1</span>;j++){\\n        <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> k=<span class=\\"hljs-number\\">-1</span>;k&lt;=<span class=\\"hljs-number\\">1</span>;k++){\\n          <span class=\\"hljs-keyword\\">if</span>(j===<span class=\\"hljs-number\\">0</span> &amp;&amp; k===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">continue</span>\\n          <span class=\\"hljs-keyword\\">let</span> nx=x+j,ny=y+k\\n          <span class=\\"hljs-keyword\\">if</span>(nx&lt;<span class=\\"hljs-number\\">0</span> || ny&lt;<span class=\\"hljs-number\\">0</span> || nx&gt;=N || ny&gt;=N)<span class=\\"hljs-keyword\\">continue</span>\\n          <span class=\\"hljs-keyword\\">if</span>(grid[nx][ny]===<span class=\\"hljs-number\\">1</span>)<span class=\\"hljs-keyword\\">continue</span>\\n          <span class=\\"hljs-keyword\\">if</span>(nx===N<span class=\\"hljs-number\\">-1</span> &amp;&amp; ny===N<span class=\\"hljs-number\\">-1</span>)<span class=\\"hljs-keyword\\">return</span> step+<span class=\\"hljs-number\\">1</span>\\n          <span class=\\"hljs-keyword\\">if</span>(used[nx][ny])<span class=\\"hljs-keyword\\">continue</span>\\n          used[nx][ny]=<span class=\\"hljs-literal\\">true</span>\\n          arr.push([nx,ny])\\n        }\\n      }\\n    }\\n    step++\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">-1</span>\\n};\\n</code></pre>\\n"],"querySlug":"shortest-path-in-binary-matrix","created_at":"2019-06-16","timeArr":[2019,5,16,11,2,10,0],"hasThinking":false,"content":"<p>给你一个 <code>n x n</code> 的二进制矩阵 <code>grid</code> 中，返回矩阵中最短 <strong>畅通路径</strong> 的长度。如果不存在这样的路径，返回 <code>-1</code> 。</p>\\n\\n<p>二进制矩阵中的 畅通路径 是一条从 <strong>左上角</strong> 单元格（即，<code>(0, 0)</code>）到 右下角 单元格（即，<code>(n - 1, n - 1)</code>）的路径，该路径同时满足下述要求：</p>\\n\\n<ul>\\n\\t<li>路径途经的所有单元格都的值都是 <code>0</code> 。</li>\\n\\t<li>路径中所有相邻的单元格应当在 <strong>8 个方向之一</strong> 上连通（即，相邻两单元之间彼此不同且共享一条边或者一个角）。</li>\\n</ul>\\n\\n<p><strong>畅通路径的长度</strong> 是该路径途经的单元格总数。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2021/02/18/example1_1.png\\" style=\\"width: 500px; height: 234px;\\" />\\n<pre>\\n<strong>输入：</strong>grid = [[0,1],[1,0]]\\n<strong>输出：</strong>2\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2021/02/18/example2_1.png\\" style=\\"height: 216px; width: 500px;\\" />\\n<pre>\\n<strong>输入：</strong>grid = [[0,0,0],[1,1,0],[1,1,0]]\\n<strong>输出：</strong>4\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>grid = [[1,0,0],[1,1,0],[1,1,0]]\\n<strong>输出：</strong>-1\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>n == grid.length</code></li>\\n\\t<li><code>n == grid[i].length</code></li>\\n\\t<li><code>1 <= n <= 100</code></li>\\n\\t<li><code>grid[i][j]</code> 为 <code>0</code> 或 <code>1</code></li>\\n</ul>\\n","title":"1091. 二进制矩阵中的最短路径","relatedTags":["广度优先搜索","数组","矩阵"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1091","slug":"1091-Shortest-Path-in-Binary-Matrix"}')}}]);