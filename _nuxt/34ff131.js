(window.webpackJsonp=window.webpackJsonp||[]).push([[1207],{2005:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">S</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">shifts</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{string}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> shiftingLetters = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">S, shifts</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> aux=[],n=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=shifts.length<span class=\\"hljs-number\\">-1</span>;i&gt;=<span class=\\"hljs-number\\">0</span>;i--){\\n    aux[i]=n+shifts[i]\\n    n=aux[i]\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-string\\">\'\'</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;aux.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> code=S.charCodeAt(i)<span class=\\"hljs-number\\">-97</span>\\n    <span class=\\"hljs-keyword\\">let</span> moves=aux[i] % <span class=\\"hljs-number\\">26</span>\\n    <span class=\\"hljs-keyword\\">let</span> newCode=(code+moves) % <span class=\\"hljs-number\\">26</span>\\n    res+=<span class=\\"hljs-built_in\\">String</span>.fromCharCode(newCode+<span class=\\"hljs-number\\">97</span>)\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"shifting-letters","created_at":"2019-03-28","timeArr":[2019,2,28,16,16,26,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>由于每一次移动都要将之前所有的字母再次移动，因此先计算出每一个字母总共需要移动多少次。</p>\\n<p>因为是循环移动，对每一个字母，移动的次数实际为 <code>shift[i] % 26</code>。</p>\\n<p>对最后移动后的结果再次<code>% 26</code>。</p>\\n","content":"<p>有一个由小写字母组成的字符串 <code>S</code>，和一个整数数组 <code>shifts</code>。</p>\\n\\n<p>我们将字母表中的下一个字母称为原字母的 <em>移位</em>（由于字母表是环绕的， <code>&#39;z&#39;</code>&nbsp;将会变成&nbsp;<code>&#39;a&#39;</code>）。</p>\\n\\n<p>例如&middot;，<code>shift(&#39;a&#39;) = &#39;b&#39;</code>，&nbsp;<code>shift(&#39;t&#39;) = &#39;u&#39;</code>,， 以及&nbsp;<code>shift(&#39;z&#39;) = &#39;a&#39;</code>。</p>\\n\\n<p>对于每个&nbsp;<code>shifts[i] = x</code>&nbsp;， 我们会将 <code>S</code>&nbsp;中的前&nbsp;<code>i+1</code>&nbsp;个字母移位&nbsp;<code>x</code>&nbsp;次。</p>\\n\\n<p>返回将所有这些移位都应用到 <code>S</code> 后最终得到的字符串。</p>\\n\\n<p><strong>示例：</strong></p>\\n\\n<pre><strong>输入：</strong>S = &quot;abc&quot;, shifts = [3,5,9]\\n<strong>输出：</strong>&quot;rpl&quot;\\n<strong>解释： </strong>\\n我们以 &quot;abc&quot; 开始。\\n将 S 中的第 1 个字母移位 3 次后，我们得到 &quot;dbc&quot;。\\n再将 S 中的前 2 个字母移位 5 次后，我们得到 &quot;igc&quot;。\\n最后将 S 中的这 3 个字母移位 9 次后，我们得到答案 &quot;rpl&quot;。\\n</pre>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ol>\\n\\t<li><code>1 &lt;= S.length = shifts.length &lt;= 20000</code></li>\\n\\t<li><code>0 &lt;= shifts[i] &lt;= 10 ^ 9</code></li>\\n</ol>\\n","title":"848. 字母移位","relatedTags":["数组","字符串"],"difficult":"Middle","lang":["javascript"],"uniqueID":"848","slug":"848-Shifting-Letters"}')}}]);