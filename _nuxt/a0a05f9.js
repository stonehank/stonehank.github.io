(window.webpackJsonp=window.webpackJsonp||[]).push([[481],{1279:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">k</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> findMinFibonacciNumbers = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">k</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> f=[<span class=\\"hljs-number\\">1</span>,<span class=\\"hljs-number\\">1</span>]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">2</span>;i&lt;=<span class=\\"hljs-number\\">50</span>;i++){\\n      f[i]=f[i<span class=\\"hljs-number\\">-1</span>]+f[i<span class=\\"hljs-number\\">-2</span>]\\n  }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">bsFront</span>(<span class=\\"hljs-params\\">arr,n</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> lo=<span class=\\"hljs-number\\">0</span>,hi=arr.length<span class=\\"hljs-number\\">-1</span>\\n    <span class=\\"hljs-keyword\\">while</span>(lo&lt;hi){\\n      <span class=\\"hljs-keyword\\">let</span> mid=<span class=\\"hljs-built_in\\">Math</span>.ceil((lo+hi)/<span class=\\"hljs-number\\">2</span>)\\n      <span class=\\"hljs-keyword\\">if</span>(arr[mid]&gt;n)hi=mid<span class=\\"hljs-number\\">-1</span>\\n      <span class=\\"hljs-keyword\\">else</span> lo=mid\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> lo\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-number\\">1</span>\\n  <span class=\\"hljs-keyword\\">let</span> x=k\\n  <span class=\\"hljs-keyword\\">while</span>(!f.includes(x)){\\n    <span class=\\"hljs-keyword\\">let</span> idx=bsFront(f,x)\\n    x-=f[idx]\\n    res++\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n\\n</code></pre>\\n"],"querySlug":"find-the-minimum-number-of-fibonacci-numbers-whose-sum-is-k","created_at":"2020-04-18","timeArr":[2020,3,18,23,47,32,0],"hasThinking":false,"content":"<p>给你数字 <code>k</code>&nbsp;，请你返回和为&nbsp;<code>k</code>&nbsp;的斐波那契数字的最少数目，其中，每个斐波那契数字都可以被使用多次。</p>\\n\\n<p>斐波那契数字定义为：</p>\\n\\n<ul>\\n\\t<li>F<sub>1</sub> = 1</li>\\n\\t<li>F<sub>2</sub> = 1</li>\\n\\t<li>F<sub>n</sub> = F<sub>n-1</sub> + F<sub>n-2</sub>&nbsp;， 其中 n &gt; 2 。</li>\\n</ul>\\n\\n<p>数据保证对于给定的 <code>k</code>&nbsp;，一定能找到可行解。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>k = 7\\n<strong>输出：</strong>2 \\n<strong>解释：</strong>斐波那契数字为：1，1，2，3，5，8，13，&hellip;&hellip;\\n对于 k = 7 ，我们可以得到 2 + 5 = 7 。</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>k = 10\\n<strong>输出：</strong>2 \\n<strong>解释：</strong>对于 k = 10 ，我们可以得到 2 + 8 = 10 。\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>k = 19\\n<strong>输出：</strong>3 \\n<strong>解释：</strong>对于 k = 19 ，我们可以得到 1 + 5 + 13 = 19 。\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= k &lt;= 10^9</code></li>\\n</ul>\\n","title":"1414. 和为 K 的最少斐波那契数字数目","relatedTags":["贪心"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1414","slug":"1414-Find-the-Minimum-Number-of-Fibonacci-Numbers-Whose-Sum-Is-K"}')}}]);