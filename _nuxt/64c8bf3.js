(window.webpackJsonp=window.webpackJsonp||[]).push([[1373],{2171:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{TreeNode}</span> <span class=\\"hljs-variable\\">root</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">val</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{TreeNode}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> insertIntoMaxTree = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">root, val</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(!root)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-keyword\\">new</span> TreeNode(val)\\n  <span class=\\"hljs-keyword\\">if</span>(val&gt;root.val){\\n    <span class=\\"hljs-keyword\\">let</span> newRoot=<span class=\\"hljs-keyword\\">new</span> TreeNode(val)\\n    newRoot.left=root\\n    <span class=\\"hljs-keyword\\">return</span> newRoot\\n  }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(val&lt;root.val){\\n    root.right=insertIntoMaxTree(root.right,val)\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> root\\n};\\n</code></pre>\\n"],"querySlug":"maximum-binary-tree-ii","created_at":"2019-02-24","timeArr":[2019,1,24,11,1,16,0],"hasThinking":false,"content":"<p>最大树定义：一个树，其中每个节点的值都大于其子树中的任何其他值。</p>\\n\\n<p>给出最大树的根节点 <code>root</code>。</p>\\n\\n<p>就像<a href=\\"https://leetcode-cn.com/problems/maximum-binary-tree/\\">之前的问题</a>那样，给定的树是从列表 <code>A</code>（<code>root = Construct(A)</code>）递归地使用下述 <code>Construct(A)</code> 例程构造的：</p>\\n\\n<ul>\\n\\t<li>如果 <code>A</code> 为空，返回 <code>null</code></li>\\n\\t<li>否则，令 <code>A[i]</code> 作为 A 的最大元素。创建一个值为 <code>A[i]</code> 的根节点 <code>root</code></li>\\n\\t<li><code>root</code> 的左子树将被构建为 <code>Construct([A[0], A[1], ..., A[i-1]])</code></li>\\n\\t<li><code>root</code> 的右子树将被构建为 <code>Construct([A[i+1], A[i+2], ..., A[A.length - 1]])</code></li>\\n\\t<li>返回 <code>root</code></li>\\n</ul>\\n\\n<p>请注意，我们没有直接给定 A，只有一个根节点 <code>root = Construct(A)</code>.</p>\\n\\n<p>假设 <code>B</code> 是 <code>A</code> 的副本，并在末尾附加值 <code>val</code>。题目数据保证 <code>B</code> 中的值是不同的。</p>\\n\\n<p>返回 <code>Construct(B)</code>。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<p><strong><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/23/maximum-binary-tree-1-1.png\\" style=\\"height: 160px; width: 159px;\\" /><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/23/maximum-binary-tree-1-2.png\\" style=\\"height: 160px; width: 169px;\\" /></strong></p>\\n\\n<pre>\\n<strong>输入：</strong>root = [4,1,3,null,null,2], val = 5\\n<strong>输出：</strong>[5,4,null,1,3,null,null,2]\\n<strong>解释：</strong>A = [1,4,2,3], B = [1,4,2,3,5]\\n</pre>\\n\\n<p><strong>示例 2：<br />\\n<img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/23/maximum-binary-tree-2-1.png\\" style=\\"height: 160px; width: 180px;\\" /><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/23/maximum-binary-tree-2-2.png\\" style=\\"height: 160px; width: 214px;\\" /></strong></p>\\n\\n<pre>\\n<strong>输入：</strong>root = [5,2,4,null,1], val = 3\\n<strong>输出：</strong>[5,2,4,null,1,null,3]\\n<strong>解释：</strong>A = [2,1,5,4], B = [2,1,5,4,3]\\n</pre>\\n\\n<p><strong>示例 3：<br />\\n<img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/23/maximum-binary-tree-3-1.png\\" style=\\"height: 160px; width: 180px;\\" /><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/23/maximum-binary-tree-3-2.png\\" style=\\"height: 160px; width: 201px;\\" /></strong></p>\\n\\n<pre>\\n<strong>输入：</strong>root = [5,2,3,null,1], val = 4\\n<strong>输出：</strong>[5,2,4,null,1,3]\\n<strong>解释：</strong>A = [2,1,5,3], B = [2,1,5,3,4]\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= B.length <= 100</code></li>\\n</ul>\\n\\n<p> </p>\\n\\n<p> </p>\\n","title":"998. 最大二叉树 II","relatedTags":["树","二叉树"],"difficult":"Middle","lang":["javascript"],"uniqueID":"998","slug":"998-Maximum-Binary-Tree-II"}')}}]);