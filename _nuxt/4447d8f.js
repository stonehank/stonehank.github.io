(window.webpackJsonp=window.webpackJsonp||[]).push([[200],{682:function(n){n.exports=JSON.parse('{"content":"<p>先上源码：</p>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">// 将(fun1,fun2,fun3)转换成fun1(fun2(fun3()))</span>\\n<span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">default</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">compose</span>(<span class=\\"hljs-params\\">...funcs</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span> (funcs.length === <span class=\\"hljs-number\\">0</span>) {\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-function\\"><span class=\\"hljs-params\\">arg</span> =&gt;</span> arg\\n  }\\n\\n  <span class=\\"hljs-keyword\\">if</span> (funcs.length === <span class=\\"hljs-number\\">1</span>) {\\n    <span class=\\"hljs-keyword\\">return</span> funcs[<span class=\\"hljs-number\\">0</span>]\\n  }\\n  <span class=\\"hljs-comment\\">// 重点理解的一句 这里的reduce内部还返回了一个函数</span>\\n  <span class=\\"hljs-keyword\\">return</span> funcs.reduce(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">a, b</span>) =&gt;</span> <span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">...args</span>) =&gt;</span> a(b(...args)))\\n}</code></pre></code></pre>\\n<p>重点看一句就够了：<code>return funcs.reduce((a, b) =&gt; (...args) =&gt; a(b(...args)))</code></p>\\n<p>现在我们先假设一个数组，有3个函数，分别是x,y,z</p>\\n<p>那么<code>compose([x,y,z])</code>发生什么了，接下来就一步一步解释</p>\\n<ol>\\n<li>变成reduce模式：<code>[x,y,z].reduce((a, b) =&gt; (...args) =&gt; a(b(...args)))</code></li>\\n<li>reduce第一次执行，a为x，b为y，reduce内部返回<code>(...args)=&gt;x(y(...args))</code></li>\\n<li>reduce第二次执行，因为会将上一次的返回值作为a，这次b为z，因此将z(...args)套进a的参数，变成：<code>(...args)=&gt;x(y(z(...args)))</code></li>\\n<li>执行结束，最后compose就返回了这么个东西<code>(...args)=&gt;x(y(z(...args)))</code></li>\\n</ol>\\n<p>因此，如果外部调用是这样的<code>compose(...)(一些参数)</code>，那么这里的参数将会套进上面返回值的<code>(...args)</code>，最终变成<code>x(y(z(一些参数)))</code></p>\\n","toc":[],"relatedTags":null,"created_at":"2018-06-13","timeArr":[2018,5,13,0,0,0,0],"title":"源码阅读-学习redux的compose","uuid":"bc4cf19b8dcd0b9fd7c436d8de5961ecf9099175","summary":"<p>先上源码：</p>\\n<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">// 将(fun1,fun2,fun3)转换成fun1(fun2(fun3()))</span>\\n<span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">default</span> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">compose</span>(<span class=\\"hljs-params\\">...funcs</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span> (funcs.length === <span class=\\"hljs-number\\">0</span>) {\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-function\\"><span class=\\"hljs-params\\">arg</span> =&gt;</span> arg\\n  }\\n\\n  <span class=\\"hljs-keyword\\">if</span> (f...</code></pre>","slug":"yuan-ma-yue-du-xue-xi-redux-de-compose","sha":"1c31d66483e93c9656f2d42ae1164c3b016501b8"}')}}]);