(window.webpackJsonp=window.webpackJsonp||[]).push([[355],{1153:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">grid</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> minimumMoves = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">grid</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> n=grid.length\\n  <span class=\\"hljs-keyword\\">let</span> hash={}\\n  <span class=\\"hljs-keyword\\">let</span> arr=[[[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">0</span>],[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">1</span>]]]\\n  <span class=\\"hljs-keyword\\">let</span> step=<span class=\\"hljs-number\\">0</span>\\n  \\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">isVer</span>(<span class=\\"hljs-params\\">p1,p2</span>)</span>{\\n    <span class=\\"hljs-keyword\\">return</span> p1[<span class=\\"hljs-number\\">1</span>]===p2[<span class=\\"hljs-number\\">1</span>] &amp;&amp; p2[<span class=\\"hljs-number\\">0</span>]-p1[<span class=\\"hljs-number\\">0</span>]===<span class=\\"hljs-number\\">1</span>\\n  }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">isHor</span>(<span class=\\"hljs-params\\">p1,p2</span>)</span>{\\n    <span class=\\"hljs-keyword\\">return</span> p1[<span class=\\"hljs-number\\">0</span>]===p2[<span class=\\"hljs-number\\">0</span>] &amp;&amp; p2[<span class=\\"hljs-number\\">1</span>]-p1[<span class=\\"hljs-number\\">1</span>]===<span class=\\"hljs-number\\">1</span>\\n  }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">canDown</span>(<span class=\\"hljs-params\\">p1,p2</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(p1[<span class=\\"hljs-number\\">0</span>]&gt;=n<span class=\\"hljs-number\\">-1</span> || p2[<span class=\\"hljs-number\\">0</span>]&gt;=n<span class=\\"hljs-number\\">-1</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n    <span class=\\"hljs-keyword\\">if</span>(isVer(p1,p2)){\\n      <span class=\\"hljs-keyword\\">return</span> grid[p2[<span class=\\"hljs-number\\">0</span>]+<span class=\\"hljs-number\\">1</span>][p2[<span class=\\"hljs-number\\">1</span>]]===<span class=\\"hljs-number\\">0</span>\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      <span class=\\"hljs-keyword\\">return</span> grid[p1[<span class=\\"hljs-number\\">0</span>]+<span class=\\"hljs-number\\">1</span>][p1[<span class=\\"hljs-number\\">1</span>]]===<span class=\\"hljs-number\\">0</span> &amp;&amp; grid[p2[<span class=\\"hljs-number\\">0</span>]+<span class=\\"hljs-number\\">1</span>][p2[<span class=\\"hljs-number\\">1</span>]]===<span class=\\"hljs-number\\">0</span>\\n    }\\n  }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">canRight</span>(<span class=\\"hljs-params\\">p1,p2</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(p1[<span class=\\"hljs-number\\">1</span>]&gt;=n<span class=\\"hljs-number\\">-1</span> || p2[<span class=\\"hljs-number\\">1</span>]&gt;=n<span class=\\"hljs-number\\">-1</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n    <span class=\\"hljs-keyword\\">if</span>(isVer(p1,p2)){\\n      <span class=\\"hljs-keyword\\">return</span> grid[p1[<span class=\\"hljs-number\\">0</span>]][p1[<span class=\\"hljs-number\\">1</span>]+<span class=\\"hljs-number\\">1</span>]===<span class=\\"hljs-number\\">0</span> &amp;&amp; grid[p2[<span class=\\"hljs-number\\">0</span>]][p2[<span class=\\"hljs-number\\">1</span>]+<span class=\\"hljs-number\\">1</span>]===<span class=\\"hljs-number\\">0</span>\\n    }<span class=\\"hljs-keyword\\">else</span> {\\n      <span class=\\"hljs-keyword\\">return</span> grid[p2[<span class=\\"hljs-number\\">0</span>]][p2[<span class=\\"hljs-number\\">1</span>]+<span class=\\"hljs-number\\">1</span>]===<span class=\\"hljs-number\\">0</span>\\n    }\\n  }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">canClock</span>(<span class=\\"hljs-params\\">p1,p2</span>)</span>{\\n    <span class=\\"hljs-keyword\\">return</span> isHor(p1,p2) &amp;&amp; canDown(p1,p2)\\n  }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">canCountClock</span>(<span class=\\"hljs-params\\">p1,p2</span>)</span>{\\n    <span class=\\"hljs-keyword\\">return</span> isVer(p1,p2) &amp;&amp; canRight(p1,p2)\\n  }\\n  \\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">goR</span>(<span class=\\"hljs-params\\">p1,p2</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(isVer(p1,p2)){\\n      <span class=\\"hljs-keyword\\">return</span> [[p1[<span class=\\"hljs-number\\">0</span>],p1[<span class=\\"hljs-number\\">1</span>]+<span class=\\"hljs-number\\">1</span>],[p2[<span class=\\"hljs-number\\">0</span>],p2[<span class=\\"hljs-number\\">1</span>]+<span class=\\"hljs-number\\">1</span>]]\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      <span class=\\"hljs-keyword\\">return</span> [p2.slice(),[p2[<span class=\\"hljs-number\\">0</span>],p2[<span class=\\"hljs-number\\">1</span>]+<span class=\\"hljs-number\\">1</span>]]\\n    }\\n  }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">goD</span>(<span class=\\"hljs-params\\">p1,p2</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(isVer(p1,p2)){\\n      <span class=\\"hljs-keyword\\">return</span> [p2.slice(),[p2[<span class=\\"hljs-number\\">0</span>]+<span class=\\"hljs-number\\">1</span>,p2[<span class=\\"hljs-number\\">1</span>]]]\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      <span class=\\"hljs-keyword\\">return</span> [[p1[<span class=\\"hljs-number\\">0</span>]+<span class=\\"hljs-number\\">1</span>,p1[<span class=\\"hljs-number\\">1</span>]],[p2[<span class=\\"hljs-number\\">0</span>]+<span class=\\"hljs-number\\">1</span>,p2[<span class=\\"hljs-number\\">1</span>]]]\\n    }    \\n  }\\n  \\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">clock</span>(<span class=\\"hljs-params\\">p1,p2</span>)</span>{\\n    <span class=\\"hljs-keyword\\">return</span> [p1.slice(),[p2[<span class=\\"hljs-number\\">0</span>]+<span class=\\"hljs-number\\">1</span>,p2[<span class=\\"hljs-number\\">1</span>]<span class=\\"hljs-number\\">-1</span>]]\\n  }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">countClock</span>(<span class=\\"hljs-params\\">p1,p2</span>)</span>{\\n    <span class=\\"hljs-keyword\\">return</span> [p1.slice(),[p2[<span class=\\"hljs-number\\">0</span>]<span class=\\"hljs-number\\">-1</span>,p2[<span class=\\"hljs-number\\">1</span>]+<span class=\\"hljs-number\\">1</span>]]\\n  }\\n  \\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">checkIsDest</span>(<span class=\\"hljs-params\\">p1,p2</span>)</span>{\\n    <span class=\\"hljs-comment\\">// console.log(p1,p2,n)</span>\\n    <span class=\\"hljs-keyword\\">return</span> p1[<span class=\\"hljs-number\\">0</span>]===n<span class=\\"hljs-number\\">-1</span> &amp;&amp; p1[<span class=\\"hljs-number\\">1</span>]===n<span class=\\"hljs-number\\">-2</span> &amp;&amp; p2[<span class=\\"hljs-number\\">0</span>]===n<span class=\\"hljs-number\\">-1</span> &amp;&amp; p2[<span class=\\"hljs-number\\">1</span>]===n<span class=\\"hljs-number\\">-1</span>\\n  }\\n  \\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">checkIsDupli</span>(<span class=\\"hljs-params\\">p1,p2</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(hash[p1.join(<span class=\\"hljs-string\\">\'-\'</span>)+<span class=\\"hljs-string\\">\' \'</span>+p2.join(<span class=\\"hljs-string\\">\'-\'</span>)]==<span class=\\"hljs-literal\\">null</span>){\\n      hash[p1.join(<span class=\\"hljs-string\\">\'-\'</span>)+<span class=\\"hljs-string\\">\' \'</span>+p2.join(<span class=\\"hljs-string\\">\'-\'</span>)]=<span class=\\"hljs-literal\\">true</span>\\n      <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n    }\\n  }\\n  hash[arr[<span class=\\"hljs-number\\">0</span>][<span class=\\"hljs-number\\">0</span>].join(<span class=\\"hljs-string\\">\'-\'</span>)+<span class=\\"hljs-string\\">\' \'</span>+arr[<span class=\\"hljs-number\\">0</span>][<span class=\\"hljs-number\\">1</span>].join(<span class=\\"hljs-string\\">\'-\'</span>)]=<span class=\\"hljs-literal\\">true</span>\\n  <span class=\\"hljs-keyword\\">while</span>(arr.length&gt;<span class=\\"hljs-number\\">0</span>){\\n    <span class=\\"hljs-keyword\\">let</span> len=arr.length\\n    step++\\n    <span class=\\"hljs-comment\\">// console.log(arr)</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;len;i++){\\n      <span class=\\"hljs-keyword\\">let</span> [p1,p2]=arr.shift()\\n      <span class=\\"hljs-keyword\\">if</span>(canRight(p1,p2)){\\n        <span class=\\"hljs-keyword\\">let</span> [n1,n2]=goR(p1,p2)\\n        <span class=\\"hljs-keyword\\">if</span>(checkIsDest(n1,n2))<span class=\\"hljs-keyword\\">return</span> step\\n        <span class=\\"hljs-keyword\\">if</span>(!checkIsDupli(n1,n2)){\\n          arr.push([n1,n2])\\n        }\\n      }\\n      <span class=\\"hljs-keyword\\">if</span>(canDown(p1,p2)){\\n        <span class=\\"hljs-keyword\\">let</span> [n1,n2]=goD(p1,p2)\\n        <span class=\\"hljs-keyword\\">if</span>(checkIsDest(n1,n2))<span class=\\"hljs-keyword\\">return</span> step\\n        <span class=\\"hljs-keyword\\">if</span>(!checkIsDupli(n1,n2))arr.push([n1,n2])\\n      }\\n      <span class=\\"hljs-keyword\\">if</span>(canClock(p1,p2)){\\n        <span class=\\"hljs-keyword\\">let</span> [n1,n2]=clock(p1,p2)\\n        <span class=\\"hljs-keyword\\">if</span>(checkIsDest(n1,n2))<span class=\\"hljs-keyword\\">return</span> step\\n        <span class=\\"hljs-keyword\\">if</span>(!checkIsDupli(n1,n2))arr.push([n1,n2])\\n      }\\n      <span class=\\"hljs-keyword\\">if</span>(canCountClock(p1,p2)){\\n        <span class=\\"hljs-keyword\\">let</span> [n1,n2]=countClock(p1,p2)\\n        <span class=\\"hljs-keyword\\">if</span>(checkIsDest(n1,n2))<span class=\\"hljs-keyword\\">return</span> step\\n        <span class=\\"hljs-keyword\\">if</span>(!checkIsDupli(n1,n2))arr.push([n1,n2])\\n      }\\n    }\\n    \\n  }\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">-1</span>\\n  \\n};\\n</code></pre>\\n"],"querySlug":"minimum-moves-to-reach-target-with-rotations","created_at":"2019-09-29","timeArr":[2019,8,29,12,7,4,0],"hasThinking":false,"content":"<p>你还记得那条风靡全球的贪吃蛇吗？</p>\\n\\n<p>我们在一个&nbsp;<code>n*n</code>&nbsp;的网格上构建了新的迷宫地图，蛇的长度为 2，也就是说它会占去两个单元格。蛇会从左上角（<code>(0, 0)</code>&nbsp;和&nbsp;<code>(0, 1)</code>）开始移动。我们用 <code>0</code> 表示空单元格，用 1 表示障碍物。蛇需要移动到迷宫的右下角（<code>(n-1, n-2)</code>&nbsp;和&nbsp;<code>(n-1, n-1)</code>）。</p>\\n\\n<p>每次移动，蛇可以这样走：</p>\\n\\n<ul>\\n\\t<li>如果没有障碍，则向右移动一个单元格。并仍然保持身体的水平／竖直状态。</li>\\n\\t<li>如果没有障碍，则向下移动一个单元格。并仍然保持身体的水平／竖直状态。</li>\\n\\t<li>如果它处于水平状态并且其下面的两个单元都是空的，就顺时针旋转 90 度。蛇从（<code>(r, c)</code>、<code>(r, c+1)</code>）移动到 （<code>(r, c)</code>、<code>(r+1, c)</code>）。<br>\\n\\t<img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/09/28/image-2.png\\" style=\\"height: 134px; width: 300px;\\"></li>\\n\\t<li>如果它处于竖直状态并且其右面的两个单元都是空的，就逆时针旋转 90 度。蛇从（<code>(r, c)</code>、<code>(r+1, c)</code>）移动到（<code>(r, c)</code>、<code>(r, c+1)</code>）。<br>\\n\\t<img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/09/28/image-1.png\\" style=\\"height: 121px; width: 300px;\\"></li>\\n</ul>\\n\\n<p>返回蛇抵达目的地所需的最少移动次数。</p>\\n\\n<p>如果无法到达目的地，请返回&nbsp;<code>-1</code>。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<p><strong><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/09/28/image.png\\" style=\\"height: 439px; width: 400px;\\"></strong></p>\\n\\n<pre><strong>输入：</strong>grid = [[0,0,0,0,0,1],\\n               [1,1,0,0,1,0],\\n&nbsp;              [0,0,0,0,1,1],\\n&nbsp;              [0,0,1,0,1,0],\\n&nbsp;              [0,1,1,0,0,0],\\n&nbsp;              [0,1,1,0,0,0]]\\n<strong>输出：</strong>11\\n<strong>解释：\\n</strong>一种可能的解决方案是 [右, 右, 顺时针旋转, 右, 下, 下, 下, 下, 逆时针旋转, 右, 下]。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>grid = [[0,0,1,1,1,1],\\n&nbsp;              [0,0,0,0,1,1],\\n&nbsp;              [1,1,0,0,0,1],\\n&nbsp;              [1,1,1,0,0,1],\\n&nbsp;              [1,1,1,0,0,1],\\n&nbsp;              [1,1,1,0,0,0]]\\n<strong>输出：</strong>9\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>2 &lt;= n &lt;= 100</code></li>\\n\\t<li><code>0 &lt;= grid[i][j] &lt;= 1</code></li>\\n\\t<li>蛇保证从空单元格开始出发。</li>\\n</ul>\\n","title":"1210. 穿过迷宫的最少移动次数","relatedTags":["广度优先搜索","数组","矩阵"],"difficult":"Hard","lang":["javascript"],"uniqueID":"1210","slug":"1210-Minimum-Moves-to-Reach-Target-with-Rotations"}')}}]);