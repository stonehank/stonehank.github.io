(window.webpackJsonp=window.webpackJsonp||[]).push([[1377],{2175:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">command</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">obstacles</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">x</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">y</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{boolean}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> robot = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">command, obstacles, x, y</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> len=command.length\\n  <span class=\\"hljs-keyword\\">let</span> moves={\\n    <span class=\\"hljs-attr\\">U</span>:[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">1</span>],\\n    <span class=\\"hljs-attr\\">R</span>:[<span class=\\"hljs-number\\">1</span>,<span class=\\"hljs-number\\">0</span>]\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> allDx=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">let</span> allDy=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> c <span class=\\"hljs-keyword\\">of</span> command){\\n    allDx+=moves[c][<span class=\\"hljs-number\\">0</span>]\\n    allDy+=moves[c][<span class=\\"hljs-number\\">1</span>]\\n  }\\n  \\n  <span class=\\"hljs-keyword\\">let</span> xStep=<span class=\\"hljs-built_in\\">Math</span>.floor(x/allDx)\\n  <span class=\\"hljs-keyword\\">let</span> yStep=<span class=\\"hljs-built_in\\">Math</span>.floor(y/allDy)\\n  <span class=\\"hljs-keyword\\">let</span> leastStep=<span class=\\"hljs-built_in\\">Math</span>.min(xStep,yStep)\\n  <span class=\\"hljs-keyword\\">let</span> start=[leastStep*allDx,leastStep*allDy]\\n  <span class=\\"hljs-keyword\\">let</span> res=moveOnce(start,[<span class=\\"hljs-literal\\">null</span>,<span class=\\"hljs-literal\\">null</span>])\\n  <span class=\\"hljs-comment\\">// console.log(res,start)</span>\\n  <span class=\\"hljs-keyword\\">if</span>(res!==<span class=\\"hljs-number\\">1</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n  \\n  \\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;obstacles.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> [ox,oy]=obstacles[i]\\n    <span class=\\"hljs-keyword\\">if</span>(ox&gt;x || oy&gt;y)<span class=\\"hljs-keyword\\">continue</span>\\n    <span class=\\"hljs-keyword\\">let</span> xStep=<span class=\\"hljs-built_in\\">Math</span>.floor(ox/allDx)\\n    <span class=\\"hljs-keyword\\">let</span> yStep=<span class=\\"hljs-built_in\\">Math</span>.floor(oy/allDy)\\n    <span class=\\"hljs-keyword\\">let</span> leastStep=<span class=\\"hljs-built_in\\">Math</span>.min(xStep,yStep)\\n    <span class=\\"hljs-keyword\\">let</span> start=[leastStep*allDx,leastStep*allDy]\\n    <span class=\\"hljs-keyword\\">let</span> res=moveOnce(start,obstacles[i])\\n    <span class=\\"hljs-keyword\\">if</span>(res===<span class=\\"hljs-number\\">-1</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n  }\\n  \\n\\n  \\n  \\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n  \\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">moveOnce</span>(<span class=\\"hljs-params\\">point,obsP</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> [cx,cy]=point\\n    <span class=\\"hljs-keyword\\">let</span> [ox,oy]=obsP\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;len;i++){\\n      <span class=\\"hljs-keyword\\">if</span>(cx===ox &amp;&amp; cy===oy)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">-1</span>\\n      <span class=\\"hljs-keyword\\">if</span>(cx===x &amp;&amp; cy===y)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">1</span>\\n      <span class=\\"hljs-keyword\\">let</span> [dx,dy]=moves[command[i]]\\n      <span class=\\"hljs-keyword\\">let</span> nx=dx+cx\\n      <span class=\\"hljs-keyword\\">let</span> ny=dy+cy\\n      <span class=\\"hljs-keyword\\">if</span>(nx&gt;x || ny&gt;y)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">-1</span>\\n      cx=nx\\n      cy=ny\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>\\n  }\\n\\n};\\n</code></pre>\\n"],"querySlug":"programmable-robot","created_at":"2019-09-24","timeArr":[2019,8,24,22,38,42,0],"hasThinking":false,"content":"<p>力扣团队买了一个可编程机器人，机器人初始位置在原点<code>(0, 0)</code>。小伙伴事先给机器人输入一串指令<code>command</code>，机器人就会<strong>无限循环</strong>这条指令的步骤进行移动。指令有两种：</p>\\n\\n<ol>\\n\\t<li><code>U</code>: 向<code>y</code>轴正方向移动一格</li>\\n\\t<li><code>R</code>: 向<code>x</code>轴正方向移动一格。</li>\\n</ol>\\n\\n<p>不幸的是，在 xy 平面上还有一些障碍物，他们的坐标用<code>obstacles</code>表示。机器人一旦碰到障碍物就会被<strong>损毁</strong>。</p>\\n\\n<p>给定终点坐标<code>(x, y)</code>，返回机器人能否<strong>完好</strong>地到达终点。如果能，返回<code>true</code>；否则返回<code>false</code>。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>command = &quot;URR&quot;, obstacles = [], x = 3, y = 2\\n<strong>输出：</strong>true\\n<strong>解释：</strong>U(0, 1) -&gt; R(1, 1) -&gt; R(2, 1) -&gt; U(2, 2) -&gt; R(3, 2)。</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>command = &quot;URR&quot;, obstacles = [[2, 2]], x = 3, y = 2\\n<strong>输出：</strong>false\\n<strong>解释：</strong>机器人在到达终点前会碰到(2, 2)的障碍物。</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>command = &quot;URR&quot;, obstacles = [[4, 2]], x = 3, y = 2\\n<strong>输出：</strong>true\\n<strong>解释：</strong>到达终点后，再碰到障碍物也不影响返回结果。</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>限制：</strong></p>\\n\\n<ol>\\n\\t<li><code>2 &lt;= command的长度 &lt;= 1000</code></li>\\n\\t<li><code>command</code>由<code>U，R</code>构成，且至少有一个<code>U</code>，至少有一个<code>R</code></li>\\n\\t<li><code>0 &lt;= x &lt;= 1e9, 0 &lt;= y &lt;= 1e9</code></li>\\n\\t<li><code>0 &lt;= obstacles的长度 &lt;= 1000</code></li>\\n\\t<li><code>obstacles[i]</code>不为原点或者终点</li>\\n</ol>\\n","title":"LCP 03. 机器人大冒险","relatedTags":["数组","哈希表","模拟"],"difficult":"Middle","lang":["javascript"],"uniqueID":"LCP 03","slug":"LCP-03-Programmable-Robot"}')}}]);