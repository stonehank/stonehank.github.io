(window.webpackJsonp=window.webpackJsonp||[]).push([[1118],{1916:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">N</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">mines</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> orderOfLargestPlusSign = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">N, mines</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> limit=<span class=\\"hljs-built_in\\">Math</span>.ceil(N/<span class=\\"hljs-number\\">2</span>)\\n  <span class=\\"hljs-keyword\\">let</span> graph=<span class=\\"hljs-built_in\\">Array</span>(N).fill().map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span>=&gt;</span><span class=\\"hljs-built_in\\">Array</span>(N).fill(<span class=\\"hljs-number\\">1</span>))\\n  <span class=\\"hljs-keyword\\">let</span> visited=<span class=\\"hljs-built_in\\">Array</span>(N).fill().map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span>=&gt;</span><span class=\\"hljs-built_in\\">Array</span>(N).fill(<span class=\\"hljs-literal\\">false</span>))\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> [x,y] <span class=\\"hljs-keyword\\">of</span> mines)graph[x][y]=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">let</span> maxLen=<span class=\\"hljs-number\\">0</span>,moves=[[<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">0</span>],[<span class=\\"hljs-number\\">1</span>,<span class=\\"hljs-number\\">0</span>],[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">-1</span>],[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">1</span>]]\\n  <span class=\\"hljs-keyword\\">let</span> arr=[],mid=<span class=\\"hljs-built_in\\">Math</span>.floor(N/<span class=\\"hljs-number\\">2</span>)\\n  <span class=\\"hljs-keyword\\">if</span>(N % <span class=\\"hljs-number\\">2</span>===<span class=\\"hljs-number\\">0</span>){\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">-1</span>;i&lt;=<span class=\\"hljs-number\\">0</span>;i++){\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">-1</span>;j&lt;=<span class=\\"hljs-number\\">0</span>;j++){\\n        arr.push([mid+i,mid+j])\\n        visited[mid+i][mid+j]=<span class=\\"hljs-literal\\">true</span>\\n      }\\n    }\\n  }<span class=\\"hljs-keyword\\">else</span>{\\n    arr.push([mid,mid])\\n    visited[mid][mid]=<span class=\\"hljs-literal\\">true</span>\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> targetLen=limit\\n  <span class=\\"hljs-keyword\\">while</span>(arr.length&gt;<span class=\\"hljs-number\\">0</span>){\\n   <span class=\\"hljs-keyword\\">let</span> len=arr.length\\n   <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;len;i++){\\n     <span class=\\"hljs-keyword\\">let</span> [x,y]=arr.shift()\\n     <span class=\\"hljs-keyword\\">if</span>(graph[x][y]!==<span class=\\"hljs-number\\">0</span>){\\n       <span class=\\"hljs-keyword\\">let</span> valid=<span class=\\"hljs-literal\\">true</span>,curLen=<span class=\\"hljs-number\\">0</span>\\n       <span class=\\"hljs-keyword\\">while</span>(valid){\\n         curLen++\\n         <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> [dx,dy] <span class=\\"hljs-keyword\\">of</span> moves){\\n           <span class=\\"hljs-keyword\\">let</span> nx=dx*curLen+x,ny=dy*curLen+y\\n           <span class=\\"hljs-keyword\\">if</span>(nx&lt;<span class=\\"hljs-number\\">0</span> || ny&lt;<span class=\\"hljs-number\\">0</span> || nx&gt;=N || ny&gt;=N || graph[nx][ny]===<span class=\\"hljs-number\\">0</span>){\\n             valid=<span class=\\"hljs-literal\\">false</span>\\n             <span class=\\"hljs-keyword\\">break</span>\\n           }\\n         }\\n       }\\n       <span class=\\"hljs-keyword\\">if</span>(curLen===targetLen){\\n         <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-built_in\\">Math</span>.max(maxLen,curLen)\\n       }<span class=\\"hljs-keyword\\">else</span>{\\n         maxLen=<span class=\\"hljs-built_in\\">Math</span>.max(maxLen,curLen)\\n       }\\n     }\\n     <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">-1</span>;j&lt;=<span class=\\"hljs-number\\">1</span>;j++){\\n       <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> k=<span class=\\"hljs-number\\">-1</span>;k&lt;=<span class=\\"hljs-number\\">1</span>;k++){\\n         <span class=\\"hljs-keyword\\">if</span>(j===<span class=\\"hljs-number\\">0</span> &amp;&amp; k===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">continue</span>\\n          <span class=\\"hljs-keyword\\">let</span> ax=j+x,ay=k+y\\n          <span class=\\"hljs-keyword\\">if</span>(ax&lt;<span class=\\"hljs-number\\">0</span> || ay&lt;<span class=\\"hljs-number\\">0</span> || ax&gt;=N || ay&gt;=N )<span class=\\"hljs-keyword\\">continue</span>\\n         <span class=\\"hljs-keyword\\">if</span>(visited[ax][ay])<span class=\\"hljs-keyword\\">continue</span>\\n         visited[ax][ay]=<span class=\\"hljs-literal\\">true</span>\\n         arr.push([ax,ay])\\n       }\\n     }\\n   }\\n    targetLen--\\n    <span class=\\"hljs-keyword\\">if</span>(targetLen&lt;=maxLen)<span class=\\"hljs-keyword\\">return</span> maxLen\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> maxLen\\n};\\n</code></pre>\\n","<pre class=\\"hljs\\"><code><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Solution</span><span class=\\"hljs-params\\">(object)</span>:</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">orderOfLargestPlusSign</span><span class=\\"hljs-params\\">(self, N, mines)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type N: int\\n        :type mines: List[List[int]]\\n        :rtype: int\\n        \\"\\"\\"</span>\\n        graph=[[<span class=\\"hljs-number\\">1</span>]*N <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(N)]\\n        visited=[[<span class=\\"hljs-literal\\">False</span>]*N <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(N)]\\n        moves=[[<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">0</span>],[<span class=\\"hljs-number\\">1</span>,<span class=\\"hljs-number\\">0</span>],[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">-1</span>],[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">1</span>]]\\n        maxLen=<span class=\\"hljs-number\\">0</span>\\n        arr=[]\\n        m=N//<span class=\\"hljs-number\\">2</span>\\n        \\n        <span class=\\"hljs-keyword\\">for</span> x,y <span class=\\"hljs-keyword\\">in</span> mines:graph[x][y]=<span class=\\"hljs-number\\">0</span>\\n        \\n        <span class=\\"hljs-keyword\\">if</span> N %<span class=\\"hljs-number\\">2</span>==<span class=\\"hljs-number\\">0</span>:\\n          <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">1</span>):\\n            <span class=\\"hljs-keyword\\">for</span> j <span class=\\"hljs-keyword\\">in</span> range(<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">1</span>):\\n              arr.append((m+i,m+j))\\n              visited[m+i][m+j]=<span class=\\"hljs-literal\\">True</span>\\n        <span class=\\"hljs-keyword\\">else</span>:\\n          arr.append((m,m))\\n          visited[m][m]=<span class=\\"hljs-literal\\">True</span>\\n          \\n        targetLen=(N+<span class=\\"hljs-number\\">1</span>) // <span class=\\"hljs-number\\">2</span>\\n        \\n        <span class=\\"hljs-keyword\\">while</span> arr:\\n          <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(len(arr)):\\n            x,y=arr.pop(<span class=\\"hljs-number\\">0</span>)\\n            <span class=\\"hljs-keyword\\">if</span> graph[x][y]!=<span class=\\"hljs-number\\">0</span>:\\n              valid,curLen=<span class=\\"hljs-literal\\">True</span>,<span class=\\"hljs-number\\">0</span>\\n              <span class=\\"hljs-keyword\\">while</span> valid:\\n                curLen+=<span class=\\"hljs-number\\">1</span>\\n                <span class=\\"hljs-keyword\\">for</span> dx,dy <span class=\\"hljs-keyword\\">in</span> moves:\\n                  nx=dx*curLen+x\\n                  ny=dy*curLen+y\\n                  <span class=\\"hljs-keyword\\">if</span> nx&lt;<span class=\\"hljs-number\\">0</span> <span class=\\"hljs-keyword\\">or</span> ny&lt;<span class=\\"hljs-number\\">0</span> <span class=\\"hljs-keyword\\">or</span> nx&gt;=N <span class=\\"hljs-keyword\\">or</span> ny&gt;=N <span class=\\"hljs-keyword\\">or</span> graph[nx][ny]==<span class=\\"hljs-number\\">0</span>:\\n                    valid=<span class=\\"hljs-literal\\">False</span>\\n                    <span class=\\"hljs-keyword\\">break</span>\\n              <span class=\\"hljs-keyword\\">if</span> curLen==targetLen: <span class=\\"hljs-keyword\\">return</span> max(maxLen,curLen)\\n              <span class=\\"hljs-keyword\\">else</span>: maxLen=max(maxLen,curLen)\\n            <span class=\\"hljs-keyword\\">for</span> j <span class=\\"hljs-keyword\\">in</span> range(<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">2</span>):\\n              <span class=\\"hljs-keyword\\">for</span> k <span class=\\"hljs-keyword\\">in</span> range(<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">2</span>):\\n                <span class=\\"hljs-keyword\\">if</span> j==<span class=\\"hljs-number\\">0</span> <span class=\\"hljs-keyword\\">and</span> k==<span class=\\"hljs-number\\">0</span>:<span class=\\"hljs-keyword\\">continue</span>\\n                addx,addy=j+x,k+y\\n                <span class=\\"hljs-keyword\\">if</span> addx&lt;<span class=\\"hljs-number\\">0</span> <span class=\\"hljs-keyword\\">or</span> addy&lt;<span class=\\"hljs-number\\">0</span> <span class=\\"hljs-keyword\\">or</span> addx&gt;=N <span class=\\"hljs-keyword\\">or</span> addy&gt;=N: <span class=\\"hljs-keyword\\">continue</span>\\n                <span class=\\"hljs-keyword\\">if</span> visited[addx][addy]:<span class=\\"hljs-keyword\\">continue</span>\\n                visited[addx][addy]=<span class=\\"hljs-literal\\">True</span>\\n                arr.append((addx,addy))\\n          targetLen-=<span class=\\"hljs-number\\">1</span>\\n          <span class=\\"hljs-keyword\\">if</span> targetLen&lt;=maxLen:<span class=\\"hljs-keyword\\">return</span> maxLen\\n        <span class=\\"hljs-keyword\\">return</span> maxLen\\n      \\n      \\n      \\n</code></pre>\\n"],"querySlug":"largest-plus-sign","hasThinking":false,"content":"<p>在一个大小在 (0, 0) 到 (N-1, N-1) 的2D网格&nbsp;<code>grid</code>&nbsp;中，除了在&nbsp;<code>mines</code>&nbsp;中给出的单元为&nbsp;<code>0</code>，其他每个单元都是&nbsp;<code>1</code>。网格中包含&nbsp;<code>1</code>&nbsp;的最大的轴对齐加号标志是多少阶？返回加号标志的阶数。如果未找到加号标志，则返回 0。</p>\\n\\n<p>一个&nbsp;<strong>k</strong>&quot; 阶由&nbsp;<em><code>1</code></em>&nbsp;组成的&ldquo;轴对称&rdquo;加号标志具有中心网格&nbsp;&nbsp;<code>grid[x][y] = 1</code>&nbsp;，以及4个从中心向上、向下、向左、向右延伸，长度为&nbsp;<code>k-1</code>，由&nbsp;<code>1</code>&nbsp;组成的臂。下面给出&nbsp;<strong>k</strong>&quot; 阶&ldquo;轴对称&rdquo;加号标志的示例。注意，只有加号标志的所有网格要求为 1，别的网格可能为 0 也可能为 1。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>k 阶轴对称加号标志示例:</strong></p>\\n\\n<pre>\\n阶 1:\\n000\\n0<strong>1</strong>0\\n000\\n\\n阶 2:\\n00000\\n00<strong>1</strong>00\\n0<strong>111</strong>0\\n00<strong>1</strong>00\\n00000\\n\\n阶 3:\\n0000000\\n000<strong>1</strong>000\\n000<strong>1</strong>000\\n0<strong>11111</strong>0\\n000<strong>1</strong>000\\n000<strong>1</strong>000\\n0000000\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入:</strong> N = 5, mines = [[4, 2]]\\n<strong>输出:</strong> 2\\n<strong>解释:\\n</strong>\\n11111\\n11111\\n1<em><strong>1</strong></em>111\\n<em><strong>111</strong></em>11\\n1<em><strong>1</strong></em>011\\n\\n在上面的网格中，最大加号标志的阶只能是2。一个标志已在图中标出。\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入:</strong> N = 2, mines = []\\n<strong>输出:</strong> 1\\n<strong>解释:\\n\\n11\\n11\\n</strong>\\n没有 2 阶加号标志，有 1 阶加号标志。\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入:</strong> N = 1, mines = [[0, 0]]\\n<strong>输出:</strong> 0\\n<strong>解释:\\n\\n0\\n</strong>\\n没有加号标志，返回 0 。\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ol>\\n\\t<li>整数<code>N</code> 的范围：&nbsp;<code>[1, 500]</code>.</li>\\n\\t<li><code>mines</code> 的最大长度为&nbsp;<code>5000</code>.</li>\\n\\t<li><code>mines[i]</code> 是长度为2的由2个&nbsp;<code>[0, N-1]</code>&nbsp;中的数组成.</li>\\n\\t<li><em>(另外,使用 C, C++, 或者&nbsp;C# 编程将以稍小的时间限制进行​​判断.)</em></li>\\n</ol>\\n\\n<p>&nbsp;</p>\\n","title":"764. 最大加号标志","relatedTags":["数组","动态规划"],"difficult":"Middle","lang":["javascript","python"],"uniqueID":"764","slug":"764-Largest-Plus-Sign"}')}}]);