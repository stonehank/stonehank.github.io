(window.webpackJsonp=window.webpackJsonp||[]).push([[473],{1271:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">a</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">b</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">c</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{string}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> longestDiverseString = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">a, b, c</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> letter=[<span class=\\"hljs-string\\">\'a\'</span>,<span class=\\"hljs-string\\">\'b\'</span>,<span class=\\"hljs-string\\">\'c\'</span>]\\n  <span class=\\"hljs-keyword\\">let</span> list=[a,b,c]\\n  <span class=\\"hljs-keyword\\">let</span> len=a+b+c\\n  <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-string\\">\'\'</span>\\n  <span class=\\"hljs-keyword\\">let</span> lastRepeat=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">let</span> lastId=<span class=\\"hljs-literal\\">null</span>\\n  <span class=\\"hljs-keyword\\">while</span>(res.length&lt;len){\\n    <span class=\\"hljs-comment\\">// console.log(res,list)</span>\\n    <span class=\\"hljs-keyword\\">let</span> newMax\\n    <span class=\\"hljs-keyword\\">let</span> [maxId1,max1]=getMax(list)\\n    <span class=\\"hljs-comment\\">// console.log(lastRepeat,lastId,maxId1)</span>\\n    <span class=\\"hljs-keyword\\">if</span>(lastRepeat===<span class=\\"hljs-number\\">2</span> &amp;&amp; maxId1===lastId){\\n      <span class=\\"hljs-keyword\\">let</span> [maxId2,max2]=getMax(list.map(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">n,i</span>)=&gt;</span>i===maxId1 ? -<span class=\\"hljs-literal\\">Infinity</span> : n))\\n      <span class=\\"hljs-keyword\\">if</span>(max2&lt;=<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span> res\\n      lastRepeat=<span class=\\"hljs-number\\">1</span>\\n      lastId=maxId2\\n      newMax=max2<span class=\\"hljs-number\\">-1</span>\\n      list[maxId2]=newMax\\n      res+=letter[maxId2]\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      <span class=\\"hljs-keyword\\">if</span>(lastId!==maxId1)lastRepeat=<span class=\\"hljs-number\\">0</span>\\n      lastRepeat++\\n      lastId=maxId1\\n      newMax=max1<span class=\\"hljs-number\\">-1</span>\\n      list[maxId1]=newMax\\n      res+=letter[maxId1]\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">getMax</span>(<span class=\\"hljs-params\\">list</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> maxId,max=-<span class=\\"hljs-literal\\">Infinity</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;list.length;i++){\\n      <span class=\\"hljs-keyword\\">if</span>(list[i]&gt;max){\\n        max=list[i]\\n        maxId=i\\n      }\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> [maxId,max]\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"longest-happy-string","created_at":"2020-04-05","timeArr":[2020,3,5,10,59,18,0],"hasThinking":false,"content":"<p>如果字符串中不含有任何 <code>&#39;aaa&#39;</code>，<code>&#39;bbb&#39;</code> 或 <code>&#39;ccc&#39;</code> 这样的字符串作为子串，那么该字符串就是一个「快乐字符串」。</p>\\n\\n<p>给你三个整数 <code>a</code>，<code>b</code> ，<code>c</code>，请你返回 <strong>任意一个</strong> 满足下列全部条件的字符串 <code>s</code>：</p>\\n\\n<ul>\\n\\t<li><code>s</code> 是一个尽可能长的快乐字符串。</li>\\n\\t<li><code>s</code> 中 <strong>最多</strong> 有<code>a</code> 个字母 <code>&#39;a&#39;</code>、<code>b</code>&nbsp;个字母 <code>&#39;b&#39;</code>、<code>c</code> 个字母 <code>&#39;c&#39;</code> 。</li>\\n\\t<li><code>s </code>中只含有 <code>&#39;a&#39;</code>、<code>&#39;b&#39;</code> 、<code>&#39;c&#39;</code> 三种字母。</li>\\n</ul>\\n\\n<p>如果不存在这样的字符串 <code>s</code> ，请返回一个空字符串 <code>&quot;&quot;</code>。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>a = 1, b = 1, c = 7\\n<strong>输出：</strong>&quot;ccaccbcc&quot;\\n<strong>解释：</strong>&quot;ccbccacc&quot; 也是一种正确答案。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>a = 2, b = 2, c = 1\\n<strong>输出：</strong>&quot;aabbc&quot;\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>a = 7, b = 1, c = 0\\n<strong>输出：</strong>&quot;aabaa&quot;\\n<strong>解释：</strong>这是该测试用例的唯一正确答案。</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>0 &lt;= a, b, c &lt;= 100</code></li>\\n\\t<li><code>a + b + c &gt; 0</code></li>\\n</ul>\\n","title":"1405. 最长快乐字符串","relatedTags":["贪心","字符串","堆（优先队列）"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1405","slug":"1405-Longest-Happy-String"}')}}]);