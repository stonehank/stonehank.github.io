(window.webpackJsonp=window.webpackJsonp||[]).push([[421],{1219:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">mat</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[][]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> diagonalSort = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">mat</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> r=mat.length\\n  <span class=\\"hljs-keyword\\">let</span> c=mat[<span class=\\"hljs-number\\">0</span>].length\\n  <span class=\\"hljs-keyword\\">let</span> x=r<span class=\\"hljs-number\\">-1</span>\\n  <span class=\\"hljs-keyword\\">let</span> y=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;r+c<span class=\\"hljs-number\\">-1</span>;i++){\\n    <span class=\\"hljs-keyword\\">let</span> cx=x,cy=y,rx=x,ry=y,idx=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">let</span> aux=[]\\n    <span class=\\"hljs-keyword\\">while</span>(cx&lt;r &amp;&amp; cy&lt;c){\\n      aux.push(mat[cx++][cy++])\\n    }\\n    aux.sort(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">a,b</span>)=&gt;</span>a-b)\\n    <span class=\\"hljs-keyword\\">while</span>(rx&lt;r &amp;&amp; ry&lt;c){\\n      mat[rx++][ry++]=aux[idx++]\\n    }\\n    x--\\n    <span class=\\"hljs-keyword\\">if</span>(x===<span class=\\"hljs-number\\">-1</span>){\\n      x=<span class=\\"hljs-number\\">0</span>\\n      y++\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> mat\\n};\\n</code></pre>\\n"],"querySlug":"sort-the-matrix-diagonally","created_at":"2020-01-31","timeArr":[2020,0,31,11,5,18,0],"hasThinking":false,"content":"<p><strong>矩阵对角线</strong> 是一条从矩阵最上面行或者最左侧列中的某个元素开始的对角线，沿右下方向一直到矩阵末尾的元素。例如，矩阵 <code>mat</code> 有 <code>6</code> 行 <code>3</code> 列，从 <code>mat[2][0]</code> 开始的 <strong>矩阵对角线</strong> 将会经过 <code>mat[2][0]</code>、<code>mat[3][1]</code> 和 <code>mat[4][2]</code> 。</p>\\n\\n<p>给你一个 <code>m * n</code> 的整数矩阵 <code>mat</code> ，请你将同一条 <strong>矩阵对角线 </strong>上的元素按升序排序后，返回排好序的矩阵。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<p><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/25/1482_example_1_2.png\\" style=\\"height: 198px; width: 500px;\\" /></p>\\n\\n<pre>\\n<strong>输入：</strong>mat = [[3,3,1,1],[2,2,1,2],[1,1,1,2]]\\n<strong>输出：</strong>[[1,1,1,1],[1,2,2,2],[1,2,3,3]]\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>mat = [[11,25,66,1,69,7],[23,55,17,45,15,52],[75,31,36,44,58,8],[22,27,33,25,68,4],[84,28,14,11,5,50]]\\n<strong>输出：</strong>[[5,17,4,1,52,7],[11,11,25,45,8,69],[14,23,25,44,58,15],[22,27,31,36,50,66],[84,28,75,33,55,68]]\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>m == mat.length</code></li>\\n\\t<li><code>n == mat[i].length</code></li>\\n\\t<li><code>1 <= m, n <= 100</code></li>\\n\\t<li><code>1 <= mat[i][j] <= 100</code></li>\\n</ul>\\n","title":"1329. 将矩阵按对角线排序","relatedTags":["数组","矩阵","排序"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1329","slug":"1329-Sort-the-Matrix-Diagonally"}')}}]);