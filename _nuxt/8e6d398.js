(window.webpackJsonp=window.webpackJsonp||[]).push([[401],{1199:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{character[][]}</span> <span class=\\"hljs-variable\\">board</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{void}</span> </span>Do not return anything, modify board in-place instead.\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> solve = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">board</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(board.length===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span>\\n  <span class=\\"hljs-keyword\\">let</span> m=board.length,n=board[<span class=\\"hljs-number\\">0</span>].length\\n  <span class=\\"hljs-keyword\\">let</span> moves=[[<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">0</span>],[<span class=\\"hljs-number\\">1</span>,<span class=\\"hljs-number\\">0</span>],[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">-1</span>],[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">1</span>]]\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">dfs</span>(<span class=\\"hljs-params\\">[x,y]</span>)</span>{\\n    board[x][y]=<span class=\\"hljs-string\\">\\"S\\"</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> [dx,dy] <span class=\\"hljs-keyword\\">of</span> moves){\\n      <span class=\\"hljs-keyword\\">let</span> nx=x+dx,ny=y+dy\\n      <span class=\\"hljs-keyword\\">if</span>(nx&lt;<span class=\\"hljs-number\\">0</span> || ny&lt;<span class=\\"hljs-number\\">0</span> || nx&gt;=m || ny&gt;=n)<span class=\\"hljs-keyword\\">continue</span>\\n      <span class=\\"hljs-keyword\\">if</span>(board[nx][ny]!==<span class=\\"hljs-string\\">\\"O\\"</span>)<span class=\\"hljs-keyword\\">continue</span>\\n      dfs([nx,ny])\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;m;i++){\\n    <span class=\\"hljs-keyword\\">if</span>(board[i][<span class=\\"hljs-number\\">0</span>]===<span class=\\"hljs-string\\">\\"O\\"</span>)dfs([i,<span class=\\"hljs-number\\">0</span>])\\n    <span class=\\"hljs-keyword\\">if</span>(board[i][n<span class=\\"hljs-number\\">-1</span>]===<span class=\\"hljs-string\\">\\"O\\"</span>)dfs([i,n<span class=\\"hljs-number\\">-1</span>])\\n  }\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">1</span>;i&lt;n<span class=\\"hljs-number\\">-1</span>;i++){\\n    <span class=\\"hljs-keyword\\">if</span>(board[<span class=\\"hljs-number\\">0</span>][i]===<span class=\\"hljs-string\\">\\"O\\"</span>)dfs([<span class=\\"hljs-number\\">0</span>,i])\\n    <span class=\\"hljs-keyword\\">if</span>(board[m<span class=\\"hljs-number\\">-1</span>][i]===<span class=\\"hljs-string\\">\\"O\\"</span>)dfs([m<span class=\\"hljs-number\\">-1</span>,i])    \\n  }\\n  <span class=\\"hljs-comment\\">// console.log(board)</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;m;i++){\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;n;j++){\\n      <span class=\\"hljs-keyword\\">if</span>(board[i][j]===<span class=\\"hljs-string\\">\\"O\\"</span>)board[i][j]=<span class=\\"hljs-string\\">\\"X\\"</span>\\n      <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(board[i][j]===<span class=\\"hljs-string\\">\\"S\\"</span>)board[i][j]=<span class=\\"hljs-string\\">\\"O\\"</span>\\n    }\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"surrounded-regions","created_at":"2019-04-08","timeArr":[2019,3,8,12,44,43,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>题目也给了提示，只需要对边上的<code>O</code>进行<code>dfs</code>遍历，找出所有和它相连的<code>O</code>，改变为<code>S</code>。</p>\\n<p>最后再将所有的<code>O</code>改变为<code>X</code>，将所有的<code>S</code>改变为<code>O</code>。</p>\\n","content":"给你一个 <code>m x n</code> 的矩阵 <code>board</code> ，由若干字符 <code>\'X\'</code> 和 <code>\'O\'</code> ，找到所有被 <code>\'X\'</code> 围绕的区域，并将这些区域里所有的 <code>\'O\'</code> 用 <code>\'X\'</code> 填充。\\n<div class=\\"original__bRMd\\">\\n<div>\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2021/02/19/xogrid.jpg\\" style=\\"width: 550px; height: 237px;\\" />\\n<pre>\\n<strong>输入：</strong>board = [[\\"X\\",\\"X\\",\\"X\\",\\"X\\"],[\\"X\\",\\"O\\",\\"O\\",\\"X\\"],[\\"X\\",\\"X\\",\\"O\\",\\"X\\"],[\\"X\\",\\"O\\",\\"X\\",\\"X\\"]]\\n<strong>输出：</strong>[[\\"X\\",\\"X\\",\\"X\\",\\"X\\"],[\\"X\\",\\"X\\",\\"X\\",\\"X\\"],[\\"X\\",\\"X\\",\\"X\\",\\"X\\"],[\\"X\\",\\"O\\",\\"X\\",\\"X\\"]]\\n<strong>解释：</strong>被围绕的区间不会存在于边界上，换句话说，任何边界上的 <code>\'O\'</code> 都不会被填充为 <code>\'X\'</code>。 任何不在边界上，或不与边界上的 <code>\'O\'</code> 相连的 <code>\'O\'</code> 最终都会被填充为 <code>\'X\'</code>。如果两个元素在水平或垂直方向相邻，则称它们是“相连”的。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>board = [[\\"X\\"]]\\n<strong>输出：</strong>[[\\"X\\"]]\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>m == board.length</code></li>\\n\\t<li><code>n == board[i].length</code></li>\\n\\t<li><code>1 <= m, n <= 200</code></li>\\n\\t<li><code>board[i][j]</code> 为 <code>\'X\'</code> 或 <code>\'O\'</code></li>\\n</ul>\\n</div>\\n</div>\\n","title":"130. 被围绕的区域","relatedTags":["深度优先搜索","广度优先搜索","并查集","数组","矩阵"],"difficult":"Middle","lang":["javascript"],"uniqueID":"130","slug":"130-Surrounded-Regions"}')}}]);