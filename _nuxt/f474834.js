(window.webpackJsonp=window.webpackJsonp||[]).push([[1381],{2179:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">increase</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">requirements</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> getTriggerTime = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">increase, requirements</span>) </span>{\\n    <span class=\\"hljs-keyword\\">let</span> sumIncr=[[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">0</span>]]\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;increase.length;i++){\\n        <span class=\\"hljs-keyword\\">let</span> newS=sumIncr[i].slice()\\n        newS[<span class=\\"hljs-number\\">0</span>]+=increase[i][<span class=\\"hljs-number\\">0</span>]\\n        newS[<span class=\\"hljs-number\\">1</span>]+=increase[i][<span class=\\"hljs-number\\">1</span>]\\n        newS[<span class=\\"hljs-number\\">2</span>]+=increase[i][<span class=\\"hljs-number\\">2</span>]\\n        sumIncr.push(newS)\\n    }\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">bindSearch</span>(<span class=\\"hljs-params\\">[x,y,z]</span>)</span>{\\n        <span class=\\"hljs-keyword\\">let</span> lo=<span class=\\"hljs-number\\">0</span>,hi=sumIncr.length<span class=\\"hljs-number\\">-1</span>\\n        <span class=\\"hljs-keyword\\">while</span>(lo&lt;hi){\\n            <span class=\\"hljs-keyword\\">let</span> mid=<span class=\\"hljs-built_in\\">Math</span>.floor((lo+hi)/<span class=\\"hljs-number\\">2</span>)\\n            <span class=\\"hljs-keyword\\">let</span> [sx,sy,sz]=sumIncr[mid]\\n            <span class=\\"hljs-keyword\\">if</span>(sx&lt;x || sy&lt;y || sz&lt;z)lo=mid+<span class=\\"hljs-number\\">1</span>\\n            <span class=\\"hljs-keyword\\">else</span> hi=mid\\n        }\\n        <span class=\\"hljs-keyword\\">return</span> hi\\n    }\\n    <span class=\\"hljs-keyword\\">let</span> res=[]\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;requirements.length;i++){\\n        <span class=\\"hljs-keyword\\">let</span> idx=bindSearch(requirements[i])\\n        <span class=\\"hljs-keyword\\">if</span>(idx===sumIncr.length<span class=\\"hljs-number\\">-1</span>){\\n            <span class=\\"hljs-keyword\\">let</span> [sx,sy,sz]=sumIncr[idx]\\n            <span class=\\"hljs-keyword\\">if</span>(requirements[i][<span class=\\"hljs-number\\">0</span>]&gt;sx || requirements[i][<span class=\\"hljs-number\\">1</span>]&gt;sy || requirements[i][<span class=\\"hljs-number\\">2</span>]&gt;sz){\\n                res[i]=<span class=\\"hljs-number\\">-1</span>\\n            }<span class=\\"hljs-keyword\\">else</span>{\\n                res[i]=idx\\n            }\\n        }<span class=\\"hljs-keyword\\">else</span>{\\n            res[i]=idx\\n        }\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"ju-qing-hong-fa-shi-jian","created_at":"2021-07-20","timeArr":[2021,6,20,5,5,38,907],"hasThinking":false,"content":"<p>在战略游戏中，玩家往往需要发展自己的势力来触发各种新的剧情。一个势力的主要属性有三种，分别是文明等级（<code>C</code>），资源储备（<code>R</code>）以及人口数量（<code>H</code>）。在游戏开始时（第 0 天），三种属性的值均为 0。</p>\\n\\n<p>随着游戏进程的进行，每一天玩家的三种属性都会对应<strong>增加</strong>，我们用一个二维数组 <code>increase</code> 来表示每天的增加情况。这个二维数组的每个元素是一个长度为 3 的一维数组，例如 <code>[[1,2,1],[3,4,2]]</code> 表示第一天三种属性分别增加 <code>1,2,1</code> 而第二天分别增加 <code>3,4,2</code>。</p>\\n\\n<p>所有剧情的触发条件也用一个二维数组 <code>requirements</code> 表示。这个二维数组的每个元素是一个长度为 3 的一维数组，对于某个剧情的触发条件 <code>c[i], r[i], h[i]</code>，如果当前 <code>C &gt;= c[i]</code> 且 <code>R &gt;= r[i]</code> 且 <code>H &gt;= h[i]</code> ，则剧情会被触发。</p>\\n\\n<p>根据所给信息，请计算每个剧情的触发时间，并以一个数组返回。如果某个剧情不会被触发，则该剧情对应的触发时间为 -1 。</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<blockquote>\\n<p>输入： <code>increase = [[2,8,4],[2,5,0],[10,9,8]]</code> <code>requirements = [[2,11,3],[15,10,7],[9,17,12],[8,1,14]]</code></p>\\n\\n<p>输出: <code>[2,-1,3,-1]</code></p>\\n\\n<p>解释：</p>\\n\\n<p>初始时，C = 0，R = 0，H = 0</p>\\n\\n<p>第 1 天，C = 2，R = 8，H = 4</p>\\n\\n<p>第 2 天，C = 4，R = 13，H = 4，此时触发剧情 0</p>\\n\\n<p>第 3 天，C = 14，R = 22，H = 12，此时触发剧情 2</p>\\n\\n<p>剧情 1 和 3 无法触发。</p>\\n</blockquote>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<blockquote>\\n<p>输入： <code>increase = [[0,4,5],[4,8,8],[8,6,1],[10,10,0]]</code> <code>requirements = [[12,11,16],[20,2,6],[9,2,6],[10,18,3],[8,14,9]]</code></p>\\n\\n<p>输出: <code>[-1,4,3,3,3]</code></p>\\n</blockquote>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<blockquote>\\n<p>输入： <code>increase = [[1,1,1]]</code> <code>requirements = [[0,0,0]]</code></p>\\n\\n<p>输出: <code>[0]</code></p>\\n</blockquote>\\n\\n<p><strong>限制：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= increase.length &lt;= 10000</code></li>\\n\\t<li><code>1 &lt;= requirements.length &lt;= 100000</code></li>\\n\\t<li><code>0 &lt;= increase[i] &lt;= 10</code></li>\\n\\t<li><code>0 &lt;= requirements[i] &lt;= 100000</code></li>\\n</ul>\\n","title":"LCP 08. 剧情触发时间","relatedTags":["数组","二分查找","排序"],"difficult":"Middle","lang":["javascript"],"uniqueID":"LCP 08","slug":"LCP-08-ju-qing-chu-fa-shi-jian"}')}}]);