(window.webpackJsonp=window.webpackJsonp||[]).push([[290],{1088:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">expression</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{boolean}</span></span>\\n */</span>\\n\\n\\n<span class=\\"hljs-keyword\\">var</span> parseBoolExpr = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">expression</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> curOpe=<span class=\\"hljs-string\\">\'\'</span>\\n  <span class=\\"hljs-keyword\\">let</span> obj={}\\n      <span class=\\"hljs-comment\\">// console.log(expression)</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;expression.length;i++){\\n    <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-regexp\\">/[\\\\!\\\\&amp;\\\\|]/</span>.test(expression[i])){\\n      curOpe=expression[i]\\n    }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(expression[i]===<span class=\\"hljs-string\\">\'(\'</span>){\\n      <span class=\\"hljs-keyword\\">let</span> id=i+<span class=\\"hljs-number\\">1</span>,count=<span class=\\"hljs-number\\">1</span>\\n      <span class=\\"hljs-keyword\\">let</span> nxt=<span class=\\"hljs-string\\">\'\'</span>\\n      <span class=\\"hljs-keyword\\">let</span> arr=[]\\n      <span class=\\"hljs-keyword\\">while</span>(id&lt;expression.length &amp;&amp; count&gt;<span class=\\"hljs-number\\">0</span>){\\n        <span class=\\"hljs-keyword\\">if</span>(expression[id]===<span class=\\"hljs-string\\">\'(\'</span>)count++\\n        <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(expression[id]===<span class=\\"hljs-string\\">\')\'</span>)count--\\n        <span class=\\"hljs-keyword\\">if</span>(expression[id]===<span class=\\"hljs-string\\">\',\'</span> &amp;&amp; count===<span class=\\"hljs-number\\">1</span>){\\n          arr.push(nxt)\\n          nxt=<span class=\\"hljs-string\\">\'\'</span>\\n        }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(count&gt;<span class=\\"hljs-number\\">0</span>)nxt+=expression[id]\\n        id++\\n      }\\n      arr.push(nxt)\\n      <span class=\\"hljs-keyword\\">let</span> init=parseBoolExpr(arr[<span class=\\"hljs-number\\">0</span>])\\n      <span class=\\"hljs-keyword\\">if</span>(curOpe===<span class=\\"hljs-string\\">\'!\'</span>){\\n        init=!init\\n      }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(curOpe===<span class=\\"hljs-string\\">\'&amp;\'</span>){\\n        <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">1</span>;i&lt;arr.length;i++){\\n          init &amp;=parseBoolExpr(arr[i])\\n        }\\n      }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(curOpe===<span class=\\"hljs-string\\">\'|\'</span>){\\n        <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">1</span>;i&lt;arr.length;i++){\\n          init |=parseBoolExpr(arr[i])\\n        }      \\n      }\\n      <span class=\\"hljs-keyword\\">return</span> init\\n    }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-regexp\\">/[tf]/</span>.test(expression[i])){\\n      <span class=\\"hljs-keyword\\">if</span>(expression[i]===<span class=\\"hljs-string\\">\'t\'</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n      <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n    }\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"parsing-a-boolean-expression","created_at":"2019-06-30","timeArr":[2019,5,30,13,30,7,0],"hasThinking":false,"content":"<p>给你一个以字符串形式表述的&nbsp;<a href=\\"https://baike.baidu.com/item/%E5%B8%83%E5%B0%94%E8%A1%A8%E8%BE%BE%E5%BC%8F/1574380?fr=aladdin\\" target=\\"_blank\\">布尔表达式</a>（boolean） <code>expression</code>，返回该式的运算结果。</p>\\n\\n<p>有效的表达式需遵循以下约定：</p>\\n\\n<ul>\\n\\t<li><code>&quot;t&quot;</code>，运算结果为 <code>True</code></li>\\n\\t<li><code>&quot;f&quot;</code>，运算结果为 <code>False</code></li>\\n\\t<li><code>&quot;!(expr)&quot;</code>，运算过程为对内部表达式 <code>expr</code> 进行逻辑 <strong>非的运算</strong>（NOT）</li>\\n\\t<li><code>&quot;&amp;(expr1,expr2,...)&quot;</code>，运算过程为对 2 个或以上内部表达式 <code>expr1, expr2, ...</code> 进行逻辑 <strong>与的运算</strong>（AND）</li>\\n\\t<li><code>&quot;|(expr1,expr2,...)&quot;</code>，运算过程为对 2 个或以上内部表达式 <code>expr1, expr2, ...</code> 进行逻辑 <strong>或的运算</strong>（OR）</li>\\n</ul>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>expression = &quot;!(f)&quot;\\n<strong>输出：</strong>true\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>expression = &quot;|(f,t)&quot;\\n<strong>输出：</strong>true\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>expression = &quot;&amp;(t,f)&quot;\\n<strong>输出：</strong>false\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre><strong>输入：</strong>expression = &quot;|(&amp;(t,f,t),!(t))&quot;\\n<strong>输出：</strong>false\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= expression.length &lt;= 20000</code></li>\\n\\t<li><code>expression[i]</code> 由 <code>{&#39;(&#39;, &#39;)&#39;, &#39;&amp;&#39;, &#39;|&#39;, &#39;!&#39;, &#39;t&#39;, &#39;f&#39;, &#39;,&#39;}</code> 中的字符组成。</li>\\n\\t<li><code>expression</code> 是以上述形式给出的有效表达式，表示一个布尔值。</li>\\n</ul>\\n","title":"1106. 解析布尔表达式","relatedTags":["栈","递归","字符串"],"difficult":"Hard","lang":["javascript"],"uniqueID":"1106","slug":"1106-Parsing-A-Boolean-Expression"}')}}]);