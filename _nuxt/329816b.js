(window.webpackJsonp=window.webpackJsonp||[]).push([[1399],{686:function(n){n.exports=JSON.parse('{"content":"<p>为了能更好的理解这个库，个人写了一个此库的压缩版，实现了核心的功能(主要也是为了更好理解核心功能)，内容更少方便阅读，\\n地址在<a href=\\"https://github.com/stonehank/simplify-anime\\">这里</a></p>\\n<hr>\\n<h2 id=\\"jie-shao\\">介绍</h2>\\n<p><a href=\\"http://animejs.com/\\">anime</a>一个动画库，摒弃了常规的<code>left,top</code>属性，全面采用<code>requestAnimateFrame+CSS3属性</code>能充分调用设备进行GPU渲染。</p>\\n<p>它的亮点有以下(直接引用官网)：</p>\\n<blockquote>\\n<ul>\\n<li>Keyframes(帧动画): Chain multiple animation properties.</li>\\n<li>Timeline(同步动画): Synchronize multiple instances together.</li>\\n<li>Playback controls(暂停回放功能): Play, pause, restart, seek animations or timelines.</li>\\n<li>CSS transforms(CSS动画): Animate CSS transforms individually.</li>\\n<li>Function based values(函数定义配置(注入了内部属性)): Multiple animated targets can have individual value.</li>\\n<li>SVG Animations(SVG动画): Motion path, line drawing and morphing animations.</li>\\n<li>Easing functions(自定义贝塞尔函数): Use the built in functions or create your own Cubic Bézier curve easing.</li>\\n</ul>\\n</blockquote>\\n<p>这么多亮点，其实关键函数就3~4个。</p>\\n<p>因为这里都是使用缓动函数算法，也就是通过 <code>初始位置</code>, <code>结束位置</code>, <code>持续时间</code>,<code>已消耗的时间</code> 计算出当前所在位置。</p>\\n<p><code>初始位置</code>、<code>结束位置</code>和<code>持续时间</code>是作为参数传入配置的，因此计算<code>已消耗时间</code>就是完成动画的核心。  </p>\\n<p>下面就深入了解下它的核心。</p>\\n<h2 id=\\"shen-ru-li-jie\\">深入理解</h2>\\n<p>先了解几个时间的变量，动画都是<code>算法+时间=位置</code>这么算出来的：</p>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">// 记录当前位置所对应的时间，根据lastTime计算</span>\\ninstance.cuurentTime\\n<span class=\\"hljs-comment\\">// 记录当前位置所消耗的时间</span>\\nengineTime\\n<span class=\\"hljs-comment\\">// 记录上一次计算完毕赋值后的位置对应时间</span>\\nlastTime\\n<span class=\\"hljs-comment\\">// 上一次调用raf的时间</span>\\nstartTime\\n<span class=\\"hljs-comment\\">// 当前位置所消耗时间(能匹配反转状态)，根据engineTime计算</span>\\ninsTime\\n<span class=\\"hljs-comment\\">// 动画持续时间</span>\\ninsDuration\\n<span class=\\"hljs-comment\\">// 延迟时间</span>\\ndelay\\n<span class=\\"hljs-comment\\">// 从什么时间点开始动画</span>\\ninsOffset</code></pre>\\n</code></pre>\\n<p>接着看几个关键函数，这里先不放具体代码，只是先知道是做什么的(按一个正常动画顺序排放)：</p>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">// anime的核心机制, 递归调用raf执行(关键)</span>\\n<span class=\\"hljs-keyword\\">const</span> engine = <span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">(</span>) =&gt;</span> {\\n  <span class=\\"hljs-comment\\">// ...requestAnimateFrame</span>\\n})();\\n\\n<span class=\\"hljs-comment\\">// anime主体</span>\\n<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">anime</span>(<span class=\\"hljs-params\\">params</span>)</span>{\\n  \\n  <span class=\\"hljs-comment\\">// 定义instance 也是最终返回值</span>\\n  <span class=\\"hljs-keyword\\">let</span> instance = createNewInstance(params);\\n  \\n  <span class=\\"hljs-comment\\">// 外部API 从当前位置开始执行动画</span>\\n  instance.play = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{}\\n  \\n  <span class=\\"hljs-comment\\">// 配置 startTime 和 engineTime(关键)</span>\\n   instance.tick = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">t</span>) </span>{}\\n   \\n  <span class=\\"hljs-comment\\">// 对当前engineTime进行判断，确定动画方案(关键)</span>\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">setInstanceProgress</span>(<span class=\\"hljs-params\\">engineTime</span>) </span>{}\\n  \\n  <span class=\\"hljs-comment\\">// 计算动画当前位置 并且赋值(关键)</span>\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">setAnimationsProgress</span>(<span class=\\"hljs-params\\">insTime</span>)</span>{}\\n\\n  <span class=\\"hljs-comment\\">// 直接跳到参数time的时间所在的位置</span>\\n  instance.seek = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">time</span>) </span>{}\\n  <span class=\\"hljs-comment\\">// 外部API 暂停</span>\\n  instance.pause = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{}\\n  <span class=\\"hljs-comment\\">// 外部API 反转</span>\\n  instance.reverse = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{}\\n  <span class=\\"hljs-comment\\">// 外部API reset</span>\\n  instance.reset = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{}\\n  <span class=\\"hljs-comment\\">// 外部API 重新开始</span>\\n  instance.restart = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{}\\n  <span class=\\"hljs-comment\\">/*...*/</span>\\n  <span class=\\"hljs-keyword\\">return</span> instance\\n}</code></pre>\\n</code></pre>\\n<p>关键函数就4个，其他都是一些对关键函数的具体使用</p>\\n<p>接着一个个解析：</p>\\n<ul>\\n<li>createNewInstance</li>\\n</ul>\\n<p>其实就是对属性和方法合并成一个整体对象，这个对象是贯穿全局的，因此里面什么都有...</p>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">createNewInstance</span>(<span class=\\"hljs-params\\">params</span>) </span>{\\n  \\n    <span class=\\"hljs-comment\\">/* 对params进行处理 */</span>\\n    <span class=\\"hljs-keyword\\">const</span> instanceSettings = replaceObjectProps(defaultInstanceSettings, params);\\n    <span class=\\"hljs-keyword\\">const</span> tweenSettings = replaceObjectProps(defaultTweenSettings, params);\\n    <span class=\\"hljs-keyword\\">const</span> animatables = getAnimatables(params.targets);\\n    <span class=\\"hljs-keyword\\">const</span> properties = getProperties(instanceSettings, tweenSettings, params);\\n    <span class=\\"hljs-keyword\\">const</span> animations = getAnimations(animatables, properties);\\n        \\n    <span class=\\"hljs-comment\\">// mergeObjects(o1,o2)相当于 Object.assing({},o2,o1)</span>\\n    <span class=\\"hljs-keyword\\">return</span> mergeObjects(instanceSettings, {\\n      <span class=\\"hljs-attr\\">children</span>: [],\\n      <span class=\\"hljs-attr\\">animatables</span>: animatables,\\n      <span class=\\"hljs-attr\\">animations</span>: animations,\\n      <span class=\\"hljs-attr\\">duration</span>: getInstanceTimings(<span class=\\"hljs-string\\">\'duration\'</span>, animations, instanceSettings, tweenSettings),\\n      <span class=\\"hljs-attr\\">delay</span>: getInstanceTimings(<span class=\\"hljs-string\\">\'delay\'</span>, animations, instanceSettings, tweenSettings)\\n    });\\n  }</code></pre>\\n</code></pre>\\n<ul>\\n<li>instance.play</li>\\n</ul>\\n<p>此处先做了防护，只有paused状态下才会执行，<code>lastTime</code>这里是调取当前动画的位置对应的时间，因此才可以实现从任意位置开始动画。</p>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code> <span class=\\"hljs-comment\\">// 外部API 从当前位置开始执行动画</span>\\ninstance.play = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span> (!instance.paused) <span class=\\"hljs-keyword\\">return</span>;\\n  instance.paused = <span class=\\"hljs-literal\\">false</span>;\\n  <span class=\\"hljs-comment\\">// 从0 开始</span>\\n  startTime = <span class=\\"hljs-number\\">0</span>;\\n  <span class=\\"hljs-comment\\">// 调取当前动画当前位置所对应的时间</span>\\n  lastTime = adjustTime(instance.currentTime);\\n  <span class=\\"hljs-comment\\">// 给 activeInstances 添加当前实例，说明这是一个正在运行的动画</span>\\n  activeInstances.push(instance);\\n  <span class=\\"hljs-comment\\">// raf未启动，调用engine</span>\\n  <span class=\\"hljs-keyword\\">if</span> (!raf) engine();\\n}</code></pre>\\n</code></pre>\\n<ul>\\n<li>engine</li>\\n</ul>\\n<p>anime的核心机制，通过递归调用<code>requestAnimateFrame</code>，当检测到需要执行动画的集合<code>activeInstances</code>有值，调用instance.tick。</p>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code>  <span class=\\"hljs-comment\\">// IIFE 之后调用engine相当于执行内部的play</span>\\n  <span class=\\"hljs-keyword\\">const</span> engine = <span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">(</span>) =&gt;</span> {\\n    <span class=\\"hljs-comment\\">// step收到一个参数，</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">play</span>(<span class=\\"hljs-params\\"></span>) </span>{ raf = requestAnimationFrame(step); };\\n    <span class=\\"hljs-comment\\">// 这里的参数t是 raf的参数中可以接受的一个时间戳，表示触发调用的时间</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">step</span>(<span class=\\"hljs-params\\">t</span>) </span>{\\n      <span class=\\"hljs-comment\\">// activeInstances指正在被执行的动画集合</span>\\n      <span class=\\"hljs-keyword\\">const</span> activeLength = activeInstances.length;\\n      <span class=\\"hljs-comment\\">// 存在正在运行的动画</span>\\n      <span class=\\"hljs-keyword\\">if</span> (activeLength) {\\n        <span class=\\"hljs-keyword\\">let</span> i = <span class=\\"hljs-number\\">0</span>;\\n        <span class=\\"hljs-keyword\\">while</span> (i &lt; activeLength) {\\n          <span class=\\"hljs-comment\\">// 调用tick执行</span>\\n          <span class=\\"hljs-keyword\\">if</span> (activeInstances[i]) activeInstances[i].tick(t);\\n          i++;\\n        }\\n        play();\\n      } <span class=\\"hljs-keyword\\">else</span> {\\n        <span class=\\"hljs-comment\\">// 不存在正在运行的动画 cancel</span>\\n        cancelAnimationFrame(raf);\\n        raf = <span class=\\"hljs-number\\">0</span>;\\n      }\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> play;\\n  })();</code></pre>\\n</code></pre>\\n<ul>\\n<li>instance.tick</li>\\n</ul>\\n<p>tick的作用通过参数<code>t</code>，<code>raf</code>的一个时间戳概念，计算出距离上一次调用实际消耗的时间<code>engineTime</code>。</p>\\n<p>例如：上一次调用时间戳是<code>1000</code>，也就是1秒，中途突然执行一个巨大的任务，等任务结束，时间戳是<code>20000</code>，\\n那么这次的<code>engineTime</code>就是<code>lastTime+20000-1000</code>，也就是计算这次动画从上次位置再加上19秒的位置...\\n那么anime对于这种情况是怎么处理呢?继续看下一个<code>setInstanceProgress</code>。</p>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">// 配置 startTime 和 engineTime</span>\\ninstance.tick = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">t</span>) </span>{\\n  now = t;\\n  <span class=\\"hljs-comment\\">// startTime 如果首次执行 就是now，否则就是上一次tick的时间</span>\\n  <span class=\\"hljs-keyword\\">if</span> (!startTime) startTime = now;\\n  <span class=\\"hljs-comment\\">// lastTime 是上一次执行结束后动画对应位置的时间戳</span>\\n  <span class=\\"hljs-comment\\">// engineTime 是到动画目前为止消耗的总时间，一般理论上讲是lastTime+16.6667</span>\\n  <span class=\\"hljs-keyword\\">const</span> engineTime = (lastTime + now - startTime) * anime.speed;\\n  setInstanceProgress(engineTime);\\n}</code></pre>\\n</code></pre>\\n<ul>\\n<li>setInstanceProgress</li>\\n</ul>\\n<p>这个函数接受一个消耗的时间值，在内部对其进行适配和定义了各种情况的动画起始点，传递给<code>setAnimationsProgress</code>。</p>\\n<p>例如，上面那个例子，如果消耗了19秒，就如进入这个判断:从结束点开始动画(考虑reverse的情况)。</p>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">// 消耗的时间超出了持续时间 并且当前位置不在终点  或者 未设定持续时间</span>\\n<span class=\\"hljs-keyword\\">if</span> ((insTime &gt;= insDuration &amp;&amp; insCurrentTime !== insDuration) || !insDuration){\\n  <span class=\\"hljs-keyword\\">if</span> ((insTime &gt;= insDuration &amp;&amp; insCurrentTime !== insDuration) || !insDuration) {\\n    <span class=\\"hljs-comment\\">// 从结束点开始</span>\\n    setAnimationsProgress(insDuration);\\n    <span class=\\"hljs-keyword\\">if</span> (!insReversed) countIteration();\\n  }\\n}</code></pre>\\n</code></pre>\\n<p>setInstanceProgress(省略了一些配置的定义)</p>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">// 对当前engineTime进行判断，确定动画方案</span>\\n<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">setInstanceProgress</span>(<span class=\\"hljs-params\\">engineTime</span>) </span>{\\n  <span class=\\"hljs-comment\\">// 动画持续时间</span>\\n  <span class=\\"hljs-keyword\\">const</span> insDuration = instance.duration;\\n  <span class=\\"hljs-comment\\">// 从什么时间点开始动画</span>\\n  <span class=\\"hljs-keyword\\">const</span> insOffset = instance.offset;\\n  <span class=\\"hljs-comment\\">// 加上延迟后的开始时间</span>\\n  <span class=\\"hljs-keyword\\">const</span> insStart = insOffset + instance.delay;\\n  <span class=\\"hljs-comment\\">// 记录当前位置所对应的时间</span>\\n  <span class=\\"hljs-keyword\\">const</span> insCurrentTime = instance.currentTime;\\n  <span class=\\"hljs-comment\\">// 是否是反转状态</span>\\n  <span class=\\"hljs-keyword\\">const</span> insReversed = instance.reversed;\\n  <span class=\\"hljs-comment\\">// 当前位置所消耗时间(能匹配反转状态)</span>\\n  <span class=\\"hljs-comment\\">// 这里adjustTime就是如果是反转状态，则返回 insDuration-engineTime</span>\\n  <span class=\\"hljs-keyword\\">const</span> insTime = adjustTime(engineTime);\\n  <span class=\\"hljs-comment\\">/* ... */</span>\\n  <span class=\\"hljs-comment\\">// 消耗的时间大于应该开始的时间 并且 消耗的时间在持续时间范围内</span>\\n  <span class=\\"hljs-keyword\\">if</span> (insTime &gt; insOffset &amp;&amp; insTime &lt; insDuration) {\\n    setAnimationsProgress(insTime);\\n  } <span class=\\"hljs-keyword\\">else</span> {\\n    <span class=\\"hljs-comment\\">// 消耗的时间小于应该开始的时间 并且 当前位置不在起点</span>\\n    <span class=\\"hljs-keyword\\">if</span> (insTime &lt;= insOffset &amp;&amp; insCurrentTime !== <span class=\\"hljs-number\\">0</span>) {\\n      <span class=\\"hljs-comment\\">// 从头开始</span>\\n      setAnimationsProgress(<span class=\\"hljs-number\\">0</span>);\\n      <span class=\\"hljs-keyword\\">if</span> (insReversed) countIteration();\\n    }\\n    <span class=\\"hljs-comment\\">// 消耗的时间超出了持续时间 并且当前位置不在终点  或者 未设定持续时间</span>\\n    <span class=\\"hljs-keyword\\">if</span> ((insTime &gt;= insDuration &amp;&amp; insCurrentTime !== insDuration) || !insDuration) {\\n      <span class=\\"hljs-comment\\">// 从结束点开始</span>\\n      setAnimationsProgress(insDuration);\\n      <span class=\\"hljs-keyword\\">if</span> (!insReversed) countIteration();\\n    }\\n  }\\n  setCallback(<span class=\\"hljs-string\\">\'update\'</span>);\\n  <span class=\\"hljs-comment\\">// 消耗时间大于持续时间 并且在终点(不在终点的上面已经判断了)</span>\\n  <span class=\\"hljs-keyword\\">if</span> (engineTime &gt;= insDuration) {\\n    <span class=\\"hljs-keyword\\">if</span> (instance.remaining) {\\n      startTime = now;\\n      <span class=\\"hljs-keyword\\">if</span> (instance.direction === <span class=\\"hljs-string\\">\'alternate\'</span>) toggleInstanceDirection();\\n      <span class=\\"hljs-comment\\">// remaining为false，remaining&gt;0说明还需要继续动画</span>\\n    } <span class=\\"hljs-keyword\\">else</span> {\\n      <span class=\\"hljs-comment\\">// 完成动画的执行</span>\\n      instance.pause();\\n      <span class=\\"hljs-keyword\\">if</span> (!instance.completed) {\\n        instance.completed = <span class=\\"hljs-literal\\">true</span>;\\n        setCallback(<span class=\\"hljs-string\\">\'complete\'</span>);\\n        <span class=\\"hljs-keyword\\">if</span> (<span class=\\"hljs-string\\">\'Promise\'</span> <span class=\\"hljs-keyword\\">in</span> <span class=\\"hljs-built_in\\">window</span>) {\\n          resolve();\\n          promise = makePromise();\\n        }\\n      }\\n    }\\n    lastTime = <span class=\\"hljs-number\\">0</span>;\\n  }\\n}</code></pre>\\n</code></pre>\\n<ul>\\n<li>setAnimationsProgress(省略了一些配置的定义)</li>\\n</ul>\\n<p>这个函数接受一个参数，就是当前位置所消耗时间(动画起始点)，然后在里面计算出每一个动画目标的位置，并且赋值</p>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">// 计算动画当前位置 并且赋值</span>\\n<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">setAnimationsProgress</span>(<span class=\\"hljs-params\\">insTime</span>) </span>{\\n  <span class=\\"hljs-comment\\">/* ... */</span>\\n  <span class=\\"hljs-comment\\">// 这个while逐个计算当前实例中的每个动画的当前位置(通过时间和算法)</span>\\n  <span class=\\"hljs-keyword\\">while</span> (i &lt; animationsLength) {\\n      <span class=\\"hljs-comment\\">/* ... */</span>\\n    <span class=\\"hljs-comment\\">// 消耗的时间占总持续时间的比例 在起点终点之间</span>\\n    <span class=\\"hljs-keyword\\">const</span> elapsed = minMaxValue(insTime - tween.start - tween.delay, <span class=\\"hljs-number\\">0</span>, tween.duration) / tween.duration;\\n    <span class=\\"hljs-comment\\">// 通过算法计算当前进度</span>\\n    <span class=\\"hljs-keyword\\">const</span> eased = <span class=\\"hljs-built_in\\">isNaN</span>(elapsed) ? <span class=\\"hljs-number\\">1</span> : tween.easing(elapsed, tween.elasticity);\\n    <span class=\\"hljs-comment\\">/* ... */</span>\\n    <span class=\\"hljs-comment\\">// 遍历每一个到达点执行</span>\\n    <span class=\\"hljs-keyword\\">for</span> (<span class=\\"hljs-keyword\\">let</span> n = <span class=\\"hljs-number\\">0</span>; n &lt; toNumbersLength; n++) {\\n      <span class=\\"hljs-keyword\\">let</span> value;\\n      <span class=\\"hljs-keyword\\">const</span> toNumber = tween.to.numbers[n];\\n      <span class=\\"hljs-keyword\\">const</span> fromNumber = tween.from.numbers[n];\\n      <span class=\\"hljs-keyword\\">if</span> (!tween.isPath) {\\n        <span class=\\"hljs-comment\\">// 计算当前具体位置</span>\\n        value = fromNumber + (eased * (toNumber - fromNumber));\\n      } <span class=\\"hljs-keyword\\">else</span> {\\n        <span class=\\"hljs-comment\\">// 进行SVG path计算</span>\\n        value = getPathProgress(tween.value, eased * toNumber);\\n      }\\n      <span class=\\"hljs-comment\\">/* ... */</span>\\n      numbers.push(value);\\n    }\\n         <span class=\\"hljs-comment\\">/* ... */</span>\\n        <span class=\\"hljs-keyword\\">if</span> (!<span class=\\"hljs-built_in\\">isNaN</span>(n)) {\\n          <span class=\\"hljs-comment\\">// 组合单位 \'135.546\'+\'px\'</span>\\n          <span class=\\"hljs-keyword\\">if</span> (!b) {\\n            progress += n + <span class=\\"hljs-string\\">\' \'</span>;\\n          } <span class=\\"hljs-keyword\\">else</span> {\\n            progress += n + b;\\n          }\\n        }\\n    <span class=\\"hljs-comment\\">/* ... */</span>\\n    <span class=\\"hljs-comment\\">// 组合结果 \'translateX(\'+\'135.546px\'+\')`</span>\\n    setTweenProgress[anim.type](https:<span class=\\"hljs-comment\\">//github.com/stonehank/sourcecode-analysis/blob/master/source-code.anime/animatable.target, anim.property, progress, transforms, animatable.id);</span>\\n    anim.currentValue = progress;\\n    i++;\\n  }\\n  <span class=\\"hljs-comment\\">// 遍历结果，逐个target赋值</span>\\n  <span class=\\"hljs-keyword\\">const</span> transformsLength = <span class=\\"hljs-built_in\\">Object</span>.keys(transforms).length;\\n  <span class=\\"hljs-keyword\\">if</span> (transformsLength) {\\n    <span class=\\"hljs-keyword\\">for</span> (<span class=\\"hljs-keyword\\">let</span> id = <span class=\\"hljs-number\\">0</span>; id &lt; transformsLength; id++) {\\n      <span class=\\"hljs-keyword\\">if</span> (!transformString) {\\n        <span class=\\"hljs-keyword\\">const</span> t = <span class=\\"hljs-string\\">\'transform\'</span>;\\n        <span class=\\"hljs-comment\\">// 配置兼容性</span>\\n        transformString = (getCSSValue(<span class=\\"hljs-built_in\\">document</span>.body, t) ? t : <span class=\\"hljs-string\\">`-webkit-<span class=\\"hljs-subst\\">${t}</span>`</span>);\\n      }\\n      <span class=\\"hljs-comment\\">// 设置style</span>\\n      instance.animatables[id].target.style[transformString] = transforms[id].join(<span class=\\"hljs-string\\">\' \'</span>);\\n    }\\n  }\\n  <span class=\\"hljs-comment\\">// 记录当前位置所对应的时间</span>\\n  instance.currentTime = insTime;\\n  <span class=\\"hljs-comment\\">// 设置进度</span>\\n  instance.progress = (insTime / instance.duration) * <span class=\\"hljs-number\\">100</span>;\\n}</code></pre>\\n</code></pre>\\n<p>剩下的就是一些操作函数了：</p>\\n<ul>\\n<li><p>instance.seek </p>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">// 直接跳到参数time的时间所在的位置</span>\\ninstance.seek = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">time</span>) </span>{\\nsetInstanceProgress(adjustTime(time));\\n}</code></pre>\\n</code></pre>\\n</li>\\n<li><p>instance.pause</p>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">// 外部API 暂停</span>\\ninstance.pause = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{\\n<span class=\\"hljs-keyword\\">const</span> i = activeInstances.indexOf(instance);\\n<span class=\\"hljs-comment\\">// 删除activeInstances 后续engine中找不到便不会执行</span>\\n<span class=\\"hljs-keyword\\">if</span> (i &gt; <span class=\\"hljs-number\\">-1</span>) activeInstances.splice(i, <span class=\\"hljs-number\\">1</span>);\\ninstance.paused = <span class=\\"hljs-literal\\">true</span>;\\n}</code></pre>\\n</code></pre>\\n</li>\\n<li><p>instance.reverse</p>\\n</li>\\n</ul>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">// 外部API 反转</span>\\ninstance.reverse = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{\\n  toggleInstanceDirection();\\n  startTime = <span class=\\"hljs-number\\">0</span>;\\n  lastTime = adjustTime(instance.currentTime);\\n}</code></pre>\\n</code></pre>\\n<ul>\\n<li>instance.restart</li>\\n</ul>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">// 外部API 重新执行</span>\\ninstance.restart = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{\\n  instance.pause();\\n  instance.reset();\\n  instance.play();\\n}</code></pre>\\n</code></pre>\\n<ul>\\n<li>instance.reset<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">// 外部API reset</span>\\ninstance.reset = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{\\n<span class=\\"hljs-keyword\\">const</span> direction = instance.direction;\\n<span class=\\"hljs-keyword\\">const</span> loops = instance.loop;\\n<span class=\\"hljs-comment\\">// 当前位置,进度 归零</span>\\ninstance.currentTime = <span class=\\"hljs-number\\">0</span>;\\ninstance.progress = <span class=\\"hljs-number\\">0</span>;\\ninstance.paused = <span class=\\"hljs-literal\\">true</span>;\\ninstance.began = <span class=\\"hljs-literal\\">false</span>;\\ninstance.completed = <span class=\\"hljs-literal\\">false</span>;\\ninstance.reversed = direction === <span class=\\"hljs-string\\">\'reverse\'</span>;\\ninstance.remaining = direction === <span class=\\"hljs-string\\">\'alternate\'</span> &amp;&amp; loops === <span class=\\"hljs-number\\">1</span> ? <span class=\\"hljs-number\\">2</span> : loops;\\nsetAnimationsProgress(<span class=\\"hljs-number\\">0</span>);\\n<span class=\\"hljs-keyword\\">for</span> (<span class=\\"hljs-keyword\\">let</span> i = instance.children.length; i--; ){\\n  instance.children[i].reset();\\n}\\n}</code></pre>\\n</code></pre>\\n</li>\\n</ul>\\n<h2 id=\\"zong-jie\\">总结</h2>\\n<ol>\\n<li>使用了<code>requestAnimateFrame</code>和<code>CSS</code>动画提高流畅度。</li>\\n<li>使用了缓动函数，只需要通过<code>当前动画消耗的时间</code>，搭配其他定义的配置项，就可以计算出当前动画具体位置。</li>\\n</ol>\\n","toc":[{"anchor":"jie-shao","level":2,"text":"介绍"},{"anchor":"shen-ru-li-jie","level":2,"text":"深入理解"},{"anchor":"zong-jie","level":2,"text":"总结"}],"relatedTags":["源码","css","算法","promise"],"created_at":"2018-07-20","timeArr":[2018,6,20,17,13,2,0],"title":"源码阅读-anime","uuid":"4eefd89367cd780830f848b989d9ff1f2ad1c9e9","summary":"<p>为了能更好的理解这个库，个人写了一个此库的压缩版，实现了核心的功能(主要也是为了更好理解核心功能)，内容更少方便阅读，\\n地址在<a href=\\"https://github.com/stonehank/simplify-anime\\">这里</a></p>","slug":"source-code-anime","sha":"f2de765b0c50caf3a3f5e97ffda9d8b60e27ac0c"}')}}]);