(window.webpackJsonp=window.webpackJsonp||[]).push([[369],{1167:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{TreeNode}</span> <span class=\\"hljs-variable\\">root</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> maxPathSum = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">root</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(!root)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">let</span> res=-<span class=\\"hljs-literal\\">Infinity</span>\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">_maxPathSum</span>(<span class=\\"hljs-params\\">root</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(!root)<span class=\\"hljs-keyword\\">return</span> -<span class=\\"hljs-literal\\">Infinity</span>\\n    <span class=\\"hljs-keyword\\">let</span> leftS=_maxPathSum(root.left),\\n        rightS=_maxPathSum(root.right),\\n        curV=root.val\\n    res=<span class=\\"hljs-built_in\\">Math</span>.max(res,leftS,rightS,leftS+curV+rightS)\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-built_in\\">Math</span>.max(leftS+curV,rightS+curV,curV)\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-built_in\\">Math</span>.max(_maxPathSum(root),res)\\n};\\n\\n</code></pre>\\n"],"querySlug":"binary-tree-maximum-path-sum","created_at":"2019-03-18","timeArr":[2019,2,18,18,5,12,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>对于某一个节点root，它可以有2种选择：</p>\\n<ul>\\n<li>\\n<p>不与父节点连接，那么它的连接路径最大值就是</p>\\n<p><code>Math.max(左节点值+当前值+右节点值，左节点值+当前值，右节点值+当前值，左节点值，右节点值，当前值)</code></p>\\n<p>这个值不需要返回给父节点，直接记录为<code>res</code>。</p>\\n</li>\\n<li>\\n<p>如果与父节点连接，那么它的连接路径最大值就是</p>\\n<p><code>Math.max(左节点值+当前值，右节点值+当前值，当前值)</code></p>\\n<p>这个值需要返回，连接它的父节点值。</p>\\n</li>\\n</ul>\\n<p>可以看到，<code>1</code>和<code>2</code>内部存在重复，因此减少重复后，不与父节点连接的实际就是：</p>\\n<p><code>Math.max(左节点值+当前值+右节点值，左节点值，右节点值)</code></p>\\n<p>最终从<code>1</code>和<code>2</code>中选取出最大的值。</p>\\n","content":"<p><strong>路径</strong> 被定义为一条从树中任意节点出发，沿父节点-子节点连接，达到任意节点的序列。同一个节点在一条路径序列中 <strong>至多出现一次</strong> 。该路径<strong> 至少包含一个 </strong>节点，且不一定经过根节点。</p>\\n\\n<p><strong>路径和</strong> 是路径中各节点值的总和。</p>\\n\\n<p>给你一个二叉树的根节点 <code>root</code> ，返回其 <strong>最大路径和</strong> 。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2020/10/13/exx1.jpg\\" style=\\"width: 322px; height: 182px;\\" />\\n<pre>\\n<strong>输入：</strong>root = [1,2,3]\\n<strong>输出：</strong>6\\n<strong>解释：</strong>最优路径是 2 -> 1 -> 3 ，路径和为 2 + 1 + 3 = 6</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2020/10/13/exx2.jpg\\" />\\n<pre>\\n<strong>输入：</strong>root = [-10,9,20,null,null,15,7]\\n<strong>输出：</strong>42\\n<strong>解释：</strong>最优路径是 15 -> 20 -> 7 ，路径和为 15 + 20 + 7 = 42\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li>树中节点数目范围是 <code>[1, 3 * 10<sup>4</sup>]</code></li>\\n\\t<li><code>-1000 <= Node.val <= 1000</code></li>\\n</ul>\\n","title":"124. 二叉树中的最大路径和","relatedTags":["树","深度优先搜索","动态规划","二叉树"],"difficult":"Hard","lang":["javascript"],"uniqueID":"124","slug":"124-Binary-Tree-Maximum-Path-Sum"}')}}]);