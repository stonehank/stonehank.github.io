(window.webpackJsonp=window.webpackJsonp||[]).push([[1135],{1933:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">board</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> movesToChessboard = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">board</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> N=board.length,half=<span class=\\"hljs-built_in\\">Math</span>.ceil(N/<span class=\\"hljs-number\\">2</span>)\\n  <span class=\\"hljs-keyword\\">let</span> valid1=board[<span class=\\"hljs-number\\">0</span>],valid2=[]\\n  <span class=\\"hljs-keyword\\">let</span> oneC=<span class=\\"hljs-number\\">0</span>,zeroC=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;N;i++){\\n    <span class=\\"hljs-keyword\\">if</span>(valid1[i]===<span class=\\"hljs-number\\">0</span>){\\n      valid2[i]=<span class=\\"hljs-number\\">1</span>\\n      zeroC++\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      valid2[i]=<span class=\\"hljs-number\\">0</span>\\n      oneC++\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">if</span>(zeroC&gt;half || oneC&gt;half)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">-1</span>\\n  <span class=\\"hljs-keyword\\">let</span> line1=<span class=\\"hljs-number\\">0</span>,line2=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">let</span> strV1=valid1.toString(),strV2=valid2.toString()\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;N;i++){\\n    <span class=\\"hljs-keyword\\">let</span> curStr=board[i].toString()\\n    <span class=\\"hljs-keyword\\">if</span>(curStr!==strV1 &amp;&amp; curStr!==strV2)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">-1</span>\\n    <span class=\\"hljs-keyword\\">if</span>(curStr===strV1)line1++\\n    <span class=\\"hljs-keyword\\">else</span> line2++\\n  }\\n  <span class=\\"hljs-comment\\">// console.log(line1,line2)</span>\\n  <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-built_in\\">Math</span>.abs(line1-line2)&gt;<span class=\\"hljs-number\\">1</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">-1</span>\\n  <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">checkLine</span>(<span class=\\"hljs-params\\">checkRow</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> firstOne=<span class=\\"hljs-number\\">0</span>,firstZero=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;N;i++){\\n      <span class=\\"hljs-keyword\\">let</span> cur\\n      <span class=\\"hljs-keyword\\">if</span>(checkRow)cur=board[<span class=\\"hljs-number\\">0</span>][i]\\n      <span class=\\"hljs-keyword\\">else</span> cur=board[i][<span class=\\"hljs-number\\">0</span>]\\n      <span class=\\"hljs-keyword\\">if</span>(cur===<span class=\\"hljs-number\\">0</span>)firstOne++\\n      <span class=\\"hljs-keyword\\">else</span> firstZero++\\n\\n      <span class=\\"hljs-keyword\\">let</span> t=firstOne\\n      firstOne=firstZero\\n      firstZero=t\\n    }\\n    <span class=\\"hljs-keyword\\">if</span>(firstOne % <span class=\\"hljs-number\\">2</span>!==<span class=\\"hljs-number\\">0</span>)res+=firstZero/<span class=\\"hljs-number\\">2</span>\\n    <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(firstZero % <span class=\\"hljs-number\\">2</span>!==<span class=\\"hljs-number\\">0</span>)res+=firstOne/<span class=\\"hljs-number\\">2</span>\\n    <span class=\\"hljs-keyword\\">else</span> res+=<span class=\\"hljs-built_in\\">Math</span>.min(firstOne,firstZero)/<span class=\\"hljs-number\\">2</span>    \\n  }\\n  \\n  checkLine(<span class=\\"hljs-literal\\">true</span>)\\n  checkLine(<span class=\\"hljs-literal\\">false</span>)\\n  \\n  <span class=\\"hljs-keyword\\">return</span> res\\n  \\n  \\n};\\n</code></pre>\\n"],"querySlug":"transform-to-chessboard","created_at":"2019-03-15","timeArr":[2019,2,15,15,48,16,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<ol>\\n<li>\\n<p>能转换为棋盘的矩阵符合2个特征：</p>\\n<ol>\\n<li>\\n<p>抽取某一行(列)，其他行(列)一定与这一行相同或者相反。</p>\\n<p>例如某一行为<code>11001</code>，那么其他行只可能是<code>11001</code>或者<code>00110</code>。</p>\\n</li>\\n<li>\\n<p>每一行中<code>1</code>和<code>0</code>的数量必须不小于<code>Math.floor(N/2)</code>。</p>\\n</li>\\n</ol>\\n<p>例如这行<code>100010</code>，是不符合规则的直接返回<code>-1</code>。</p>\\n</li>\\n<li>\\n<p>当判断完有效棋盘后，需要计算转换步数，由于奇数棋盘只存在唯一的解，而偶数存在两个解(取最小)。</p>\\n<ol>\\n<li>\\n<p>这里使用一个假设结果，<code>0101010...</code>，也就是说，当检测到<code>row[0]</code>为<code>0</code>时，<code>rowMove++</code>，<code>row[1]</code>为<code>1</code>时，<code>rowMove++</code>...</p>\\n</li>\\n<li>\\n<p>当行列都检测完毕，如果<code>N</code>是偶数，我们取最小值<code>Math.min(rowMove,N-rowMove)</code>，如果<code>N</code>是奇数，<code>rowMove</code>必须为偶数\\n(<code>rowMove</code>为奇数是不可能排列成的)，因此<code>rowMove</code>为奇数时，使用<code>N-rowMove</code>。</p>\\n</li>\\n</ol>\\n<p>由于上面的<code>rowMove</code>是整行检查，而一行中每次交换是交换2列，因此最终结果<code>/2</code>。</p>\\n</li>\\n</ol>\\n","content":"<p>一个 N&nbsp;x N的 <code>board</code>&nbsp;仅由&nbsp;<code>0</code>&nbsp;和&nbsp;<code>1</code>&nbsp;组成&nbsp;。每次移动，你能任意交换两列或是两行的位置。</p>\\n\\n<p>输出将这个矩阵变为 &ldquo;棋盘&rdquo; 所需的最小移动次数。&ldquo;棋盘&rdquo; 是指任意一格的上下左右四个方向的值均与本身不同的矩阵。如果不存在可行的变换，输出 -1。</p>\\n\\n<pre><strong>示例:</strong>\\n<strong>输入:</strong> board = [[0,1,1,0],[0,1,1,0],[1,0,0,1],[1,0,0,1]]\\n<strong>输出:</strong> 2\\n<strong>解释:</strong>\\n一种可行的变换方式如下，从左到右：\\n\\n0110     1010     1010\\n0110 --&gt; 1010 --&gt; 0101\\n1001     0101     1010\\n1001     0101     0101\\n\\n第一次移动交换了第一列和第二列。\\n第二次移动交换了第二行和第三行。\\n\\n\\n<strong>输入:</strong> board = [[0, 1], [1, 0]]\\n<strong>输出:</strong> 0\\n<strong>解释:</strong>\\n注意左上角的格值为0时也是合法的棋盘，如：\\n\\n01\\n10\\n\\n也是合法的棋盘.\\n\\n<strong>输入:</strong> board = [[1, 0], [1, 0]]\\n<strong>输出:</strong> -1\\n<strong>解释:</strong>\\n任意的变换都不能使这个输入变为合法的棋盘。\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>board</code>&nbsp;是方阵，且行列数的范围是<code>[2, 30]</code>。</li>\\n\\t<li><code>board[i][j]</code>&nbsp;将只包含&nbsp;<code>0</code>或&nbsp;<code>1</code>。</li>\\n</ul>\\n","title":"782. 变为棋盘","relatedTags":["位运算","数组","数学","矩阵"],"difficult":"Hard","lang":["javascript"],"uniqueID":"782","slug":"782-Transform-to-Chessboard"}')}}]);