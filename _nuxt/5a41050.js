(window.webpackJsonp=window.webpackJsonp||[]).push([[677],{1475:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">nums</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">k</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">t</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{boolean}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> containsNearbyAlmostDuplicate = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">nums, k, t</span>) </span>{\\n    <span class=\\"hljs-keyword\\">let</span> aux=[]\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;nums.length;i++){\\n        aux[i]=[nums[i],i]\\n    }\\n    aux.sort(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">a,b</span>)=&gt;</span>a[<span class=\\"hljs-number\\">0</span>]-b[<span class=\\"hljs-number\\">0</span>])\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">1</span>;i&lt;aux.length;i++){\\n        <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=i<span class=\\"hljs-number\\">-1</span>;j&gt;=<span class=\\"hljs-number\\">0</span>;j--){\\n            <span class=\\"hljs-keyword\\">let</span> [v1,id1]=aux[j]\\n            <span class=\\"hljs-keyword\\">let</span> [v2,id2]=aux[i]\\n            <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-built_in\\">Math</span>.abs(v1-v2)&lt;=t){\\n                <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-built_in\\">Math</span>.abs(id1-id2)&lt;=k)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n            }<span class=\\"hljs-keyword\\">else</span>{\\n                <span class=\\"hljs-keyword\\">break</span>\\n            }\\n        }\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n};\\n</code></pre>\\n"],"querySlug":"contains-duplicate-iii","created_at":"2021-04-17","timeArr":[2021,3,17,11,6,55,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<ol>\\n<li><code>Brute Force</code>，按照题意逐个检查。</li>\\n</ol>\\n<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">nums</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">k</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">t</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{boolean}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> containsNearbyAlmostDuplicate = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">nums, k, t</span>) </span>{\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;nums.length;i++){\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=i+<span class=\\"hljs-number\\">1</span>;j&lt;=i+k;j++){\\n      <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-built_in\\">Math</span>.abs(nums[i]-nums[j])&lt;=t)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n};\\n</code></pre>\\n<ol start=\\"2\\">\\n<li><code>window slide</code>，先按照数字大小排序，排序时保留原索引，定义一个符合<code>t</code>的有效区间<code>[left,right]</code>，一旦发现不符合<code>nums[right]-nums[left]&lt;=t</code>，\\n说明需要<code>left++</code>来减小当前区间；</li>\\n</ol>\\n<p>对当前有效区间，检查<code>left</code>和<code>right</code>的差值，如果符合<code>k</code>以内，返回<code>true</code>，如果不符合，通过<code>right++</code>来扩大区间，继续上面的检查区间。</p>\\n<p>这里是需要检查头和尾，对于数值，因为是有序的，检查头和尾即可；对于索引，因为窗口是不断滑动的，因此在数值符合条件的情况下，都会被检查到。</p>\\n<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">nums</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">k</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">t</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{boolean}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> containsNearbyAlmostDuplicate = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">nums, k, t</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> aux=[]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;nums.length;i++){\\n    aux.push([nums[i],i])\\n  }\\n  aux.sort(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">a,b</span>)=&gt;</span>a[<span class=\\"hljs-number\\">0</span>]-b[<span class=\\"hljs-number\\">0</span>])\\n  \\n  <span class=\\"hljs-keyword\\">let</span> left=<span class=\\"hljs-number\\">0</span>,right=<span class=\\"hljs-number\\">1</span>\\n\\n  <span class=\\"hljs-keyword\\">while</span>(right&lt;aux.length){\\n    <span class=\\"hljs-keyword\\">let</span> diff=<span class=\\"hljs-built_in\\">Math</span>.abs(aux[right][<span class=\\"hljs-number\\">0</span>]-aux[left][<span class=\\"hljs-number\\">0</span>])\\n    <span class=\\"hljs-keyword\\">let</span> idxDiff=<span class=\\"hljs-built_in\\">Math</span>.abs(aux[right][<span class=\\"hljs-number\\">1</span>]-aux[left][<span class=\\"hljs-number\\">1</span>])\\n    <span class=\\"hljs-keyword\\">if</span>(diff&lt;=t &amp;&amp; idxDiff&lt;=k){\\n      <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n    }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(diff&gt;t){\\n      left++\\n      <span class=\\"hljs-keyword\\">if</span>(left===right)right++\\n    }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(idxDiff&gt;k){\\n      right++\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n};\\n</code></pre>\\n<ol start=\\"3\\">\\n<li>仿二叉搜索树，通过<code>floor</code>和<code>ceil</code>检测每一个值的有效性。</li>\\n</ol>\\n","content":"<p>给你一个整数数组 <code>nums</code> 和两个整数 <code>k</code> 和 <code>t</code> 。请你判断是否存在 <b>两个不同下标</b> <code>i</code> 和 <code>j</code>，使得 <code>abs(nums[i] - nums[j]) <= t</code> ，同时又满足 <code>abs(i - j) <= k</code><em> </em>。</p>\\n\\n<p>如果存在则返回 <code>true</code>，不存在返回 <code>false</code>。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [1,2,3,1], k<em> </em>= 3, t = 0\\n<strong>输出：</strong>true</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [1,0,1,1], k<em> </em>=<em> </em>1, t = 2\\n<strong>输出：</strong>true</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [1,5,9,1,5,9], k = 2, t = 3\\n<strong>输出：</strong>false</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>0 <= nums.length <= 2 * 10<sup>4</sup></code></li>\\n\\t<li><code>-2<sup>31</sup> <= nums[i] <= 2<sup>31</sup> - 1</code></li>\\n\\t<li><code>0 <= k <= 10<sup>4</sup></code></li>\\n\\t<li><code>0 <= t <= 2<sup>31</sup> - 1</code></li>\\n</ul>\\n","title":"220. 存在重复元素 III","relatedTags":["数组","桶排序","有序集合","排序","滑动窗口"],"difficult":"Middle","lang":["javascript"],"uniqueID":"220","slug":"220-Contains-Duplicate-III"}')}}]);