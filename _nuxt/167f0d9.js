(window.webpackJsonp=window.webpackJsonp||[]).push([[275],{1073:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">text</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{string}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> smallestSubsequence = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">text</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> len=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">let</span> idx=<span class=\\"hljs-built_in\\">Array</span>(<span class=\\"hljs-number\\">26</span>).fill().map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span>=&gt;</span>[])\\n  <span class=\\"hljs-comment\\">// 记录每一个字母的索引数组</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;text.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> code=text.charCodeAt(i)<span class=\\"hljs-number\\">-97</span>\\n    <span class=\\"hljs-keyword\\">if</span>(idx[code].length===<span class=\\"hljs-number\\">0</span>)len++\\n    idx[code].push(i)\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> used=<span class=\\"hljs-built_in\\">Array</span>(<span class=\\"hljs-number\\">26</span>).fill(<span class=\\"hljs-literal\\">false</span>)\\n  <span class=\\"hljs-keyword\\">let</span> limit=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-string\\">\'\'</span>\\n  <span class=\\"hljs-keyword\\">while</span>(len--&gt;<span class=\\"hljs-number\\">0</span>){\\n    <span class=\\"hljs-keyword\\">let</span> minMax=<span class=\\"hljs-literal\\">Infinity</span>\\n    \\n    <span class=\\"hljs-comment\\">// 首先找到每一个字母对应索引的最大值中 的 最小值</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;idx.length;i++){\\n      <span class=\\"hljs-keyword\\">let</span> list=idx[i]\\n      <span class=\\"hljs-keyword\\">if</span>(list.length===<span class=\\"hljs-number\\">0</span> || used[i])<span class=\\"hljs-keyword\\">continue</span>\\n      minMax=<span class=\\"hljs-built_in\\">Math</span>.min(minMax,list[list.length<span class=\\"hljs-number\\">-1</span>])\\n    }\\n    <span class=\\"hljs-comment\\">// 接着按字母顺序检查每一个字母对应索引的最小值，如果这个最小值不大于刚才的最大最小值，则添加进res</span>\\n    <span class=\\"hljs-comment\\">// 同时，之后如果碰到当前索引之前的索引，可以删除</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;idx.length;i++){\\n      <span class=\\"hljs-keyword\\">let</span> list=idx[i]\\n      <span class=\\"hljs-keyword\\">if</span>(list.length===<span class=\\"hljs-number\\">0</span> || used[i])<span class=\\"hljs-keyword\\">continue</span>\\n      <span class=\\"hljs-keyword\\">while</span>(list[<span class=\\"hljs-number\\">0</span>]&lt;limit){\\n        list.shift()\\n      }\\n      <span class=\\"hljs-keyword\\">if</span>(list[<span class=\\"hljs-number\\">0</span>]&lt;=minMax){\\n        used[i]=<span class=\\"hljs-literal\\">true</span>\\n        limit=list[<span class=\\"hljs-number\\">0</span>]\\n        res+=<span class=\\"hljs-built_in\\">String</span>.fromCharCode(i+<span class=\\"hljs-number\\">97</span>)\\n        <span class=\\"hljs-keyword\\">break</span>\\n      }\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"smallest-subsequence-of-distinct-characters","created_at":"2019-06-09","timeArr":[2019,5,9,16,58,20,0],"hasThinking":false,"content":"<p>返回 <code>s</code> 字典序最小的子序列，该子序列包含 <code>s</code> 的所有不同字符，且只包含一次。</p>\\n\\n<p><strong>注意：</strong>该题与 316 <a href=\\"https://leetcode.com/problems/remove-duplicate-letters/\\">https://leetcode.com/problems/remove-duplicate-letters/</a> 相同</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong><code>s = \\"bcabc\\"</code>\\n<strong>输出<code>：</code></strong><code>\\"abc\\"</code>\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong><code>s = \\"cbacdcbc\\"</code>\\n<strong>输出：</strong><code>\\"acdb\\"</code></pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= s.length <= 1000</code></li>\\n\\t<li><code>s</code> 由小写英文字母组成</li>\\n</ul>\\n","title":"1081. 不同字符的最小子序列","relatedTags":["栈","贪心","字符串","单调栈"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1081","slug":"1081-Smallest-Subsequence-of-Distinct-Characters"}')}}]);