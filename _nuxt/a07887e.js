(window.webpackJsonp=window.webpackJsonp||[]).push([[1082],{1880:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string[][]}</span> <span class=\\"hljs-variable\\">accounts</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{string[][]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> accountsMerge = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">accounts</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> uf=<span class=\\"hljs-built_in\\">Array</span>(accounts.length).fill().map(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">n,i</span>)=&gt;</span>i)\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">find</span>(<span class=\\"hljs-params\\">i</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(i!==uf[i]){\\n      uf[i]=find(uf[i])\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> uf[i]\\n  }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">union</span>(<span class=\\"hljs-params\\">a,b</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> i=find(a),\\n        j=find(b)\\n    <span class=\\"hljs-keyword\\">if</span>(i===j)<span class=\\"hljs-keyword\\">return</span>\\n    uf[i]=j\\n  }\\n\\n  <span class=\\"hljs-keyword\\">let</span> email2Id={}\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;accounts.length;i++){\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">1</span>;j&lt;accounts[i].length;j++){\\n      <span class=\\"hljs-keyword\\">let</span> email=accounts[i][j]\\n      <span class=\\"hljs-keyword\\">if</span>(email2Id[email]!=<span class=\\"hljs-literal\\">null</span>){\\n        union(i,email2Id[email])\\n      }<span class=\\"hljs-keyword\\">else</span>{\\n        email2Id[email]=i\\n      }\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> hash={}\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;accounts.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> rootId=find(i)\\n    <span class=\\"hljs-keyword\\">if</span>(hash[rootId]==<span class=\\"hljs-literal\\">null</span>)hash[rootId]={}\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">1</span>;j&lt;accounts[i].length;j++){\\n      <span class=\\"hljs-keyword\\">let</span> email=accounts[i][j]\\n      hash[rootId][email]=<span class=\\"hljs-literal\\">true</span>\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> res=[]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> id <span class=\\"hljs-keyword\\">in</span> hash){\\n    <span class=\\"hljs-keyword\\">let</span> name=accounts[id][<span class=\\"hljs-number\\">0</span>]\\n    <span class=\\"hljs-keyword\\">let</span> sub=[]    \\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> email <span class=\\"hljs-keyword\\">in</span> hash[id]){\\n      sub.push(email)\\n    }\\n    sub.sort()\\n    sub.unshift(name)\\n    res.push(sub)\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"accounts-merge","created_at":"2019-05-29","timeArr":[2019,4,29,20,33,47,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>对<code>accounts</code>的索引构建<code>union find</code>，通过<code>hash</code>将相同的<code>email</code>的<code>id</code>在<code>uf</code>连接起来，最后对<code>uf</code>分析。</p>\\n<p>例如：<code>[\'a\',\'e1\',\'e3\'],[\'a\',\'e2\',\'e4\']</code> 这时 两个<code>a</code>之间没有连接，<code>uf</code>是<code>[0,1]</code></p>\\n<p>如果还有一个<code>[\'a\',\'e1\',\'e4\']</code>，因为<code>hash[e1]=0, hash[e4]=1</code>，因此需要连接<code>0</code>和<code>1</code>，<code>uf</code>是<code>[0,0,0]</code>。</p>\\n","content":"<p>给定一个列表 <code>accounts</code>，每个元素 <code>accounts[i]</code>&nbsp;是一个字符串列表，其中第一个元素 <code>accounts[i][0]</code>&nbsp;是&nbsp;<em>名称 (name)</em>，其余元素是 <em><strong>emails</strong> </em>表示该账户的邮箱地址。</p>\\n\\n<p>现在，我们想合并这些账户。如果两个账户都有一些共同的邮箱地址，则两个账户必定属于同一个人。请注意，即使两个账户具有相同的名称，它们也可能属于不同的人，因为人们可能具有相同的名称。一个人最初可以拥有任意数量的账户，但其所有账户都具有相同的名称。</p>\\n\\n<p>合并账户后，按以下格式返回账户：每个账户的第一个元素是名称，其余元素是 <strong>按字符 ASCII 顺序排列</strong> 的邮箱地址。账户本身可以以 <strong>任意顺序</strong> 返回。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<b>输入：</b>accounts = [[\\"John\\", \\"johnsmith@mail.com\\", \\"john00@mail.com\\"], [\\"John\\", \\"johnnybravo@mail.com\\"], [\\"John\\", \\"johnsmith@mail.com\\", \\"john_newyork@mail.com\\"], [\\"Mary\\", \\"mary@mail.com\\"]]\\n<b>输出：</b>[[\\"John\\", \'john00@mail.com\', \'john_newyork@mail.com\', \'johnsmith@mail.com\'],  [\\"John\\", \\"johnnybravo@mail.com\\"], [\\"Mary\\", \\"mary@mail.com\\"]]\\n<b>解释：</b>\\n第一个和第三个 John 是同一个人，因为他们有共同的邮箱地址 \\"johnsmith@mail.com\\"。 \\n第二个 John 和 Mary 是不同的人，因为他们的邮箱地址没有被其他帐户使用。\\n可以以任何顺序返回这些列表，例如答案 [[\'Mary\'，\'mary@mail.com\']，[\'John\'，\'johnnybravo@mail.com\']，\\n[\'John\'，\'john00@mail.com\'，\'john_newyork@mail.com\'，\'johnsmith@mail.com\']] 也是正确的。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>accounts = [[\\"Gabe\\",\\"Gabe0@m.co\\",\\"Gabe3@m.co\\",\\"Gabe1@m.co\\"],[\\"Kevin\\",\\"Kevin3@m.co\\",\\"Kevin5@m.co\\",\\"Kevin0@m.co\\"],[\\"Ethan\\",\\"Ethan5@m.co\\",\\"Ethan4@m.co\\",\\"Ethan0@m.co\\"],[\\"Hanzo\\",\\"Hanzo3@m.co\\",\\"Hanzo1@m.co\\",\\"Hanzo0@m.co\\"],[\\"Fern\\",\\"Fern5@m.co\\",\\"Fern1@m.co\\",\\"Fern0@m.co\\"]]\\n<strong>输出：</strong>[[\\"Ethan\\",\\"Ethan0@m.co\\",\\"Ethan4@m.co\\",\\"Ethan5@m.co\\"],[\\"Gabe\\",\\"Gabe0@m.co\\",\\"Gabe1@m.co\\",\\"Gabe3@m.co\\"],[\\"Hanzo\\",\\"Hanzo0@m.co\\",\\"Hanzo1@m.co\\",\\"Hanzo3@m.co\\"],[\\"Kevin\\",\\"Kevin0@m.co\\",\\"Kevin3@m.co\\",\\"Kevin5@m.co\\"],[\\"Fern\\",\\"Fern0@m.co\\",\\"Fern1@m.co\\",\\"Fern5@m.co\\"]]\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= accounts.length &lt;= 1000</code></li>\\n\\t<li><code>2 &lt;= accounts[i].length &lt;= 10</code></li>\\n\\t<li><code>1 &lt;= accounts[i][j] &lt;= 30</code></li>\\n\\t<li><code>accounts[i][0]</code> 由英文字母组成</li>\\n\\t<li><code>accounts[i][j] (for j &gt; 0)</code> 是有效的邮箱地址</li>\\n</ul>\\n","title":"721. 账户合并","relatedTags":["深度优先搜索","广度优先搜索","并查集","数组","字符串"],"difficult":"Middle","lang":["javascript"],"uniqueID":"721","slug":"721-Accounts-Merge"}')}}]);