(window.webpackJsonp=window.webpackJsonp||[]).push([[1217],{2015:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">quality</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">wage</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">K</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> mincostToHireWorkers = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">quality, wage, K</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> pq=[]\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">insert</span>(<span class=\\"hljs-params\\">n</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(pq.length===<span class=\\"hljs-number\\">0</span> || pq[pq.length<span class=\\"hljs-number\\">-1</span>]&lt;n)pq.push(n)\\n    <span class=\\"hljs-keyword\\">else</span> pq.splice(bsEnd(pq,n),<span class=\\"hljs-number\\">0</span>,n)\\n  }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">delMax</span>(<span class=\\"hljs-params\\"></span>)</span>{\\n    <span class=\\"hljs-keyword\\">return</span> pq.pop()\\n  }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">bsEnd</span>(<span class=\\"hljs-params\\">arr,n</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> lo=<span class=\\"hljs-number\\">0</span>,hi=arr.length<span class=\\"hljs-number\\">-1</span>\\n    <span class=\\"hljs-keyword\\">while</span>(lo&lt;hi){\\n      <span class=\\"hljs-keyword\\">let</span> mid=<span class=\\"hljs-built_in\\">Math</span>.floor((lo+hi)/<span class=\\"hljs-number\\">2</span>)\\n      <span class=\\"hljs-keyword\\">if</span>(arr[mid]&lt;n)lo=mid+<span class=\\"hljs-number\\">1</span>\\n      <span class=\\"hljs-keyword\\">else</span> hi=mid\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> hi\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> aux=[]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;quality.length;i++){\\n    aux[i]=[wage[i] / quality[i],quality[i]]\\n  }\\n  aux.sort(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">a,b</span>)=&gt;</span>a[<span class=\\"hljs-number\\">0</span>]-b[<span class=\\"hljs-number\\">0</span>])\\n\\n  <span class=\\"hljs-keyword\\">let</span> min=<span class=\\"hljs-literal\\">Infinity</span>\\n  <span class=\\"hljs-keyword\\">let</span> qSum=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> k=<span class=\\"hljs-number\\">0</span>;k&lt;aux.length;k++){\\n    <span class=\\"hljs-keyword\\">let</span> [ratio,q]=aux[k]   \\n    qSum+=q\\n    insert(q)\\n    <span class=\\"hljs-keyword\\">if</span>(pq.length&gt;K) qSum-=delMax()\\n    <span class=\\"hljs-keyword\\">if</span>(pq.length===K) min=<span class=\\"hljs-built_in\\">Math</span>.min(min,ratio*qSum)\\n  }\\n\\n  <span class=\\"hljs-keyword\\">return</span> min\\n\\n};\\n</code></pre>\\n"],"querySlug":"minimum-cost-to-hire-k-workers","created_at":"2019-04-22","timeArr":[2019,3,22,23,57,23,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>先计算出每个工人的<code>性价比</code>(工资/劳动量)，按照性价比从高到低排序，由于这里必须满足每个工人的最低期望工资，\\n因此按照性价比低的工人工资比率为基准，那么性价比高的工人一定也能满足。</p>\\n<p>例如：</p>\\n<p>工人1，最低工资：<code>300</code>，劳动量：<code>1</code>；</p>\\n<p>工人2，最低工资：<code>100</code>，劳动量：<code>5</code>；</p>\\n<p>很明显只要能满足工人1的工资比率(300:1)，那么工人2同样的比率<code>5*300</code>一定能满足。</p>\\n<p>因此我们从性价比高的开始，遍历<code>K</code>个，同时定义优先队列<code>pq</code>，保存已经遍历的每个工人的劳动量，以最后的工人(因为它的性价比最低)为基准，计算出当前需要的工资<code>pSum</code>；</p>\\n<p>接着，如果超过<code>K</code>个，从<code>pq</code>中删除劳动量最大的，因为它能拿更多的钱，筛选出最低总工资。</p>\\n","content":"<p>有 <code>N</code>&nbsp;名工人。&nbsp;第&nbsp;<code>i</code>&nbsp;名工人的工作质量为&nbsp;<code>quality[i]</code>&nbsp;，其最低期望工资为&nbsp;<code>wage[i]</code>&nbsp;。</p>\\n\\n<p>现在我们想雇佣&nbsp;<code>K</code>&nbsp;名工人组成一个<em>工资组。</em>在雇佣&nbsp;一组 K 名工人时，我们必须按照下述规则向他们支付工资：</p>\\n\\n<ol>\\n\\t<li>对工资组中的每名工人，应当按其工作质量与同组其他工人的工作质量的比例来支付工资。</li>\\n\\t<li>工资组中的每名工人至少应当得到他们的最低期望工资。</li>\\n</ol>\\n\\n<p>返回组成一个满足上述条件的工资组至少需要多少钱。</p>\\n\\n<p>&nbsp;</p>\\n\\n<ol>\\n</ol>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入： </strong>quality = [10,20,5], wage = [70,50,30], K = 2\\n<strong>输出： </strong>105.00000\\n<strong>解释：</strong> 我们向 0 号工人支付 70，向 2 号工人支付 35。</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入： </strong>quality = [3,1,10,10,1], wage = [4,8,2,2,7], K = 3\\n<strong>输出： </strong>30.66667\\n<strong>解释： </strong>我们向 0 号工人支付 4，向 2 号和 3 号分别支付 13.33333。</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ol>\\n\\t<li><code>1 &lt;= K &lt;= N &lt;= 10000</code>，其中&nbsp;<code>N = quality.length = wage.length</code></li>\\n\\t<li><code>1 &lt;= quality[i] &lt;= 10000</code></li>\\n\\t<li><code>1 &lt;= wage[i] &lt;= 10000</code></li>\\n\\t<li>与正确答案误差在&nbsp;<code>10^-5</code>&nbsp;之内的答案将被视为正确的。</li>\\n</ol>\\n","title":"857. 雇佣 K 名工人的最低成本","relatedTags":["贪心","数组","排序","堆（优先队列）"],"difficult":"Hard","lang":["javascript"],"uniqueID":"857","slug":"857-Minimum-Cost-to-Hire-K-Workers"}')}}]);