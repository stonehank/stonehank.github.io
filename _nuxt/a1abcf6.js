(window.webpackJsonp=window.webpackJsonp||[]).push([[439],{1237:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">arr</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> sortByBits = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">arr</span>) </span>{\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">count</span>(<span class=\\"hljs-params\\">num</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">while</span>(num&gt;<span class=\\"hljs-number\\">0</span>){\\n      res+=num % <span class=\\"hljs-number\\">2</span>\\n      num=<span class=\\"hljs-built_in\\">Math</span>.floor(num/<span class=\\"hljs-number\\">2</span>)\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> res\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> aux=[]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> n <span class=\\"hljs-keyword\\">of</span> arr){\\n    aux.push([count(n),n])\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> aux.sort(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">a,b</span>)=&gt;</span>a[<span class=\\"hljs-number\\">0</span>]===b[<span class=\\"hljs-number\\">0</span>] ? a[<span class=\\"hljs-number\\">1</span>]-b[<span class=\\"hljs-number\\">1</span>] : a[<span class=\\"hljs-number\\">0</span>]-b[<span class=\\"hljs-number\\">0</span>]).map(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">ar</span>)=&gt;</span>ar[<span class=\\"hljs-number\\">1</span>])\\n};\\n</code></pre>\\n"],"querySlug":"sort-integers-by-the-number-of-1-bits","created_at":"2020-02-28","timeArr":[2020,1,28,14,59,6,0],"hasThinking":false,"content":"<p>给你一个整数数组&nbsp;<code>arr</code>&nbsp;。请你将数组中的元素按照其二进制表示中数字 <strong>1</strong> 的数目升序排序。</p>\\n\\n<p>如果存在多个数字二进制中&nbsp;<strong>1</strong>&nbsp;的数目相同，则必须将它们按照数值大小升序排列。</p>\\n\\n<p>请你返回排序后的数组。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>arr = [0,1,2,3,4,5,6,7,8]\\n<strong>输出：</strong>[0,1,2,4,8,3,5,6,7]\\n<strong>解释：</strong>[0] 是唯一一个有 0 个 1 的数。\\n[1,2,4,8] 都有 1 个 1 。\\n[3,5,6] 有 2 个 1 。\\n[7] 有 3 个 1 。\\n按照 1 的个数排序得到的结果数组为 [0,1,2,4,8,3,5,6,7]\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>arr = [1024,512,256,128,64,32,16,8,4,2,1]\\n<strong>输出：</strong>[1,2,4,8,16,32,64,128,256,512,1024]\\n<strong>解释：</strong>数组中所有整数二进制下都只有 1 个 1 ，所以你需要按照数值大小将它们排序。\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>arr = [10000,10000]\\n<strong>输出：</strong>[10000,10000]\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre><strong>输入：</strong>arr = [2,3,5,7,11,13,17,19]\\n<strong>输出：</strong>[2,3,5,17,7,11,13,19]\\n</pre>\\n\\n<p><strong>示例 5：</strong></p>\\n\\n<pre><strong>输入：</strong>arr = [10,100,1000,10000]\\n<strong>输出：</strong>[10,100,10000,1000]\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= arr.length &lt;= 500</code></li>\\n\\t<li><code>0 &lt;= arr[i] &lt;= 10^4</code></li>\\n</ul>\\n","title":"1356. 根据数字二进制下 1 的数目排序","relatedTags":["位运算","数组","计数","排序"],"difficult":"Easy","lang":["javascript"],"uniqueID":"1356","slug":"1356-Sort-Integers-by-The-Number-of-1-Bits"}')}}]);