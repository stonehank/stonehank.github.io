(window.webpackJsonp=window.webpackJsonp||[]).push([[424],{1222:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">s</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> removePalindromeSub = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">s</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(s===<span class=\\"hljs-string\\">\'\'</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">if</span>(isP(s))<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">1</span>\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">2</span>\\n  \\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">isP</span>(<span class=\\"hljs-params\\">str</span>)</span>{\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;=str.length/<span class=\\"hljs-number\\">2</span>;i++){\\n      <span class=\\"hljs-keyword\\">if</span>(str[i]!==str[str.length-i<span class=\\"hljs-number\\">-1</span>])<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"remove-palindromic-subsequences","created_at":"2020-01-31","timeArr":[2020,0,31,11,1,26,0],"hasThinking":false,"content":"<p>给你一个字符串&nbsp;<code>s</code>，它仅由字母&nbsp;<code>&#39;a&#39;</code> 和 <code>&#39;b&#39;</code>&nbsp;组成。每一次删除操作都可以从 <code>s</code> 中删除一个回文 <strong>子序列</strong>。</p>\\n\\n<p>返回删除给定字符串中所有字符（字符串为空）的最小删除次数。</p>\\n\\n<p>「子序列」定义：如果一个字符串可以通过删除原字符串某些字符而不改变原字符顺序得到，那么这个字符串就是原字符串的一个子序列。</p>\\n\\n<p>「回文」定义：如果一个字符串向后和向前读是一致的，那么这个字符串就是一个回文。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>s = &quot;ababa&quot;\\n<strong>输出：</strong>1\\n<strong>解释：</strong>字符串本身就是回文序列，只需要删除一次。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>s = &quot;abb&quot;\\n<strong>输出：</strong>2\\n<strong>解释：</strong>&quot;<strong>a</strong>bb&quot; -&gt; &quot;<strong>bb</strong>&quot; -&gt; &quot;&quot;. \\n先删除回文子序列 &quot;a&quot;，然后再删除 &quot;bb&quot;。\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>s = &quot;baabb&quot;\\n<strong>输出：</strong>2\\n<strong>解释：</strong>&quot;<strong>baa</strong>b<strong>b</strong>&quot; -&gt; &quot;b&quot; -&gt; &quot;&quot;. \\n先删除回文子序列 &quot;baab&quot;，然后再删除 &quot;b&quot;。\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre><strong>输入：</strong>s = &quot;&quot;\\n<strong>输出：</strong>0\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>0 &lt;= s.length &lt;= 1000</code></li>\\n\\t<li><code>s</code> 仅包含字母&nbsp;&#39;a&#39;&nbsp; 和 &#39;b&#39;</li>\\n</ul>\\n","title":"1332. 删除回文子序列","relatedTags":["双指针","字符串"],"difficult":"Easy","lang":["javascript"],"uniqueID":"1332","slug":"1332-Remove-Palindromic-Subsequences"}')}}]);