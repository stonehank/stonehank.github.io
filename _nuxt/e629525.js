(window.webpackJsonp=window.webpackJsonp||[]).push([[781],{1579:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{character[][]}</span> <span class=\\"hljs-variable\\">board</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{void}</span> </span>Do not return anything, modify board in-place instead.\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> solveSudoku = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">board</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> memRow=<span class=\\"hljs-built_in\\">Array</span>(<span class=\\"hljs-number\\">9</span>).fill().map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span>=&gt;</span><span class=\\"hljs-built_in\\">Array</span>(<span class=\\"hljs-number\\">10</span>).fill(<span class=\\"hljs-literal\\">false</span>)),\\n      memCol=<span class=\\"hljs-built_in\\">Array</span>(<span class=\\"hljs-number\\">9</span>).fill().map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span>=&gt;</span><span class=\\"hljs-built_in\\">Array</span>(<span class=\\"hljs-number\\">10</span>).fill(<span class=\\"hljs-literal\\">false</span>)),\\n      memBox=<span class=\\"hljs-built_in\\">Array</span>(<span class=\\"hljs-number\\">9</span>).fill().map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span>=&gt;</span><span class=\\"hljs-built_in\\">Array</span>(<span class=\\"hljs-number\\">10</span>).fill(<span class=\\"hljs-literal\\">false</span>))\\n  <span class=\\"hljs-keyword\\">let</span> needToFill=[]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> r=<span class=\\"hljs-number\\">0</span>;r&lt;<span class=\\"hljs-number\\">9</span>;r++){\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> c=<span class=\\"hljs-number\\">0</span>;c&lt;<span class=\\"hljs-number\\">9</span>;c++){\\n      <span class=\\"hljs-keyword\\">let</span> curVal=board[r][c]\\n      <span class=\\"hljs-keyword\\">if</span>(curVal!==<span class=\\"hljs-string\\">\'.\'</span>){\\n        memRow[r][curVal]=<span class=\\"hljs-literal\\">true</span>\\n        memCol[c][curVal]=<span class=\\"hljs-literal\\">true</span>\\n        <span class=\\"hljs-keyword\\">let</span> boxID=<span class=\\"hljs-built_in\\">Math</span>.floor(r/<span class=\\"hljs-number\\">3</span>)*<span class=\\"hljs-number\\">3</span>+<span class=\\"hljs-built_in\\">Math</span>.floor(c/<span class=\\"hljs-number\\">3</span>)\\n        memBox[boxID][curVal]=<span class=\\"hljs-literal\\">true</span>\\n      }<span class=\\"hljs-keyword\\">else</span>{\\n        needToFill.push([r,c])\\n      }\\n    }\\n  }\\n  dfs(<span class=\\"hljs-number\\">0</span>)\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">dfs</span>(<span class=\\"hljs-params\\">index</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(index===needToFill.length)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n    <span class=\\"hljs-keyword\\">let</span> [r,c]=needToFill[index]\\n    <span class=\\"hljs-keyword\\">let</span> boxID=<span class=\\"hljs-built_in\\">Math</span>.floor(r/<span class=\\"hljs-number\\">3</span>)*<span class=\\"hljs-number\\">3</span>+<span class=\\"hljs-built_in\\">Math</span>.floor(c/<span class=\\"hljs-number\\">3</span>)\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> val=<span class=\\"hljs-number\\">1</span>;val&lt;<span class=\\"hljs-number\\">10</span>;val++){\\n      <span class=\\"hljs-keyword\\">if</span>(!memRow[r][val] &amp;&amp; !memCol[c][val] &amp;&amp; !memBox[boxID][val]){\\n        memRow[r][val]=<span class=\\"hljs-literal\\">true</span>\\n        memCol[c][val]=<span class=\\"hljs-literal\\">true</span>\\n        memBox[boxID][val]=<span class=\\"hljs-literal\\">true</span>\\n        board[r][c]=val+<span class=\\"hljs-string\\">\'\'</span>\\n        <span class=\\"hljs-keyword\\">if</span>(dfs(index+<span class=\\"hljs-number\\">1</span>))<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n        board[r][c]=<span class=\\"hljs-string\\">\'.\'</span>\\n        memRow[r][val]=<span class=\\"hljs-literal\\">false</span>\\n        memCol[c][val]=<span class=\\"hljs-literal\\">false</span>\\n        memBox[boxID][val]=<span class=\\"hljs-literal\\">false</span>\\n      }\\n    }\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"sudoku-solver","created_at":"2019-04-04","timeArr":[2019,3,4,18,29,56,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>这道题要求填充，解决办法就是<code>回溯</code>，但是每填一个数字，需要检查是否有效，如果每次都重新检查，时间消耗太高。</p>\\n<p>因此用<code>hash</code>保存初始<code>行</code>，<code>列</code>，<code>块</code>的数字，后面回溯过程中，每填一个数字，只要检查<code>hash</code>便可以，有效即更新<code>hash</code>。</p>\\n","content":"<p>编写一个程序，通过填充空格来解决数独问题。</p>\\n\\n<p>数独的解法需<strong> 遵循如下规则</strong>：</p>\\n\\n<ol>\\n\\t<li>数字 <code>1-9</code> 在每一行只能出现一次。</li>\\n\\t<li>数字 <code>1-9</code> 在每一列只能出现一次。</li>\\n\\t<li>数字 <code>1-9</code> 在每一个以粗实线分隔的 <code>3x3</code> 宫内只能出现一次。（请参考示例图）</li>\\n</ol>\\n\\n<p>数独部分空格内已填入了数字，空白格用 <code>\'.\'</code> 表示。</p>\\n\\n<p> </p>\\n\\n<div class=\\"top-view__1vxA\\">\\n<div class=\\"original__bRMd\\">\\n<div>\\n<p><strong>示例：</strong></p>\\n<img src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/04/12/250px-sudoku-by-l2g-20050714svg.png\\" style=\\"height:250px; width:250px\\" />\\n<pre>\\n<strong>输入：</strong>boardn<strong>输出：</strong>[[\\"5\\",\\"3\\",\\"4\\",\\"6\\",\\"7\\",\\"8\\",\\"9\\",\\"1\\",\\"2\\"],[\\"6\\",\\"7\\",\\"2\\",\\"1\\",\\"9\\",\\"5\\",\\"3\\",\\"4\\",\\"8\\"],[\\"1\\",\\"9\\",\\"8\\",\\"3\\",\\"4\\",\\"2\\",\\"5\\",\\"6\\",\\"7\\"],[\\"8\\",\\"5\\",\\"9\\",\\"7\\",\\"6\\",\\"1\\",\\"4\\",\\"2\\",\\"3\\"],[\\"4\\",\\"2\\",\\"6\\",\\"8\\",\\"5\\",\\"3\\",\\"7\\",\\"9\\",\\"1\\"],[\\"7\\",\\"1\\",\\"3\\",\\"9\\",\\"2\\",\\"4\\",\\"8\\",\\"5\\",\\"6\\"],[\\"9\\",\\"6\\",\\"1\\",\\"5\\",\\"3\\",\\"7\\",\\"2\\",\\"8\\",\\"4\\"],[\\"2\\",\\"8\\",\\"7\\",\\"4\\",\\"1\\",\\"9\\",\\"6\\",\\"3\\",\\"5\\"],[\\"3\\",\\"4\\",\\"5\\",\\"2\\",\\"8\\",\\"6\\",\\"1\\",\\"7\\",\\"9\\"]]\\n<strong>解释：</strong>输入的数独如上图所示，唯一有效的解决方案如下所示：\\n\\n<img src=\\" https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/04/12/250px-sudoku-by-l2g-20050714_solutionsvg.png\\" style=\\"height:250px; width:250px\\" />\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>board.length == 9</code></li>\\n\\t<li><code>board[i].length == 9</code></li>\\n\\t<li><code>board[i][j]</code> 是一位数字或者 <code>\'.\'</code></li>\\n\\t<li>题目数据 <strong>保证</strong> 输入数独仅有一个解</li>\\n</ul>\\n</div>\\n</div>\\n</div>\\n","title":"37. 解数独","relatedTags":["数组","回溯","矩阵"],"difficult":"Hard","lang":["javascript"],"uniqueID":"37","slug":"37-Sudoku-Solver"}')}}]);