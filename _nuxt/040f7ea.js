(window.webpackJsonp=window.webpackJsonp||[]).push([[1191],{1989:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">S</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">indexes</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string[]}</span> <span class=\\"hljs-variable\\">sources</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string[]}</span> <span class=\\"hljs-variable\\">targets</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{string}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> findReplaceString = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">S, indexes, sources, targets</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> newS=<span class=\\"hljs-string\\">\'\'</span>\\n  <span class=\\"hljs-keyword\\">let</span> endID=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">let</span> auxIdx=[]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;indexes.length;i++){\\n    auxIdx[i]=[indexes[i],i]\\n  }\\n  auxIdx.sort(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">a,b</span>)=&gt;</span>a[<span class=\\"hljs-number\\">0</span>]-b[<span class=\\"hljs-number\\">0</span>])\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;auxIdx.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> [id,initI]=auxIdx[i]\\n    <span class=\\"hljs-keyword\\">let</span> s=sources[initI],t=targets[initI]\\n    newS+=S.substring(endID,id)\\n    endID=id+s.length\\n    <span class=\\"hljs-keyword\\">let</span> inits=S.substring(id,endID)\\n    <span class=\\"hljs-keyword\\">if</span>(inits===s){\\n      newS+=t\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      newS+=inits\\n    }\\n  }\\n  newS+=S.substring(endID)\\n  <span class=\\"hljs-keyword\\">return</span> newS\\n};\\n</code></pre>\\n"],"querySlug":"find-and-replace-in-string","created_at":"2019-03-28","timeArr":[2019,2,28,15,33,18,0],"hasThinking":false,"content":"<p>某个字符串 <code>S</code> 需要执行一些替换操作，用新的字母组替换原有的字母组（不一定大小相同）。</p>\\n\\n<p>每个替换操作具有 3 个参数：起始索引 <code>i</code>，源字 <code>x</code> 和目标字 <code>y</code>。规则是：如果 <code>x</code> 从<strong>原始字符串 <code>S</code></strong> 中的位置 <code>i</code> 开始，那么就用 <code>y</code> 替换出现的 <code>x</code>。如果没有，则什么都不做。</p>\\n\\n<p>举个例子，如果 <code>S = “abcd”</code> 并且替换操作 <code>i = 2，x = “cd”，y = “ffff”</code>，那么因为 <code>“cd”</code> 从原始字符串 <code>S</code> 中的位置 <code>2</code> 开始，所以用 <code>“ffff”</code> 替换它。</p>\\n\\n<p>再来看 <code>S = “abcd”</code> 上的另一个例子，如果一个替换操作<code> i = 0，x = “ab”，y = “eee”</code>，以及另一个替换操作 <code>i = 2，x = “ec”，y = “ffff”</code>，那么第二个操作将不会执行，因为原始字符串中 <code>S[2] = \'c\'</code>，与 <code>x[0] = \'e\'</code> 不匹配。</p>\\n\\n<p>所有这些操作同时发生。保证在替换时不会有任何重叠： <code>S = \\"abc\\", indexes = [0, 1], sources = [\\"ab\\",\\"bc\\"]</code> 不是有效的测试用例。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>S = \\"abcd\\", indexes = [0,2], sources = [\\"a\\",\\"cd\\"], targets = [\\"eee\\",\\"ffff\\"]\\n<strong>输出：</strong>\\"eeebffff\\"\\n<strong>解释：\\n</strong>\\"a\\" 从 S 中的索引 0 开始，所以它被替换为 \\"eee\\"。\\n\\"cd\\" 从 S 中的索引 2 开始，所以它被替换为 \\"ffff\\"。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>S = \\"abcd\\", indexes = [0,2], sources = [\\"ab\\",\\"ec\\"], targets = [\\"eee\\",\\"ffff\\"]\\n<strong>输出：</strong>\\"eeecd\\"\\n<strong>解释：\\n</strong>\\"ab\\" 从 S 中的索引 0 开始，所以它被替换为 \\"eee\\"。\\n\\"ec\\" 没有从<strong>原始的</strong> S 中的索引 2 开始，所以它没有被替换。\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>0 <= S.length <= 1000</code></li>\\n\\t<li><code>S</code> 仅由小写英文字母组成</li>\\n\\t<li><code>0 <= indexes.length <= 100</code></li>\\n\\t<li><code>0 <= indexes[i] < S.length</code></li>\\n\\t<li><code>sources.length == indexes.length</code></li>\\n\\t<li><code>targets.length == indexes.length</code></li>\\n\\t<li><code>1 <= sources[i].length, targets[i].length <= 50</code></li>\\n\\t<li><code>sources[i]</code> 和 <code>targets[i]</code> 仅由小写英文字母组成</li>\\n</ul>\\n\\n<p> </p>\\n","title":"833. 字符串中的查找与替换","relatedTags":["数组","字符串","排序"],"difficult":"Middle","lang":["javascript"],"uniqueID":"833","slug":"833-Find-And-Replace-in-String"}')}}]);