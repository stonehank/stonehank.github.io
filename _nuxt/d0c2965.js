(window.webpackJsonp=window.webpackJsonp||[]).push([[273],{1071:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">nums</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{TreeNode}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> sortedArrayToBST = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">nums</span>) </span>{\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">create</span>(<span class=\\"hljs-params\\">start,end</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(start&gt;end)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">null</span>\\n    <span class=\\"hljs-keyword\\">let</span> mid=<span class=\\"hljs-built_in\\">Math</span>.floor((start+end)/<span class=\\"hljs-number\\">2</span>) \\n    <span class=\\"hljs-keyword\\">let</span> root=<span class=\\"hljs-keyword\\">new</span> TreeNode(nums[mid])\\n    root.left=create(start,mid<span class=\\"hljs-number\\">-1</span>)\\n    root.right=create(mid+<span class=\\"hljs-number\\">1</span>,end)\\n    <span class=\\"hljs-keyword\\">return</span> root\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> create(<span class=\\"hljs-number\\">0</span>,nums.length<span class=\\"hljs-number\\">-1</span>)\\n};\\n</code></pre>\\n"],"querySlug":"convert-sorted-array-to-binary-search-tree","created_at":"2019-03-18","timeArr":[2019,2,18,14,6,41,0],"hasThinking":false,"content":"<p>给你一个整数数组 <code>nums</code> ，其中元素已经按 <strong>升序</strong> 排列，请你将其转换为一棵 <strong>高度平衡</strong> 二叉搜索树。</p>\\n\\n<p><strong>高度平衡 </strong>二叉树是一棵满足「每个节点的左右两个子树的高度差的绝对值不超过 1 」的二叉树。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2021/02/18/btree1.jpg\\" style=\\"width: 302px; height: 222px;\\" />\\n<pre>\\n<strong>输入：</strong>nums = [-10,-3,0,5,9]\\n<strong>输出：</strong>[0,-3,9,-10,null,5]\\n<strong>解释：</strong>[0,-10,5,null,-3,null,9] 也将被视为正确答案：\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2021/02/18/btree2.jpg\\" style=\\"width: 302px; height: 222px;\\" />\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2021/02/18/btree.jpg\\" style=\\"width: 342px; height: 142px;\\" />\\n<pre>\\n<strong>输入：</strong>nums = [1,3]\\n<strong>输出：</strong>[3,1]\\n<strong>解释：</strong>[1,3] 和 [3,1] 都是高度平衡二叉搜索树。\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= nums.length <= 10<sup>4</sup></code></li>\\n\\t<li><code>-10<sup>4</sup> <= nums[i] <= 10<sup>4</sup></code></li>\\n\\t<li><code>nums</code> 按 <strong>严格递增</strong> 顺序排列</li>\\n</ul>\\n","title":"108. 将有序数组转换为二叉搜索树","relatedTags":["树","二叉搜索树","数组","分治","二叉树"],"difficult":"Easy","lang":["javascript"],"uniqueID":"108","slug":"108-Convert-Sorted-Array-to-Binary-Search-Tree"}')}}]);