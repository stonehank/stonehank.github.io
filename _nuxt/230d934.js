(window.webpackJsonp=window.webpackJsonp||[]).push([[231],{1029:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{TreeNode}</span> <span class=\\"hljs-variable\\">root</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> sumRootToLeaf = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">root</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-number\\">0</span>,MOD=<span class=\\"hljs-number\\">1e9</span>+<span class=\\"hljs-number\\">7</span>\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">calc</span>(<span class=\\"hljs-params\\">root,sum</span>)</span>{\\n    sum=(sum+root.val) % MOD\\n    <span class=\\"hljs-keyword\\">if</span>(root.left)calc(root.left,sum*<span class=\\"hljs-number\\">2</span>)\\n    <span class=\\"hljs-keyword\\">if</span>(root.right)calc(root.right,sum*<span class=\\"hljs-number\\">2</span>)\\n    <span class=\\"hljs-keyword\\">if</span>(!root.left &amp;&amp; !root.right){\\n      res=(res+sum) % MOD\\n    }\\n  }\\n  calc(root,<span class=\\"hljs-number\\">0</span>)\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"sum-of-root-to-leaf-binary-numbers","created_at":"2019-04-07","timeArr":[2019,3,7,13,42,48,0],"hasThinking":false,"content":"<p>给出一棵二叉树，其上每个结点的值都是 <code>0</code> 或 <code>1</code> 。每一条从根到叶的路径都代表一个从最高有效位开始的二进制数。例如，如果路径为 <code>0 -> 1 -> 1 -> 0 -> 1</code>，那么它表示二进制数 <code>01101</code>，也就是 <code>13</code> 。</p>\\n\\n<p>对树上的每一片叶子，我们都要找出从根到该叶子的路径所表示的数字。</p>\\n\\n<p>返回这些数字之和。题目数据保证答案是一个 <strong>32 位 </strong>整数。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2019/04/04/sum-of-root-to-leaf-binary-numbers.png\\" style=\\"width: 450px; height: 296px;\\" />\\n<pre>\\n<strong>输入：</strong>root = [1,0,1,0,1,0,1]\\n<strong>输出：</strong>22\\n<strong>解释：</strong>(100) + (101) + (110) + (111) = 4 + 5 + 6 + 7 = 22\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>root = [0]\\n<strong>输出：</strong>0\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>root = [1]\\n<strong>输出：</strong>1\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>root = [1,1]\\n<strong>输出：</strong>3\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li>树中的结点数介于 <code>1</code> 和 <code>1000</code> 之间。</li>\\n\\t<li><code>Node.val</code> 为 <code>0</code> 或 <code>1</code> 。</li>\\n</ul>\\n","title":"1022. 从根到叶的二进制数之和","relatedTags":["树","深度优先搜索","二叉树"],"difficult":"Easy","lang":["javascript"],"uniqueID":"1022","slug":"1022-Sum-of-Root-To-Leaf-Binary-Numbers"}')}}]);