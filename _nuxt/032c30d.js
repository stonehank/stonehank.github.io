(window.webpackJsonp=window.webpackJsonp||[]).push([[573],{1371:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for singly-linked list.\\n * function ListNode(val) {\\n *     this.val = val;\\n *     this.next = null;\\n * }\\n */</span>\\n\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{ListNode}</span> <span class=\\"hljs-variable\\">headA</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{ListNode}</span> <span class=\\"hljs-variable\\">headB</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{ListNode}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> getIntersectionNode = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">headA, headB</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(!headA || !headB)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">null</span>\\n  <span class=\\"hljs-keyword\\">let</span> nodeA=headA,nodeB=headB\\n  <span class=\\"hljs-keyword\\">while</span>(nodeA || nodeB){\\n    <span class=\\"hljs-keyword\\">if</span>(!nodeA)nodeA=headB\\n    <span class=\\"hljs-keyword\\">if</span>(!nodeB)nodeB=headA\\n    <span class=\\"hljs-keyword\\">if</span>(nodeA===nodeB)<span class=\\"hljs-keyword\\">return</span> nodeA\\n    nodeA=nodeA.next\\n    nodeB=nodeB.next\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">null</span>\\n};\\n</code></pre>\\n"],"querySlug":"intersection-of-two-linked-lists","created_at":"2019-04-19","timeArr":[2019,3,19,23,4,54,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>假设<code>node</code>从<code>headA</code>遍历完后接着从<code>headB</code>开始，<code>nodeB</code>从<code>headB</code>到遍历完后接着从<code>headA</code>开始，那么最后这两条链表是等长的，并且最终他们会同时到达\\n<code>headA==null &amp;&amp; headB==null</code>的状态。</p>\\n<p>而在这段遍历中，如果存在<code>nodeA===nodeB</code>的情况，说明这就是它们的相交点。</p>\\n<p>否则则不存在相交点。</p>\\n","content":"<p>给你两个单链表的头节点 <code>headA</code> 和 <code>headB</code> ，请你找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回 <code>null</code> 。</p>\\n\\n<p>图示两个链表在节点 <code>c1</code> 开始相交<strong>：</strong></p>\\n\\n<p><a href=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png\\" target=\\"_blank\\"><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png\\" style=\\"height: 130px; width: 400px;\\" /></a></p>\\n\\n<p>题目数据 <strong>保证</strong> 整个链式结构中不存在环。</p>\\n\\n<p><strong>注意</strong>，函数返回结果后，链表必须 <strong>保持其原始结构</strong> 。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<p><a href=\\"https://assets.leetcode.com/uploads/2018/12/13/160_example_1.png\\" target=\\"_blank\\"><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_1.png\\" style=\\"height: 130px; width: 400px;\\" /></a></p>\\n\\n<pre>\\n<strong>输入：</strong>intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3\\n<strong>输出：</strong>Intersected at \'8\'\\n<strong>解释：</strong>相交节点的值为 8 （注意，如果两个链表相交则不能为 0）。\\n从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。\\n在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<p><a href=\\"https://assets.leetcode.com/uploads/2018/12/13/160_example_2.png\\" target=\\"_blank\\"><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_2.png\\" style=\\"height: 136px; width: 350px;\\" /></a></p>\\n\\n<pre>\\n<strong>输入：</strong>intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1\\n<strong>输出：</strong>Intersected at \'2\'\\n<strong>解释：</strong>相交节点的值为 2 （注意，如果两个链表相交则不能为 0）。\\n从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。\\n在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<p><a href=\\"https://assets.leetcode.com/uploads/2018/12/13/160_example_3.png\\" target=\\"_blank\\"><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_3.png\\" style=\\"height: 126px; width: 200px;\\" /></a></p>\\n\\n<pre>\\n<strong>输入：</strong>intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2\\n<strong>输出：</strong>null\\n<strong>解释：</strong>从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。\\n由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。\\n这两个链表不相交，因此返回 null 。\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>listA</code> 中节点数目为 <code>m</code></li>\\n\\t<li><code>listB</code> 中节点数目为 <code>n</code></li>\\n\\t<li><code>0 <= m, n <= 3 * 10<sup>4</sup></code></li>\\n\\t<li><code>1 <= Node.val <= 10<sup>5</sup></code></li>\\n\\t<li><code>0 <= skipA <= m</code></li>\\n\\t<li><code>0 <= skipB <= n</code></li>\\n\\t<li>如果 <code>listA</code> 和 <code>listB</code> 没有交点，<code>intersectVal</code> 为 <code>0</code></li>\\n\\t<li>如果 <code>listA</code> 和 <code>listB</code> 有交点，<code>intersectVal == listA[skipA + 1] == listB[skipB + 1]</code></li>\\n</ul>\\n\\n<p> </p>\\n\\n<p><strong>进阶：</strong>你能否设计一个时间复杂度 <code>O(n)</code> 、仅用 <code>O(1)</code> 内存的解决方案？</p>\\n","title":"160. 相交链表","relatedTags":["哈希表","链表","双指针"],"difficult":"Easy","lang":["javascript"],"uniqueID":"160","slug":"160-Intersection-of-Two-Linked-Lists"}')}}]);