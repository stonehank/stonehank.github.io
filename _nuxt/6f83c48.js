(window.webpackJsonp=window.webpackJsonp||[]).push([[302],{1100:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{TreeNode}</span> <span class=\\"hljs-variable\\">root</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{TreeNode}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> lcaDeepestLeaves = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">root</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> parent=<span class=\\"hljs-literal\\">null</span>\\n  <span class=\\"hljs-keyword\\">let</span> maxLevel=<span class=\\"hljs-number\\">0</span>\\n  deep(root,<span class=\\"hljs-number\\">0</span>)\\n  <span class=\\"hljs-keyword\\">return</span> parent\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">deep</span>(<span class=\\"hljs-params\\">root,level</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(!root)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>\\n\\n    <span class=\\"hljs-keyword\\">let</span> left=deep(root.left,level+<span class=\\"hljs-number\\">1</span>)\\n    <span class=\\"hljs-keyword\\">let</span> right=deep(root.right,level+<span class=\\"hljs-number\\">1</span>)\\n    <span class=\\"hljs-keyword\\">let</span> max=<span class=\\"hljs-built_in\\">Math</span>.max(left,right)+<span class=\\"hljs-number\\">1</span>\\n    maxLevel=<span class=\\"hljs-built_in\\">Math</span>.max(maxLevel,level)\\n    <span class=\\"hljs-keyword\\">if</span>(left===right){\\n      <span class=\\"hljs-keyword\\">if</span>(level+left===maxLevel || max===maxLevel){\\n        parent=root\\n      }\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> max\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"lowest-common-ancestor-of-deepest-leaves","created_at":"2019-07-14","timeArr":[2019,6,14,11,0,21,0],"hasThinking":false,"content":"<p>给你一个有根节点的二叉树，找到它最深的叶节点的最近公共祖先。</p>\\n\\n<p>回想一下：</p>\\n\\n<ul>\\n\\t<li><strong>叶节点</strong> 是二叉树中没有子节点的节点</li>\\n\\t<li>树的根节点的 <strong>深度 </strong>为 <code>0</code>，如果某一节点的深度为 <code>d</code>，那它的子节点的深度就是 <code>d+1</code></li>\\n\\t<li>如果我们假定 <code>A</code> 是一组节点 <code>S</code> 的 <strong>最近公共祖先</strong>，<code>S</code> 中的每个节点都在以 <code>A</code> 为根节点的子树中，且 <code>A</code> 的深度达到此条件下可能的最大值。</li>\\n</ul>\\n\\n<p> </p>\\n\\n<p>注意：本题与力扣 865 重复：<a href=\\"https://leetcode-cn.com/problems/smallest-subtree-with-all-the-deepest-nodes/\\">https://leetcode-cn.com/problems/smallest-subtree-with-all-the-deepest-nodes/</a></p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n<img alt=\\"\\" src=\\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/01/sketch1.png\\" style=\\"width: 600px; height: 510px;\\" />\\n<pre>\\n<strong>输入：</strong>root = [3,5,1,6,2,0,8,null,null,7,4]\\n<strong>输出：</strong>[2,7,4]\\n<strong>解释：</strong>\\n我们返回值为 2 的节点，在图中用黄色标记。\\n在图中用蓝色标记的是树的最深的节点。\\n注意，节点 6、0 和 8 也是叶节点，但是它们的深度是 2 ，而节点 7 和 4 的深度是 3 。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>root = [1]\\n<strong>输出：</strong>[1]\\n<strong>解释：</strong>根节点是树中最深的节点，它是它本身的最近公共祖先。\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>root = [0,1,3,null,2]\\n<strong>输出：</strong>[2]\\n<strong>解释：</strong>树中最深的叶节点是 2 ，最近公共祖先是它自己。</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li>给你的树中将有 1 到 1000 个节点。</li>\\n\\t<li>树中每个节点的值都在 1 到 1000 之间。</li>\\n\\t<li>每个节点的值都是独一无二的。</li>\\n</ul>\\n","title":"1123. 最深叶节点的最近公共祖先","relatedTags":["树","深度优先搜索","广度优先搜索","哈希表","二叉树"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1123","slug":"1123-Lowest-Common-Ancestor-of-Deepest-Leaves"}')}}]);