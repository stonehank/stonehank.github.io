(window.webpackJsonp=window.webpackJsonp||[]).push([[831],{1629:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{character[][]}</span> <span class=\\"hljs-variable\\">board</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> countBattleships = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">board</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> count=<span class=\\"hljs-number\\">0</span>;\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;board.length;i++){\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;board[<span class=\\"hljs-number\\">0</span>].length;j++){\\n      <span class=\\"hljs-keyword\\">if</span>(board[i][j]===<span class=\\"hljs-string\\">\\"X\\"</span>){\\n        <span class=\\"hljs-keyword\\">if</span>(i&gt;<span class=\\"hljs-number\\">0</span> &amp;&amp; board[i<span class=\\"hljs-number\\">-1</span>][j]===<span class=\\"hljs-string\\">\\"X\\"</span>)<span class=\\"hljs-keyword\\">continue</span>;\\n        <span class=\\"hljs-keyword\\">if</span>(j&gt;<span class=\\"hljs-number\\">0</span> &amp;&amp; board[i][j<span class=\\"hljs-number\\">-1</span>]===<span class=\\"hljs-string\\">\\"X\\"</span>)<span class=\\"hljs-keyword\\">continue</span>;\\n        count++\\n      }\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> count\\n};\\n</code></pre>\\n"],"querySlug":"battleships-in-a-board","created_at":"2021-04-28","timeArr":[2021,3,28,16,43,19,459],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>按从上到下，从左到右遍历二维数组，每次遍历只需要检查当前格子是<code>X</code>并且这个格子的左边和上边不是<code>X</code>，那么说明这是一艘新的船。</p>\\n","content":"<p>给定一个二维的甲板， 请计算其中有多少艘战舰。&nbsp;战舰用&nbsp;<code>&#39;X&#39;</code>表示，空位用&nbsp;<code>&#39;.&#39;</code>表示。&nbsp;你需要遵守以下规则：</p>\\n\\n<ul>\\n\\t<li>给你一个有效的甲板，仅由战舰或者空位组成。</li>\\n\\t<li>战舰只能水平或者垂直放置。换句话说,战舰只能由&nbsp;<code>1xN</code> (1 行, N 列)组成，或者&nbsp;<code>Nx1</code> (N 行, 1 列)组成，其中N可以是任意大小。</li>\\n\\t<li>两艘战舰之间至少有一个水平或垂直的空位分隔&nbsp;- 即没有相邻的战舰。</li>\\n</ul>\\n\\n<p><strong>示例 :</strong></p>\\n\\n<pre>\\nX..X\\n...X\\n...X\\n</pre>\\n\\n<p>在上面的甲板中有2艘战舰。</p>\\n\\n<p><strong>无效样例 :</strong></p>\\n\\n<pre>\\n...X\\nXXXX\\n...X\\n</pre>\\n\\n<p>你不会收到这样的无效甲板&nbsp;- 因为战舰之间至少会有一个空位将它们分开。</p>\\n\\n<p><strong>进阶:</strong></p>\\n\\n<p>你可以用<strong>一次扫描算法</strong>，只使用<strong>O(1)额外空间，</strong>并且<strong>不修改</strong>甲板的值来解决这个问题吗？</p>\\n","title":"419. 甲板上的战舰","relatedTags":["深度优先搜索","数组","矩阵"],"difficult":"Middle","lang":["javascript"],"uniqueID":"419","slug":"419-Battleships-in-a-Board"}')}}]);