(window.webpackJsonp=window.webpackJsonp||[]).push([[583],{1381:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">nums</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> maximumGap = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">nums</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(nums.length&lt;<span class=\\"hljs-number\\">2</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>\\n  \\n  <span class=\\"hljs-keyword\\">let</span> arr=radixSort(nums)\\n  \\n  <span class=\\"hljs-keyword\\">let</span> maxGap=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">1</span>;i&lt;arr.length;i++){\\n    maxGap=<span class=\\"hljs-built_in\\">Math</span>.max(maxGap,arr[i]-arr[i<span class=\\"hljs-number\\">-1</span>])\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> maxGap\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">radixSort</span>(<span class=\\"hljs-params\\">arr</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> base=<span class=\\"hljs-number\\">10</span>,\\n        start=<span class=\\"hljs-number\\">1</span>\\n    <span class=\\"hljs-keyword\\">let</span> max=-<span class=\\"hljs-literal\\">Infinity</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;arr.length;i++){\\n      <span class=\\"hljs-keyword\\">if</span>(arr[i]&gt;max)max=arr[i]\\n    }\\n    <span class=\\"hljs-keyword\\">let</span> bucket=[]\\n    <span class=\\"hljs-keyword\\">let</span> digit=(max+<span class=\\"hljs-string\\">\'\'</span>).length\\n    <span class=\\"hljs-keyword\\">while</span>(digit-- &gt;<span class=\\"hljs-number\\">0</span>){\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;arr.length;i++){\\n        <span class=\\"hljs-keyword\\">let</span> m=<span class=\\"hljs-built_in\\">Math</span>.floor(arr[i] /start) % base\\n        <span class=\\"hljs-keyword\\">if</span>(!bucket[m])bucket[m]=[]\\n        bucket[m].push(arr[i])\\n      }\\n      arr=[]\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;bucket.length;i++){\\n        <span class=\\"hljs-keyword\\">if</span>(bucket[i]) arr=arr.concat(bucket[i])\\n      }\\n      bucket=[]\\n      start*=<span class=\\"hljs-number\\">10</span>\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> arr\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"maximum-gap","created_at":"2019-04-23","timeArr":[2019,3,23,12,27,49,0],"hasThinking":false,"content":"<p>给定一个无序的数组，找出数组在排序之后，相邻元素之间最大的差值。</p>\\n\\n<p>如果数组元素个数小于 2，则返回 0。</p>\\n\\n<p><strong>示例&nbsp;1:</strong></p>\\n\\n<pre><strong>输入:</strong> [3,6,9,1]\\n<strong>输出:</strong> 3\\n<strong>解释:</strong> 排序后的数组是 [1,3,6,9]<strong><em>, </em></strong>其中相邻元素 (3,6) 和 (6,9) 之间都存在最大差值 3。</pre>\\n\\n<p><strong>示例&nbsp;2:</strong></p>\\n\\n<pre><strong>输入:</strong> [10]\\n<strong>输出:</strong> 0\\n<strong>解释:</strong> 数组元素个数小于 2，因此返回 0。</pre>\\n\\n<p><strong>说明:</strong></p>\\n\\n<ul>\\n\\t<li>你可以假设数组中所有元素都是非负整数，且数值在 32 位有符号整数范围内。</li>\\n\\t<li>请尝试在线性时间复杂度和空间复杂度的条件下解决此问题。</li>\\n</ul>\\n","title":"164. 最大间距","relatedTags":["数组","桶排序","基数排序","排序"],"difficult":"Hard","lang":["javascript"],"uniqueID":"164","slug":"164-Maximum-Gap"}')}}]);