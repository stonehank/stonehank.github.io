(window.webpackJsonp=window.webpackJsonp||[]).push([[395],{1193:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">grid</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">k</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> shortestPath = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">grid, k</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> m=grid.length\\n  <span class=\\"hljs-keyword\\">let</span> n=grid[<span class=\\"hljs-number\\">0</span>].length\\n  <span class=\\"hljs-keyword\\">if</span>(m===<span class=\\"hljs-number\\">1</span> &amp;&amp; n===<span class=\\"hljs-number\\">1</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">if</span>(k&gt;=m+n<span class=\\"hljs-number\\">-2</span>)<span class=\\"hljs-keyword\\">return</span> m+n<span class=\\"hljs-number\\">-2</span>\\n  <span class=\\"hljs-keyword\\">let</span> arr=[{<span class=\\"hljs-attr\\">x</span>:<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-attr\\">y</span>:<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-attr\\">hasK</span>:<span class=\\"hljs-number\\">0</span>}]\\n  <span class=\\"hljs-keyword\\">let</span> step=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">let</span> moves=[[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">-1</span>],[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">1</span>],[<span class=\\"hljs-number\\">1</span>,<span class=\\"hljs-number\\">0</span>],[<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">0</span>]]\\n  <span class=\\"hljs-keyword\\">let</span> hash={}\\n  hash[<span class=\\"hljs-number\\">0</span>+<span class=\\"hljs-string\\">\' \'</span>+<span class=\\"hljs-number\\">0</span>]={<span class=\\"hljs-attr\\">x</span>:<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-attr\\">y</span>:<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-attr\\">hasK</span>:<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-attr\\">needDelete</span>:<span class=\\"hljs-literal\\">false</span>}\\n  <span class=\\"hljs-keyword\\">while</span>(arr.length&gt;<span class=\\"hljs-number\\">0</span>){\\n    <span class=\\"hljs-comment\\">// console.log(arr)</span>\\n    <span class=\\"hljs-keyword\\">let</span> len=arr.length\\n    step++\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;len;i++){\\n      <span class=\\"hljs-keyword\\">let</span> {x,y,hasK,needDelete}=arr.shift()\\n      <span class=\\"hljs-comment\\">// delete(hash[x+\' \'+y])</span>\\n      <span class=\\"hljs-keyword\\">if</span>(needDelete)<span class=\\"hljs-keyword\\">continue</span>\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> [dx,dy] <span class=\\"hljs-keyword\\">of</span> moves){\\n        <span class=\\"hljs-keyword\\">let</span> nx=dx+x,ny=dy+y\\n        <span class=\\"hljs-keyword\\">if</span>(nx&lt;<span class=\\"hljs-number\\">0</span> || nx&gt;=m || ny&lt;<span class=\\"hljs-number\\">0</span> || ny&gt;=n)<span class=\\"hljs-keyword\\">continue</span>\\n        <span class=\\"hljs-keyword\\">if</span>(grid[nx][ny]===<span class=\\"hljs-number\\">1</span>){\\n          <span class=\\"hljs-keyword\\">if</span>(hasK&lt;k){\\n            <span class=\\"hljs-keyword\\">if</span>(nx===m<span class=\\"hljs-number\\">-1</span> &amp;&amp; ny===n<span class=\\"hljs-number\\">-1</span>)<span class=\\"hljs-keyword\\">return</span> step\\n            <span class=\\"hljs-keyword\\">let</span> prev=hash[nx+<span class=\\"hljs-string\\">\' \'</span>+ny]\\n            <span class=\\"hljs-keyword\\">if</span>(prev!=<span class=\\"hljs-literal\\">null</span>){\\n              <span class=\\"hljs-keyword\\">if</span>(hasK+<span class=\\"hljs-number\\">1</span> &gt;=prev.hasK)<span class=\\"hljs-keyword\\">continue</span>\\n              <span class=\\"hljs-keyword\\">else</span>{\\n                hash[nx+<span class=\\"hljs-string\\">\' \'</span>+ny].needDelete=<span class=\\"hljs-literal\\">true</span>\\n              }\\n            }\\n            hash[nx+<span class=\\"hljs-string\\">\' \'</span>+ny]={<span class=\\"hljs-attr\\">x</span>:nx,<span class=\\"hljs-attr\\">y</span>:ny,<span class=\\"hljs-attr\\">hasK</span>:hasK+<span class=\\"hljs-number\\">1</span>,<span class=\\"hljs-attr\\">needDelete</span>:<span class=\\"hljs-literal\\">false</span>}\\n            arr.push(hash[nx+<span class=\\"hljs-string\\">\' \'</span>+ny])\\n          }\\n        }<span class=\\"hljs-keyword\\">else</span>{\\n          <span class=\\"hljs-keyword\\">if</span>(nx===m<span class=\\"hljs-number\\">-1</span> &amp;&amp; ny===n<span class=\\"hljs-number\\">-1</span>)<span class=\\"hljs-keyword\\">return</span> step\\n          <span class=\\"hljs-keyword\\">let</span> prev=hash[nx+<span class=\\"hljs-string\\">\' \'</span>+ny]\\n          <span class=\\"hljs-keyword\\">if</span>(prev!=<span class=\\"hljs-literal\\">null</span>){\\n             <span class=\\"hljs-keyword\\">if</span>(hasK &gt;=prev.hasK)<span class=\\"hljs-keyword\\">continue</span>\\n              <span class=\\"hljs-keyword\\">else</span>{\\n                 hash[nx+<span class=\\"hljs-string\\">\' \'</span>+ny].needDelete=<span class=\\"hljs-literal\\">true</span>\\n              }\\n          }\\n         hash[nx+<span class=\\"hljs-string\\">\' \'</span>+ny]={<span class=\\"hljs-attr\\">x</span>:nx,<span class=\\"hljs-attr\\">y</span>:ny,<span class=\\"hljs-attr\\">hasK</span>:hasK,<span class=\\"hljs-attr\\">needDelete</span>:<span class=\\"hljs-literal\\">false</span>}\\n          arr.push(hash[nx+<span class=\\"hljs-string\\">\' \'</span>+ny])\\n        }\\n      }\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">-1</span>\\n};\\n</code></pre>\\n"],"querySlug":"shortest-path-in-a-grid-with-obstacles-elimination","created_at":"2019-12-15","timeArr":[2019,11,15,11,36,37,0],"hasThinking":false,"content":"<p>给你一个&nbsp;<code>m * n</code>&nbsp;的网格，其中每个单元格不是&nbsp;<code>0</code>（空）就是&nbsp;<code>1</code>（障碍物）。每一步，您都可以在空白单元格中上、下、左、右移动。</p>\\n\\n<p>如果您 <strong>最多</strong> 可以消除 <code>k</code> 个障碍物，请找出从左上角 <code>(0, 0)</code> 到右下角 <code>(m-1, n-1)</code> 的最短路径，并返回通过该路径所需的步数。如果找不到这样的路径，则返回 -1。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong> \\ngrid = \\n[[0,0,0],\\n&nbsp;[1,1,0],\\n [0,0,0],\\n&nbsp;[0,1,1],\\n [0,0,0]], \\nk = 1\\n<strong>输出：</strong>6\\n<strong>解释：\\n</strong>不消除任何障碍的最短路径是 10。\\n消除位置 (3,2) 处的障碍后，最短路径是 6 。该路径是 <code>(0,0) -&gt; (0,1) -&gt; (0,2) -&gt; (1,2) -&gt; (2,2) -&gt; <strong>(3,2)</strong> -&gt; (4,2)</code>.\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>\\ngrid = \\n[[0,1,1],\\n&nbsp;[1,1,1],\\n&nbsp;[1,0,0]], \\nk = 1\\n<strong>输出：</strong>-1\\n<strong>解释：\\n</strong>我们至少需要消除两个障碍才能找到这样的路径。\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>grid.length&nbsp;== m</code></li>\\n\\t<li><code>grid[0].length&nbsp;== n</code></li>\\n\\t<li><code>1 &lt;= m, n &lt;= 40</code></li>\\n\\t<li><code>1 &lt;= k &lt;= m*n</code></li>\\n\\t<li><code>grid[i][j] == 0 <strong>or</strong> 1</code></li>\\n\\t<li><code>grid[0][0] == grid[m-1][n-1] == 0</code></li>\\n</ul>\\n","title":"1293. 网格中的最短路径","relatedTags":["广度优先搜索","数组","矩阵"],"difficult":"Hard","lang":["javascript"],"uniqueID":"1293","slug":"1293-Shortest-Path-in-a-Grid-with-Obstacles-Elimination"}')}}]);