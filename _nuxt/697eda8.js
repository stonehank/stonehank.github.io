(window.webpackJsonp=window.webpackJsonp||[]).push([[810],{1608:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">nums</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> Solution = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">nums</span>) </span>{\\n  <span class=\\"hljs-keyword\\">this</span>.nums=nums\\n};\\n\\n<span class=\\"hljs-comment\\">/** \\n * @param {number} target\\n * @return {number}\\n */</span>\\nSolution.prototype.pick = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">target</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> count=<span class=\\"hljs-number\\">0</span>,res\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;<span class=\\"hljs-keyword\\">this</span>.nums.length;i++){\\n    <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-keyword\\">this</span>.nums[i]!==target)<span class=\\"hljs-keyword\\">continue</span>\\n    <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-built_in\\">Math</span>.floor(<span class=\\"hljs-built_in\\">Math</span>.random()*(count+<span class=\\"hljs-number\\">1</span>))===count){\\n      res=i\\n    }\\n    count++\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n\\n<span class=\\"hljs-comment\\">/** \\n * Your Solution object will be instantiated and called as such:\\n * var obj = new Solution(nums)\\n * var param_1 = obj.pick(target)\\n */</span>\\n</code></pre>\\n"],"querySlug":"random-pick-index","created_at":"2019-04-27","timeArr":[2019,3,27,15,46,49,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>如果允许空间为<code>O(n)</code>，那么使用<code>hash</code>保存每一种数字的索引数组，然后选取随机索引也就是在<code>hash[target]</code>中选取一个随机索引。</p>\\n<p>最终空间复杂度<code>O(n)</code>，<code>init</code>时间复杂度<code>O(n)</code>，<code>pick</code>时间复杂度<code>O(1)</code>。</p>\\n<p>如果只允许空间为<code>O(1)</code>，那么类似<code>NO.382</code>，用到<code>蓄水池抽样算法</code>。</p>\\n<p>最终空间复杂度<code>O(1)</code>，<code>init</code>时间复杂度<code>O(1)，</code>pick<code>时间复杂度</code>O(n)`。</p>\\n","content":"<p>给定一个可能含有重复元素的整数数组，要求随机输出给定的数字的索引。 您可以假设给定的数字一定存在于数组中。</p>\\n\\n<p><strong>注意：</strong><br />\\n数组大小可能非常大。 使用太多额外空间的解决方案将不会通过测试。</p>\\n\\n<p><strong>示例:</strong></p>\\n\\n<pre>\\nint[] nums = new int[] {1,2,3,3,3};\\nSolution solution = new Solution(nums);\\n\\n// pick(3) 应该返回索引 2,3 或者 4。每个索引的返回概率应该相等。\\nsolution.pick(3);\\n\\n// pick(1) 应该返回 0。因为只有nums[0]等于1。\\nsolution.pick(1);\\n</pre>\\n","title":"398. 随机数索引","relatedTags":["水塘抽样","哈希表","数学","随机化"],"difficult":"Middle","lang":["javascript"],"uniqueID":"398","slug":"398-Random-Pick-Index"}')}}]);