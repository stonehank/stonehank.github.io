(window.webpackJsonp=window.webpackJsonp||[]).push([[1353],{2151:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{TreeNode}</span> <span class=\\"hljs-variable\\">root</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{boolean}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> isValidBST = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">root</span>) </span>{\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">isValid</span>(<span class=\\"hljs-params\\">root,max,min</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(!root)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n    <span class=\\"hljs-keyword\\">if</span>(root.val&gt;=max || root.val&lt;=min)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n    <span class=\\"hljs-keyword\\">return</span> isValid(root.left,root.val,min) &amp;&amp; isValid(root.right,max,root.val)\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> isValid(root,<span class=\\"hljs-literal\\">Infinity</span>,-<span class=\\"hljs-literal\\">Infinity</span>)\\n};\\n</code></pre>\\n"],"querySlug":"validate-binary-search-tree","created_at":"2019-03-18","timeArr":[2019,2,18,10,42,10,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>方法一：</p>\\n<p><code>inorder</code>遍历，检测是否是有序的；</p>\\n<p>方法二：</p>\\n<p>递归并且维护2个变量<code>min</code>和<code>max</code>，其中<code>min</code>表示当前<code>root</code>能接受的最小值，<code>max</code>表示当前<code>root</code>能接受的最大值；</p>\\n<p>如果出现<code>root.val&gt;=max || root.val&lt;=min</code>，返回<code>false</code>，否则继续递归处理，直到当前<code>root</code>不存在，返回<code>true</code>。</p>\\n","content":"<p>给你一个二叉树的根节点 <code>root</code> ，判断其是否是一个有效的二叉搜索树。</p>\\n\\n<p><strong>有效</strong> 二叉搜索树定义如下：</p>\\n\\n<ul>\\n\\t<li>节点的左子树只包含<strong> 小于 </strong>当前节点的数。</li>\\n\\t<li>节点的右子树只包含 <strong>大于</strong> 当前节点的数。</li>\\n\\t<li>所有左子树和右子树自身必须也是二叉搜索树。</li>\\n</ul>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2020/12/01/tree1.jpg\\" style=\\"width: 302px; height: 182px;\\" />\\n<pre>\\n<strong>输入：</strong>root = [2,1,3]\\n<strong>输出：</strong>true\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2020/12/01/tree2.jpg\\" style=\\"width: 422px; height: 292px;\\" />\\n<pre>\\n<strong>输入：</strong>root = [5,1,4,null,null,3,6]\\n<strong>输出：</strong>false\\n<strong>解释：</strong>根节点的值是 5 ，但是右子节点的值是 4 。\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li>树中节点数目范围在<code>[1, 10<sup>4</sup>]</code> 内</li>\\n\\t<li><code>-2<sup>31</sup> &lt;= Node.val &lt;= 2<sup>31</sup> - 1</code></li>\\n</ul>\\n","title":"98. 验证二叉搜索树","relatedTags":["树","深度优先搜索","二叉搜索树","二叉树"],"difficult":"Middle","lang":["javascript"],"uniqueID":"98","slug":"98-Validate-Binary-Search-Tree"}')}}]);