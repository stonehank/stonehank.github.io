(window.webpackJsonp=window.webpackJsonp||[]).push([[808],{1606:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">A</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> maxRotateFunction = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">A</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> sum=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> a <span class=\\"hljs-keyword\\">of</span> A)sum+=a\\n  \\n  <span class=\\"hljs-keyword\\">let</span> lastN=<span class=\\"hljs-number\\">0</span>,n=A.length\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;n;i++)lastN+=i*A[i]\\n  <span class=\\"hljs-keyword\\">let</span> maxN=lastN\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=n<span class=\\"hljs-number\\">-1</span>;i&gt;=<span class=\\"hljs-number\\">1</span>;i--){\\n    lastN-=(n<span class=\\"hljs-number\\">-1</span>)*A[i]\\n    lastN+=sum-A[i]\\n    maxN=<span class=\\"hljs-built_in\\">Math</span>.max(maxN,lastN)\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> maxN\\n};\\n</code></pre>\\n"],"querySlug":"rotate-function","created_at":"2019-03-31","timeArr":[2019,2,31,22,50,5,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>找出每一次旋转的规律，最后一个数的倍数从<code>len-1</code>变为<code>0</code>，因此要减去<code>(len-1)*最后一个数</code>，</p>\\n<p>然后前面每一个数的倍数都<code>+1</code>，因此最后实际增加了整个数组的和<code>sum</code>再减去<code>最后一个数</code>。</p>\\n<p>我们只需要找出每一次旋转的最后一个数，因为是循环旋转，最后一个数都是轮流的，因此可以从后向前遍历整个数组，\\n对每一个数作为最后一个数进行比较。</p>\\n<p>最后时间复杂度是<code>O(n)</code>。</p>\\n","content":"<p>给定一个长度为 <em>n</em> 的整数数组&nbsp;<code>A</code>&nbsp;。</p>\\n\\n<p>假设&nbsp;<code>B<sub>k</sub></code>&nbsp;是数组&nbsp;<code>A</code>&nbsp;顺时针旋转 <em>k</em> 个位置后的数组，我们定义&nbsp;<code>A</code>&nbsp;的&ldquo;旋转函数&rdquo;&nbsp;<code>F</code>&nbsp;为：</p>\\n\\n<p><code>F(k) = 0 * B<sub>k</sub>[0] + 1 * B<sub>k</sub>[1] + ... + (n-1) * B<sub>k</sub>[n-1]</code>。</p>\\n\\n<p>计算<code>F(0), F(1), ..., F(n-1)</code>中的最大值。</p>\\n\\n<p><strong>注意:</strong><br />\\n可以认为<em> n</em> 的值小于 10<sup>5</sup>。</p>\\n\\n<p><strong>示例:</strong></p>\\n\\n<pre>\\nA = [4, 3, 2, 6]\\n\\nF(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25\\nF(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16\\nF(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23\\nF(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26\\n\\n所以 F(0), F(1), F(2), F(3) 中的最大值是 F(3) = 26 。\\n</pre>\\n","title":"396. 旋转函数","relatedTags":["数学","动态规划"],"difficult":"Middle","lang":["javascript"],"uniqueID":"396","slug":"396-Rotate-Function"}')}}]);