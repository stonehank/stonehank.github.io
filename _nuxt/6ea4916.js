(window.webpackJsonp=window.webpackJsonp||[]).push([[531],{1329:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">str</span></span>\\n * <span class=\\"hljs-doctag\\">@returns <span class=\\"hljs-type\\">{string}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> reverseWords = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">str</span>) </span>{\\n  <span class=\\"hljs-keyword\\">return</span> str.trim().split(<span class=\\"hljs-regexp\\">/\\\\s+/</span>).reverse().join(<span class=\\"hljs-string\\">\' \'</span>)\\n};\\n</code></pre>\\n"],"querySlug":"reverse-words-in-a-string","created_at":"2019-03-23","timeArr":[2019,2,23,0,21,53,0],"hasThinking":false,"content":"<p>给你一个字符串 <code>s</code> ，逐个翻转字符串中的所有 <strong>单词</strong> 。</p>\\n\\n<p><strong>单词</strong> 是由非空格字符组成的字符串。<code>s</code> 中使用至少一个空格将字符串中的 <strong>单词</strong> 分隔开。</p>\\n\\n<p>请你返回一个翻转 <code>s</code> 中单词顺序并用单个空格相连的字符串。</p>\\n\\n<p><strong>说明：</strong></p>\\n\\n<ul>\\n\\t<li>输入字符串 <code>s</code> 可以在前面、后面或者单词间包含多余的空格。</li>\\n\\t<li>翻转后单词间应当仅用一个空格分隔。</li>\\n\\t<li>翻转后的字符串中不应包含额外的空格。</li>\\n</ul>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = \\"<code>the sky is blue</code>\\"\\n<strong>输出：</strong>\\"<code>blue is sky the</code>\\"\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = \\"  hello world  \\"\\n<strong>输出：</strong>\\"world hello\\"\\n<strong>解释：</strong>输入字符串可以在前面或者后面包含多余的空格，但是翻转后的字符不能包括。\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = \\"a good   example\\"\\n<strong>输出：</strong>\\"example good a\\"\\n<strong>解释：</strong>如果两个单词间有多余的空格，将翻转后单词间的空格减少到只含一个。\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = \\"  Bob    Loves  Alice   \\"\\n<strong>输出：</strong>\\"Alice Loves Bob\\"\\n</pre>\\n\\n<p><strong>示例 5：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = \\"Alice does not even like bob\\"\\n<strong>输出：</strong>\\"bob like even not does Alice\\"\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= s.length <= 10<sup>4</sup></code></li>\\n\\t<li><code>s</code> 包含英文大小写字母、数字和空格 <code>\' \'</code></li>\\n\\t<li><code>s</code> 中 <strong>至少存在一个</strong> 单词</li>\\n</ul>\\n\\n<ul>\\n</ul>\\n\\n<p> </p>\\n\\n<p><strong>进阶：</strong></p>\\n\\n<ul>\\n\\t<li>请尝试使用 <code><em>O</em>(1)</code> 额外空间复杂度的原地解法。</li>\\n</ul>\\n","title":"151. 翻转字符串里的单词","relatedTags":["双指针","字符串"],"difficult":"Middle","lang":["javascript"],"uniqueID":"151","slug":"151-Reverse-Words-in-a-String"}')}}]);