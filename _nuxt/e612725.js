(window.webpackJsonp=window.webpackJsonp||[]).push([[530],{1328:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">mat</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> numSubmat = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">mat</span>) </span>{\\n    <span class=\\"hljs-keyword\\">let</span> m=mat.length\\n    <span class=\\"hljs-keyword\\">let</span> n=mat[<span class=\\"hljs-number\\">0</span>].length\\n    <span class=\\"hljs-keyword\\">let</span> left=<span class=\\"hljs-built_in\\">Array</span>(m).fill().map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span>=&gt;</span><span class=\\"hljs-built_in\\">Array</span>(n).fill(<span class=\\"hljs-number\\">0</span>))\\n    <span class=\\"hljs-keyword\\">let</span> now = <span class=\\"hljs-number\\">0</span>;\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;m;i++){\\n        now = <span class=\\"hljs-number\\">0</span>;\\n        <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;n;j++){\\n            <span class=\\"hljs-keyword\\">if</span>(mat[i][j] == <span class=\\"hljs-number\\">1</span>) now ++;\\n            <span class=\\"hljs-keyword\\">else</span> now = <span class=\\"hljs-number\\">0</span>;\\n            left[i][j] = now;\\n        }\\n    }\\n    <span class=\\"hljs-keyword\\">let</span> ans = <span class=\\"hljs-number\\">0</span>,minx;\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;m;i++){\\n        <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;n;j++){\\n            minx = <span class=\\"hljs-literal\\">Infinity</span>;\\n            <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> k=i;k&gt;=<span class=\\"hljs-number\\">0</span>;k--){\\n                minx = <span class=\\"hljs-built_in\\">Math</span>.min(left[k][j],minx);\\n                ans += minx;\\n            }\\n        }\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> ans;\\n\\n    \\n};\\n</code></pre>\\n"],"querySlug":"count-submatrices-with-all-ones","created_at":"2020-07-05","timeArr":[2020,6,5,12,56,49,0],"hasThinking":false,"content":"<p>给你一个只包含 0 和 1 的&nbsp;<code>rows * columns</code>&nbsp;矩阵&nbsp;<code>mat</code>&nbsp;，请你返回有多少个&nbsp;<strong>子矩形</strong>&nbsp;的元素全部都是 1 。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>mat = [[1,0,1],\\n&nbsp;           [1,1,0],\\n&nbsp;           [1,1,0]]\\n<strong>输出：</strong>13\\n<strong>解释：\\n</strong>有 <strong>6</strong>&nbsp;个 1x1 的矩形。\\n有 <strong>2</strong> 个 1x2 的矩形。\\n有 <strong>3</strong> 个 2x1 的矩形。\\n有 <strong>1</strong> 个 2x2 的矩形。\\n有 <strong>1</strong> 个 3x1 的矩形。\\n矩形数目总共 = 6 + 2 + 3 + 1 + 1 = <strong>13</strong>&nbsp;。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>mat = [[0,1,1,0],\\n&nbsp;           [0,1,1,1],\\n&nbsp;           [1,1,1,0]]\\n<strong>输出：</strong>24\\n<strong>解释：</strong>\\n有 <strong>8</strong> 个 1x1 的子矩形。\\n有 <strong>5</strong> 个 1x2 的子矩形。\\n有 <strong>2</strong> 个 1x3 的子矩形。\\n有 <strong>4</strong> 个 2x1 的子矩形。\\n有 <strong>2</strong> 个 2x2 的子矩形。\\n有 <strong>2</strong> 个 3x1 的子矩形。\\n有 <strong>1</strong> 个 3x2 的子矩形。\\n矩形数目总共 = 8 + 5 + 2 + 4 + 2 + 2 + 1 = <strong>24</strong><strong> 。</strong>\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>mat = [[1,1,1,1,1,1]]\\n<strong>输出：</strong>21\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>mat = [[1,0,1],[0,1,0],[1,0,1]]\\n<strong>输出：</strong>5\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= rows&nbsp;&lt;= 150</code></li>\\n\\t<li><code>1 &lt;= columns&nbsp;&lt;= 150</code></li>\\n\\t<li><code>0 &lt;= mat[i][j] &lt;= 1</code></li>\\n</ul>\\n","title":"1504. 统计全 1 子矩形","relatedTags":["栈","数组","动态规划","矩阵","单调栈"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1504","slug":"1504-Count-Submatrices-With-All-Ones"}')}}]);