(window.webpackJsonp=window.webpackJsonp||[]).push([[759],{1557:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string[]}</span> <span class=\\"hljs-variable\\">words</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[][]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> palindromePairs = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">words</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(words.length&lt;<span class=\\"hljs-number\\">2</span>)<span class=\\"hljs-keyword\\">return</span> []\\n  <span class=\\"hljs-keyword\\">let</span> hash={}\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;words.length;i++){\\n    hash[words[i]]=i\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> res=[]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;words.length;i++){\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;words[i].length;j++){\\n      <span class=\\"hljs-keyword\\">let</span> check1=words[i].substring(<span class=\\"hljs-number\\">0</span>,j),\\n          check2=words[i].substring(j,words[i].length)\\n      <span class=\\"hljs-keyword\\">if</span>(isPar(check1)){\\n        <span class=\\"hljs-keyword\\">let</span> search=check2.split(<span class=\\"hljs-string\\">\'\'</span>).reverse().join(<span class=\\"hljs-string\\">\'\'</span>)\\n        <span class=\\"hljs-keyword\\">if</span>(hash[search]!=<span class=\\"hljs-literal\\">null</span> &amp;&amp; hash[search]!==i){\\n          <span class=\\"hljs-keyword\\">if</span>(search===<span class=\\"hljs-string\\">\'\'</span>)res.push([i,hash[search]])\\n          res.push([hash[search],i])\\n        }\\n      }\\n      <span class=\\"hljs-keyword\\">if</span>(isPar(check2)){\\n        <span class=\\"hljs-keyword\\">let</span> search=check1.split(<span class=\\"hljs-string\\">\'\'</span>).reverse().join(<span class=\\"hljs-string\\">\'\'</span>)\\n        <span class=\\"hljs-keyword\\">if</span>(hash[search]!=<span class=\\"hljs-literal\\">null</span> &amp;&amp; hash[search]!==i){\\n          <span class=\\"hljs-keyword\\">if</span>(search===<span class=\\"hljs-string\\">\'\'</span>)res.push([hash[search],i])\\n          res.push([i,hash[search]])\\n        }        \\n      }\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">isPar</span>(<span class=\\"hljs-params\\">str</span>)</span>{\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;str.length/<span class=\\"hljs-number\\">2</span>;i++){\\n      <span class=\\"hljs-keyword\\">if</span>(str[i]!==str[str.length<span class=\\"hljs-number\\">-1</span>-i])<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n  }\\n}\\n</code></pre>\\n"],"querySlug":"palindrome-pairs","created_at":"2019-03-23","timeArr":[2019,2,23,21,10,32,0],"hasThinking":false,"content":"<p>给定一组<strong> 互不相同</strong> 的单词， 找出所有<strong> 不同<em> </em></strong>的索引对 <code>(i, j)</code>，使得列表中的两个单词， <code>words[i] + words[j]</code> ，可拼接成回文串。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>words = [\\"abcd\\",\\"dcba\\",\\"lls\\",\\"s\\",\\"sssll\\"]\\n<strong>输出：</strong>[[0,1],[1,0],[3,2],[2,4]] \\n<strong>解释：</strong>可拼接成的回文串为 <code>[\\"dcbaabcd\\",\\"abcddcba\\",\\"slls\\",\\"llssssll\\"]</code>\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>words = [\\"bat\\",\\"tab\\",\\"cat\\"]\\n<strong>输出：</strong>[[0,1],[1,0]] \\n<strong>解释：</strong>可拼接成的回文串为 <code>[\\"battab\\",\\"tabbat\\"]</code></pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>words = [\\"a\\",\\"\\"]\\n<strong>输出：</strong>[[0,1],[1,0]]\\n</pre>\\n \\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= words.length <= 5000</code></li>\\n\\t<li><code>0 <= words[i].length <= 300</code></li>\\n\\t<li><code>words[i]</code> 由小写英文字母组成</li>\\n</ul>\\n","title":"336. 回文对","relatedTags":["字典树","数组","哈希表","字符串"],"difficult":"Hard","lang":["javascript"],"uniqueID":"336","slug":"336-Palindrome-Pairs"}')}}]);