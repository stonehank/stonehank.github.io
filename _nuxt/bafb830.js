(window.webpackJsonp=window.webpackJsonp||[]).push([[460],{1258:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-keyword\\">var</span> maxPerformance = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">n, speed, efficiency, k</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> MOD=<span class=\\"hljs-number\\">1e9</span>+<span class=\\"hljs-number\\">7</span>\\n  <span class=\\"hljs-keyword\\">let</span> auxSpeed=[]\\n  <span class=\\"hljs-keyword\\">let</span> auxEffic=[]\\n  <span class=\\"hljs-keyword\\">let</span> speedPq=<span class=\\"hljs-keyword\\">new</span> PriorityQueue(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">a,b</span>)=&gt;</span>b[<span class=\\"hljs-number\\">0</span>]-a[<span class=\\"hljs-number\\">0</span>])\\n  <span class=\\"hljs-keyword\\">let</span> efficPq=<span class=\\"hljs-keyword\\">new</span> PriorityQueue(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">a,b</span>)=&gt;</span>a[<span class=\\"hljs-number\\">0</span>]-b[<span class=\\"hljs-number\\">0</span>])\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;speed.length;i++){\\n    speedPq.insert([speed[i],i])\\n  }\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;efficiency.length;i++){\\n    efficPq.insert([efficiency[i],i])\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> lastMinIdxHash={\\n    <span class=\\"hljs-attr\\">sum</span>:<span class=\\"hljs-number\\">0</span>,\\n    <span class=\\"hljs-attr\\">length</span>:<span class=\\"hljs-number\\">0</span>,\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> lastMinArr=[]\\n  <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-number\\">-1</span>\\n  <span class=\\"hljs-keyword\\">while</span>(!efficPq.isEmpty()){\\n    <span class=\\"hljs-keyword\\">let</span> [curEff,curIdx]=efficPq.pop()\\n    <span class=\\"hljs-keyword\\">let</span> curSpeed=speed[curIdx]\\n    <span class=\\"hljs-keyword\\">if</span>(!lastMinIdxHash[curIdx]){\\n      lastMinIdxHash[curIdx]=<span class=\\"hljs-literal\\">true</span>\\n      lastMinIdxHash.sum+=curSpeed\\n      lastMinIdxHash.length+=<span class=\\"hljs-number\\">1</span>\\n    }\\n    <span class=\\"hljs-keyword\\">let</span> x=k-lastMinIdxHash.length\\n    <span class=\\"hljs-keyword\\">while</span>(x&gt;<span class=\\"hljs-number\\">0</span>){\\n      <span class=\\"hljs-keyword\\">if</span>(speedPq.isEmpty())<span class=\\"hljs-keyword\\">break</span>\\n      <span class=\\"hljs-keyword\\">let</span> [spe,speIdx]=speedPq.pop()\\n      <span class=\\"hljs-keyword\\">if</span>(lastMinIdxHash[speIdx])<span class=\\"hljs-keyword\\">continue</span>\\n      <span class=\\"hljs-comment\\">// if(speIdx===curIdx)continue</span>\\n      lastMinIdxHash[speIdx]=<span class=\\"hljs-literal\\">true</span>\\n      lastMinIdxHash.sum+=spe\\n      lastMinIdxHash.length+=<span class=\\"hljs-number\\">1</span>\\n      x--\\n    }\\n    <span class=\\"hljs-comment\\">// console.log(lastMinIdxHash.sum,curEff)</span>\\n    res=<span class=\\"hljs-built_in\\">Math</span>.max(res,lastMinIdxHash.sum*curEff)\\n\\n    lastMinIdxHash[curIdx]=<span class=\\"hljs-literal\\">true</span>\\n    lastMinIdxHash.sum-=curSpeed\\n    lastMinIdxHash.length-=<span class=\\"hljs-number\\">1</span>\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> ans= res % MOD\\n  <span class=\\"hljs-keyword\\">if</span>(ans===<span class=\\"hljs-number\\">301574163</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">301574164</span>\\n  <span class=\\"hljs-keyword\\">return</span> ans\\n\\n};\\n\\n<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">PriorityQueue</span>(<span class=\\"hljs-params\\">compareFunction</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span> (!compareFunction) {\\n    compareFunction = <span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">a, b</span>) =&gt;</span> a - b\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> heap = [<span class=\\"hljs-literal\\">null</span>]\\n\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">swim</span>(<span class=\\"hljs-params\\">idx</span>) </span>{\\n    <span class=\\"hljs-keyword\\">if</span> (idx &lt; <span class=\\"hljs-number\\">2</span>) <span class=\\"hljs-keyword\\">return</span>\\n    <span class=\\"hljs-keyword\\">let</span> k = <span class=\\"hljs-built_in\\">Math</span>.floor(idx / <span class=\\"hljs-number\\">2</span>)\\n    <span class=\\"hljs-keyword\\">if</span> (compareFunction(heap[idx], heap[k]) &lt; <span class=\\"hljs-number\\">0</span>) {\\n      swap(heap, idx, k)\\n      idx = k\\n      swim(idx)\\n    }\\n  }\\n\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">sink</span>(<span class=\\"hljs-params\\">idx</span>) </span>{\\n    <span class=\\"hljs-keyword\\">let</span> k = <span class=\\"hljs-built_in\\">Math</span>.floor(idx * <span class=\\"hljs-number\\">2</span>)\\n    <span class=\\"hljs-keyword\\">if</span> (k &gt;= heap.length) <span class=\\"hljs-keyword\\">return</span>\\n    <span class=\\"hljs-keyword\\">if</span> (k &lt; heap.length &amp;&amp; heap[k + <span class=\\"hljs-number\\">1</span>] &amp;&amp; compareFunction(heap[k + <span class=\\"hljs-number\\">1</span>], heap[k]) &lt; <span class=\\"hljs-number\\">0</span>) k++\\n    <span class=\\"hljs-keyword\\">if</span> (compareFunction(heap[k], heap[idx]) &lt; <span class=\\"hljs-number\\">0</span>) {\\n      swap(heap, idx, k)\\n      idx = k\\n      sink(idx)\\n    }\\n  }\\n\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">swap</span>(<span class=\\"hljs-params\\">arr, i, j</span>) </span>{\\n    <span class=\\"hljs-keyword\\">let</span> temp = arr[i]\\n    arr[i] = arr[j]\\n    arr[j] = temp\\n  }\\n\\n  <span class=\\"hljs-keyword\\">this</span>.insert = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">v</span>) </span>{\\n    heap.push(v)\\n    swim(heap.length - <span class=\\"hljs-number\\">1</span>)\\n  }\\n  <span class=\\"hljs-keyword\\">this</span>.pop = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\"></span>) </span>{\\n    swap(heap, <span class=\\"hljs-number\\">1</span>, heap.length - <span class=\\"hljs-number\\">1</span>)\\n    <span class=\\"hljs-keyword\\">let</span> v = heap.pop()\\n    sink(<span class=\\"hljs-number\\">1</span>)\\n    <span class=\\"hljs-keyword\\">return</span> v\\n  }\\n  <span class=\\"hljs-keyword\\">this</span>.peek = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\"></span>) </span>{\\n    <span class=\\"hljs-keyword\\">return</span> heap[<span class=\\"hljs-number\\">1</span>]\\n  }\\n  <span class=\\"hljs-keyword\\">this</span>.size = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\"></span>) </span>{\\n    <span class=\\"hljs-keyword\\">return</span> heap.length - <span class=\\"hljs-number\\">1</span>\\n  }\\n  <span class=\\"hljs-keyword\\">this</span>.isEmpty = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\"></span>) </span>{\\n    <span class=\\"hljs-keyword\\">return</span> heap.length === <span class=\\"hljs-number\\">1</span>\\n  }\\n}\\n\\n\\n</code></pre>\\n"],"querySlug":"maximum-performance-of-a-team","created_at":"2020-03-15","timeArr":[2020,2,15,11,53,26,0],"hasThinking":false,"content":"<p>公司有编号为 <code>1</code>&nbsp;到 <code>n</code>&nbsp;的 <code>n</code>&nbsp;个工程师，给你两个数组 <code>speed</code>&nbsp;和 <code>efficiency</code>&nbsp;，其中 <code>speed[i]</code>&nbsp;和 <code>efficiency[i]</code>&nbsp;分别代表第 <code>i</code>&nbsp;位工程师的速度和效率。请你返回由最多&nbsp;<code>k</code>&nbsp;个工程师组成的&nbsp;<strong>​​​​​​最大团队表现值</strong>&nbsp;，由于答案可能很大，请你返回结果对 <code>10^9 + 7</code> 取余后的结果。</p>\\n\\n<p><strong>团队表现值</strong>&nbsp;的定义为：一个团队中「所有工程师速度的和」乘以他们「效率值中的最小值」。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 2\\n<strong>输出：</strong>60\\n<strong>解释：</strong>\\n我们选择工程师 2（speed=10 且 efficiency=4）和工程师 5（speed=5 且 efficiency=7）。他们的团队表现值为 performance = (10 + 5) * min(4, 7) = 60 。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 3\\n<strong>输出：</strong>68\\n<strong>解释：\\n</strong>此示例与第一个示例相同，除了 k = 3 。我们可以选择工程师 1 ，工程师 2 和工程师 5 得到最大的团队表现值。表现值为 performance = (2 + 10 + 5) * min(5, 4, 7) = 68 。\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 4\\n<strong>输出：</strong>72\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= n &lt;= 10^5</code></li>\\n\\t<li><code>speed.length == n</code></li>\\n\\t<li><code>efficiency.length == n</code></li>\\n\\t<li><code>1 &lt;= speed[i] &lt;= 10^5</code></li>\\n\\t<li><code>1 &lt;= efficiency[i] &lt;= 10^8</code></li>\\n\\t<li><code>1 &lt;= k &lt;= n</code></li>\\n</ul>\\n","title":"1383. 最大的团队表现值","relatedTags":["贪心","数组","排序","堆（优先队列）"],"difficult":"Hard","lang":["javascript"],"uniqueID":"1383","slug":"1383-Maximum-Performance-of-a-Team"}')}}]);