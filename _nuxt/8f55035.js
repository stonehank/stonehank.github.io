(window.webpackJsonp=window.webpackJsonp||[]).push([[352],{1150:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">s</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">t</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">maxCost</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> equalSubstring = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">s, t, maxCost</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">let</span> cost=[]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;s.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> codeS=s.charCodeAt(i)<span class=\\"hljs-number\\">-97</span>\\n    <span class=\\"hljs-keyword\\">let</span> codeT=t.charCodeAt(i)<span class=\\"hljs-number\\">-97</span>\\n    cost.push(<span class=\\"hljs-built_in\\">Math</span>.abs(codeS-codeT))\\n  }\\n  <span class=\\"hljs-comment\\">// console.log(cost)</span>\\n\\n  <span class=\\"hljs-keyword\\">let</span> needCost=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">let</span> start=<span class=\\"hljs-number\\">0</span>,end=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">while</span>(end&lt;s.length){\\n    needCost+=cost[end]\\n    <span class=\\"hljs-keyword\\">while</span>(needCost&gt;maxCost){\\n      needCost-=cost[start]\\n      start++\\n    }\\n    end++\\n    res=<span class=\\"hljs-built_in\\">Math</span>.max(res,end-start)\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"get-equal-substrings-within-budget","created_at":"2019-09-29","timeArr":[2019,8,29,10,45,50,0],"hasThinking":false,"content":"<p>给你两个长度相同的字符串，<code>s</code> 和 <code>t</code>。</p>\\n\\n<p>将 <code>s</code> 中的第 <code>i</code> 个字符变到 <code>t</code> 中的第 <code>i</code> 个字符需要 <code>|s[i] - t[i]|</code> 的开销（开销可能为 0），也就是两个字符的 ASCII 码值的差的绝对值。</p>\\n\\n<p>用于变更字符串的最大预算是 <code>maxCost</code>。在转化字符串时，总开销应当小于等于该预算，这也意味着字符串的转化可能是不完全的。</p>\\n\\n<p>如果你可以将 <code>s</code> 的子字符串转化为它在 <code>t</code> 中对应的子字符串，则返回可以转化的最大长度。</p>\\n\\n<p>如果 <code>s</code> 中没有子字符串可以转化成 <code>t</code> 中对应的子字符串，则返回 <code>0</code>。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = \\"abcd\\", t = \\"bcdf\\", maxCost = 3\\n<strong>输出：</strong>3\\n<strong>解释：</strong>s<strong> </strong>中的<strong> </strong>\\"abc\\" 可以变为 \\"bcd\\"。开销为 3，所以最大长度为 3。</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = \\"abcd\\", t = \\"cdef\\", maxCost = 3\\n<strong>输出：</strong>1\\n<strong>解释：</strong>s 中的任一字符要想变成 t 中对应的字符，其开销都是 2。因此，最大长度为<code> 1。</code>\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = \\"abcd\\", t = \\"acde\\", maxCost = 0\\n<strong>输出：</strong>1\\n<strong>解释：</strong>a -> a, cost = 0，字符串未发生变化，所以最大长度为 1。\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= s.length, t.length <= 10^5</code></li>\\n\\t<li><code>0 <= maxCost <= 10^6</code></li>\\n\\t<li><code>s</code> 和 <code>t</code> 都只含小写英文字母。</li>\\n</ul>\\n","title":"1208. 尽可能使字符串相等","relatedTags":["字符串","二分查找","前缀和","滑动窗口"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1208","slug":"1208-Get-Equal-Substrings-Within-Budget"}')}}]);