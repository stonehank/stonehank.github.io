(window.webpackJsonp=window.webpackJsonp||[]).push([[752],{1550:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">matrix</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> longestIncreasingPath = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">matrix</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(matrix.length===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">let</span> m=matrix.length,n=matrix[<span class=\\"hljs-number\\">0</span>].length\\n  <span class=\\"hljs-keyword\\">let</span> count=<span class=\\"hljs-built_in\\">Array</span>(m).fill().map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span>=&gt;</span><span class=\\"hljs-built_in\\">Array</span>(n).fill(<span class=\\"hljs-number\\">0</span>))\\n  <span class=\\"hljs-keyword\\">let</span> moves=[[<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">0</span>],[<span class=\\"hljs-number\\">1</span>,<span class=\\"hljs-number\\">0</span>],[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">-1</span>],[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">1</span>]]\\n  <span class=\\"hljs-keyword\\">let</span> maxLen=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;m;i++){\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;n;j++){\\n      dfs([i,j])\\n      maxLen=<span class=\\"hljs-built_in\\">Math</span>.max(maxLen,count[i][j])\\n    }\\n  }\\n  <span class=\\"hljs-comment\\">// console.log(count)</span>\\n  <span class=\\"hljs-keyword\\">return</span> maxLen\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">dfs</span>(<span class=\\"hljs-params\\">[x,y]</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(count[x][y]!==<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span> count[x][y]\\n    <span class=\\"hljs-keyword\\">let</span> steps=<span class=\\"hljs-number\\">1</span>,maxStep=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> [dx,dy] <span class=\\"hljs-keyword\\">of</span> moves){\\n      <span class=\\"hljs-keyword\\">let</span> nx=dx+x,ny=dy+y\\n      <span class=\\"hljs-keyword\\">if</span>(nx&lt;<span class=\\"hljs-number\\">0</span> || ny&lt;<span class=\\"hljs-number\\">0</span> || nx&gt;=m || ny&gt;=n)<span class=\\"hljs-keyword\\">continue</span>\\n      <span class=\\"hljs-keyword\\">if</span>(matrix[nx][ny]&gt;matrix[x][y]){\\n        maxStep=<span class=\\"hljs-built_in\\">Math</span>.max(maxStep,dfs([nx,ny]))\\n      }\\n    }\\n    count[x][y]=steps+maxStep\\n    <span class=\\"hljs-keyword\\">return</span> steps+maxStep\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"longest-increasing-path-in-a-matrix","created_at":"2019-04-08","timeArr":[2019,3,8,23,1,18,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>只需要遍历<code>matrix</code>，然后对每一个点执行<code>dfs</code>找到它的最大递增路径，再使用<code>count</code>保存结果，如果发现已经找到的则直接返回结果，最后返回<code>count</code>里最大的值。</p>\\n","content":"<p>给定一个 <code>m x n</code> 整数矩阵 <code>matrix</code> ，找出其中 <strong>最长递增路径</strong> 的长度。</p>\\n\\n<p>对于每个单元格，你可以往上，下，左，右四个方向移动。 你 <strong>不能</strong> 在 <strong>对角线</strong> 方向上移动或移动到 <strong>边界外</strong>（即不允许环绕）。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2021/01/05/grid1.jpg\\" style=\\"width: 242px; height: 242px;\\" />\\n<pre>\\n<strong>输入：</strong>matrix = [[9,9,4],[6,6,8],[2,1,1]]\\n<strong>输出：</strong>4 \\n<strong>解释：</strong>最长递增路径为 <code>[1, 2, 6, 9]</code>。</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2021/01/27/tmp-grid.jpg\\" style=\\"width: 253px; height: 253px;\\" />\\n<pre>\\n<strong>输入：</strong>matrix = [[3,4,5],[3,2,6],[2,2,1]]\\n<strong>输出：</strong>4 \\n<strong>解释：</strong>最长递增路径是 <code>[3, 4, 5, 6]</code>。注意不允许在对角线方向上移动。\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>matrix = [[1]]\\n<strong>输出：</strong>1\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>m == matrix.length</code></li>\\n\\t<li><code>n == matrix[i].length</code></li>\\n\\t<li><code>1 <= m, n <= 200</code></li>\\n\\t<li><code>0 <= matrix[i][j] <= 2<sup>31</sup> - 1</code></li>\\n</ul>\\n","title":"329. 矩阵中的最长递增路径","relatedTags":["深度优先搜索","广度优先搜索","图","拓扑排序","记忆化搜索","动态规划"],"difficult":"Hard","lang":["javascript"],"uniqueID":"329","slug":"329-Longest-Increasing-Path-in-a-Matrix"}')}}]);