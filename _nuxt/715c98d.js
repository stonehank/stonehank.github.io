(window.webpackJsonp=window.webpackJsonp||[]).push([[568],{1366:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">nums</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">requests</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> maxSumRangeQuery = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">nums, requests</span>) </span>{\\n    <span class=\\"hljs-keyword\\">let</span> MOD=<span class=\\"hljs-number\\">1e9</span>+<span class=\\"hljs-number\\">7</span>\\n    <span class=\\"hljs-keyword\\">let</span> counter=<span class=\\"hljs-built_in\\">Array</span>(nums.length).fill(<span class=\\"hljs-number\\">0</span>)\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> [<span class=\\"hljs-keyword\\">from</span>,to] <span class=\\"hljs-keyword\\">of</span> requests){\\n        counter[<span class=\\"hljs-keyword\\">from</span>]++\\n        <span class=\\"hljs-keyword\\">if</span>(to+<span class=\\"hljs-number\\">1</span>&lt;nums.length)counter[to+<span class=\\"hljs-number\\">1</span>]--\\n    }\\n    <span class=\\"hljs-keyword\\">let</span> eachCount=<span class=\\"hljs-built_in\\">Array</span>(nums.length).fill().map(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">n,i</span>)=&gt;</span>[i,<span class=\\"hljs-number\\">0</span>])\\n    <span class=\\"hljs-keyword\\">let</span> freq=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;counter.length;i++){\\n        freq+=counter[i]\\n        eachCount[i][<span class=\\"hljs-number\\">1</span>]=freq\\n    }\\n    eachCount.sort(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">a,b</span>)=&gt;</span>b[<span class=\\"hljs-number\\">1</span>]-a[<span class=\\"hljs-number\\">1</span>])\\n    nums.sort(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">a,b</span>)=&gt;</span>b-a)\\n    <span class=\\"hljs-keyword\\">let</span> ans=[]\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;nums.length;i++){\\n        <span class=\\"hljs-keyword\\">let</span> correctIdx=eachCount[i][<span class=\\"hljs-number\\">0</span>]\\n        ans[correctIdx]=nums[i]\\n    }\\n    <span class=\\"hljs-comment\\">// console.log(ans,eachCount)</span>\\n    <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;eachCount.length;i++){\\n        <span class=\\"hljs-keyword\\">let</span> idx=eachCount[i][<span class=\\"hljs-number\\">0</span>]\\n        res=(res+eachCount[i][<span class=\\"hljs-number\\">1</span>]*ans[idx]) % MOD\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"maximum-sum-obtained-of-any-permutation","created_at":"2020-09-20","timeArr":[2020,8,20,11,7,5,0],"hasThinking":false,"content":"<p>有一个整数数组&nbsp;<code>nums</code>&nbsp;，和一个查询数组&nbsp;<code>requests</code>&nbsp;，其中&nbsp;<code>requests[i] = [start<sub>i</sub>, end<sub>i</sub>]</code>&nbsp;。第&nbsp;<code>i</code>&nbsp;个查询求&nbsp;<code>nums[start<sub>i</sub>] + nums[start<sub>i</sub> + 1] + ... + nums[end<sub>i</sub> - 1] + nums[end<sub>i</sub>]</code>&nbsp;的结果&nbsp;，<code>start<sub>i</sub></code> 和&nbsp;<code>end<sub>i</sub></code>&nbsp;数组索引都是 <strong>从 0 开始</strong> 的。</p>\\n\\n<p>你可以任意排列 <code>nums</code>&nbsp;中的数字，请你返回所有查询结果之和的最大值。</p>\\n\\n<p>由于答案可能会很大，请你将它对&nbsp;<code>10<sup>9</sup> + 7</code>&nbsp;<strong>取余</strong>&nbsp;后返回。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>nums = [1,2,3,4,5], requests = [[1,3],[0,1]]\\n<strong>输出：</strong>19\\n<strong>解释：</strong>一个可行的 nums 排列为 [2,1,3,4,5]，并有如下结果：\\nrequests[0] -&gt; nums[1] + nums[2] + nums[3] = 1 + 3 + 4 = 8\\nrequests[1] -&gt; nums[0] + nums[1] = 2 + 1 = 3\\n总和为：8 + 3 = 11。\\n一个总和更大的排列为 [3,5,4,2,1]，并有如下结果：\\nrequests[0] -&gt; nums[1] + nums[2] + nums[3] = 5 + 4 + 2 = 11\\nrequests[1] -&gt; nums[0] + nums[1] = 3 + 5  = 8\\n总和为： 11 + 8 = 19，这个方案是所有排列中查询之和最大的结果。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>nums = [1,2,3,4,5,6], requests = [[0,1]]\\n<strong>输出：</strong>11\\n<strong>解释：</strong>一个总和最大的排列为 [6,5,4,3,2,1] ，查询和为 [11]。</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>nums = [1,2,3,4,5,10], requests = [[0,2],[1,3],[1,1]]\\n<strong>输出：</strong>47\\n<strong>解释：</strong>一个和最大的排列为 [4,10,5,3,2,1] ，查询结果分别为 [19,18,10]。</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>n == nums.length</code></li>\\n\\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\\n\\t<li><code>0 &lt;= nums[i]&nbsp;&lt;= 10<sup>5</sup></code></li>\\n\\t<li><code>1 &lt;= requests.length &lt;=&nbsp;10<sup>5</sup></code></li>\\n\\t<li><code>requests[i].length == 2</code></li>\\n\\t<li><code>0 &lt;= start<sub>i</sub>&nbsp;&lt;= end<sub>i</sub>&nbsp;&lt;&nbsp;n</code></li>\\n</ul>\\n","title":"1589. 所有排列中的最大和","relatedTags":["贪心","数组","前缀和","排序"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1589","slug":"1589-Maximum-Sum-Obtained-of-Any-Permutation"}')}}]);