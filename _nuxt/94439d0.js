(window.webpackJsonp=window.webpackJsonp||[]).push([[976],{1774:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">code</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{boolean}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> isValid = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">code</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> stack=[]\\n  <span class=\\"hljs-keyword\\">if</span>(code[<span class=\\"hljs-number\\">0</span>]!==<span class=\\"hljs-string\\">\'&lt;\'</span> || code[<span class=\\"hljs-number\\">1</span>]===<span class=\\"hljs-string\\">\'!\'</span> || code[<span class=\\"hljs-number\\">1</span>]===<span class=\\"hljs-string\\">\'/\'</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n  <span class=\\"hljs-keyword\\">let</span> ts=code.indexOf(<span class=\\"hljs-string\\">\'&gt;\'</span>)\\n  <span class=\\"hljs-keyword\\">if</span>(ts===<span class=\\"hljs-number\\">-1</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n  <span class=\\"hljs-keyword\\">let</span> tagname=code.substring(<span class=\\"hljs-number\\">1</span>,ts)\\n  <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-regexp\\">/[^A-Z]/</span>.test(tagname) || tagname.length&lt;<span class=\\"hljs-number\\">1</span> || tagname.length&gt;<span class=\\"hljs-number\\">9</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n  <span class=\\"hljs-keyword\\">let</span> te=code.length-tagname.length<span class=\\"hljs-number\\">-3</span>\\n  <span class=\\"hljs-keyword\\">if</span>(code.substring(te)!==<span class=\\"hljs-string\\">\\"&lt;/\\"</span>+tagname+<span class=\\"hljs-string\\">\\"&gt;\\"</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n  code=code.substring(ts+<span class=\\"hljs-number\\">1</span>,te)\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;code.length;i++){\\n    <span class=\\"hljs-keyword\\">if</span>(code[i]===<span class=\\"hljs-string\\">\\"&lt;\\"</span>){\\n      <span class=\\"hljs-keyword\\">if</span>(code[i+<span class=\\"hljs-number\\">1</span>]===<span class=\\"hljs-string\\">\\"/\\"</span>){\\n        <span class=\\"hljs-keyword\\">let</span> j=code.indexOf(<span class=\\"hljs-string\\">\'&gt;\'</span>,i)\\n        <span class=\\"hljs-keyword\\">if</span>(j===<span class=\\"hljs-number\\">-1</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n        <span class=\\"hljs-keyword\\">let</span> tagname=code.substring(i+<span class=\\"hljs-number\\">2</span>,j)\\n        <span class=\\"hljs-keyword\\">if</span>(tagname!==stack.pop())<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n        i=j\\n      }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(code[i+<span class=\\"hljs-number\\">1</span>]===<span class=\\"hljs-string\\">\\"!\\"</span>){\\n        <span class=\\"hljs-keyword\\">let</span> start=code.indexOf(<span class=\\"hljs-string\\">\\"&lt;![CDATA[\\"</span>,i),\\n            end=code.indexOf(<span class=\\"hljs-string\\">\\"]]&gt;\\"</span>,start+<span class=\\"hljs-number\\">9</span>)\\n        <span class=\\"hljs-keyword\\">if</span>(start===<span class=\\"hljs-number\\">-1</span> || end===<span class=\\"hljs-number\\">-1</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n        i=end+<span class=\\"hljs-number\\">2</span>\\n      }<span class=\\"hljs-keyword\\">else</span>{\\n        <span class=\\"hljs-keyword\\">let</span> j=code.indexOf(<span class=\\"hljs-string\\">\'&gt;\'</span>,i)\\n        <span class=\\"hljs-keyword\\">if</span>(j===<span class=\\"hljs-number\\">-1</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n        <span class=\\"hljs-keyword\\">let</span> tagname=code.substring(i+<span class=\\"hljs-number\\">1</span>,j)\\n        <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-regexp\\">/[^A-Z]/</span>.test(tagname) || tagname.length&lt;<span class=\\"hljs-number\\">1</span> || tagname.length&gt;<span class=\\"hljs-number\\">9</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n        stack.push(tagname)\\n        i=j\\n      }\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> stack.length===<span class=\\"hljs-number\\">0</span>\\n};\\n</code></pre>\\n"],"querySlug":"tag-validator","created_at":"2019-03-26","timeArr":[2019,2,26,11,0,20,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>首先题目要求整个<code>code</code>必须在一个合法标签内部，因此先要检查头尾是否合法标签。</p>\\n<p>对于中间部分，并没有要求必须被一个合法标签包裹，因此可以使用<code>stack</code>，当<code>code[i]</code>遇到<code>&lt;</code>，判断后面可能出现的3种情况：</p>\\n<ol>\\n<li><code>code[i+1]</code>为<code>!</code></li>\\n<li><code>code[i+1]</code>为<code>/</code></li>\\n<li>其他</li>\\n</ol>\\n<p>情况一：需要去检测<code>CDATA标签</code>是否合法。</p>\\n<p>情况二：需要<code>stack.pop()</code>检测是否与当前闭合标签名相同。</p>\\n<p>情况三：需要<code>stack.push()</code>当前的标签名(需要检查标签名是否合法)。</p>\\n<blockquote>\\n<p>另一个解决方法使用正则表达式(见代码)。</p>\\n</blockquote>\\n","content":"<p>给定一个表示代码片段的字符串，你需要实现一个验证器来解析这段代码，并返回它是否合法。合法的代码片段需要遵守以下的所有规则：</p>\\n\\n<ol>\\n\\t<li>代码必须被<strong>合法的闭合标签</strong>包围。否则，代码是无效的。</li>\\n\\t<li><strong>闭合标签</strong>（不一定合法）要严格符合格式：<code>&lt;TAG_NAME&gt;TAG_CONTENT&lt;/TAG_NAME&gt;</code>。其中，<code>&lt;TAG_NAME&gt;</code>是起始标签，<code>&lt;/TAG_NAME&gt;</code>是结束标签。起始和结束标签中的 TAG_NAME 应当相同。当且仅当&nbsp;TAG_NAME 和 TAG_CONTENT 都是合法的，闭合标签才是<strong>合法的</strong>。</li>\\n\\t<li><strong>合法的</strong>&nbsp;<code>TAG_NAME</code>&nbsp;仅含有<strong>大写字母</strong>，长度在范围 [1,9] 之间。否则，该&nbsp;<code>TAG_NAME</code>&nbsp;是<strong>不合法的</strong>。</li>\\n\\t<li><strong>合法的</strong>&nbsp;<code>TAG_CONTENT</code>&nbsp;可以包含其他<strong>合法的闭合标签</strong>，<strong>cdata</strong>&nbsp;（请参考规则7）和任意字符（注意参考规则1）<strong>除了</strong>不匹配的<code>&lt;</code>、不匹配的起始和结束标签、不匹配的或带有不合法 TAG_NAME 的闭合标签。否则，<code>TAG_CONTENT</code>&nbsp;是<strong>不合法的</strong>。</li>\\n\\t<li>一个起始标签，如果没有具有相同&nbsp;TAG_NAME 的结束标签与之匹配，是不合法的。反之亦然。不过，你也需要考虑标签嵌套的问题。</li>\\n\\t<li>一个<code>&lt;</code>，如果你找不到一个后续的<code>&gt;</code>与之匹配，是不合法的。并且当你找到一个<code>&lt;</code>或<code>&lt;/</code>时，所有直到下一个<code>&gt;</code>的前的字符，都应当被解析为&nbsp;TAG_NAME（不一定合法）。</li>\\n\\t<li>cdata 有如下格式：<code>&lt;![CDATA[CDATA_CONTENT]]&gt;</code>。<code>CDATA_CONTENT</code>&nbsp;的范围被定义成&nbsp;<code>&lt;![CDATA[</code>&nbsp;和<strong>后续的第一个</strong>&nbsp;<code>]]&gt;</code>之间的字符。</li>\\n\\t<li><code>CDATA_CONTENT</code>&nbsp;可以包含<strong>任意字符</strong>。cdata 的功能是阻止验证器解析<code>CDATA_CONTENT</code>，所以即使其中有一些字符可以被解析为标签（无论合法还是不合法），也应该将它们视为<strong>常规字符</strong>。</li>\\n</ol>\\n\\n<p><strong>合法代码的例子:</strong></p>\\n\\n<pre>\\n<strong>输入:</strong> &quot;&lt;DIV&gt;This is the first line &lt;![CDATA[&lt;div&gt;]]&gt;&lt;/DIV&gt;&quot;\\n\\n<strong>输出:</strong> True\\n\\n<strong>解释:</strong> \\n\\n代码被包含在了闭合的标签内： &lt;DIV&gt; 和 &lt;/DIV&gt; 。\\n\\nTAG_NAME 是合法的，TAG_CONTENT 包含了一些字符和 cdata 。 \\n\\n即使 CDATA_CONTENT 含有不匹配的起始标签和不合法的 TAG_NAME，它应该被视为普通的文本，而不是标签。\\n\\n所以 TAG_CONTENT 是合法的，因此代码是合法的。最终返回True。\\n\\n\\n<strong>输入:</strong> &quot;&lt;DIV&gt;&gt;&gt;  ![cdata[]] &lt;![CDATA[&lt;div&gt;]&gt;]]&gt;]]&gt;&gt;]&lt;/DIV&gt;&quot;\\n\\n<strong>输出:</strong> True\\n\\n<strong>解释:</strong>\\n\\n我们首先将代码分割为： start_tag|tag_content|end_tag 。\\n\\nstart_tag -&gt; <strong>&quot;&lt;DIV&gt;&quot;</strong>\\n\\nend_tag -&gt; <strong>&quot;&lt;/DIV&gt;&quot;</strong>\\n\\ntag_content 也可被分割为： text1|cdata|text2 。\\n\\ntext1 -&gt; <strong>&quot;&gt;&gt;  ![cdata[]] &quot;</strong>\\n\\ncdata -&gt; <strong>&quot;&lt;![CDATA[&lt;div&gt;]&gt;]]&gt;&quot;</strong> ，其中 CDATA_CONTENT 为 <strong>&quot;&lt;div&gt;]&gt;&quot;</strong>\\n\\ntext2 -&gt; <strong>&quot;]]&gt;&gt;]&quot;</strong>\\n\\n\\nstart_tag <strong>不</strong>是 <strong>&quot;&lt;DIV&gt;&gt;&gt;&quot;</strong> 的原因参照规则 6 。\\ncdata <strong>不</strong>是 <strong>&quot;&lt;![CDATA[&lt;div&gt;]&gt;]]&gt;]]&gt;&quot;</strong> 的原因参照规则 7 。\\n</pre>\\n\\n<p><strong>不合法代码的例子:</strong></p>\\n\\n<pre>\\n<strong>输入:</strong> &quot;&lt;A&gt;  &lt;B&gt; &lt;/A&gt;   &lt;/B&gt;&quot;\\n<strong>输出:</strong> False\\n<strong>解释:</strong> 不合法。如果 &quot;&lt;A&gt;&quot; 是闭合的，那么 &quot;&lt;B&gt;&quot; 一定是不匹配的，反之亦然。\\n\\n<strong>输入:</strong> &quot;&lt;DIV&gt;  div tag is not closed  &lt;DIV&gt;&quot;\\n<strong>输出:</strong> False\\n\\n<strong>输入:</strong> &quot;&lt;DIV&gt;  unmatched &lt;  &lt;/DIV&gt;&quot;\\n<strong>输出:</strong> False\\n\\n<strong>输入:</strong> &quot;&lt;DIV&gt; closed tags with invalid tag name  &lt;b&gt;123&lt;/b&gt; &lt;/DIV&gt;&quot;\\n<strong>输出:</strong> False\\n\\n<strong>输入:</strong> &quot;&lt;DIV&gt; unmatched tags with invalid tag name  &lt;/1234567890&gt; and &lt;CDATA[[]]&gt;  &lt;/DIV&gt;&quot;\\n<strong>输出:</strong> False\\n\\n<strong>输入:</strong> &quot;&lt;DIV&gt;  unmatched start tag &lt;B&gt;  and unmatched end tag &lt;/C&gt;  &lt;/DIV&gt;&quot;\\n<strong>输出:</strong> False\\n</pre>\\n\\n<p><strong>注意:</strong></p>\\n\\n<ol>\\n\\t<li>为简明起见，你可以假设输入的代码（包括提到的<strong>任意字符</strong>）只包含<code>数字</code>, <font color=\\"#c7254e\\" face=\\"Menlo, Monaco, Consolas, Courier New, monospace\\"><span style=\\"background-color:#f9f2f4; font-size:12.6px\\">字母</span></font>, <code>&#39;&lt;&#39;</code>,<code>&#39;&gt;&#39;</code>,<code>&#39;/&#39;</code>,<code>&#39;!&#39;</code>,<code>&#39;[&#39;</code>,<code>&#39;]&#39;</code>和<code>&#39; &#39;</code>。</li>\\n</ol>\\n","title":"591. 标签验证器","relatedTags":["栈","字符串"],"difficult":"Hard","lang":["javascript"],"uniqueID":"591","slug":"591-Tag-Validator"}')}}]);