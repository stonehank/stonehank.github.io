(window.webpackJsonp=window.webpackJsonp||[]).push([[857],{1655:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */</span>\\n\\n<span class=\\"hljs-comment\\">/**\\n * Encodes a tree to a single string.\\n *\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{TreeNode}</span> <span class=\\"hljs-variable\\">root</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{string}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> serialize = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">root</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(!root)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-string\\">\'\'</span>\\n  <span class=\\"hljs-keyword\\">let</span> str=<span class=\\"hljs-string\\">\'\'</span>\\n  str+=root.val+<span class=\\"hljs-string\\">\'#\'</span>+serialize(root.left)+serialize(root.right)\\n  <span class=\\"hljs-keyword\\">return</span> str\\n};\\n\\n<span class=\\"hljs-comment\\">/**\\n * Decodes your encoded data to tree.\\n *\\n * @param {string} data\\n * @return {TreeNode}\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> deserialize = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">data</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(data===<span class=\\"hljs-string\\">\'\'</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">null</span>\\n  <span class=\\"hljs-keyword\\">let</span> arr=data.substring(<span class=\\"hljs-number\\">0</span>,data.length<span class=\\"hljs-number\\">-1</span>).split(<span class=\\"hljs-string\\">\'#\'</span>)\\n  <span class=\\"hljs-comment\\">// console.log(data)</span>\\n  <span class=\\"hljs-keyword\\">let</span> root=<span class=\\"hljs-literal\\">null</span>\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">insert</span>(<span class=\\"hljs-params\\">root,v</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(!root)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-keyword\\">new</span> TreeNode(v)\\n    <span class=\\"hljs-keyword\\">if</span>(root.val&lt;=v){\\n      root.right=insert(root.right,v)\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      root.left=insert(root.left,v)\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> root\\n  }\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;arr.length;i++){\\n    root=insert(root,+arr[i])\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> root\\n};\\n\\n<span class=\\"hljs-comment\\">/**\\n * Your functions will be called as such:\\n * deserialize(serialize(root));\\n */</span>\\n</code></pre>\\n"],"querySlug":"serialize-and-deserialize-bst","created_at":"2019-03-19","timeArr":[2019,2,19,10,2,22,0],"hasThinking":false,"content":"<p>序列化是将数据结构或对象转换为一系列位的过程，以便它可以存储在文件或内存缓冲区中，或通过网络连接链路传输，以便稍后在同一个或另一个计算机环境中重建。</p>\\n\\n<p>设计一个算法来序列化和反序列化<strong> 二叉搜索树</strong> 。 对序列化/反序列化算法的工作方式没有限制。 您只需确保二叉搜索树可以序列化为字符串，并且可以将该字符串反序列化为最初的二叉搜索树。</p>\\n\\n<p><strong>编码的字符串应尽可能紧凑。</strong></p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>root = [2,1,3]\\n<strong>输出：</strong>[2,1,3]\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>root = []\\n<strong>输出：</strong>[]\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li>树中节点数范围是 <code>[0, 10<sup>4</sup>]</code></li>\\n\\t<li><code>0 <= Node.val <= 10<sup>4</sup></code></li>\\n\\t<li>题目数据 <strong>保证</strong> 输入的树是一棵二叉搜索树。</li>\\n</ul>\\n\\n<p> </p>\\n\\n<p><strong>注意</strong>：不要使用类成员/全局/静态变量来存储状态。 你的序列化和反序列化算法应该是无状态的。</p>\\n","title":"449. 序列化和反序列化二叉搜索树","relatedTags":["树","深度优先搜索","广度优先搜索","设计","二叉搜索树","字符串","二叉树"],"difficult":"Middle","lang":["javascript"],"uniqueID":"449","slug":"449-Serialize-and-Deserialize-BST"}')}}]);