(window.webpackJsonp=window.webpackJsonp||[]).push([[1192],{1990:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">N</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">edges</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> sumOfDistancesInTree = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">N, edges</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> graph=<span class=\\"hljs-built_in\\">Array</span>(N).fill().map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span>=&gt;</span>[])\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> [v,w] <span class=\\"hljs-keyword\\">of</span> edges){\\n    graph[v].push(w)\\n    graph[w].push(v)\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> hash=<span class=\\"hljs-keyword\\">new</span> <span class=\\"hljs-built_in\\">Map</span>()\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">calcDis</span>(<span class=\\"hljs-params\\">v,last,step</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(hash.has(v+<span class=\\"hljs-string\\">\'-\'</span>+last+<span class=\\"hljs-string\\">\'-\'</span>+step))<span class=\\"hljs-keyword\\">return</span> hash.get(v+<span class=\\"hljs-string\\">\'-\'</span>+last+<span class=\\"hljs-string\\">\'-\'</span>+step)\\n    <span class=\\"hljs-keyword\\">let</span> adj=graph[v]\\n    <span class=\\"hljs-keyword\\">let</span> count=last==<span class=\\"hljs-literal\\">null</span> ? adj.length : adj.length<span class=\\"hljs-number\\">-1</span>\\n    <span class=\\"hljs-keyword\\">let</span> dis=count*step\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;adj.length;i++){\\n      <span class=\\"hljs-keyword\\">if</span>(adj[i]===last)<span class=\\"hljs-keyword\\">continue</span>\\n      dis+=calcDis(adj[i],v,step+<span class=\\"hljs-number\\">1</span>)\\n    }\\n    hash.set(v+<span class=\\"hljs-string\\">\'-\'</span>+last+<span class=\\"hljs-string\\">\'-\'</span>+step,dis)\\n    <span class=\\"hljs-keyword\\">return</span> dis\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> res=[]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;N;i++){\\n    res.push(calcDis(i,<span class=\\"hljs-literal\\">null</span>,<span class=\\"hljs-number\\">1</span>))\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"sum-of-distances-in-tree","created_at":"2019-03-20","timeArr":[2019,2,20,15,1,15,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>我们要计算一个节点i到其余节点的和<code>res[i]</code>，有2种办法，</p>\\n<ol>\\n<li>暴力解，直接对每一个节点计算它到其他所有节点的和，时间复杂度是<code>O(n^2)</code>不符合要求</li>\\n<li>通过它的父节点的<code>p</code>的<code>res[p]</code>，来推导出<code>res[i]</code>的结果，这样，我们只需要计算一次根节点的<code>res[root]</code>，\\n其他的节点的结果都可以通过推导求出，最终时间复杂度<code>O(n)</code>，具体步骤如下：</li>\\n</ol>\\n<ul>\\n<li>\\n<p>定义一个<code>count</code>为以<code>0</code>为根节点，包含当前节点和它的所有子节点数量的数组。</p>\\n</li>\\n<li>\\n<p>首先求出<code>res[0]</code>,这时如果想求出<code>0</code>节点的子节点<code>i</code>，</p>\\n<p>当要计算<code>i</code>到其余节点的和时，<code>i</code>相对<code>0</code>来说，有一部分节点离它更近了，也有一部分节点离它更远了。</p>\\n<ul>\\n<li>离得更近的节点：<code>count[i]</code></li>\\n<li>离得更远的节点：<code>N-count[i]</code></li>\\n</ul>\\n<p>因此最后，要加上离得更远的节点的数量，再减去离得更近的节点的数量。</p>\\n<p><code>res[i]=res[0] + (N-count[i]) - count[i]</code></p>\\n</li>\\n</ul>\\n","content":"<p>给定一个无向、连通的树。树中有 <code>N</code> 个标记为 <code>0...N-1</code> 的节点以及 <code>N-1</code>&nbsp;条边&nbsp;。</p>\\n\\n<p>第 <code>i</code> 条边连接节点&nbsp;<code>edges[i][0]</code> 和 <code>edges[i][1]</code>&nbsp;。</p>\\n\\n<p>返回一个表示节点 <code>i</code> 与其他所有节点距离之和的列表 <code>ans</code>。</p>\\n\\n<p><strong>示例 1:</strong></p>\\n\\n<pre>\\n<strong>输入: </strong>N = 6, edges = [[0,1],[0,2],[2,3],[2,4],[2,5]]\\n<strong>输出: </strong>[8,12,6,10,10,10]\\n<strong>解释: </strong>\\n如下为给定的树的示意图：\\n  0\\n / \\\\\\n1   2\\n   /|\\\\\\n  3 4 5\\n\\n我们可以计算出 dist(0,1) + dist(0,2) + dist(0,3) + dist(0,4) + dist(0,5) \\n也就是 1 + 1 + 2 + 2 + 2 = 8。 因此，answer[0] = 8，以此类推。\\n</pre>\\n\\n<p><strong>说明:</strong>&nbsp;<code>1 &lt;= N &lt;= 10000</code></p>\\n","title":"834. 树中距离之和","relatedTags":["树","深度优先搜索","图","动态规划"],"difficult":"Hard","lang":["javascript"],"uniqueID":"834","slug":"834-Sum-of-Distances-in-Tree"}')}}]);