(window.webpackJsonp=window.webpackJsonp||[]).push([[215],{1013:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">preorder</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{TreeNode}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> bstFromPreorder = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">preorder</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> root=<span class=\\"hljs-keyword\\">new</span> TreeNode(preorder[<span class=\\"hljs-number\\">0</span>])\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">1</span>;i&lt;preorder.length;i++){\\n    root=insert(root,preorder[i])\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> root\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">insert</span>(<span class=\\"hljs-params\\">root,v</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(!root)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-keyword\\">new</span> TreeNode(v)\\n    <span class=\\"hljs-keyword\\">let</span> rv=root.val\\n    <span class=\\"hljs-keyword\\">if</span>(rv&lt;v){\\n      root.right=insert(root.right,v)\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      root.left=insert(root.left,v)\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> root\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"construct-binary-search-tree-from-preorder-traversal","created_at":"2019-03-10","timeArr":[2019,2,10,11,29,27,0],"hasThinking":false,"content":"<p>返回与给定前序遍历&nbsp;<code>preorder</code> 相匹配的二叉搜索树（binary <strong>search</strong> tree）的根结点。</p>\\n\\n<p><em>(回想一下，二叉搜索树是二叉树的一种，其每个节点都满足以下规则，对于&nbsp;<code>node.left</code>&nbsp;的任何后代，值总 <code>&lt; node.val</code>，而 <code>node.right</code> 的任何后代，值总 <code>&gt; node.val</code>。此外，前序遍历首先显示节点&nbsp;<code>node</code> 的值，然后遍历 <code>node.left</code>，接着遍历 <code>node.right</code>。）</em></p>\\n\\n<p>题目保证，对于给定的测试用例，总能找到满足要求的二叉搜索树。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例：</strong></p>\\n\\n<pre><strong>输入：</strong>[8,5,1,7,10,12]\\n<strong>输出：</strong>[8,5,10,1,7,null,12]\\n<img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/03/08/1266.png\\" style=\\"height: 200px; width: 306px;\\">\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= preorder.length &lt;= 100</code></li>\\n\\t<li><code>1 &lt;= preorder[i]&nbsp;&lt;= 10^8</code></li>\\n\\t<li><code>preorder</code> 中的值互不相同</li>\\n</ul>\\n","title":"1008. 前序遍历构造二叉搜索树","relatedTags":["栈","树","二叉搜索树","数组","二叉树","单调栈"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1008","slug":"1008-Construct-Binary-Search-Tree-from-Preorder-Traversal"}')}}]);