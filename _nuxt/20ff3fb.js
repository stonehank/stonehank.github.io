(window.webpackJsonp=window.webpackJsonp||[]).push([[406],{1204:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">s</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{string}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> freqAlphabets = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">s</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> split=s.split(<span class=\\"hljs-string\\">\'#\'</span>)\\n  <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-string\\">\'\'</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;split.length;i++){\\n    <span class=\\"hljs-keyword\\">if</span>(i===split.length<span class=\\"hljs-number\\">-1</span>){\\n      <span class=\\"hljs-keyword\\">let</span> singleStr=split[i]\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;singleStr.length;j++){\\n        res+=<span class=\\"hljs-built_in\\">String</span>.fromCharCode((singleStr[j]<span class=\\"hljs-number\\">-1</span>)+<span class=\\"hljs-number\\">97</span>)\\n      }\\n      <span class=\\"hljs-keyword\\">return</span> res\\n    }\\n    <span class=\\"hljs-keyword\\">if</span>(split[i].length&gt;<span class=\\"hljs-number\\">2</span>){\\n      <span class=\\"hljs-keyword\\">let</span> singleStr=split[i].slice(<span class=\\"hljs-number\\">0</span>,split[i].length<span class=\\"hljs-number\\">-2</span>)\\n      <span class=\\"hljs-keyword\\">let</span> doubStr=split[i].slice(split[i].length<span class=\\"hljs-number\\">-2</span>)\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;singleStr.length;j++){\\n        res+=<span class=\\"hljs-built_in\\">String</span>.fromCharCode((singleStr[j]<span class=\\"hljs-number\\">-1</span>)+<span class=\\"hljs-number\\">97</span>)\\n      }\\n      res+=<span class=\\"hljs-built_in\\">String</span>.fromCharCode((doubStr<span class=\\"hljs-number\\">-1</span>)+<span class=\\"hljs-number\\">97</span>)\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      res+=<span class=\\"hljs-built_in\\">String</span>.fromCharCode((split[i]<span class=\\"hljs-number\\">-1</span>)+<span class=\\"hljs-number\\">97</span>)\\n    }\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"decrypt-string-from-alphabet-to-integer-mapping","created_at":"2020-01-05","timeArr":[2020,0,5,10,37,43,0],"hasThinking":false,"content":"<p>给你一个字符串&nbsp;<code>s</code>，它由数字（<code>&#39;0&#39;</code> - <code>&#39;9&#39;</code>）和&nbsp;<code>&#39;#&#39;</code>&nbsp;组成。我们希望按下述规则将&nbsp;<code>s</code>&nbsp;映射为一些小写英文字符：</p>\\n\\n<ul>\\n\\t<li>字符（<code>&#39;a&#39;</code> - <code>&#39;i&#39;</code>）分别用（<code>&#39;1&#39;</code> -&nbsp;<code>&#39;9&#39;</code>）表示。</li>\\n\\t<li>字符（<code>&#39;j&#39;</code> - <code>&#39;z&#39;</code>）分别用（<code>&#39;10#&#39;</code>&nbsp;-&nbsp;<code>&#39;26#&#39;</code>）表示。&nbsp;</li>\\n</ul>\\n\\n<p>返回映射之后形成的新字符串。</p>\\n\\n<p>题目数据保证映射始终唯一。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>s = &quot;10#11#12&quot;\\n<strong>输出：</strong>&quot;jkab&quot;\\n<strong>解释：</strong>&quot;j&quot; -&gt; &quot;10#&quot; , &quot;k&quot; -&gt; &quot;11#&quot; , &quot;a&quot; -&gt; &quot;1&quot; , &quot;b&quot; -&gt; &quot;2&quot;.\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>s = &quot;1326#&quot;\\n<strong>输出：</strong>&quot;acz&quot;\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>s = &quot;25#&quot;\\n<strong>输出：</strong>&quot;y&quot;\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre><strong>输入：</strong>s = &quot;12345678910#11#12#13#14#15#16#17#18#19#20#21#22#23#24#25#26#&quot;\\n<strong>输出：</strong>&quot;abcdefghijklmnopqrstuvwxyz&quot;\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= s.length &lt;= 1000</code></li>\\n\\t<li><code>s[i]</code> 只包含数字（<code>&#39;0&#39;</code>-<code>&#39;9&#39;</code>）和&nbsp;<code>&#39;#&#39;</code>&nbsp;字符。</li>\\n\\t<li><code>s</code>&nbsp;是映射始终存在的有效字符串。</li>\\n</ul>\\n","title":"1309. 解码字母到整数映射","relatedTags":["字符串"],"difficult":"Easy","lang":["javascript"],"uniqueID":"1309","slug":"1309-Decrypt-String-from-Alphabet-to-Integer-Mapping"}')}}]);