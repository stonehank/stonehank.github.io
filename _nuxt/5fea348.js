(window.webpackJsonp=window.webpackJsonp||[]).push([[903],{1701:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-keyword\\">import</span> random\\n<span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Solution</span><span class=\\"hljs-params\\">(object)</span>:</span>\\n\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">__init__</span><span class=\\"hljs-params\\">(self, rects)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type rects: List[List[int]]\\n        \\"\\"\\"</span>\\n        self.area=[]\\n        <span class=\\"hljs-keyword\\">for</span> x1,y1,x2,y2 <span class=\\"hljs-keyword\\">in</span> rects:\\n          self.area.append((x2-x1+<span class=\\"hljs-number\\">1</span>)*(y2-y1+<span class=\\"hljs-number\\">1</span>))\\n        <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(<span class=\\"hljs-number\\">1</span>,len(rects)):\\n          self.area[i]+=self.area[i<span class=\\"hljs-number\\">-1</span>]\\n        self.r=rects\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">pick</span><span class=\\"hljs-params\\">(self)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :rtype: List[int]\\n        \\"\\"\\"</span>\\n        rd=<span class=\\"hljs-number\\">1</span>+int(random.random()*self.area[<span class=\\"hljs-number\\">-1</span>])\\n        lo,hi=<span class=\\"hljs-number\\">0</span>,len(self.area)<span class=\\"hljs-number\\">-1</span>\\n        <span class=\\"hljs-keyword\\">while</span> lo&lt;hi:\\n          mid=(lo+hi)//<span class=\\"hljs-number\\">2</span>\\n          <span class=\\"hljs-keyword\\">if</span> self.area[mid]&lt;rd:\\n            lo=mid+<span class=\\"hljs-number\\">1</span>\\n          <span class=\\"hljs-keyword\\">else</span>:\\n            hi=mid\\n        choose=self.r[lo]\\n        rdw=choose[<span class=\\"hljs-number\\">0</span>]+int(random.random()*(choose[<span class=\\"hljs-number\\">2</span>]-choose[<span class=\\"hljs-number\\">0</span>]+<span class=\\"hljs-number\\">1</span>))\\n        rdh=choose[<span class=\\"hljs-number\\">1</span>]+int(random.random()*(choose[<span class=\\"hljs-number\\">3</span>]-choose[<span class=\\"hljs-number\\">1</span>]+<span class=\\"hljs-number\\">1</span>))\\n        <span class=\\"hljs-keyword\\">return</span> [rdw,rdh]\\n        \\n        \\n\\n<span class=\\"hljs-comment\\"># Your Solution object will be instantiated and called as such:</span>\\n<span class=\\"hljs-comment\\"># obj = Solution(rects)</span>\\n<span class=\\"hljs-comment\\"># param_1 = obj.pick()</span>\\n</code></pre>\\n"],"querySlug":"random-point-in-non-overlapping-rectangles","created_at":"2019-02-27","timeArr":[2019,1,27,11,53,22,0],"hasThinking":false,"content":"<p>给定一个非重叠轴对齐矩形的列表 <code>rects</code>，写一个函数 <code>pick</code> 随机均匀地选取矩形覆盖的空间中的整数点。</p>\\n\\n<p>提示：</p>\\n\\n<ol>\\n\\t<li><strong>整数点</strong>是具有整数坐标的点。</li>\\n\\t<li>矩形周边上的点包含在矩形覆盖的空间中。</li>\\n\\t<li>第 <code>i</code> 个矩形 <code>rects [i] = [x1，y1，x2，y2]</code>，其中&nbsp;<code>[x1，y1]</code> 是左下角的整数坐标，<code>[x2，y2]</code> 是右上角的整数坐标。</li>\\n\\t<li>每个矩形的长度和宽度不超过 2000。</li>\\n\\t<li><code>1 &lt;= rects.length&nbsp;&lt;= 100</code></li>\\n\\t<li><code>pick</code> 以整数坐标数组&nbsp;<code>[p_x, p_y]</code>&nbsp;的形式返回一个点。</li>\\n\\t<li><code>pick</code> 最多被调用10000次。</li>\\n</ol>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入: \\n</strong>[&quot;Solution&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;]\\n[[[[1,1,5,5]]],[],[],[]]\\n<strong>输出: \\n</strong>[null,[4,1],[4,1],[3,3]]\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入: \\n</strong>[&quot;Solution&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;,&quot;pick&quot;]\\n[[[[-2,-2,-1,-1],[1,0,3,0]]],[],[],[],[],[]]\\n<strong>输出: \\n</strong>[null,[-1,-2],[2,0],[-2,-1],[3,0],[-2,-2]]</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>输入语法的说明：</strong></p>\\n\\n<p>输入是两个列表：调用的子例程及其参数。<code>Solution</code> 的构造函数有一个参数，即矩形数组 <code>rects</code>。<code>pick</code> 没有参数。参数总是用列表包装的，即使没有也是如此。</p>\\n\\n<p>&nbsp;</p>\\n","title":"497. 非重叠矩形中的随机点","relatedTags":["水塘抽样","数学","二分查找","有序集合","前缀和","随机化"],"difficult":"Middle","lang":["python"],"uniqueID":"497","slug":"497-Random-Point-in-Non-overlapping-Rectangles"}')}}]);