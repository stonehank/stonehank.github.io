(window.webpackJsonp=window.webpackJsonp||[]).push([[1057],{1855:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">s</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> countBinarySubstrings = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">s</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> zero=<span class=\\"hljs-number\\">0</span>,one=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">let</span> ans=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;s.length;i++){\\n    <span class=\\"hljs-keyword\\">if</span>(i&gt;<span class=\\"hljs-number\\">0</span> &amp;&amp; s[i]!==s[i<span class=\\"hljs-number\\">-1</span>]){\\n      <span class=\\"hljs-keyword\\">if</span>(s[i]===<span class=\\"hljs-string\\">\\"1\\"</span>)one=<span class=\\"hljs-number\\">0</span>\\n      <span class=\\"hljs-keyword\\">else</span> zero=<span class=\\"hljs-number\\">0</span>\\n    }\\n    <span class=\\"hljs-keyword\\">if</span>(s[i]===<span class=\\"hljs-string\\">\\"0\\"</span>){\\n      zero++\\n      <span class=\\"hljs-keyword\\">if</span>(zero&lt;=one)ans++\\n    }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(s[i]===<span class=\\"hljs-string\\">\\"1\\"</span>){\\n      one++\\n      <span class=\\"hljs-keyword\\">if</span>(one&lt;=zero)ans++\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> ans\\n};\\n</code></pre>\\n"],"querySlug":"count-binary-substrings","created_at":"2019-03-26","timeArr":[2019,2,26,15,58,47,0],"hasThinking":false,"content":"<p>给定一个字符串 <code>s</code>，计算具有相同数量 0 和 1 的非空（连续）子字符串的数量，并且这些子字符串中的所有 0 和所有 1 都是连续的。</p>\\n\\n<p>重复出现的子串要计算它们出现的次数。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1 :</strong></p>\\n\\n<pre>\\n<strong>输入:</strong> \\"00110011\\"\\n<strong>输出:</strong> 6\\n<strong>解释:</strong> 有6个子串具有相同数量的连续1和0：“0011”，“01”，“1100”，“10”，“0011” 和 “01”。\\n\\n请注意，一些重复出现的子串要计算它们出现的次数。\\n\\n另外，“00110011”不是有效的子串，因为所有的0（和1）没有组合在一起。\\n</pre>\\n\\n<p><strong>示例 2 :</strong></p>\\n\\n<pre>\\n<strong>输入:</strong> \\"10101\\"\\n<strong>输出:</strong> 4\\n<strong>解释:</strong> 有4个子串：“10”，“01”，“10”，“01”，它们具有相同数量的连续1和0。\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>s.length</code> 在1到50,000之间。</li>\\n\\t<li><code>s</code> 只包含“0”或“1”字符。</li>\\n</ul>\\n","title":"696. 计数二进制子串","relatedTags":["双指针","字符串"],"difficult":"Easy","lang":["javascript"],"uniqueID":"696","slug":"696-Count-Binary-Substrings"}')}}]);