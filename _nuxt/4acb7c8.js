(window.webpackJsonp=window.webpackJsonp||[]).push([[1211],{2009:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">richer</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">quiet</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> loudAndRich = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">richer, quiet</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> graph=<span class=\\"hljs-built_in\\">Array</span>(quiet.length).fill().map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span>=&gt;</span>[])\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> [more,less] <span class=\\"hljs-keyword\\">of</span> richer){\\n    graph[less].push(more)\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> hasVisited=<span class=\\"hljs-built_in\\">Array</span>(quiet.length).fill(<span class=\\"hljs-literal\\">null</span>)\\n  <span class=\\"hljs-keyword\\">let</span> res=[]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;quiet.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> r=dfs(i)\\n    res.push(r[<span class=\\"hljs-number\\">1</span>])\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n  \\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">dfs</span>(<span class=\\"hljs-params\\">v</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(hasVisited[v])<span class=\\"hljs-keyword\\">return</span> hasVisited[v]\\n    <span class=\\"hljs-keyword\\">let</span> adj=graph[v]\\n    <span class=\\"hljs-keyword\\">let</span> minQuiet=quiet[v],minQuietP=v\\n    <span class=\\"hljs-keyword\\">if</span>(adj){\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;adj.length;i++){\\n        <span class=\\"hljs-keyword\\">let</span> [subMinQ,subP]=dfs(adj[i])\\n        <span class=\\"hljs-keyword\\">if</span>(subMinQ&lt;minQuiet){\\n          minQuiet=subMinQ\\n          minQuietP=subP\\n        }\\n      }\\n    }\\n    hasVisited[v]=[minQuiet,minQuietP]\\n    <span class=\\"hljs-keyword\\">return</span> [minQuiet,minQuietP]\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"loud-and-rich","created_at":"2019-04-11","timeArr":[2019,3,11,10,52,41,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>首先构建有向图<code>graph</code>，对每一个人<code>p</code>，他所连接的都是比他更富的人。</p>\\n<p>然后定义<code>dfs</code>，对每一个人<code>p</code>，沿着他的连接一直找下去(包括他自己)，找出最安静的那个人，然后使用一个<code>hash</code>保存结果，\\n后续再找到这个人就不需重复计算。</p>\\n","content":"<p>在一组 N 个人（编号为&nbsp;<code>0, 1, 2, ..., N-1</code>）中，每个人都有不同数目的钱，以及不同程度的安静（quietness）。</p>\\n\\n<p>为了方便起见，我们将编号为&nbsp;<code>x</code>&nbsp;的人简称为 &quot;person&nbsp;<code>x</code>&nbsp;&quot;。</p>\\n\\n<p>如果能够肯定 person&nbsp;<code>x</code>&nbsp;比 person&nbsp;<code>y</code>&nbsp;更有钱的话，我们会说&nbsp;<code>richer[i] = [x, y]</code>&nbsp;。注意&nbsp;<code>richer</code>&nbsp;可能只是有效观察的一个子集。</p>\\n\\n<p>另外，如果 person&nbsp;<code>x</code>&nbsp;的安静程度为&nbsp;<code>q</code>&nbsp;，我们会说&nbsp;<code>quiet[x] = q</code>&nbsp;。</p>\\n\\n<p>现在，返回答案&nbsp;<code>answer</code>&nbsp;，其中&nbsp;<code>answer[x] = y</code>&nbsp;的前提是，在所有拥有的钱不少于&nbsp;person&nbsp;<code>x</code>&nbsp;的人中，person&nbsp;<code>y</code>&nbsp;是最安静的人（也就是安静值&nbsp;<code>quiet[y]</code>&nbsp;最小的人）。</p>\\n\\n<p><strong>示例：</strong></p>\\n\\n<pre><strong>输入：</strong>richer = [[1,0],[2,1],[3,1],[3,7],[4,3],[5,3],[6,3]], quiet = [3,2,5,4,6,1,7,0]\\n<strong>输出：</strong>[5,5,2,5,4,5,6,7]\\n<strong>解释： </strong>\\nanswer[0] = 5，\\nperson 5 比 person 3 有更多的钱，person 3 比 person 1 有更多的钱，person 1 比 person 0 有更多的钱。\\n唯一较为安静（有较低的安静值 quiet[x]）的人是 person 7，\\n但是目前还不清楚他是否比 person 0 更有钱。\\n\\nanswer[7] = 7，\\n在所有拥有的钱肯定不少于 person 7 的人中(这可能包括 person 3，4，5，6 以及 7)，\\n最安静(有较低安静值 quiet[x])的人是 person 7。\\n\\n其他的答案也可以用类似的推理来解释。\\n</pre>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ol>\\n\\t<li><code>1 &lt;= quiet.length = N &lt;= 500</code></li>\\n\\t<li><code>0 &lt;= quiet[i] &lt; N</code>，所有&nbsp;<code>quiet[i]</code>&nbsp;都不相同。</li>\\n\\t<li><code>0 &lt;= richer.length &lt;= N * (N-1) / 2</code></li>\\n\\t<li><code>0 &lt;= richer[i][j] &lt; N</code></li>\\n\\t<li><code>richer[i][0] != richer[i][1]</code></li>\\n\\t<li><code>richer[i]</code>&nbsp;都是不同的。</li>\\n\\t<li>对&nbsp;<code>richer</code>&nbsp;的观察在逻辑上是一致的。</li>\\n</ol>\\n","title":"851. 喧闹和富有","relatedTags":["深度优先搜索","图","拓扑排序","数组"],"difficult":"Middle","lang":["javascript"],"uniqueID":"851","slug":"851-Loud-and-Rich"}')}}]);