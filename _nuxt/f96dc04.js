(window.webpackJsonp=window.webpackJsonp||[]).push([[1138],{1936:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">graph</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{boolean}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> isBipartite = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">graph</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> N=graph.length\\n  <span class=\\"hljs-keyword\\">let</span> color=<span class=\\"hljs-built_in\\">Array</span>(N).fill(<span class=\\"hljs-literal\\">false</span>)\\n  <span class=\\"hljs-keyword\\">let</span> visited=<span class=\\"hljs-built_in\\">Array</span>(N).fill(<span class=\\"hljs-literal\\">false</span>)\\n  <span class=\\"hljs-keyword\\">let</span> valid=<span class=\\"hljs-literal\\">true</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;N;i++){\\n    <span class=\\"hljs-keyword\\">if</span>(visited[i])<span class=\\"hljs-keyword\\">continue</span>\\n    dfs(i)\\n    <span class=\\"hljs-keyword\\">if</span>(!valid)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n  \\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">dfs</span>(<span class=\\"hljs-params\\">v</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(!valid)<span class=\\"hljs-keyword\\">return</span>\\n    visited[v]=<span class=\\"hljs-literal\\">true</span>\\n    <span class=\\"hljs-keyword\\">let</span> adj=graph[v]\\n    <span class=\\"hljs-keyword\\">if</span>(adj){\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;adj.length;i++){\\n        <span class=\\"hljs-keyword\\">if</span>(!visited[adj[i]]){\\n          color[adj[i]]=!color[v]\\n          dfs(adj[i])\\n        }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(color[adj[i]]===color[v]){\\n          <span class=\\"hljs-keyword\\">return</span> valid=<span class=\\"hljs-literal\\">false</span>\\n        }\\n      }\\n    }\\n  }\\n  \\n};\\n</code></pre>\\n"],"querySlug":"is-graph-bipartite","created_at":"2019-04-10","timeArr":[2019,3,10,18,18,34,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>经典的<code>Two Color</code>上色问题，<code>dfs</code>遍历给每一个点的还没有上色的相邻点上色，如果后续发现冲突(相邻点颜色相同)，返回<code>false</code>。</p>\\n<p>注意：</p>\\n<p>要对每一个点进行上色判断(通过<code>hash</code>防止重复)，直到出现冲突或者所有点判断完毕，因为可能存在两个不相连的图。</p>\\n","content":"存在一个 <strong>无向图</strong> ，图中有 <code>n</code> 个节点。其中每个节点都有一个介于 <code>0</code> 到 <code>n - 1</code> 之间的唯一编号。给你一个二维数组 <code>graph</code> ，其中 <code>graph[u]</code> 是一个节点数组，由节点 <code>u</code> 的邻接节点组成。形式上，对于 <code>graph[u]</code> 中的每个 <code>v</code> ，都存在一条位于节点 <code>u</code> 和节点 <code>v</code> 之间的无向边。该无向图同时具有以下属性：\\n<ul>\\n\\t<li>不存在自环（<code>graph[u]</code> 不包含 <code>u</code>）。</li>\\n\\t<li>不存在平行边（<code>graph[u]</code> 不包含重复值）。</li>\\n\\t<li>如果 <code>v</code> 在 <code>graph[u]</code> 内，那么 <code>u</code> 也应该在 <code>graph[v]</code> 内（该图是无向图）</li>\\n\\t<li>这个图可能不是连通图，也就是说两个节点 <code>u</code> 和 <code>v</code> 之间可能不存在一条连通彼此的路径。</li>\\n</ul>\\n\\n<p><strong>二分图</strong> 定义：如果能将一个图的节点集合分割成两个独立的子集 <code>A</code> 和 <code>B</code> ，并使图中的每一条边的两个节点一个来自 <code>A</code> 集合，一个来自 <code>B</code> 集合，就将这个图称为 <strong>二分图</strong> 。</p>\\n\\n<p>如果图是二分图，返回 <code>true</code><em> </em>；否则，返回 <code>false</code> 。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2020/10/21/bi2.jpg\\" style=\\"width: 222px; height: 222px;\\" />\\n<pre>\\n<strong>输入：</strong>graph = [[1,2,3],[0,2],[0,1,3],[0,2]]\\n<strong>输出：</strong>false\\n<strong>解释：</strong><code>不能将节点分割成两个独立的子集，</code>以使每条边都连通一个子集中的一个节点与另一个子集中的一个节点。</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2020/10/21/bi1.jpg\\" style=\\"width: 222px; height: 222px;\\" />\\n<pre>\\n<strong>输入：</strong>graph = [[1,3],[0,2],[1,3],[0,2]]\\n<strong>输出：</strong>true\\n<strong>解释：</strong><code>可以将节点分成两组: {0, 2} 和 {1, 3} 。</code></pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>graph.length == n</code></li>\\n\\t<li><code>1 <= n <= 100</code></li>\\n\\t<li><code>0 <= graph[u].length < n</code></li>\\n\\t<li><code>0 <= graph[u][i] <= n - 1</code></li>\\n\\t<li><code>graph[u]</code> 不会包含 <code>u</code></li>\\n\\t<li><code>graph[u]</code> 的所有值 <strong>互不相同</strong></li>\\n\\t<li>如果 <code>graph[u]</code> 包含 <code>v</code>，那么 <code>graph[v]</code> 也会包含 <code>u</code></li>\\n</ul>\\n","title":"785. 判断二分图","relatedTags":["深度优先搜索","广度优先搜索","并查集","图"],"difficult":"Middle","lang":["javascript"],"uniqueID":"785","slug":"785-Is-Graph-Bipartite"}')}}]);