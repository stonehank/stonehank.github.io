(window.webpackJsonp=window.webpackJsonp||[]).push([[264],{1062:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">barcodes</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> rearrangeBarcodes = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">barcodes</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> hash={}\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> n <span class=\\"hljs-keyword\\">of</span> barcodes){\\n    <span class=\\"hljs-keyword\\">if</span>(hash[n]==<span class=\\"hljs-literal\\">null</span>)hash[n]=<span class=\\"hljs-number\\">1</span>\\n    <span class=\\"hljs-keyword\\">else</span> hash[n]++\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> pq=<span class=\\"hljs-keyword\\">new</span> PriorityQueue(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">a,b</span>)=&gt;</span>b[<span class=\\"hljs-number\\">1</span>]-a[<span class=\\"hljs-number\\">1</span>])\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> k <span class=\\"hljs-keyword\\">in</span> hash){\\n    pq.insert([+k,hash[k]])\\n  }\\n  \\n  <span class=\\"hljs-keyword\\">let</span> res=[]\\n  <span class=\\"hljs-keyword\\">while</span>(pq.size()&gt;<span class=\\"hljs-number\\">1</span>){\\n    <span class=\\"hljs-keyword\\">let</span> [maxN1,maxV1]=pq.pop(),\\n        [maxN2,maxV2]=pq.pop()\\n    res.push(maxN1,maxN2)\\n    maxV1--\\n    maxV2--\\n    <span class=\\"hljs-keyword\\">if</span>(maxV1&gt;<span class=\\"hljs-number\\">0</span>)pq.insert([maxN1,maxV1])\\n    <span class=\\"hljs-keyword\\">if</span>(maxV2&gt;<span class=\\"hljs-number\\">0</span>)pq.insert([maxN2,maxV2])\\n  }\\n  \\n  <span class=\\"hljs-keyword\\">if</span>(pq.size()===<span class=\\"hljs-number\\">1</span>){\\n    res.push(pq.pop()[<span class=\\"hljs-number\\">0</span>])\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n  \\n  \\n};\\n\\n<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">PriorityQueue</span>(<span class=\\"hljs-params\\">compareFunction</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span> (!compareFunction) {\\n    compareFunction = <span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">a, b</span>) =&gt;</span> a - b\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> heap = [<span class=\\"hljs-literal\\">null</span>]\\n\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">swim</span>(<span class=\\"hljs-params\\">idx</span>) </span>{\\n    <span class=\\"hljs-keyword\\">if</span> (idx &lt; <span class=\\"hljs-number\\">2</span>) <span class=\\"hljs-keyword\\">return</span>\\n    <span class=\\"hljs-keyword\\">let</span> k = <span class=\\"hljs-built_in\\">Math</span>.floor(idx / <span class=\\"hljs-number\\">2</span>)\\n    <span class=\\"hljs-keyword\\">if</span> (compareFunction(heap[idx], heap[k]) &lt; <span class=\\"hljs-number\\">0</span>) {\\n      swap(heap, idx, k)\\n      idx = k\\n      swim(idx)\\n    }\\n  }\\n\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">sink</span>(<span class=\\"hljs-params\\">idx</span>) </span>{\\n    <span class=\\"hljs-keyword\\">let</span> k = <span class=\\"hljs-built_in\\">Math</span>.floor(idx * <span class=\\"hljs-number\\">2</span>)\\n    <span class=\\"hljs-keyword\\">if</span> (k &gt;= heap.length) <span class=\\"hljs-keyword\\">return</span>\\n    <span class=\\"hljs-keyword\\">if</span> (k &lt; heap.length &amp;&amp; heap[k + <span class=\\"hljs-number\\">1</span>] &amp;&amp; compareFunction(heap[k + <span class=\\"hljs-number\\">1</span>], heap[k]) &lt; <span class=\\"hljs-number\\">0</span>) k++\\n    <span class=\\"hljs-keyword\\">if</span> (compareFunction(heap[k], heap[idx]) &lt; <span class=\\"hljs-number\\">0</span>) {\\n      swap(heap, idx, k)\\n      idx = k\\n      sink(idx)\\n    }\\n  }\\n\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">swap</span>(<span class=\\"hljs-params\\">arr, i, j</span>) </span>{\\n    <span class=\\"hljs-keyword\\">let</span> temp = arr[i]\\n    arr[i] = arr[j]\\n    arr[j] = temp\\n  }\\n\\n  <span class=\\"hljs-keyword\\">this</span>.insert = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">v</span>) </span>{\\n    heap.push(v)\\n    swim(heap.length - <span class=\\"hljs-number\\">1</span>)\\n  }\\n  <span class=\\"hljs-keyword\\">this</span>.pop = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\"></span>) </span>{\\n    swap(heap, <span class=\\"hljs-number\\">1</span>, heap.length - <span class=\\"hljs-number\\">1</span>)\\n    <span class=\\"hljs-keyword\\">let</span> v = heap.pop()\\n    sink(<span class=\\"hljs-number\\">1</span>)\\n    <span class=\\"hljs-keyword\\">return</span> v\\n  }\\n  <span class=\\"hljs-keyword\\">this</span>.peek = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\"></span>) </span>{\\n    <span class=\\"hljs-keyword\\">return</span> heap[<span class=\\"hljs-number\\">1</span>]\\n  }\\n  <span class=\\"hljs-keyword\\">this</span>.size = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\"></span>) </span>{\\n    <span class=\\"hljs-keyword\\">return</span> heap.length - <span class=\\"hljs-number\\">1</span>\\n  }\\n  <span class=\\"hljs-keyword\\">this</span>.isEmpty = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\"></span>) </span>{\\n    <span class=\\"hljs-keyword\\">return</span> heap.length === <span class=\\"hljs-number\\">1</span>\\n  }\\n}\\n\\n</code></pre>\\n"],"querySlug":"distant-barcodes","created_at":"2019-05-26","timeArr":[2019,4,26,11,25,39,0],"hasThinking":false,"content":"<p>在一个仓库里，有一排条形码，其中第 <code>i</code> 个条形码为&nbsp;<code>barcodes[i]</code>。</p>\\n\\n<p>请你重新排列这些条形码，使其中两个相邻的条形码 <strong>不能</strong> 相等。 你可以返回任何满足该要求的答案，此题保证存在答案。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>[1,1,1,2,2,2]\\n<strong>输出：</strong>[2,1,2,1,2,1]\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>[1,1,1,1,2,2,3,3]\\n<strong>输出：</strong>[1,3,1,3,2,1,2,1]</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ol>\\n\\t<li><code>1 &lt;= barcodes.length &lt;= 10000</code></li>\\n\\t<li><code>1 &lt;= barcodes[i] &lt;= 10000</code></li>\\n</ol>\\n\\n<p>&nbsp;</p>\\n","title":"1054. 距离相等的条形码","relatedTags":["贪心","数组","哈希表","计数","排序","堆（优先队列）"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1054","slug":"1054-Distant-Barcodes"}')}}]);