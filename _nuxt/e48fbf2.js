(window.webpackJsonp=window.webpackJsonp||[]).push([[650],{1448:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">n</span></span> - a positive integer\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> hammingWeight = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">n</span>) </span>{\\n    <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">while</span>(n!==<span class=\\"hljs-number\\">0</span>){\\n        n=n &amp; (n<span class=\\"hljs-number\\">-1</span>)\\n        res++\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"number-of-1-bits","created_at":"2021-03-22","timeArr":[2021,2,22,7,47,35,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>因为是<code>32</code>位，因此对<code>n</code>右移<code>&gt;&gt;</code>32次，每次右移检查当前最后一位是否<code>1</code>。</p>\\n","content":"<p>编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 \'1\' 的个数（也被称为<a href=\\"https://baike.baidu.com/item/%E6%B1%89%E6%98%8E%E9%87%8D%E9%87%8F\\" target=\\"_blank\\">汉明重量</a>）。</p>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li>请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。</li>\\n\\t<li>在 Java 中，编译器使用<a href=\\"https://baike.baidu.com/item/二进制补码/5295284\\" target=\\"_blank\\">二进制补码</a>记法来表示有符号整数。因此，在上面的 <strong>示例 3</strong> 中，输入表示有符号整数 <code>-3</code>。</li>\\n</ul>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>00000000000000000000000000001011\\n<strong>输出：</strong>3\\n<strong>解释：</strong>输入的二进制串 <code><strong>00000000000000000000000000001011</strong> 中，共有三位为 \'1\'。</code>\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>00000000000000000000000010000000\\n<strong>输出：</strong>1\\n<strong>解释：</strong>输入的二进制串 <strong>00000000000000000000000010000000</strong> 中，共有一位为 \'1\'。\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>11111111111111111111111111111101\\n<strong>输出：</strong>31\\n<strong>解释：</strong>输入的二进制串 <strong>11111111111111111111111111111101</strong> 中，共有 31 位为 \'1\'。</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li>输入必须是长度为 <code>32</code> 的 <strong>二进制串</strong> 。</li>\\n</ul>\\n\\n<ul>\\n</ul>\\n\\n<p> </p>\\n\\n<p><strong>进阶</strong>：</p>\\n\\n<ul>\\n\\t<li>如果多次调用这个函数，你将如何优化你的算法？</li>\\n</ul>\\n","title":"191. 位1的个数","relatedTags":["位运算"],"difficult":"Easy","lang":["javascript"],"uniqueID":"191","slug":"191-Number-of-1-Bits"}')}}]);