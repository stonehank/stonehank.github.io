(window.webpackJsonp=window.webpackJsonp||[]).push([[1157],{1955:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">graph</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> eventualSafeNodes = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">graph</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> res=[]\\n  <span class=\\"hljs-keyword\\">let</span> cache=<span class=\\"hljs-built_in\\">Array</span>(graph.length).fill(<span class=\\"hljs-number\\">0</span>)\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;graph.length;i++){\\n    <span class=\\"hljs-keyword\\">if</span>(dfs(i,[]))res.push(i)\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n  \\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">dfs</span>(<span class=\\"hljs-params\\">v</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(cache[v])<span class=\\"hljs-keyword\\">return</span> cache[v]===<span class=\\"hljs-number\\">1</span>\\n    cache[v]=<span class=\\"hljs-number\\">2</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;graph[v].length;i++){\\n      <span class=\\"hljs-keyword\\">if</span>(!dfs(graph[v][i]))<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n    }\\n    cache[v]=<span class=\\"hljs-number\\">1</span>\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"find-eventual-safe-states","created_at":"2019-04-10","timeArr":[2019,3,10,21,7,58,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>可以将这题看成给每个节点上颜色的问题，</p>\\n<p><code>0</code>表示这个节点还未访问\\n<code>1</code>表示是一个安全节点\\n<code>2</code>表示是一个非安全节点</p>\\n<p>当遇到非<code>0</code>的节点，直接返回<code>color[i]===1</code>。</p>\\n<p>遇到<code>0</code>节点，首先给它设置为<code>2</code>，然后遍历相邻节点，如果遍历的时候存在节点为<code>2</code>，要么就是已经确定是一个非安全节点，\\n要么就是在遍历的时候重复访问了，都要返回<code>false</code>。</p>\\n<p>如果相邻节点中没有节点为<code>2</code>，那么当前节点设置为<code>1</code>。</p>\\n","content":"<p>在有向图中，以某个节点为起始节点，从该点出发，每一步沿着图中的一条有向边行走。如果到达的节点是终点（即它没有连出的有向边），则停止。</p>\\n\\n<p>对于一个起始节点，如果从该节点出发，<strong>无论每一步选择沿哪条有向边行走</strong>，最后必然在有限步内到达终点，则将该起始节点称作是 <strong>安全</strong> 的。</p>\\n\\n<p>返回一个由图中所有安全的起始节点组成的数组作为答案。答案数组中的元素应当按 <strong>升序</strong> 排列。</p>\\n\\n<p>该有向图有 <code>n</code> 个节点，按 <code>0</code> 到 <code>n - 1</code> 编号，其中 <code>n</code> 是&nbsp;<code>graph</code>&nbsp;的节点数。图以下述形式给出：<code>graph[i]</code> 是编号 <code>j</code> 节点的一个列表，满足 <code>(i, j)</code> 是图的一条有向边。</p>\\n\\n<p>&nbsp;</p>\\n\\n<div class=\\"original__bRMd\\">\\n<div>\\n<p><strong>示例 1：</strong></p>\\n<img alt=\\"Illustration of graph\\" src=\\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/03/17/picture1.png\\" style=\\"height: 171px; width: 600px;\\" />\\n<pre>\\n<strong>输入：</strong>graph = [[1,2],[2,3],[5],[0],[5],[],[]]\\n<strong>输出：</strong>[2,4,5,6]\\n<strong>解释：</strong>示意图如上。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>graph = [[1,2,3,4],[1,2],[3,4],[0,4],[]]\\n<strong>输出：</strong>[4]\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>n == graph.length</code></li>\\n\\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\\n\\t<li><code>0 &lt;= graph[i].length &lt;= n</code></li>\\n\\t<li><code>graph[i]</code> 按严格递增顺序排列。</li>\\n\\t<li>图中可能包含自环。</li>\\n\\t<li>图中边的数目在范围 <code>[1, 4 * 10<sup>4</sup>]</code> 内。</li>\\n</ul>\\n</div>\\n</div>\\n","title":"802. 找到最终的安全状态","relatedTags":["深度优先搜索","广度优先搜索","图","拓扑排序"],"difficult":"Middle","lang":["javascript"],"uniqueID":"802","slug":"802-Find-Eventual-Safe-States"}')}}]);