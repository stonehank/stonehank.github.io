(window.webpackJsonp=window.webpackJsonp||[]).push([[1318],{2116:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">tokens</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">P</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> bagOfTokensScore = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">tokens, P</span>) </span>{\\n  tokens.sort(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">a,b</span>)=&gt;</span>a-b)\\n  <span class=\\"hljs-keyword\\">let</span> powers=P\\n  <span class=\\"hljs-keyword\\">let</span> maxPoints=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">while</span>(tokens.length&gt;<span class=\\"hljs-number\\">0</span>){\\n    <span class=\\"hljs-keyword\\">let</span> curPoints=<span class=\\"hljs-number\\">0</span>,curPowers=powers\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;tokens.length;i++){\\n      curPowers-=tokens[i]\\n      <span class=\\"hljs-keyword\\">if</span>(curPowers&gt;=<span class=\\"hljs-number\\">0</span>)curPoints++\\n    }\\n    maxPoints=<span class=\\"hljs-built_in\\">Math</span>.max(maxPoints,curPoints)\\n    powers-=tokens.shift()\\n    <span class=\\"hljs-keyword\\">if</span>(powers&lt;<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">break</span>\\n    powers+=tokens.pop()\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> maxPoints\\n};\\n</code></pre>\\n"],"querySlug":"bag-of-tokens","created_at":"2019-04-15","timeArr":[2019,3,15,14,55,26,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>获取最大<code>power</code>的办法就是，使用最小的<code>token</code>换取分数，再用最大的<code>token</code>获取<code>power</code>，也就是对<code>tokens</code>排序，然后减去头一个，增加最后一个。</p>\\n<p>那么就不断进行获取最大的<code>power</code>，每次获取<code>power</code>后检查当前能获取的分数并且筛选出最大的分数。</p>\\n","content":"<p>你的初始 <strong>能量</strong> 为 <code>P</code>，初始 <strong>分数</strong> 为 <code>0</code>，只有一包令牌 <code>tokens</code> 。其中 <code>tokens[i]</code> 是第 <code>i</code> 个令牌的值（下标从 0 开始）。</p>\\n\\n<p>令牌可能的两种使用方法如下：</p>\\n\\n<ul>\\n\\t<li>如果你至少有 <code>token[i]</code> 点 <strong>能量</strong> ，可以将令牌 <code>i</code> 置为正面朝上，失去 <code>token[i]</code> 点 <strong>能量</strong> ，并得到 <code>1</code> <strong>分</strong> 。</li>\\n\\t<li>如果我们至少有 <code>1</code> <strong>分 </strong>，可以将令牌 <code>i</code> 置为反面朝上，获得 <code>token[i]</code> 点 <strong>能量</strong> ，并失去 <code>1</code> <strong>分</strong> 。</li>\\n</ul>\\n\\n<p>每个令牌 <strong>最多</strong> 只能使用一次，使用 <strong>顺序不限</strong> ，<strong>不需</strong> 使用所有令牌。</p>\\n\\n<p>在使用任意数量的令牌后，返回我们可以得到的最大 <strong>分数</strong> 。</p>\\n\\n<p> </p>\\n\\n<ol>\\n</ol>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>tokens = [100], P = 50\\n<strong>输出：</strong>0\\n<strong>解释：</strong>无法使用唯一的令牌，因为能量和分数都太少了。</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>tokens = [100,200], P = 150\\n<strong>输出：</strong>1\\n<strong>解释：</strong>令牌 0 正面朝上，能量变为 50，分数变为 1 。不必使用令牌 1 ，因为你无法使用它来提高分数。</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>tokens = [100,200,300,400], P = 200\\n<strong>输出：</strong>2\\n<strong>解释：</strong>按下面顺序使用令牌可以得到 2 分：\\n1. 令牌 0 正面朝上，能量变为 100 ，分数变为 1\\n2. 令牌 3 正面朝下，能量变为 500 ，分数变为 0\\n3. 令牌 1 正面朝上，能量变为 300 ，分数变为 1\\n4. 令牌 2 正面朝上，能量变为 0 ，分数变为 2</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>0 <= tokens.length <= 1000</code></li>\\n\\t<li><code>0 <= tokens[i], P < 10<sup>4</sup></code></li>\\n</ul>\\n","title":"948. 令牌放置","relatedTags":["贪心","数组","双指针","排序"],"difficult":"Middle","lang":["javascript"],"uniqueID":"948","slug":"948-Bag-of-Tokens"}')}}]);