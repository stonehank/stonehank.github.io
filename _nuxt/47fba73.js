(window.webpackJsonp=window.webpackJsonp||[]).push([[263],{1061:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">A</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> prevPermOpt1 = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">A</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> stack=[]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=A.length<span class=\\"hljs-number\\">-1</span>;i&gt;=<span class=\\"hljs-number\\">0</span>;i--){\\n    <span class=\\"hljs-keyword\\">let</span> sw=<span class=\\"hljs-literal\\">null</span>\\n    <span class=\\"hljs-keyword\\">while</span>(stack.length&gt;<span class=\\"hljs-number\\">0</span> &amp;&amp; A[i]&gt;A[stack[stack.length<span class=\\"hljs-number\\">-1</span>]]){\\n      sw=stack.pop()\\n    }\\n    <span class=\\"hljs-keyword\\">if</span>(sw!=<span class=\\"hljs-literal\\">null</span>){\\n      <span class=\\"hljs-keyword\\">let</span> t=A[sw]\\n      A[sw]=A[i]\\n      A[i]=t\\n      <span class=\\"hljs-keyword\\">return</span> A\\n    }\\n    stack.push(i)\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> A\\n};\\n</code></pre>\\n"],"querySlug":"previous-permutation-with-one-swap","created_at":"2019-05-26","timeArr":[2019,4,26,10,57,9,0],"hasThinking":false,"content":"<p>给你一个正整数的数组 <code>A</code>（其中的元素不一定完全不同），请你返回可在 <strong>一次交换</strong>（交换两数字 <code>A[i]</code> 和 <code>A[j]</code> 的位置）后得到的、按字典序排列小于 <code>A</code> 的最大可能排列。</p>\\n\\n<p>如果无法这么操作，就请返回原数组。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>arr = [3,2,1]\\n<strong>输出：</strong>[3,1,2]\\n<strong>解释：</strong>交换 2 和 1\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>arr = [1,1,5]\\n<strong>输出：</strong>[1,1,5]\\n<strong>解释：</strong>已经是最小排列\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>arr = [1,9,4,6,7]\\n<strong>输出：</strong>[1,7,4,6,9]\\n<strong>解释：</strong>交换 9 和 7\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>arr = [3,1,1,3]\\n<strong>输出：</strong>[1,3,1,3]\\n<strong>解释：</strong>交换 1 和 3\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= arr.length <= 10<sup>4</sup></code></li>\\n\\t<li><code>1 <= arr[i] <= 10<sup>4</sup></code></li>\\n</ul>\\n","title":"1053. 交换一次的先前排列","relatedTags":["贪心","数组"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1053","slug":"1053-Previous-Permutation-With-One-Swap"}')}}]);