(window.webpackJsonp=window.webpackJsonp||[]).push([[373],{1171:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">grid</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">k</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[][]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> shiftGrid = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">grid, k</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> r=grid.length\\n  <span class=\\"hljs-keyword\\">let</span> c=grid[<span class=\\"hljs-number\\">0</span>].length\\n  <span class=\\"hljs-keyword\\">let</span> all=r*c\\n  k= k % all\\n  <span class=\\"hljs-keyword\\">let</span> newR=~~(k / c)\\n  <span class=\\"hljs-keyword\\">let</span> newC=k % c\\n  <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-built_in\\">Array</span>(r).fill().map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span>=&gt;</span><span class=\\"hljs-built_in\\">Array</span>(c).fill(<span class=\\"hljs-literal\\">null</span>))\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;r;i++){\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;c;j++){\\n      <span class=\\"hljs-comment\\">// console.log(newR,newC)</span>\\n      res[newR][newC]=grid[i][j]\\n      newC++\\n      <span class=\\"hljs-keyword\\">if</span>(newC===c){\\n        newC=<span class=\\"hljs-number\\">0</span>\\n        newR++\\n      }\\n      <span class=\\"hljs-keyword\\">if</span>(newR===r){\\n        newR=<span class=\\"hljs-number\\">0</span>\\n        newC=<span class=\\"hljs-number\\">0</span>\\n      }\\n      <span class=\\"hljs-comment\\">// console.log(res[newR][newC])</span>\\n      <span class=\\"hljs-keyword\\">if</span>(res[newR][newC]!=<span class=\\"hljs-literal\\">null</span>)<span class=\\"hljs-keyword\\">return</span> res\\n    }\\n  }\\n \\n};\\n</code></pre>\\n"],"querySlug":"shift-2d-grid","created_at":"2019-11-17","timeArr":[2019,10,17,10,51,16,0],"hasThinking":false,"content":"<p>给你一个 <code>m</code> 行 <code>n</code> 列的二维网格 <code>grid</code> 和一个整数 <code>k</code>。你需要将 <code>grid</code> 迁移 <code>k</code> 次。</p>\\n\\n<p>每次「迁移」操作将会引发下述活动：</p>\\n\\n<ul>\\n\\t<li>位于 <code>grid[i][j]</code> 的元素将会移动到 <code>grid[i][j + 1]</code>。</li>\\n\\t<li>位于 <code>grid[i][n - 1]</code> 的元素将会移动到 <code>grid[i + 1][0]</code>。</li>\\n\\t<li>位于 <code>grid[m - 1][n - 1]</code> 的元素将会移动到 <code>grid[0][0]</code>。</li>\\n</ul>\\n\\n<p>请你返回 <code>k</code> 次迁移操作后最终得到的 <strong>二维网格</strong>。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<p><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/11/16/e1-1.png\\" style=\\"height: 158px; width: 400px;\\" /></p>\\n\\n<pre>\\n<code><strong>输入：</strong>grid</code> = [[1,2,3],[4,5,6],[7,8,9]], k = 1\\n<strong>输出：</strong>[[9,1,2],[3,4,5],[6,7,8]]\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<p><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/11/16/e2-1.png\\" style=\\"height: 166px; width: 400px;\\" /></p>\\n\\n<pre>\\n<code><strong>输入：</strong>grid</code> = [[3,8,1,9],[19,7,2,5],[4,6,11,10],[12,0,21,13]], k = 4\\n<strong>输出：</strong>[[12,0,21,13],[3,8,1,9],[19,7,2,5],[4,6,11,10]]\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<code><strong>输入：</strong>grid</code> = [[1,2,3],[4,5,6],[7,8,9]], k = 9\\n<strong>输出：</strong>[[1,2,3],[4,5,6],[7,8,9]]\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>m == grid.length</code></li>\\n\\t<li><code>n == grid[i].length</code></li>\\n\\t<li><code>1 <= m <= 50</code></li>\\n\\t<li><code>1 <= n <= 50</code></li>\\n\\t<li><code>-1000 <= grid[i][j] <= 1000</code></li>\\n\\t<li><code>0 <= k <= 100</code></li>\\n</ul>\\n","title":"1260. 二维网格迁移","relatedTags":["数组","矩阵","模拟"],"difficult":"Easy","lang":["javascript"],"uniqueID":"1260","slug":"1260-Shift-2D-Grid"}')}}]);