(window.webpackJsonp=window.webpackJsonp||[]).push([[1213],{2011:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">target</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">position</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">speed</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> carFleet = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">target, position, speed</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> stack=[]\\n  <span class=\\"hljs-keyword\\">let</span> aux=[]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;position.length;i++){\\n    aux[i]=[position[i],speed[i]]\\n  }\\n  aux.sort(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">a,b</span>)=&gt;</span>a[<span class=\\"hljs-number\\">0</span>]-b[<span class=\\"hljs-number\\">0</span>])\\n  <span class=\\"hljs-keyword\\">let</span> times=[]\\n  <span class=\\"hljs-comment\\">// console.log(aux)</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> [p,s] <span class=\\"hljs-keyword\\">of</span> aux){\\n    times.push((target-p) / s)\\n  }\\n  <span class=\\"hljs-comment\\">// console.log(times)</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;times.length;i++){\\n    <span class=\\"hljs-keyword\\">while</span>(stack.length&gt;<span class=\\"hljs-number\\">0</span> &amp;&amp; times[i]&gt;=stack[stack.length<span class=\\"hljs-number\\">-1</span>]){\\n      stack.pop()\\n    }\\n    stack.push(times[i])\\n    <span class=\\"hljs-comment\\">// console.log(stack)</span>\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> stack.length\\n};\\n</code></pre>\\n"],"querySlug":"car-fleet","created_at":"2019-04-17","timeArr":[2019,3,17,16,5,17,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>如果一辆后面的车能比前面的车更快到达终点，那么说明它们可以合成一个车队。</p>\\n<p>按照起点升序计算出每辆车到达终点的时间，遍历的时候，如果发现当前时间比前面的时间更长，说明当前这辆慢车挡住了它们的路，\\n说明它们一定是一个车队，可以执行<code>stack.pop</code>，并且继续检查它后面的车辆。</p>\\n","content":"<p><code>N</code> &nbsp;辆车沿着一条车道驶向位于&nbsp;<code>target</code>&nbsp;英里之外的共同目的地。</p>\\n\\n<p>每辆车&nbsp;<code>i</code>&nbsp;以恒定的速度&nbsp;<code>speed[i]</code>&nbsp;（英里/小时），从初始位置&nbsp;<code>position[i]</code>&nbsp;（英里） 沿车道驶向目的地。</p>\\n\\n<p>一辆车永远不会超过前面的另一辆车，但它可以追上去，并与前车以相同的速度紧接着行驶。</p>\\n\\n<p>此时，我们会忽略这两辆车之间的距离，也就是说，它们被假定处于相同的位置。</p>\\n\\n<p><em>车队&nbsp;</em>是一些由行驶在相同位置、具有相同速度的车组成的非空集合。注意，一辆车也可以是一个车队。</p>\\n\\n<p>即便一辆车在目的地才赶上了一个车队，它们仍然会被视作是同一个车队。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p>会有多少车队到达目的地?</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例：</strong></p>\\n\\n<pre><strong>输入：</strong>target = 12, position = [10,8,0,5,3], speed = [2,4,1,1,3]\\n<strong>输出：</strong>3\\n<strong>解释：</strong>\\n从 10 和 8 开始的车会组成一个车队，它们在 12 处相遇。\\n从 0 处开始的车无法追上其它车，所以它自己就是一个车队。\\n从 5 和 3 开始的车会组成一个车队，它们在 6 处相遇。\\n请注意，在到达目的地之前没有其它车会遇到这些车队，所以答案是 3。\\n</pre>\\n\\n<p><br>\\n<strong>提示：</strong></p>\\n\\n<ol>\\n\\t<li><code>0 &lt;= N &lt;= 10 ^ 4</code></li>\\n\\t<li><code>0 &lt; target&nbsp;&lt;= 10 ^ 6</code></li>\\n\\t<li><code>0 &lt;&nbsp;speed[i] &lt;= 10 ^ 6</code></li>\\n\\t<li><code>0 &lt;= position[i] &lt; target</code></li>\\n\\t<li>所有车的初始位置各不相同。</li>\\n</ol>\\n","title":"853. 车队","relatedTags":["数组","排序"],"difficult":"Middle","lang":["javascript"],"uniqueID":"853","slug":"853-Car-Fleet"}')}}]);