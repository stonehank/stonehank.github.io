(window.webpackJsonp=window.webpackJsonp||[]).push([[1017],{1815:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{TreeNode}</span> <span class=\\"hljs-variable\\">root</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">k</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{boolean}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> findTarget = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">root, k</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(!root)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n  <span class=\\"hljs-keyword\\">let</span> hash={},valid=<span class=\\"hljs-literal\\">false</span>\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">dfs</span>(<span class=\\"hljs-params\\">root</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(valid)<span class=\\"hljs-keyword\\">return</span>\\n    <span class=\\"hljs-keyword\\">let</span> v=root.val\\n    <span class=\\"hljs-keyword\\">if</span>(hash[v])<span class=\\"hljs-keyword\\">return</span> valid=<span class=\\"hljs-literal\\">true</span>\\n    hash[k-v]=<span class=\\"hljs-literal\\">true</span>\\n    <span class=\\"hljs-keyword\\">if</span>(root.left)dfs(root.left)\\n    <span class=\\"hljs-keyword\\">if</span>(root.right)dfs(root.right)\\n  }\\n  dfs(root)\\n  <span class=\\"hljs-keyword\\">return</span> valid\\n};\\n</code></pre>\\n"],"querySlug":"two-sum-iv-input-is-a-bst","created_at":"2019-03-19","timeArr":[2019,2,19,15,42,50,0],"hasThinking":false,"content":"<p>给定一个二叉搜索树 <code>root</code> 和一个目标结果 <code>k</code>，如果 BST 中存在两个元素且它们的和等于给定的目标结果，则返回 <code>true</code>。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2020/09/21/sum_tree_1.jpg\\" />\\n<pre>\\n<strong>输入:</strong> root = [5,3,6,2,4,null,7], k = 9\\n<strong>输出:</strong> true\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2020/09/21/sum_tree_2.jpg\\" />\\n<pre>\\n<strong>输入:</strong> root = [5,3,6,2,4,null,7], k = 28\\n<strong>输出:</strong> false\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入:</strong> root = [2,1,3], k = 4\\n<strong>输出:</strong> true\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre>\\n<strong>输入:</strong> root = [2,1,3], k = 1\\n<strong>输出:</strong> false\\n</pre>\\n\\n<p><strong>示例 5：</strong></p>\\n\\n<pre>\\n<strong>输入:</strong> root = [2,1,3], k = 3\\n<strong>输出:</strong> true\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示:</strong></p>\\n\\n<ul>\\n\\t<li>二叉树的节点个数的范围是  <code>[1, 10<sup>4</sup>]</code>.</li>\\n\\t<li><code>-10<sup>4</sup> <= Node.val <= 10<sup>4</sup></code></li>\\n\\t<li><code>root</code> 为二叉搜索树</li>\\n\\t<li><code>-10<sup>5</sup> <= k <= 10<sup>5</sup></code></li>\\n</ul>\\n","title":"653. 两数之和 IV - 输入 BST","relatedTags":["树","深度优先搜索","广度优先搜索","二叉搜索树","哈希表","双指针","二叉树"],"difficult":"Easy","lang":["javascript"],"uniqueID":"653","slug":"653-Two-Sum-IV-Input-is-a-BST"}')}}]);