(window.webpackJsonp=window.webpackJsonp||[]).push([[740],{1538:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">n</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">primes</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> nthSuperUglyNumber = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">n, primes</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> N=n\\n  <span class=\\"hljs-keyword\\">let</span> k=primes.length\\n  <span class=\\"hljs-keyword\\">let</span> idxes=<span class=\\"hljs-built_in\\">Array</span>(k).fill(<span class=\\"hljs-number\\">0</span>)\\n  <span class=\\"hljs-keyword\\">let</span> uglys=[<span class=\\"hljs-number\\">1</span>]\\n  <span class=\\"hljs-keyword\\">while</span>(N--&gt;<span class=\\"hljs-number\\">1</span>){\\n    <span class=\\"hljs-keyword\\">let</span> min=<span class=\\"hljs-literal\\">Infinity</span>,minID=<span class=\\"hljs-literal\\">null</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;idxes.length;i++){\\n      <span class=\\"hljs-keyword\\">while</span>(uglys[idxes[i]]*primes[i]===uglys[uglys.length<span class=\\"hljs-number\\">-1</span>]){\\n        idxes[i]++\\n      }\\n      <span class=\\"hljs-keyword\\">let</span> nxtVal=uglys[idxes[i]]*primes[i]\\n      <span class=\\"hljs-keyword\\">if</span>(nxtVal&lt;min){\\n        min=nxtVal\\n        minID=i\\n      }\\n    }\\n    uglys.push(min)\\n    idxes[minID]++\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> uglys[n<span class=\\"hljs-number\\">-1</span>]\\n};\\n</code></pre>\\n"],"querySlug":"super-ugly-number","created_at":"2019-03-31","timeArr":[2019,2,31,0,9,52,0],"hasThinking":false,"content":"<p><strong>超级丑数</strong> 是一个正整数，并满足其所有质因数都出现在质数数组 <code>primes</code> 中。</p>\\n\\n<p>给你一个整数 <code>n</code> 和一个整数数组 <code>primes</code> ，返回第 <code>n</code> 个 <strong>超级丑数</strong> 。</p>\\n\\n<p>题目数据保证第 <code>n</code> 个 <strong>超级丑数</strong> 在 <strong>32-bit</strong> 带符号整数范围内。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>n = 12, <code>primes</code> = <code>[2,7,13,19]</code>\\n<strong>输出：</strong>32 \\n<strong>解释：</strong>给定长度为 4 的质数数组 primes = [2,7,13,19]，前 12 个超级丑数序列为：[1,2,4,7,8,13,14,16,19,26,28,32] 。</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>n = 1, primes = [2,3,5]\\n<strong>输出：</strong>1\\n<strong>解释：</strong>1 不含质因数，因此它的所有质因数都在质数数组 primes = [2,3,5] 中。\\n</pre>\\n&nbsp;\\n\\n<div class=\\"top-view__1vxA\\">\\n<div class=\\"original__bRMd\\">\\n<div>\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= n &lt;= 10<sup>6</sup></code></li>\\n\\t<li><code>1 &lt;= primes.length &lt;= 100</code></li>\\n\\t<li><code>2 &lt;= primes[i] &lt;= 1000</code></li>\\n\\t<li>题目数据<strong> 保证</strong> <code>primes[i]</code> 是一个质数</li>\\n\\t<li><code>primes</code> 中的所有值都 <strong>互不相同</strong> ，且按 <strong>递增顺序</strong> 排列</li>\\n</ul>\\n</div>\\n</div>\\n</div>\\n","title":"313. 超级丑数","relatedTags":["数组","哈希表","数学","动态规划","堆（优先队列）"],"difficult":"Middle","lang":["javascript"],"uniqueID":"313","slug":"313-Super-Ugly-Number"}')}}]);