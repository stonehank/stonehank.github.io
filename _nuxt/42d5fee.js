(window.webpackJsonp=window.webpackJsonp||[]).push([[501],{1299:function(o){o.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string[][]}</span> <span class=\\"hljs-variable\\">favoriteCompanies</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> peopleIndexes = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">fav</span>) </span>{\\n  fav.forEach(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">arr</span>)=&gt;</span>arr.sort())\\n  <span class=\\"hljs-keyword\\">let</span> memo=[]\\n  <span class=\\"hljs-keyword\\">let</span> res=[]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;fav.length;i++){\\n    <span class=\\"hljs-keyword\\">if</span>(memo[i]==<span class=\\"hljs-literal\\">null</span>)memo[i]={}\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;fav[i].length;j++){\\n      memo[i][fav[i][j]]=<span class=\\"hljs-literal\\">true</span>\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;fav.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> hasNoSub=<span class=\\"hljs-literal\\">true</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;fav.length;j++){\\n      <span class=\\"hljs-keyword\\">let</span> isSub=<span class=\\"hljs-literal\\">true</span>\\n      <span class=\\"hljs-keyword\\">if</span>(i===j || fav[i].length&gt;=fav[j].length){\\n        isSub=<span class=\\"hljs-literal\\">false</span>\\n        <span class=\\"hljs-keyword\\">continue</span>\\n      }\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> k=<span class=\\"hljs-number\\">0</span>;k&lt;fav[i].length;k++){\\n        <span class=\\"hljs-keyword\\">if</span>(!memo[j][fav[i][k]]){\\n          isSub=<span class=\\"hljs-literal\\">false</span>\\n          <span class=\\"hljs-keyword\\">break</span>\\n        }\\n      }\\n      <span class=\\"hljs-comment\\">// console.log(i,j,isSub)</span>\\n      <span class=\\"hljs-keyword\\">if</span>(isSub){\\n        hasNoSub=<span class=\\"hljs-literal\\">false</span>\\n        <span class=\\"hljs-keyword\\">break</span>\\n      }\\n    }\\n    <span class=\\"hljs-keyword\\">if</span>(hasNoSub)res.push(i)\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"people-whose-list-of-favorite-companies-is-not-a-subset-of-another-list","created_at":"2020-05-17","timeArr":[2020,4,17,10,53,14,0],"hasThinking":false,"content":"<p>给你一个数组 <code>favoriteCompanies</code> ，其中 <code>favoriteCompanies[i]</code> 是第 <code>i</code> 名用户收藏的公司清单（<strong>下标从 0 开始</strong>）。</p>\\n\\n<p>请找出不是其他任何人收藏的公司清单的子集的收藏清单，并返回该清单下标<em>。</em>下标需要按升序排列<em>。</em></p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>favoriteCompanies = [[&quot;leetcode&quot;,&quot;google&quot;,&quot;facebook&quot;],[&quot;google&quot;,&quot;microsoft&quot;],[&quot;google&quot;,&quot;facebook&quot;],[&quot;google&quot;],[&quot;amazon&quot;]]\\n<strong>输出：</strong>[0,1,4] \\n<strong>解释：</strong>\\nfavoriteCompanies[2]=[&quot;google&quot;,&quot;facebook&quot;] 是 favoriteCompanies[0]=[&quot;leetcode&quot;,&quot;google&quot;,&quot;facebook&quot;] 的子集。\\nfavoriteCompanies[3]=[&quot;google&quot;] 是 favoriteCompanies[0]=[&quot;leetcode&quot;,&quot;google&quot;,&quot;facebook&quot;] 和 favoriteCompanies[1]=[&quot;google&quot;,&quot;microsoft&quot;] 的子集。\\n其余的收藏清单均不是其他任何人收藏的公司清单的子集，因此，答案为 [0,1,4] 。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>favoriteCompanies = [[&quot;leetcode&quot;,&quot;google&quot;,&quot;facebook&quot;],[&quot;leetcode&quot;,&quot;amazon&quot;],[&quot;facebook&quot;,&quot;google&quot;]]\\n<strong>输出：</strong>[0,1] \\n<strong>解释：</strong>favoriteCompanies[2]=[&quot;facebook&quot;,&quot;google&quot;] 是 favoriteCompanies[0]=[&quot;leetcode&quot;,&quot;google&quot;,&quot;facebook&quot;] 的子集，因此，答案为 [0,1] 。\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>favoriteCompanies = [[&quot;leetcode&quot;],[&quot;google&quot;],[&quot;facebook&quot;],[&quot;amazon&quot;]]\\n<strong>输出：</strong>[0,1,2,3]\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;=&nbsp;favoriteCompanies.length &lt;= 100</code></li>\\n\\t<li><code>1 &lt;=&nbsp;favoriteCompanies[i].length &lt;= 500</code></li>\\n\\t<li><code>1 &lt;=&nbsp;favoriteCompanies[i][j].length &lt;= 20</code></li>\\n\\t<li><code>favoriteCompanies[i]</code> 中的所有字符串 <strong>各不相同</strong> 。</li>\\n\\t<li>用户收藏的公司清单也 <strong>各不相同</strong> ，也就是说，即便我们按字母顺序排序每个清单， <code>favoriteCompanies[i] != favoriteCompanies[j] </code>仍然成立。</li>\\n\\t<li>所有字符串仅包含小写英文字母。</li>\\n</ul>\\n","title":"1452. 收藏清单","relatedTags":["数组","哈希表","字符串"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1452","slug":"1452-People-Whose-List-of-Favorite-Companies-Is-Not-a-Subset-of-Another-List"}')}}]);