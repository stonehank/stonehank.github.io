(window.webpackJsonp=window.webpackJsonp||[]).push([[1044],{1842:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string[]}</span> <span class=\\"hljs-variable\\">ops</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> calPoints = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">ops</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> stack=[]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;ops.length;i++){\\n    <span class=\\"hljs-keyword\\">if</span>(ops[i]===<span class=\\"hljs-string\\">\\"+\\"</span>){\\n      <span class=\\"hljs-keyword\\">if</span>(stack.length&lt;=<span class=\\"hljs-number\\">0</span>)stack.push(<span class=\\"hljs-number\\">0</span>)\\n      <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(stack.length&lt;<span class=\\"hljs-number\\">2</span>)stack.push(stack[<span class=\\"hljs-number\\">0</span>])\\n      <span class=\\"hljs-keyword\\">else</span> stack.push(stack[stack.length<span class=\\"hljs-number\\">-1</span>]+stack[stack.length<span class=\\"hljs-number\\">-2</span>])\\n    }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(ops[i]===<span class=\\"hljs-string\\">\\"D\\"</span>){\\n      <span class=\\"hljs-keyword\\">if</span>(stack.length&lt;<span class=\\"hljs-number\\">1</span>)stack.push(<span class=\\"hljs-number\\">0</span>)\\n      <span class=\\"hljs-keyword\\">else</span> stack.push(stack[stack.length<span class=\\"hljs-number\\">-1</span>]*<span class=\\"hljs-number\\">2</span>)\\n    }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(ops[i]===<span class=\\"hljs-string\\">\\"C\\"</span>){\\n      stack.pop()\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      stack.push(+ops[i])\\n    }\\n    <span class=\\"hljs-comment\\">// console.log(stack)</span>\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> stack.reduce(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">a,b</span>)=&gt;</span>a+b)\\n};\\n</code></pre>\\n"],"querySlug":"baseball-game","created_at":"2019-04-17","timeArr":[2019,3,17,15,5,14,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>这里并不会给出无效的输入，因此无需判断其他情况，直接通过<code>stack</code>处理即可。</p>\\n","content":"<p>你现在是一场采用特殊赛制棒球比赛的记录员。这场比赛由若干回合组成，过去几回合的得分可能会影响以后几回合的得分。</p>\\n\\n<p>比赛开始时，记录是空白的。你会得到一个记录操作的字符串列表 <code>ops</code>，其中 <code>ops[i]</code> 是你需要记录的第 <code>i</code> 项操作，<code>ops</code> 遵循下述规则：</p>\\n\\n<ol>\\n\\t<li>整数 <code>x</code> - 表示本回合新获得分数 <code>x</code></li>\\n\\t<li><code>\\"+\\"</code> - 表示本回合新获得的得分是前两次得分的总和。题目数据保证记录此操作时前面总是存在两个有效的分数。</li>\\n\\t<li><code>\\"D\\"</code> - 表示本回合新获得的得分是前一次得分的两倍。题目数据保证记录此操作时前面总是存在一个有效的分数。</li>\\n\\t<li><code>\\"C\\"</code> - 表示前一次得分无效，将其从记录中移除。题目数据保证记录此操作时前面总是存在一个有效的分数。</li>\\n</ol>\\n\\n<p>请你返回记录中所有得分的总和。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>ops = [\\"5\\",\\"2\\",\\"C\\",\\"D\\",\\"+\\"]\\n<strong>输出：</strong>30\\n<strong>解释：</strong>\\n\\"5\\" - 记录加 5 ，记录现在是 [5]\\n\\"2\\" - 记录加 2 ，记录现在是 [5, 2]\\n\\"C\\" - 使前一次得分的记录无效并将其移除，记录现在是 [5].\\n\\"D\\" - 记录加 2 * 5 = 10 ，记录现在是 [5, 10].\\n\\"+\\" - 记录加 5 + 10 = 15 ，记录现在是 [5, 10, 15].\\n所有得分的总和 5 + 10 + 15 = 30\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>ops = [\\"5\\",\\"-2\\",\\"4\\",\\"C\\",\\"D\\",\\"9\\",\\"+\\",\\"+\\"]\\n<strong>输出：</strong>27\\n<strong>解释：</strong>\\n\\"5\\" - 记录加 5 ，记录现在是 [5]\\n\\"-2\\" - 记录加 -2 ，记录现在是 [5, -2]\\n\\"4\\" - 记录加 4 ，记录现在是 [5, -2, 4]\\n\\"C\\" - 使前一次得分的记录无效并将其移除，记录现在是 [5, -2]\\n\\"D\\" - 记录加 2 * -2 = -4 ，记录现在是 [5, -2, -4]\\n\\"9\\" - 记录加 9 ，记录现在是 [5, -2, -4, 9]\\n\\"+\\" - 记录加 -4 + 9 = 5 ，记录现在是 [5, -2, -4, 9, 5]\\n\\"+\\" - 记录加 9 + 5 = 14 ，记录现在是 [5, -2, -4, 9, 5, 14]\\n所有得分的总和 5 + -2 + -4 + 9 + 5 + 14 = 27\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>ops = [\\"1\\"]\\n<strong>输出：</strong>1\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= ops.length <= 1000</code></li>\\n\\t<li><code>ops[i]</code> 为 <code>\\"C\\"</code>、<code>\\"D\\"</code>、<code>\\"+\\"</code>，或者一个表示整数的字符串。整数范围是 <code>[-3 * 10<sup>4</sup>, 3 * 10<sup>4</sup>]</code></li>\\n\\t<li>对于 <code>\\"+\\"</code> 操作，题目数据保证记录此操作时前面总是存在两个有效的分数</li>\\n\\t<li>对于 <code>\\"C\\"</code> 和 <code>\\"D\\"</code> 操作，题目数据保证记录此操作时前面总是存在一个有效的分数</li>\\n</ul>\\n","title":"682. 棒球比赛","relatedTags":["栈","数组","模拟"],"difficult":"Easy","lang":["javascript"],"uniqueID":"682","slug":"682-Baseball-Game"}')}}]);