(window.webpackJsonp=window.webpackJsonp||[]).push([[1226],{2024:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{TreeNode}</span> <span class=\\"hljs-variable\\">root</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{TreeNode}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> subtreeWithAllDeepest = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">root</span>) </span>{\\n\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">setParent</span>(<span class=\\"hljs-params\\">root,p</span>)</span>{\\n    root.parent=p\\n    <span class=\\"hljs-keyword\\">if</span>(root.left)setParent(root.left,root)\\n    <span class=\\"hljs-keyword\\">if</span>(root.right)setParent(root.right,root)\\n  }\\n  setParent(root,<span class=\\"hljs-literal\\">null</span>)\\n  <span class=\\"hljs-keyword\\">let</span> arr=[root]\\n  <span class=\\"hljs-keyword\\">let</span> maxHeight=[]\\n  <span class=\\"hljs-keyword\\">while</span>(arr.length&gt;<span class=\\"hljs-number\\">0</span>){\\n    <span class=\\"hljs-keyword\\">let</span> len=arr.length\\n    maxHeight=arr.slice()\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;len;i++){\\n      <span class=\\"hljs-keyword\\">let</span> node=arr.shift()\\n      <span class=\\"hljs-keyword\\">if</span>(node.left)arr.push(node.left)\\n      <span class=\\"hljs-keyword\\">if</span>(node.right)arr.push(node.right)\\n    }\\n  }\\n  <span class=\\"hljs-comment\\">// console.log(maxHeight)</span>\\n  <span class=\\"hljs-keyword\\">while</span>(maxHeight.length&gt;<span class=\\"hljs-number\\">1</span>){\\n    <span class=\\"hljs-keyword\\">let</span> len=maxHeight.length\\n    <span class=\\"hljs-keyword\\">let</span> hash={}\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;len;i++){\\n      <span class=\\"hljs-keyword\\">let</span> node=maxHeight.shift()\\n      <span class=\\"hljs-keyword\\">let</span> p=node.parent\\n      <span class=\\"hljs-keyword\\">if</span>(hash[p.val])<span class=\\"hljs-keyword\\">continue</span>\\n      hash[p.val]=<span class=\\"hljs-literal\\">true</span>\\n      maxHeight.push(p)\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> maxHeight[<span class=\\"hljs-number\\">0</span>]\\n};\\n</code></pre>\\n"],"querySlug":"smallest-subtree-with-all-the-deepest-nodes","created_at":"2019-03-20","timeArr":[2019,2,20,17,2,58,0],"hasThinking":false,"content":"<p>给定一个根为 <code>root</code> 的二叉树，每个节点的深度是 <strong>该节点到根的最短距离</strong> 。</p>\\n\\n<p>如果一个节点在 <strong>整个树 </strong>的任意节点之间具有最大的深度，则该节点是 <strong>最深的</strong> 。</p>\\n\\n<p>一个节点的 <strong>子树</strong> 是该节点加上它的所有后代的集合。</p>\\n\\n<p>返回能满足 <strong>以该节点为根的子树中包含所有最深的节点</strong> 这一条件的具有最大深度的节点。</p>\\n\\n<p> </p>\\n\\n<p><strong>注意：</strong>本题与力扣 1123 重复：<a href=\\"https://leetcode-cn.com/problems/lowest-common-ancestor-of-deepest-leaves/\\" target=\\"_blank\\">https://leetcode-cn.com/problems/lowest-common-ancestor-of-deepest-leaves/</a></p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<p><img alt=\\"\\" height=\\"475\\" src=\\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/01/sketch1.png\\" width=\\"560\\" /></p>\\n\\n<pre>\\n<strong>输入：</strong>root = [3,5,1,6,2,0,8,null,null,7,4]\\n<strong>输出：</strong>[2,7,4]\\n<strong>解释：</strong>\\n我们返回值为 2 的节点，在图中用黄色标记。\\n在图中用蓝色标记的是树的最深的节点。\\n注意，节点 5、3 和 2 包含树中最深的节点，但节点 2 的子树最小，因此我们返回它。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>root = [1]\\n<strong>输出：</strong>[1]\\n<strong>解释：</strong>根节点是树中最深的节点。</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>root = [0,1,3,null,2]\\n<strong>输出：</strong>[2]\\n<strong>解释：</strong>树中最深的节点为 2 ，有效子树为节点 2、1 和 0 的子树，但节点 2 的子树最小。</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li>树中节点的数量介于 1 和 500 之间。</li>\\n\\t<li><code>0 <= Node.val <= 500</code></li>\\n\\t<li>每个节点的值都是独一无二的。</li>\\n</ul>\\n","title":"865. 具有所有最深节点的最小子树","relatedTags":["树","深度优先搜索","广度优先搜索","哈希表","二叉树"],"difficult":"Middle","lang":["javascript"],"uniqueID":"865","slug":"865-Smallest-Subtree-with-all-the-Deepest-Nodes"}')}}]);