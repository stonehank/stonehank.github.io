(window.webpackJsonp=window.webpackJsonp||[]).push([[813],{1611:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">candidates</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">target</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[][]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> combinationSum2 = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">candidates, target</span>) </span>{\\n  candidates.sort(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">a,b</span>)=&gt;</span>a-b)\\n  <span class=\\"hljs-keyword\\">let</span> res=[]\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">bt</span>(<span class=\\"hljs-params\\">start,arr,sum</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(sum&gt;target)<span class=\\"hljs-keyword\\">return</span>\\n    <span class=\\"hljs-keyword\\">if</span>(sum===target){\\n      <span class=\\"hljs-keyword\\">return</span> res.push(arr.slice())\\n    }\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=start;i&lt;candidates.length;i++){\\n      <span class=\\"hljs-keyword\\">if</span>(i&gt;start &amp;&amp; candidates[i]===candidates[i<span class=\\"hljs-number\\">-1</span>])<span class=\\"hljs-keyword\\">continue</span>\\n      arr.push(candidates[i])\\n      bt(i+<span class=\\"hljs-number\\">1</span>,arr,sum+candidates[i])\\n      arr.pop()\\n    }\\n  }\\n  bt(<span class=\\"hljs-number\\">0</span>,[],<span class=\\"hljs-number\\">0</span>)\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"combination-sum-ii","created_at":"2019-03-11","timeArr":[2019,2,11,16,47,54,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>和<code>NO.39</code>区别：</p>\\n<ol>\\n<li>\\n<p>存在重复数字，需要去重。</p>\\n</li>\\n<li>\\n<p>每个数字只能用1次。</p>\\n</li>\\n</ol>\\n<p>对于第一个区别，需要对数组排序，排序是为了能更方便的去重，每次遍历时，检查<code>i&gt;start &amp;&amp; candidates[i]===candidates[i-1]</code>，其中<code>start</code>是当前回溯的开始索引，\\n如果条件成立，说明当前值和上一个值是相同的，因此跳过以避免重复。</p>\\n<p>对于第二个区别，下一次的回溯，都是从索引<code>i+1</code>开始。</p>\\n","content":"<p>给定一个数组 <code>candidates</code> 和一个目标数 <code>target</code> ，找出 <code>candidates</code> 中所有可以使数字和为 <code>target</code> 的组合。</p>\\n\\n<p><code>candidates</code> 中的每个数字在每个组合中只能使用一次。</p>\\n\\n<p><strong>注意：</strong>解集不能包含重复的组合。 </p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1:</strong></p>\\n\\n<pre>\\n<strong>输入:</strong> candidates = <code>[10,1,2,7,6,1,5]</code>, target = <code>8</code>,\\n<strong>输出:</strong>\\n[\\n[1,1,6],\\n[1,2,5],\\n[1,7],\\n[2,6]\\n]</pre>\\n\\n<p><strong>示例 2:</strong></p>\\n\\n<pre>\\n<strong>输入:</strong> candidates = [2,5,2,1,2], target = 5,\\n<strong>输出:</strong>\\n[\\n[1,2,2],\\n[5]\\n]</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示:</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= candidates.length <= 100</code></li>\\n\\t<li><code>1 <= candidates[i] <= 50</code></li>\\n\\t<li><code>1 <= target <= 30</code></li>\\n</ul>\\n","title":"40. 组合总和 II","relatedTags":["数组","回溯"],"difficult":"Middle","lang":["javascript"],"uniqueID":"40","slug":"40-Combination-Sum-II"}')}}]);