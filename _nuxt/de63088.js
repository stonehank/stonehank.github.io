(window.webpackJsonp=window.webpackJsonp||[]).push([[1208],{2006:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">seats</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> maxDistToClosest = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">seats</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> n=seats.length\\n  <span class=\\"hljs-keyword\\">let</span> dp=<span class=\\"hljs-built_in\\">Array</span>(n+<span class=\\"hljs-number\\">2</span>).fill(<span class=\\"hljs-number\\">0</span>)\\n  dp[<span class=\\"hljs-number\\">0</span>]=<span class=\\"hljs-literal\\">Infinity</span>\\n  dp[dp.length<span class=\\"hljs-number\\">-1</span>]=<span class=\\"hljs-literal\\">Infinity</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">1</span>;i&lt;n+<span class=\\"hljs-number\\">1</span>;i++){\\n    <span class=\\"hljs-keyword\\">if</span>(seats[i<span class=\\"hljs-number\\">-1</span>]===<span class=\\"hljs-number\\">1</span>)dp[i]=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">else</span> dp[i]=dp[i<span class=\\"hljs-number\\">-1</span>]+<span class=\\"hljs-number\\">1</span>\\n  }\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=n;i&gt;=<span class=\\"hljs-number\\">1</span>;i--){\\n    <span class=\\"hljs-keyword\\">if</span>(seats[i<span class=\\"hljs-number\\">-1</span>]===<span class=\\"hljs-number\\">0</span>){\\n      dp[i]=<span class=\\"hljs-built_in\\">Math</span>.min(dp[i],dp[i+<span class=\\"hljs-number\\">1</span>]+<span class=\\"hljs-number\\">1</span>)\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> max=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">1</span>;i&lt;dp.length<span class=\\"hljs-number\\">-1</span>;i++){\\n    max=<span class=\\"hljs-built_in\\">Math</span>.max(max,dp[i])\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> max\\n};\\n</code></pre>\\n"],"querySlug":"maximize-distance-to-closest-person","created_at":"2019-03-16","timeArr":[2019,2,16,10,20,12,0],"hasThinking":false,"content":"<p>给你一个数组 <code>seats</code> 表示一排座位，其中 <code>seats[i] = 1</code> 代表有人坐在第 <code>i</code> 个座位上，<code>seats[i] = 0</code> 代表座位 <code>i</code> 上是空的（<strong>下标从 0 开始</strong>）。</p>\\n\\n<p>至少有一个空座位，且至少有一人已经坐在座位上。</p>\\n\\n<p>亚历克斯希望坐在一个能够使他与离他最近的人之间的距离达到最大化的座位上。</p>\\n\\n<p>返回他到离他最近的人的最大距离。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2020/09/10/distance.jpg\\" style=\\"width: 650px; height: 257px;\\" />\\n<pre>\\n<strong>输入：</strong>seats = [1,0,0,0,1,0,1]\\n<strong>输出：</strong>2\\n<strong>解释：\\n</strong>如果亚历克斯坐在第二个空位（seats[2]）上，他到离他最近的人的距离为 2 。\\n如果亚历克斯坐在其它任何一个空位上，他到离他最近的人的距离为 1 。\\n因此，他到离他最近的人的最大距离是 2 。 \\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>seats = [1,0,0,0]\\n<strong>输出：</strong>3\\n<strong>解释：</strong>\\n如果亚历克斯坐在最后一个座位上，他离最近的人有 3 个座位远。\\n这是可能的最大距离，所以答案是 3 。\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>seats = [0,1]\\n<strong>输出：</strong>1\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>2 <= seats.length <= 2 * 10<sup>4</sup></code></li>\\n\\t<li><code>seats[i]</code> 为 <code>0</code> 或 <code>1</code></li>\\n\\t<li>至少有一个 <strong>空座位</strong></li>\\n\\t<li>至少有一个 <strong>座位上有人</strong></li>\\n</ul>\\n","title":"849. 到最近的人的最大距离","relatedTags":["数组"],"difficult":"Middle","lang":["javascript"],"uniqueID":"849","slug":"849-Maximize-Distance-to-Closest-Person"}')}}]);