(window.webpackJsonp=window.webpackJsonp||[]).push([[590],{1388:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">code</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">k</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> decrypt = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">code, k</span>) </span>{\\n    <span class=\\"hljs-keyword\\">let</span> len=code.length\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">getAfterSum</span>(<span class=\\"hljs-params\\">curIdx,k</span>)</span>{\\n        <span class=\\"hljs-keyword\\">let</span> sum=<span class=\\"hljs-number\\">0</span>\\n        <span class=\\"hljs-keyword\\">let</span> i=(curIdx+<span class=\\"hljs-number\\">1</span>) % len\\n        <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> step=<span class=\\"hljs-number\\">0</span>;step&lt;k;i=(i+<span class=\\"hljs-number\\">1</span>) % len,step++){\\n            sum+=code[i]\\n        }\\n        <span class=\\"hljs-keyword\\">return</span> sum\\n    }\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">getBeforeSum</span>(<span class=\\"hljs-params\\">curIdx,k</span>)</span>{\\n        <span class=\\"hljs-keyword\\">let</span> sum=<span class=\\"hljs-number\\">0</span>\\n        <span class=\\"hljs-keyword\\">let</span> i=(curIdx<span class=\\"hljs-number\\">-1</span> + len) % len\\n        <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> step=<span class=\\"hljs-number\\">0</span>;step&lt;-k;i=(i<span class=\\"hljs-number\\">-1</span>+len) % len,step++){\\n            sum+=code[i]\\n        }\\n        <span class=\\"hljs-keyword\\">return</span> sum\\n    }\\n    <span class=\\"hljs-keyword\\">let</span> res=[]\\n    <span class=\\"hljs-keyword\\">if</span>(k===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-built_in\\">Array</span>(len).fill(<span class=\\"hljs-number\\">0</span>)\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;len;i++){\\n        <span class=\\"hljs-keyword\\">if</span>(k&gt;<span class=\\"hljs-number\\">0</span>){\\n            res[i]=getAfterSum(i,k)\\n        }<span class=\\"hljs-keyword\\">else</span>{\\n            res[i]=getBeforeSum(i,k)\\n        }\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"defuse-the-bomb","created_at":"2020-11-25","timeArr":[2020,10,25,20,55,10,0],"hasThinking":false,"content":"<p>你有一个炸弹需要拆除，时间紧迫！你的情报员会给你一个长度为 <code>n</code> 的 <strong>循环</strong> 数组 <code>code</code> 以及一个密钥 <code>k</code> 。</p>\\n\\n<p>为了获得正确的密码，你需要替换掉每一个数字。所有数字会 <strong>同时</strong> 被替换。</p>\\n\\n<ul>\\n\\t<li>如果 <code>k > 0</code> ，将第 <code>i</code> 个数字用 <strong>接下来</strong> <code>k</code> 个数字之和替换。</li>\\n\\t<li>如果 <code>k < 0</code> ，将第 <code>i</code> 个数字用 <strong>之前</strong> <code>k</code> 个数字之和替换。</li>\\n\\t<li>如果 <code>k == 0</code> ，将第 <code>i</code> 个数字用 <code>0</code> 替换。</li>\\n</ul>\\n\\n<p>由于 <code>code</code> 是循环的， <code>code[n-1]</code> 下一个元素是 <code>code[0]</code> ，且 <code>code[0]</code> 前一个元素是 <code>code[n-1]</code> 。</p>\\n\\n<p>给你 <strong>循环</strong> 数组 <code>code</code> 和整数密钥 <code>k</code> ，请你返回解密后的结果来拆除炸弹！</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<b>输入：</b>code = [5,7,1,4], k = 3\\n<b>输出：</b>[12,10,16,13]\\n<b>解释：</b>每个数字都被接下来 3 个数字之和替换。解密后的密码为 [7+1+4, 1+4+5, 4+5+7, 5+7+1]。注意到数组是循环连接的。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<b>输入：</b>code = [1,2,3,4], k = 0\\n<b>输出：</b>[0,0,0,0]\\n<b>解释：</b>当 k 为 0 时，所有数字都被 0 替换。\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<b>输入：</b>code = [2,4,9,3], k = -2\\n<b>输出：</b>[12,5,6,13]\\n<b>解释：</b>解密后的密码为 [3+9, 2+3, 4+2, 9+4] 。注意到数组是循环连接的。如果 k 是负数，那么和为 <strong>之前</strong> 的数字。\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>n == code.length</code></li>\\n\\t<li><code>1 <= n <= 100</code></li>\\n\\t<li><code>1 <= code[i] <= 100</code></li>\\n\\t<li><code>-(n - 1) <= k <= n - 1</code></li>\\n</ul>\\n","title":"1652. 拆炸弹","relatedTags":["数组"],"difficult":"Easy","lang":["javascript"],"uniqueID":"1652","slug":"1652-Defuse-the-Bomb"}')}}]);