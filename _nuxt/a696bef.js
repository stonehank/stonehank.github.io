(window.webpackJsonp=window.webpackJsonp||[]).push([[284],{1082:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">expression</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{string[]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> braceExpansionII = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">expression</span>) </span>{\\n  <span class=\\"hljs-keyword\\">return</span> resolve(expression).sort()\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">resolve</span>(<span class=\\"hljs-params\\">exp</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-built_in\\">Array</span>.isArray(exp))<span class=\\"hljs-keyword\\">return</span> exp\\n    <span class=\\"hljs-keyword\\">let</span> str=<span class=\\"hljs-string\\">\'\'</span>,group=[],arr=[]\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;exp.length;i++){\\n      <span class=\\"hljs-keyword\\">if</span>(exp[i]===<span class=\\"hljs-string\\">\'{\'</span>){\\n        <span class=\\"hljs-keyword\\">if</span>(str!==<span class=\\"hljs-string\\">\'\'</span>){\\n          arr=multi(arr,[str])\\n          str=<span class=\\"hljs-string\\">\'\'</span>\\n        }\\n        <span class=\\"hljs-keyword\\">let</span> prev=resolve(arr)\\n        <span class=\\"hljs-keyword\\">let</span> [sub,nxtId]=findSub(exp,i+<span class=\\"hljs-number\\">1</span>)\\n        <span class=\\"hljs-keyword\\">let</span> r_sub=resolve(sub)\\n        arr=multi(prev,r_sub)\\n        i=nxtId\\n      }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(exp[i]===<span class=\\"hljs-string\\">\',\'</span>){\\n         <span class=\\"hljs-keyword\\">if</span>(str!==<span class=\\"hljs-string\\">\'\'</span>){\\n          arr=multi(arr,[str])\\n          str=<span class=\\"hljs-string\\">\'\'</span>\\n        }\\n        group.push(resolve(arr))\\n        arr=[]\\n      }<span class=\\"hljs-keyword\\">else</span>{\\n        str+=exp[i]\\n      }\\n    }\\n    <span class=\\"hljs-keyword\\">if</span>(str!==<span class=\\"hljs-string\\">\'\'</span>){\\n      <span class=\\"hljs-comment\\">// group.push([str])</span>\\n      arr=multi(arr,[str])\\n    }\\n    <span class=\\"hljs-keyword\\">if</span>(arr.length&gt;<span class=\\"hljs-number\\">0</span>){\\n      group.push(arr)\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> add(group)\\n  }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">multi</span>(<span class=\\"hljs-params\\">r1,r2</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(r1.length===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span> r2\\n    <span class=\\"hljs-keyword\\">if</span>(r2.length===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span> r1\\n    <span class=\\"hljs-keyword\\">let</span> res=[],hash={}\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;r1.length;i++){\\n      <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-regexp\\">/[\\\\{\\\\}\\\\,]/</span>.test(r1[i]))<span class=\\"hljs-keyword\\">continue</span>\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;r2.length;j++){\\n        <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-regexp\\">/[\\\\{\\\\}\\\\,]/</span>.test(r2[j]))<span class=\\"hljs-keyword\\">continue</span>\\n        <span class=\\"hljs-keyword\\">let</span> cur=r1[i]+r2[j]    \\n        <span class=\\"hljs-keyword\\">if</span>(hash[cur])<span class=\\"hljs-keyword\\">continue</span>\\n        hash[cur]=<span class=\\"hljs-literal\\">true</span>\\n        res.push(cur)\\n      }\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> res\\n  }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">add</span>(<span class=\\"hljs-params\\">arr</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> res=[]\\n    <span class=\\"hljs-keyword\\">let</span> hash={}\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;arr.length;i++){\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;arr[i].length;j++){\\n        <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-regexp\\">/[\\\\{\\\\}\\\\,]/</span>.test(arr[i][j]))<span class=\\"hljs-keyword\\">continue</span>\\n        <span class=\\"hljs-keyword\\">if</span>(hash[arr[i][j]])<span class=\\"hljs-keyword\\">continue</span>\\n        hash[arr[i][j]]=<span class=\\"hljs-literal\\">true</span>\\n        res.push(arr[i][j])\\n      }\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> res\\n  }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">findSub</span>(<span class=\\"hljs-params\\">exp,id</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> count=<span class=\\"hljs-number\\">1</span>\\n    <span class=\\"hljs-keyword\\">let</span> str=<span class=\\"hljs-string\\">\'\'</span>\\n    <span class=\\"hljs-keyword\\">while</span>(<span class=\\"hljs-literal\\">true</span>){\\n      <span class=\\"hljs-keyword\\">if</span>(exp[id]===<span class=\\"hljs-string\\">\'{\'</span>){\\n        count++\\n      }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(exp[id]===<span class=\\"hljs-string\\">\'}\'</span>){\\n        count--\\n      }\\n      <span class=\\"hljs-keyword\\">if</span>(count===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span> [str,id]\\n      str+=exp[id]\\n      id++\\n    }\\n  }\\n\\n};\\n</code></pre>\\n"],"querySlug":"brace-expansion-ii","created_at":"2019-07-12","timeArr":[2019,6,12,15,38,35,0],"hasThinking":false,"content":"<p>如果你熟悉 Shell 编程，那么一定了解过花括号展开，它可以用来生成任意字符串。</p>\\n\\n<p>花括号展开的表达式可以看作一个由 <strong>花括号</strong>、<strong>逗号</strong> 和 <strong>小写英文字母</strong> 组成的字符串，定义下面几条语法规则：</p>\\n\\n<ul>\\n\\t<li>如果只给出单一的元素 <code>x</code>，那么表达式表示的字符串就只有 <code>\\"x\\"</code>。<code>R(x) = {x}</code>\\n\\n\\t<ul>\\n\\t\\t<li>例如，表达式 <code>{\\"a\\"}</code> 表示字符串 <code>\\"a\\"</code>。</li>\\n\\t\\t<li>而表达式 <code>{\\"w\\"}</code> 就表示字符串 <code>\\"w\\"</code>。</li>\\n\\t</ul>\\n\\t</li>\\n\\t<li>当两个或多个表达式并列，以逗号分隔时，我们取这些表达式中元素的并集。<code>R({e_1,e_2,...}) = R(e_1) ∪ R(e_2) ∪ ...</code>\\n\\t<ul>\\n\\t\\t<li>例如，表达式 <code>\\"{a,b,c}\\"</code> 表示字符串 <code>\\"a\\",\\"b\\",\\"c\\"</code>。</li>\\n\\t\\t<li>而表达式 <code>\\"{{a,b},{b,c}}\\"</code> 也可以表示字符串 <code>\\"a\\",\\"b\\",\\"c\\"</code>。</li>\\n\\t</ul>\\n\\t</li>\\n\\t<li>要是两个或多个表达式相接，中间没有隔开时，我们从这些表达式中各取一个元素依次连接形成字符串。<code>R(e_1 + e_2) = {a + b for (a, b) in R(e_1) × R(e_2)}</code>\\n\\t<ul>\\n\\t\\t<li>例如，表达式 <code>\\"{a,b}{c,d}\\"</code> 表示字符串 <code>\\"ac\\",\\"ad\\",\\"bc\\",\\"bd\\"</code>。</li>\\n\\t</ul>\\n\\t</li>\\n\\t<li>表达式之间允许嵌套，单一元素与表达式的连接也是允许的。\\n\\t<ul>\\n\\t\\t<li>例如，表达式 <code>\\"a{b,c,d}\\"</code> 表示字符串 <code>\\"ab\\",\\"ac\\",\\"ad\\"​​​​​​</code>。</li>\\n\\t\\t<li>例如，表达式 <code>\\"a{b,c}{d,e}f{g,h}\\"</code> 可以表示字符串 <code>\\"abdfg\\", \\"abdfh\\", \\"abefg\\", \\"abefh\\", \\"acdfg\\", \\"acdfh\\", \\"acefg\\", \\"acefh\\"</code>。</li>\\n\\t</ul>\\n\\t</li>\\n</ul>\\n\\n<p>给出表示基于给定语法规则的表达式 <code>expression</code>，返回它所表示的所有字符串组成的有序列表。</p>\\n\\n<p>假如你希望以「集合」的概念了解此题，也可以通过点击 “<strong>显示英文描述</strong>” 获取详情。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>\\"{a,b}{c,{d,e}}\\"\\n<strong>输出：</strong>[\\"ac\\",\\"ad\\",\\"ae\\",\\"bc\\",\\"bd\\",\\"be\\"]</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>\\"{{a,z},a{b,c},{ab,z}}\\"\\n<strong>输出：</strong>[\\"a\\",\\"ab\\",\\"ac\\",\\"z\\"]\\n<strong>解释：</strong>输出中 <strong>不应 </strong>出现重复的组合结果。\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ol>\\n\\t<li><code>1 <= expression.length <= 50</code></li>\\n\\t<li><code>expression[i]</code> 由 <code>\'{\'</code>，<code>\'}\'</code>，<code>\',\'</code> 或小写英文字母组成</li>\\n\\t<li>给出的表达式 <code>expression</code> 用以表示一组基于题目描述中语法构造的字符串</li>\\n</ol>\\n","title":"1096. 花括号展开 II","relatedTags":["栈","广度优先搜索","字符串","回溯"],"difficult":"Hard","lang":["javascript"],"uniqueID":"1096","slug":"1096-Brace-Expansion-II"}')}}]);