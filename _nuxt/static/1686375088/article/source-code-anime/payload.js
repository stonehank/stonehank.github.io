__NUXT_JSONP__("/article/source-code-anime", (function(a,b){return {data:[{slug:b,articleDetails:{content:"\u003Cp\u003E为了能更好的理解这个库，个人写了一个此库的压缩版，实现了核心的功能(主要也是为了更好理解核心功能)，内容更少方便阅读，\n地址在\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fstonehank\u002Fsimplify-anime\"\u003E这里\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003Chr\u003E\n\u003Ch2 id=\"jie-shao\"\u003E介绍\u003C\u002Fh2\u003E\n\u003Cp\u003E\u003Ca href=\"http:\u002F\u002Fanimejs.com\u002F\"\u003Eanime\u003C\u002Fa\u003E一个动画库，摒弃了常规的\u003Ccode\u003Eleft,top\u003C\u002Fcode\u003E属性，全面采用\u003Ccode\u003ErequestAnimateFrame+CSS3属性\u003C\u002Fcode\u003E能充分调用设备进行GPU渲染。\u003C\u002Fp\u003E\n\u003Cp\u003E它的亮点有以下(直接引用官网)：\u003C\u002Fp\u003E\n\u003Cblockquote\u003E\n\u003Cul\u003E\n\u003Cli\u003EKeyframes(帧动画): Chain multiple animation properties.\u003C\u002Fli\u003E\n\u003Cli\u003ETimeline(同步动画): Synchronize multiple instances together.\u003C\u002Fli\u003E\n\u003Cli\u003EPlayback controls(暂停回放功能): Play, pause, restart, seek animations or timelines.\u003C\u002Fli\u003E\n\u003Cli\u003ECSS transforms(CSS动画): Animate CSS transforms individually.\u003C\u002Fli\u003E\n\u003Cli\u003EFunction based values(函数定义配置(注入了内部属性)): Multiple animated targets can have individual value.\u003C\u002Fli\u003E\n\u003Cli\u003ESVG Animations(SVG动画): Motion path, line drawing and morphing animations.\u003C\u002Fli\u003E\n\u003Cli\u003EEasing functions(自定义贝塞尔函数): Use the built in functions or create your own Cubic Bézier curve easing.\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fblockquote\u003E\n\u003Cp\u003E这么多亮点，其实关键函数就3~4个。\u003C\u002Fp\u003E\n\u003Cp\u003E因为这里都是使用缓动函数算法，也就是通过 \u003Ccode\u003E初始位置\u003C\u002Fcode\u003E, \u003Ccode\u003E结束位置\u003C\u002Fcode\u003E, \u003Ccode\u003E持续时间\u003C\u002Fcode\u003E,\u003Ccode\u003E已消耗的时间\u003C\u002Fcode\u003E 计算出当前所在位置。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003E初始位置\u003C\u002Fcode\u003E、\u003Ccode\u003E结束位置\u003C\u002Fcode\u003E和\u003Ccode\u003E持续时间\u003C\u002Fcode\u003E是作为参数传入配置的，因此计算\u003Ccode\u003E已消耗时间\u003C\u002Fcode\u003E就是完成动画的核心。  \u003C\u002Fp\u003E\n\u003Cp\u003E下面就深入了解下它的核心。\u003C\u002Fp\u003E\n\u003Ch2 id=\"shen-ru-li-jie\"\u003E深入理解\u003C\u002Fh2\u003E\n\u003Cp\u003E先了解几个时间的变量，动画都是\u003Ccode\u003E算法+时间=位置\u003C\u002Fcode\u003E这么算出来的：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"language-js\"\u003E\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 记录当前位置所对应的时间，根据lastTime计算\u003C\u002Fspan\u003E\ninstance.cuurentTime\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 记录当前位置所消耗的时间\u003C\u002Fspan\u003E\nengineTime\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 记录上一次计算完毕赋值后的位置对应时间\u003C\u002Fspan\u003E\nlastTime\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 上一次调用raf的时间\u003C\u002Fspan\u003E\nstartTime\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 当前位置所消耗时间(能匹配反转状态)，根据engineTime计算\u003C\u002Fspan\u003E\ninsTime\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 动画持续时间\u003C\u002Fspan\u003E\ninsDuration\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 延迟时间\u003C\u002Fspan\u003E\ndelay\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 从什么时间点开始动画\u003C\u002Fspan\u003E\ninsOffset\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E接着看几个关键函数，这里先不放具体代码，只是先知道是做什么的(按一个正常动画顺序排放)：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"language-js\"\u003E\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F anime的核心机制, 递归调用raf执行(关键)\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E engine = \u003Cspan class=\"hljs-function\"\u003E(\u003Cspan class=\"hljs-params\"\u003E(\u003C\u002Fspan\u003E) =&gt;\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F ...requestAnimateFrame\u003C\u002Fspan\u003E\n})();\n\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F anime主体\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003Eanime\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003Eparams\u003C\u002Fspan\u003E)\u003C\u002Fspan\u003E{\n  \n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 定义instance 也是最终返回值\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E instance = createNewInstance(params);\n  \n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 外部API 从当前位置开始执行动画\u003C\u002Fspan\u003E\n  instance.play = \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003E\u003C\u002Fspan\u003E) \u003C\u002Fspan\u003E{}\n  \n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 配置 startTime 和 engineTime(关键)\u003C\u002Fspan\u003E\n   instance.tick = \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003Et\u003C\u002Fspan\u003E) \u003C\u002Fspan\u003E{}\n   \n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 对当前engineTime进行判断，确定动画方案(关键)\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003EsetInstanceProgress\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003EengineTime\u003C\u002Fspan\u003E) \u003C\u002Fspan\u003E{}\n  \n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 计算动画当前位置 并且赋值(关键)\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003EsetAnimationsProgress\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003EinsTime\u003C\u002Fspan\u003E)\u003C\u002Fspan\u003E{}\n\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 直接跳到参数time的时间所在的位置\u003C\u002Fspan\u003E\n  instance.seek = \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003Etime\u003C\u002Fspan\u003E) \u003C\u002Fspan\u003E{}\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 外部API 暂停\u003C\u002Fspan\u003E\n  instance.pause = \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003E\u003C\u002Fspan\u003E) \u003C\u002Fspan\u003E{}\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 外部API 反转\u003C\u002Fspan\u003E\n  instance.reverse = \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003E\u003C\u002Fspan\u003E) \u003C\u002Fspan\u003E{}\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 外部API reset\u003C\u002Fspan\u003E\n  instance.reset = \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003E\u003C\u002Fspan\u003E) \u003C\u002Fspan\u003E{}\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 外部API 重新开始\u003C\u002Fspan\u003E\n  instance.restart = \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003E\u003C\u002Fspan\u003E) \u003C\u002Fspan\u003E{}\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F*...*\u002F\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E instance\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E关键函数就4个，其他都是一些对关键函数的具体使用\u003C\u002Fp\u003E\n\u003Cp\u003E接着一个个解析：\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003EcreateNewInstance\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003E其实就是对属性和方法合并成一个整体对象，这个对象是贯穿全局的，因此里面什么都有...\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"language-js\"\u003E\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003EcreateNewInstance\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003Eparams\u003C\u002Fspan\u003E) \u003C\u002Fspan\u003E{\n  \n    \u003Cspan class=\"hljs-comment\"\u003E\u002F* 对params进行处理 *\u002F\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E instanceSettings = replaceObjectProps(defaultInstanceSettings, params);\n    \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E tweenSettings = replaceObjectProps(defaultTweenSettings, params);\n    \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E animatables = getAnimatables(params.targets);\n    \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E properties = getProperties(instanceSettings, tweenSettings, params);\n    \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E animations = getAnimations(animatables, properties);\n        \n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F mergeObjects(o1,o2)相当于 Object.assing({},o2,o1)\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E mergeObjects(instanceSettings, {\n      \u003Cspan class=\"hljs-attr\"\u003Echildren\u003C\u002Fspan\u003E: [],\n      \u003Cspan class=\"hljs-attr\"\u003Eanimatables\u003C\u002Fspan\u003E: animatables,\n      \u003Cspan class=\"hljs-attr\"\u003Eanimations\u003C\u002Fspan\u003E: animations,\n      \u003Cspan class=\"hljs-attr\"\u003Eduration\u003C\u002Fspan\u003E: getInstanceTimings(\u003Cspan class=\"hljs-string\"\u003E'duration'\u003C\u002Fspan\u003E, animations, instanceSettings, tweenSettings),\n      \u003Cspan class=\"hljs-attr\"\u003Edelay\u003C\u002Fspan\u003E: getInstanceTimings(\u003Cspan class=\"hljs-string\"\u003E'delay'\u003C\u002Fspan\u003E, animations, instanceSettings, tweenSettings)\n    });\n  }\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cul\u003E\n\u003Cli\u003Einstance.play\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003E此处先做了防护，只有paused状态下才会执行，\u003Ccode\u003ElastTime\u003C\u002Fcode\u003E这里是调取当前动画的位置对应的时间，因此才可以实现从任意位置开始动画。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"language-js\"\u003E\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 外部API 从当前位置开始执行动画\u003C\u002Fspan\u003E\ninstance.play = \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003E\u003C\u002Fspan\u003E) \u003C\u002Fspan\u003E{\n  \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (!instance.paused) \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E;\n  instance.paused = \u003Cspan class=\"hljs-literal\"\u003Efalse\u003C\u002Fspan\u003E;\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 从0 开始\u003C\u002Fspan\u003E\n  startTime = \u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E;\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 调取当前动画当前位置所对应的时间\u003C\u002Fspan\u003E\n  lastTime = adjustTime(instance.currentTime);\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 给 activeInstances 添加当前实例，说明这是一个正在运行的动画\u003C\u002Fspan\u003E\n  activeInstances.push(instance);\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F raf未启动，调用engine\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (!raf) engine();\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cul\u003E\n\u003Cli\u003Eengine\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003Eanime的核心机制，通过递归调用\u003Ccode\u003ErequestAnimateFrame\u003C\u002Fcode\u003E，当检测到需要执行动画的集合\u003Ccode\u003EactiveInstances\u003C\u002Fcode\u003E有值，调用instance.tick。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"language-js\"\u003E\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F IIFE 之后调用engine相当于执行内部的play\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E engine = \u003Cspan class=\"hljs-function\"\u003E(\u003Cspan class=\"hljs-params\"\u003E(\u003C\u002Fspan\u003E) =&gt;\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F step收到一个参数，\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003Eplay\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003E\u003C\u002Fspan\u003E) \u003C\u002Fspan\u003E{ raf = requestAnimationFrame(step); };\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 这里的参数t是 raf的参数中可以接受的一个时间戳，表示触发调用的时间\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003Estep\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003Et\u003C\u002Fspan\u003E) \u003C\u002Fspan\u003E{\n      \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F activeInstances指正在被执行的动画集合\u003C\u002Fspan\u003E\n      \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E activeLength = activeInstances.length;\n      \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 存在正在运行的动画\u003C\u002Fspan\u003E\n      \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (activeLength) {\n        \u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E i = \u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E;\n        \u003Cspan class=\"hljs-keyword\"\u003Ewhile\u003C\u002Fspan\u003E (i &lt; activeLength) {\n          \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 调用tick执行\u003C\u002Fspan\u003E\n          \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (activeInstances[i]) activeInstances[i].tick(t);\n          i++;\n        }\n        play();\n      } \u003Cspan class=\"hljs-keyword\"\u003Eelse\u003C\u002Fspan\u003E {\n        \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 不存在正在运行的动画 cancel\u003C\u002Fspan\u003E\n        cancelAnimationFrame(raf);\n        raf = \u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E;\n      }\n    }\n    \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E play;\n  })();\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cul\u003E\n\u003Cli\u003Einstance.tick\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003Etick的作用通过参数\u003Ccode\u003Et\u003C\u002Fcode\u003E，\u003Ccode\u003Eraf\u003C\u002Fcode\u003E的一个时间戳概念，计算出距离上一次调用实际消耗的时间\u003Ccode\u003EengineTime\u003C\u002Fcode\u003E。\u003C\u002Fp\u003E\n\u003Cp\u003E例如：上一次调用时间戳是\u003Ccode\u003E1000\u003C\u002Fcode\u003E，也就是1秒，中途突然执行一个巨大的任务，等任务结束，时间戳是\u003Ccode\u003E20000\u003C\u002Fcode\u003E，\n那么这次的\u003Ccode\u003EengineTime\u003C\u002Fcode\u003E就是\u003Ccode\u003ElastTime+20000-1000\u003C\u002Fcode\u003E，也就是计算这次动画从上次位置再加上19秒的位置...\n那么anime对于这种情况是怎么处理呢?继续看下一个\u003Ccode\u003EsetInstanceProgress\u003C\u002Fcode\u003E。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"language-js\"\u003E\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 配置 startTime 和 engineTime\u003C\u002Fspan\u003E\ninstance.tick = \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003Et\u003C\u002Fspan\u003E) \u003C\u002Fspan\u003E{\n  now = t;\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F startTime 如果首次执行 就是now，否则就是上一次tick的时间\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (!startTime) startTime = now;\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F lastTime 是上一次执行结束后动画对应位置的时间戳\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F engineTime 是到动画目前为止消耗的总时间，一般理论上讲是lastTime+16.6667\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E engineTime = (lastTime + now - startTime) * anime.speed;\n  setInstanceProgress(engineTime);\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cul\u003E\n\u003Cli\u003EsetInstanceProgress\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003E这个函数接受一个消耗的时间值，在内部对其进行适配和定义了各种情况的动画起始点，传递给\u003Ccode\u003EsetAnimationsProgress\u003C\u002Fcode\u003E。\u003C\u002Fp\u003E\n\u003Cp\u003E例如，上面那个例子，如果消耗了19秒，就如进入这个判断:从结束点开始动画(考虑reverse的情况)。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"language-js\"\u003E\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 消耗的时间超出了持续时间 并且当前位置不在终点  或者 未设定持续时间\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E ((insTime &gt;= insDuration &amp;&amp; insCurrentTime !== insDuration) || !insDuration){\n  \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E ((insTime &gt;= insDuration &amp;&amp; insCurrentTime !== insDuration) || !insDuration) {\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 从结束点开始\u003C\u002Fspan\u003E\n    setAnimationsProgress(insDuration);\n    \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (!insReversed) countIteration();\n  }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003EsetInstanceProgress(省略了一些配置的定义)\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"language-js\"\u003E\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 对当前engineTime进行判断，确定动画方案\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003EsetInstanceProgress\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003EengineTime\u003C\u002Fspan\u003E) \u003C\u002Fspan\u003E{\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 动画持续时间\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E insDuration = instance.duration;\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 从什么时间点开始动画\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E insOffset = instance.offset;\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 加上延迟后的开始时间\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E insStart = insOffset + instance.delay;\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 记录当前位置所对应的时间\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E insCurrentTime = instance.currentTime;\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 是否是反转状态\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E insReversed = instance.reversed;\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 当前位置所消耗时间(能匹配反转状态)\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 这里adjustTime就是如果是反转状态，则返回 insDuration-engineTime\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E insTime = adjustTime(engineTime);\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F* ... *\u002F\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 消耗的时间大于应该开始的时间 并且 消耗的时间在持续时间范围内\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (insTime &gt; insOffset &amp;&amp; insTime &lt; insDuration) {\n    setAnimationsProgress(insTime);\n  } \u003Cspan class=\"hljs-keyword\"\u003Eelse\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 消耗的时间小于应该开始的时间 并且 当前位置不在起点\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (insTime &lt;= insOffset &amp;&amp; insCurrentTime !== \u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E) {\n      \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 从头开始\u003C\u002Fspan\u003E\n      setAnimationsProgress(\u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E);\n      \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (insReversed) countIteration();\n    }\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 消耗的时间超出了持续时间 并且当前位置不在终点  或者 未设定持续时间\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E ((insTime &gt;= insDuration &amp;&amp; insCurrentTime !== insDuration) || !insDuration) {\n      \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 从结束点开始\u003C\u002Fspan\u003E\n      setAnimationsProgress(insDuration);\n      \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (!insReversed) countIteration();\n    }\n  }\n  setCallback(\u003Cspan class=\"hljs-string\"\u003E'update'\u003C\u002Fspan\u003E);\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 消耗时间大于持续时间 并且在终点(不在终点的上面已经判断了)\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (engineTime &gt;= insDuration) {\n    \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (instance.remaining) {\n      startTime = now;\n      \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (instance.direction === \u003Cspan class=\"hljs-string\"\u003E'alternate'\u003C\u002Fspan\u003E) toggleInstanceDirection();\n      \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F remaining为false，remaining&gt;0说明还需要继续动画\u003C\u002Fspan\u003E\n    } \u003Cspan class=\"hljs-keyword\"\u003Eelse\u003C\u002Fspan\u003E {\n      \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 完成动画的执行\u003C\u002Fspan\u003E\n      instance.pause();\n      \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (!instance.completed) {\n        instance.completed = \u003Cspan class=\"hljs-literal\"\u003Etrue\u003C\u002Fspan\u003E;\n        setCallback(\u003Cspan class=\"hljs-string\"\u003E'complete'\u003C\u002Fspan\u003E);\n        \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (\u003Cspan class=\"hljs-string\"\u003E'Promise'\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Ein\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-built_in\"\u003Ewindow\u003C\u002Fspan\u003E) {\n          resolve();\n          promise = makePromise();\n        }\n      }\n    }\n    lastTime = \u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E;\n  }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cul\u003E\n\u003Cli\u003EsetAnimationsProgress(省略了一些配置的定义)\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003E这个函数接受一个参数，就是当前位置所消耗时间(动画起始点)，然后在里面计算出每一个动画目标的位置，并且赋值\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"language-js\"\u003E\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 计算动画当前位置 并且赋值\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003EsetAnimationsProgress\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003EinsTime\u003C\u002Fspan\u003E) \u003C\u002Fspan\u003E{\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F* ... *\u002F\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 这个while逐个计算当前实例中的每个动画的当前位置(通过时间和算法)\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-keyword\"\u003Ewhile\u003C\u002Fspan\u003E (i &lt; animationsLength) {\n      \u003Cspan class=\"hljs-comment\"\u003E\u002F* ... *\u002F\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 消耗的时间占总持续时间的比例 在起点终点之间\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E elapsed = minMaxValue(insTime - tween.start - tween.delay, \u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E, tween.duration) \u002F tween.duration;\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 通过算法计算当前进度\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E eased = \u003Cspan class=\"hljs-built_in\"\u003EisNaN\u003C\u002Fspan\u003E(elapsed) ? \u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E : tween.easing(elapsed, tween.elasticity);\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F* ... *\u002F\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 遍历每一个到达点执行\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-keyword\"\u003Efor\u003C\u002Fspan\u003E (\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E n = \u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E; n &lt; toNumbersLength; n++) {\n      \u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E value;\n      \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E toNumber = tween.to.numbers[n];\n      \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E fromNumber = tween.from.numbers[n];\n      \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (!tween.isPath) {\n        \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 计算当前具体位置\u003C\u002Fspan\u003E\n        value = fromNumber + (eased * (toNumber - fromNumber));\n      } \u003Cspan class=\"hljs-keyword\"\u003Eelse\u003C\u002Fspan\u003E {\n        \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 进行SVG path计算\u003C\u002Fspan\u003E\n        value = getPathProgress(tween.value, eased * toNumber);\n      }\n      \u003Cspan class=\"hljs-comment\"\u003E\u002F* ... *\u002F\u003C\u002Fspan\u003E\n      numbers.push(value);\n    }\n         \u003Cspan class=\"hljs-comment\"\u003E\u002F* ... *\u002F\u003C\u002Fspan\u003E\n        \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (!\u003Cspan class=\"hljs-built_in\"\u003EisNaN\u003C\u002Fspan\u003E(n)) {\n          \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 组合单位 '135.546'+'px'\u003C\u002Fspan\u003E\n          \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (!b) {\n            progress += n + \u003Cspan class=\"hljs-string\"\u003E' '\u003C\u002Fspan\u003E;\n          } \u003Cspan class=\"hljs-keyword\"\u003Eelse\u003C\u002Fspan\u003E {\n            progress += n + b;\n          }\n        }\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F* ... *\u002F\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 组合结果 'translateX('+'135.546px'+')`\u003C\u002Fspan\u003E\n    setTweenProgress[anim.type](https:\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002Fgithub.com\u002Fstonehank\u002Fsourcecode-analysis\u002Fblob\u002Fmaster\u002Fsource-code.anime\u002Fanimatable.target, anim.property, progress, transforms, animatable.id);\u003C\u002Fspan\u003E\n    anim.currentValue = progress;\n    i++;\n  }\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 遍历结果，逐个target赋值\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E transformsLength = \u003Cspan class=\"hljs-built_in\"\u003EObject\u003C\u002Fspan\u003E.keys(transforms).length;\n  \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (transformsLength) {\n    \u003Cspan class=\"hljs-keyword\"\u003Efor\u003C\u002Fspan\u003E (\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E id = \u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E; id &lt; transformsLength; id++) {\n      \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (!transformString) {\n        \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E t = \u003Cspan class=\"hljs-string\"\u003E'transform'\u003C\u002Fspan\u003E;\n        \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 配置兼容性\u003C\u002Fspan\u003E\n        transformString = (getCSSValue(\u003Cspan class=\"hljs-built_in\"\u003Edocument\u003C\u002Fspan\u003E.body, t) ? t : \u003Cspan class=\"hljs-string\"\u003E`-webkit-\u003Cspan class=\"hljs-subst\"\u003E${t}\u003C\u002Fspan\u003E`\u003C\u002Fspan\u003E);\n      }\n      \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 设置style\u003C\u002Fspan\u003E\n      instance.animatables[id].target.style[transformString] = transforms[id].join(\u003Cspan class=\"hljs-string\"\u003E' '\u003C\u002Fspan\u003E);\n    }\n  }\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 记录当前位置所对应的时间\u003C\u002Fspan\u003E\n  instance.currentTime = insTime;\n  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 设置进度\u003C\u002Fspan\u003E\n  instance.progress = (insTime \u002F instance.duration) * \u003Cspan class=\"hljs-number\"\u003E100\u003C\u002Fspan\u003E;\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E剩下的就是一些操作函数了：\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Cp\u003Einstance.seek \u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"language-js\"\u003E\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 直接跳到参数time的时间所在的位置\u003C\u002Fspan\u003E\ninstance.seek = \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003Etime\u003C\u002Fspan\u003E) \u003C\u002Fspan\u003E{\nsetInstanceProgress(adjustTime(time));\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cp\u003Einstance.pause\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"language-js\"\u003E\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 外部API 暂停\u003C\u002Fspan\u003E\ninstance.pause = \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003E\u003C\u002Fspan\u003E) \u003C\u002Fspan\u003E{\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E i = activeInstances.indexOf(instance);\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 删除activeInstances 后续engine中找不到便不会执行\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (i &gt; \u003Cspan class=\"hljs-number\"\u003E-1\u003C\u002Fspan\u003E) activeInstances.splice(i, \u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E);\ninstance.paused = \u003Cspan class=\"hljs-literal\"\u003Etrue\u003C\u002Fspan\u003E;\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cp\u003Einstance.reverse\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cpre\u003E\u003Ccode class=\"language-js\"\u003E\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 外部API 反转\u003C\u002Fspan\u003E\ninstance.reverse = \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003E\u003C\u002Fspan\u003E) \u003C\u002Fspan\u003E{\n  toggleInstanceDirection();\n  startTime = \u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E;\n  lastTime = adjustTime(instance.currentTime);\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cul\u003E\n\u003Cli\u003Einstance.restart\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cpre\u003E\u003Ccode class=\"language-js\"\u003E\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 外部API 重新执行\u003C\u002Fspan\u003E\ninstance.restart = \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003E\u003C\u002Fspan\u003E) \u003C\u002Fspan\u003E{\n  instance.pause();\n  instance.reset();\n  instance.play();\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cul\u003E\n\u003Cli\u003Einstance.reset\u003Cpre\u003E\u003Ccode class=\"language-js\"\u003E\u003Cpre class=\"hljs\"\u003E\u003Ccode\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 外部API reset\u003C\u002Fspan\u003E\ninstance.reset = \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efunction\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003E\u003C\u002Fspan\u003E) \u003C\u002Fspan\u003E{\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E direction = instance.direction;\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E loops = instance.loop;\n\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F 当前位置,进度 归零\u003C\u002Fspan\u003E\ninstance.currentTime = \u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E;\ninstance.progress = \u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E;\ninstance.paused = \u003Cspan class=\"hljs-literal\"\u003Etrue\u003C\u002Fspan\u003E;\ninstance.began = \u003Cspan class=\"hljs-literal\"\u003Efalse\u003C\u002Fspan\u003E;\ninstance.completed = \u003Cspan class=\"hljs-literal\"\u003Efalse\u003C\u002Fspan\u003E;\ninstance.reversed = direction === \u003Cspan class=\"hljs-string\"\u003E'reverse'\u003C\u002Fspan\u003E;\ninstance.remaining = direction === \u003Cspan class=\"hljs-string\"\u003E'alternate'\u003C\u002Fspan\u003E &amp;&amp; loops === \u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E ? \u003Cspan class=\"hljs-number\"\u003E2\u003C\u002Fspan\u003E : loops;\nsetAnimationsProgress(\u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E);\n\u003Cspan class=\"hljs-keyword\"\u003Efor\u003C\u002Fspan\u003E (\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E i = instance.children.length; i--; ){\n  instance.children[i].reset();\n}\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch2 id=\"zong-jie\"\u003E总结\u003C\u002Fh2\u003E\n\u003Col\u003E\n\u003Cli\u003E使用了\u003Ccode\u003ErequestAnimateFrame\u003C\u002Fcode\u003E和\u003Ccode\u003ECSS\u003C\u002Fcode\u003E动画提高流畅度。\u003C\u002Fli\u003E\n\u003Cli\u003E使用了缓动函数，只需要通过\u003Ccode\u003E当前动画消耗的时间\u003C\u002Fcode\u003E，搭配其他定义的配置项，就可以计算出当前动画具体位置。\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n",toc:[{anchor:"jie-shao",level:a,text:"介绍"},{anchor:"shen-ru-li-jie",level:a,text:"深入理解"},{anchor:"zong-jie",level:a,text:"总结"}],relatedTags:["源码","css","算法","promise"],created_at:"2018-07-20",timeArr:[2018,6,20,17,13,a,0],title:"源码阅读-anime",uuid:"4eefd89367cd780830f848b989d9ff1f2ad1c9e9",summary:"\u003Cp\u003E为了能更好的理解这个库，个人写了一个此库的压缩版，实现了核心的功能(主要也是为了更好理解核心功能)，内容更少方便阅读，\n地址在\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fstonehank\u002Fsimplify-anime\"\u003E这里\u003C\u002Fa\u003E\u003C\u002Fp\u003E",slug:b,sha:"f2de765b0c50caf3a3f5e97ffda9d8b60e27ac0c"}}],fetch:{},mutations:void 0}}(2,"source-code-anime")));