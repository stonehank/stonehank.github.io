(window.webpackJsonp=window.webpackJsonp||[]).push([[371],{1169:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">upper</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">lower</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">colsum</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[][]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> reconstructMatrix = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">upper, lower, colsum</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> n=colsum.length\\n  <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-built_in\\">Array</span>(<span class=\\"hljs-number\\">2</span>).fill().map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span>=&gt;</span><span class=\\"hljs-built_in\\">Array</span>(n).fill(<span class=\\"hljs-number\\">0</span>))\\n  <span class=\\"hljs-keyword\\">let</span> l1=<span class=\\"hljs-number\\">0</span>,l2=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;n;i++){\\n    <span class=\\"hljs-keyword\\">let</span> c=colsum[i]\\n    <span class=\\"hljs-comment\\">// console.log(l1,l2,res)</span>\\n    <span class=\\"hljs-keyword\\">if</span>(l1&gt;upper || l2&gt;lower)<span class=\\"hljs-keyword\\">return</span> []\\n    <span class=\\"hljs-keyword\\">if</span>(c===<span class=\\"hljs-number\\">2</span>){\\n      res[<span class=\\"hljs-number\\">0</span>][i]=<span class=\\"hljs-number\\">1</span>\\n      res[<span class=\\"hljs-number\\">1</span>][i]=<span class=\\"hljs-number\\">1</span>\\n    }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(c===<span class=\\"hljs-number\\">0</span>){\\n      res[<span class=\\"hljs-number\\">0</span>][i]=<span class=\\"hljs-number\\">0</span>\\n      res[<span class=\\"hljs-number\\">1</span>][i]=<span class=\\"hljs-number\\">0</span>\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      <span class=\\"hljs-keyword\\">if</span>(upper-l1&gt;lower-l2){\\n        res[<span class=\\"hljs-number\\">0</span>][i]=<span class=\\"hljs-number\\">1</span>\\n        res[<span class=\\"hljs-number\\">1</span>][i]=<span class=\\"hljs-number\\">0</span>\\n      }<span class=\\"hljs-keyword\\">else</span> {\\n        res[<span class=\\"hljs-number\\">0</span>][i]=<span class=\\"hljs-number\\">0</span>\\n        res[<span class=\\"hljs-number\\">1</span>][i]=<span class=\\"hljs-number\\">1</span>\\n      }\\n    }\\n    l1+=res[<span class=\\"hljs-number\\">0</span>][i]\\n    l2+=res[<span class=\\"hljs-number\\">1</span>][i]\\n  }\\n  <span class=\\"hljs-keyword\\">if</span>(l1!==upper || l2!==lower)<span class=\\"hljs-keyword\\">return</span> []\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"reconstruct-a-2-row-binary-matrix","created_at":"2020-04-24","timeArr":[2020,3,24,23,14,32,0],"hasThinking":false,"content":"<p>给你一个&nbsp;<code>2</code>&nbsp;行 <code>n</code> 列的二进制数组：</p>\\n\\n<ul>\\n\\t<li>矩阵是一个二进制矩阵，这意味着矩阵中的每个元素不是&nbsp;<code>0</code>&nbsp;就是&nbsp;<code>1</code>。</li>\\n\\t<li>第 <code>0</code> 行的元素之和为&nbsp;<code>upper</code>。</li>\\n\\t<li>第 <code>1</code> 行的元素之和为 <code>lower</code>。</li>\\n\\t<li>第 <code>i</code> 列（从 <code>0</code> 开始编号）的元素之和为&nbsp;<code>colsum[i]</code>，<code>colsum</code>&nbsp;是一个长度为&nbsp;<code>n</code>&nbsp;的整数数组。</li>\\n</ul>\\n\\n<p>你需要利用&nbsp;<code>upper</code>，<code>lower</code>&nbsp;和&nbsp;<code>colsum</code>&nbsp;来重构这个矩阵，并以二维整数数组的形式返回它。</p>\\n\\n<p>如果有多个不同的答案，那么任意一个都可以通过本题。</p>\\n\\n<p>如果不存在符合要求的答案，就请返回一个空的二维数组。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>upper = 2, lower = 1, colsum = [1,1,1]\\n<strong>输出：</strong>[[1,1,0],[0,0,1]]\\n<strong>解释：</strong>[[1,0,1],[0,1,0]] 和 [[0,1,1],[1,0,0]] 也是正确答案。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>upper = 2, lower = 3, colsum = [2,2,1,1]\\n<strong>输出：</strong>[]\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>upper = 5, lower = 5, colsum = [2,1,2,0,1,0,1,2,0,1]\\n<strong>输出：</strong>[[1,1,1,0,1,0,0,1,0,0],[1,0,1,0,0,0,1,1,0,1]]\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= colsum.length &lt;= 10^5</code></li>\\n\\t<li><code>0 &lt;= upper, lower &lt;= colsum.length</code></li>\\n\\t<li><code>0 &lt;= colsum[i] &lt;= 2</code></li>\\n</ul>\\n","title":"1253. 重构 2 行二进制矩阵","relatedTags":["贪心","数组","矩阵"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1253","slug":"1253-Reconstruct-a-2-Row-Binary-Matrix"}')}}]);