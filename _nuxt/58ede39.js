(window.webpackJsonp=window.webpackJsonp||[]).push([[1267],{2065:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code>\\n<span class=\\"hljs-keyword\\">var</span> StockSpanner = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{\\n  <span class=\\"hljs-keyword\\">this</span>.stack=[[<span class=\\"hljs-literal\\">Infinity</span>,<span class=\\"hljs-number\\">0</span>]]\\n  <span class=\\"hljs-keyword\\">this</span>.day=<span class=\\"hljs-number\\">1</span>\\n};\\n\\n<span class=\\"hljs-comment\\">/** \\n * @param {number} price\\n * @return {number}\\n */</span>\\nStockSpanner.prototype.next = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">price</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">while</span>(<span class=\\"hljs-keyword\\">this</span>.stack.length&gt;<span class=\\"hljs-number\\">0</span> &amp;&amp; price&gt;=<span class=\\"hljs-keyword\\">this</span>.stack[<span class=\\"hljs-keyword\\">this</span>.stack.length<span class=\\"hljs-number\\">-1</span>][<span class=\\"hljs-number\\">0</span>]){\\n    <span class=\\"hljs-keyword\\">this</span>.stack.pop()\\n  }\\n  res=<span class=\\"hljs-keyword\\">this</span>.day-<span class=\\"hljs-keyword\\">this</span>.stack[<span class=\\"hljs-keyword\\">this</span>.stack.length<span class=\\"hljs-number\\">-1</span>][<span class=\\"hljs-number\\">1</span>]\\n  <span class=\\"hljs-keyword\\">this</span>.stack.push([price,<span class=\\"hljs-keyword\\">this</span>.day++])\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n\\n<span class=\\"hljs-comment\\">/** \\n * Your StockSpanner object will be instantiated and called as such:\\n * var obj = new StockSpanner()\\n * var param_1 = obj.next(price)\\n */</span>\\n</code></pre>\\n"],"querySlug":"online-stock-span","created_at":"2019-04-17","timeArr":[2019,3,17,20,47,8,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>找到每个股票连续递增的天数。</p>\\n<p>定义一个<code>stack</code>，其中<code>stack[i]</code>保存两个元素，<code>stack[i][0]</code>存放股票价格，<code>stack[i][1]</code>存放是哪一天的股票。</p>\\n<p>如果<code>next</code>的时候发现<code>price&gt;=stack[stack.length-1][0]</code>，说明上一次的股票相对于当天的是递增的，执行<code>stack.pop</code>并且继续检查，\\n直到不再是递增的情况。</p>\\n<p>这时候的<code>stack[i][1]</code>，就是上一次连续递增的开始的那一天。</p>\\n","content":"<p>编写一个 <code>StockSpanner</code> 类，它收集某些股票的每日报价，并返回该股票当日价格的跨度。</p>\\n\\n<p>今天股票价格的跨度被定义为股票价格小于或等于今天价格的最大连续日数（从今天开始往回数，包括今天）。</p>\\n\\n<p>例如，如果未来7天股票的价格是 <code>[100, 80, 60, 70, 60, 75, 85]</code>，那么股票跨度将是 <code>[1, 1, 1, 2, 1, 4, 6]</code>。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例：</strong></p>\\n\\n<pre><strong>输入：</strong>[&quot;StockSpanner&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;], [[],[100],[80],[60],[70],[60],[75],[85]]\\n<strong>输出：</strong>[null,1,1,1,2,1,4,6]\\n<strong>解释：</strong>\\n首先，初始化 S = StockSpanner()，然后：\\nS.next(100) 被调用并返回 1，\\nS.next(80) 被调用并返回 1，\\nS.next(60) 被调用并返回 1，\\nS.next(70) 被调用并返回 2，\\nS.next(60) 被调用并返回 1，\\nS.next(75) 被调用并返回 4，\\nS.next(85) 被调用并返回 6。\\n\\n注意 (例如) S.next(75) 返回 4，因为截至今天的最后 4 个价格\\n(包括今天的价格 75) 小于或等于今天的价格。\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ol>\\n\\t<li>调用&nbsp;<code>StockSpanner.next(int price)</code>&nbsp;时，将有&nbsp;<code>1 &lt;= price &lt;= 10^5</code>。</li>\\n\\t<li>每个测试用例最多可以调用&nbsp; <code>10000</code> 次 <code>StockSpanner.next</code>。</li>\\n\\t<li>在所有测试用例中，最多调用&nbsp;<code>150000</code>&nbsp;次&nbsp;<code>StockSpanner.next</code>。</li>\\n\\t<li>此问题的总时间限制减少了 50%。</li>\\n</ol>\\n","title":"901. 股票价格跨度","relatedTags":["栈","设计","数据流","单调栈"],"difficult":"Middle","lang":["javascript"],"uniqueID":"901","slug":"901-Online-Stock-Span"}')}}]);