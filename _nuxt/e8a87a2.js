(window.webpackJsonp=window.webpackJsonp||[]).push([[323],{1121:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">arr</span></span>\\n */</span>\\n<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">SegmentTree</span>(<span class=\\"hljs-params\\">A</span>)</span>{\\n\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">CreateSegTree</span>(<span class=\\"hljs-params\\">count,start,end</span>)</span>{\\n    <span class=\\"hljs-keyword\\">this</span>.count=count\\n    <span class=\\"hljs-keyword\\">this</span>.left=<span class=\\"hljs-literal\\">null</span>\\n    <span class=\\"hljs-keyword\\">this</span>.right=<span class=\\"hljs-literal\\">null</span>\\n    <span class=\\"hljs-keyword\\">this</span>.start=start\\n    <span class=\\"hljs-keyword\\">this</span>.end=end\\n  }\\n\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">create</span>(<span class=\\"hljs-params\\">start,end</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(start===end)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-keyword\\">new</span> CreateSegTree({[A[start]]:<span class=\\"hljs-number\\">1</span>},start,end)\\n    <span class=\\"hljs-keyword\\">let</span> mid=<span class=\\"hljs-built_in\\">Math</span>.floor((start+end)/<span class=\\"hljs-number\\">2</span>)\\n    <span class=\\"hljs-keyword\\">let</span> left=create(start,mid),\\n      right=create(mid+<span class=\\"hljs-number\\">1</span>,end)\\n    <span class=\\"hljs-keyword\\">let</span> count={}\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> k <span class=\\"hljs-keyword\\">in</span> left.count){\\n      <span class=\\"hljs-keyword\\">if</span>(count[k]==<span class=\\"hljs-literal\\">null</span>)count[k]=left.count[k]\\n      <span class=\\"hljs-keyword\\">else</span> count[k]+=left.count[k]\\n    }\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> k <span class=\\"hljs-keyword\\">in</span> right.count){\\n      <span class=\\"hljs-keyword\\">if</span>(count[k]==<span class=\\"hljs-literal\\">null</span>)count[k]=right.count[k]\\n      <span class=\\"hljs-keyword\\">else</span> count[k]+=right.count[k]\\n    }    \\n    <span class=\\"hljs-keyword\\">let</span> root=<span class=\\"hljs-keyword\\">new</span> CreateSegTree(count,start,end)\\n    root.left=left\\n    root.right=right\\n    <span class=\\"hljs-keyword\\">return</span> root\\n  }\\n\\n  <span class=\\"hljs-keyword\\">let</span> s=<span class=\\"hljs-number\\">0</span>,e=A.length<span class=\\"hljs-number\\">-1</span>\\n  <span class=\\"hljs-keyword\\">let</span> root=<span class=\\"hljs-literal\\">null</span>\\n  <span class=\\"hljs-keyword\\">if</span>(e&lt;<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span>\\n  root=create(s,e)\\n\\n  <span class=\\"hljs-comment\\">// // console.log(root)</span>\\n  <span class=\\"hljs-comment\\">// this.update=function (index, value) {</span>\\n  <span class=\\"hljs-comment\\">//   function _update(root,index,value){</span>\\n  <span class=\\"hljs-comment\\">//     if(root.start===root.end &amp;&amp; root.start===index){</span>\\n  <span class=\\"hljs-comment\\">//       return root.sum=value</span>\\n  <span class=\\"hljs-comment\\">//     }</span>\\n  <span class=\\"hljs-comment\\">//     let mid=Math.floor((root.start+root.end)/2)</span>\\n  <span class=\\"hljs-comment\\">//     if(index&lt;=mid)_update(root.left,index,value)</span>\\n  <span class=\\"hljs-comment\\">//     else _update(root.right,index,value)</span>\\n  <span class=\\"hljs-comment\\">//     root.sum=root.left.sum+root.right.sum</span>\\n  <span class=\\"hljs-comment\\">//   }</span>\\n  <span class=\\"hljs-comment\\">//   _update(root,index,value)</span>\\n  <span class=\\"hljs-comment\\">// }</span>\\n\\n  <span class=\\"hljs-keyword\\">this</span>.query=<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">start, end</span>) </span>{\\n    <span class=\\"hljs-comment\\">// console.log(root)</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">_query</span>(<span class=\\"hljs-params\\">root,start,end</span>)</span>{\\n      <span class=\\"hljs-comment\\">// console.log(start,end,root.sum)</span>\\n      <span class=\\"hljs-keyword\\">if</span>(root.start===start &amp;&amp; root.end===end){\\n        <span class=\\"hljs-keyword\\">return</span> root.count\\n      }\\n      <span class=\\"hljs-keyword\\">let</span> mid=<span class=\\"hljs-built_in\\">Math</span>.floor((root.start+root.end)/<span class=\\"hljs-number\\">2</span>)\\n      <span class=\\"hljs-keyword\\">if</span>(end&lt;=mid)<span class=\\"hljs-keyword\\">return</span> _query(root.left,start,end)\\n      <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span> (start&gt;=mid+<span class=\\"hljs-number\\">1</span>) <span class=\\"hljs-keyword\\">return</span> _query(root.right,start,end)\\n      <span class=\\"hljs-keyword\\">else</span>{\\n         <span class=\\"hljs-keyword\\">let</span> l=_query(root.left,start,mid)\\n         <span class=\\"hljs-keyword\\">let</span> r=_query(root.right,mid+<span class=\\"hljs-number\\">1</span>,end)\\n         <span class=\\"hljs-keyword\\">let</span> count={}\\n         <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> k <span class=\\"hljs-keyword\\">in</span> l.count){\\n           <span class=\\"hljs-keyword\\">if</span>(count[k]==<span class=\\"hljs-literal\\">null</span>)count[k]=l.count[k]\\n           <span class=\\"hljs-keyword\\">else</span> count[k]+=l.count[k]\\n         }\\n         <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> k <span class=\\"hljs-keyword\\">in</span> r.count){\\n           <span class=\\"hljs-keyword\\">if</span>(count[k]==<span class=\\"hljs-literal\\">null</span>)count[k]=r.count[k]\\n           <span class=\\"hljs-keyword\\">else</span> count[k]+=r.count[k]\\n         }    \\n         <span class=\\"hljs-keyword\\">return</span> count\\n      }\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> _query(root,start,end)\\n  }\\n}\\n<span class=\\"hljs-keyword\\">var</span> MajorityChecker = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">arr</span>) </span>{\\n    <span class=\\"hljs-keyword\\">this</span>.segmentTree=<span class=\\"hljs-keyword\\">new</span> SegmentTree(arr)\\n};\\n\\n<span class=\\"hljs-comment\\">/** \\n * @param {number} left \\n * @param {number} right \\n * @param {number} threshold\\n * @return {number}\\n */</span>\\nMajorityChecker.prototype.query = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">left, right, threshold</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> count=<span class=\\"hljs-keyword\\">this</span>.segmentTree.query(left,right)\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> k <span class=\\"hljs-keyword\\">in</span> count){\\n    <span class=\\"hljs-keyword\\">if</span>(count[k]&gt;=threshold)<span class=\\"hljs-keyword\\">return</span> +k\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">-1</span>\\n};\\n\\n<span class=\\"hljs-comment\\">/** \\n * Your MajorityChecker object will be instantiated and called as such:\\n * var obj = new MajorityChecker(arr)\\n * var param_1 = obj.query(left,right,threshold)\\n */</span>\\n</code></pre>\\n"],"querySlug":"online-majority-element-in-subarray","created_at":"2019-08-11","timeArr":[2019,7,11,11,33,50,0],"hasThinking":false,"content":"<p>实现一个&nbsp;<code>MajorityChecker</code>&nbsp;的类，它应该具有下述几个 API：</p>\\n\\n<ul>\\n\\t<li><code>MajorityChecker(int[] arr)</code>&nbsp;会用给定的数组 <code>arr</code>&nbsp;来构造一个 <code>MajorityChecker</code> 的实例。</li>\\n\\t<li><code>int query(int left, int right, int threshold)</code>&nbsp;有这么几个参数：\\n\\t<ul>\\n\\t\\t<li><code>0 &lt;= left&nbsp;&lt;= right&nbsp;&lt; arr.length</code> 表示数组&nbsp;<code>arr</code>&nbsp;的子数组的长度。</li>\\n\\t\\t<li><code>2 * threshold &gt; right - left + 1</code>，也就是说阈值 <code>threshold</code>&nbsp;始终比子序列长度的一半还要大。</li>\\n\\t</ul>\\n\\t</li>\\n</ul>\\n\\n<p>每次查询&nbsp;<code>query(...)</code>&nbsp;会返回在&nbsp;<code>arr[left], arr[left+1], ..., arr[right]</code>&nbsp;中至少出现阈值次数&nbsp;<code>threshold</code>&nbsp;的元素，如果不存在这样的元素，就返回&nbsp;<code>-1</code>。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例：</strong></p>\\n\\n<pre>MajorityChecker majorityChecker = new MajorityChecker([1,1,2,2,1,1]);\\nmajorityChecker.query(0,5,4); // 返回 1\\nmajorityChecker.query(0,3,3); // 返回 -1\\nmajorityChecker.query(2,3,2); // 返回 2\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= arr.length &lt;=&nbsp;20000</code></li>\\n\\t<li><code>1 &lt;= arr[i]&nbsp;&lt;=&nbsp;20000</code></li>\\n\\t<li>对于每次查询，<code>0 &lt;= left &lt;= right &lt; len(arr)</code></li>\\n\\t<li>对于每次查询，<code>2 * threshold &gt; right - left + 1</code></li>\\n\\t<li>查询次数最多为 <code>10000</code></li>\\n</ul>\\n","title":"1157. 子数组中占绝大多数的元素","relatedTags":["设计","树状数组","线段树","数组","二分查找"],"difficult":"Hard","lang":["javascript"],"uniqueID":"1157","slug":"1157-Online-Majority-Element-In-Subarray"}')}}]);