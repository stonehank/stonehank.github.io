(window.webpackJsonp=window.webpackJsonp||[]).push([[1112],{1910:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">bottom</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string[]}</span> <span class=\\"hljs-variable\\">allowed</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{boolean}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> pyramidTransition = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">bottom, allowed</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> hash={}\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;allowed.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> bot=allowed[i].substring(<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">2</span>),\\n        top=allowed[i][<span class=\\"hljs-number\\">2</span>]\\n    <span class=\\"hljs-keyword\\">if</span>(hash[bot]==<span class=\\"hljs-literal\\">null</span>)hash[bot]=[top]\\n    <span class=\\"hljs-keyword\\">else</span> hash[bot].push(top)\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> valid=<span class=\\"hljs-literal\\">false</span>\\n  resolve(bottom,<span class=\\"hljs-string\\">\'\'</span>)\\n  <span class=\\"hljs-keyword\\">return</span> valid\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">resolve</span>(<span class=\\"hljs-params\\">str,newStr</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(valid)<span class=\\"hljs-keyword\\">return</span>\\n    <span class=\\"hljs-keyword\\">if</span>(str.length===<span class=\\"hljs-number\\">1</span>){\\n      <span class=\\"hljs-keyword\\">if</span>(newStr.length===<span class=\\"hljs-number\\">1</span>)<span class=\\"hljs-keyword\\">return</span> valid=<span class=\\"hljs-literal\\">true</span>\\n      <span class=\\"hljs-keyword\\">else</span> resolve(newStr,<span class=\\"hljs-string\\">\'\'</span>)\\n    }\\n    <span class=\\"hljs-keyword\\">if</span>(str.length===<span class=\\"hljs-number\\">1</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n    <span class=\\"hljs-keyword\\">let</span> bot=str[<span class=\\"hljs-number\\">0</span>]+str[<span class=\\"hljs-number\\">1</span>]\\n    <span class=\\"hljs-keyword\\">if</span>(hash[bot]==<span class=\\"hljs-literal\\">null</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;hash[bot].length;j++){\\n      resolve(str.substring(<span class=\\"hljs-number\\">1</span>),newStr+hash[bot][j])\\n    }\\n  }\\n\\n};\\n</code></pre>\\n"],"querySlug":"pyramid-transition-matrix","created_at":"2019-04-10","timeArr":[2019,3,10,17,17,55,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>首先用<code>hash</code>保存，底边对应的顶层，例如<code>ABC,ABD,BCF</code>，构建出的<code>hash</code>结构为：</p>\\n<pre class=\\"hljs\\"><code>{\\n  &quot;AB&quot;:[&quot;C&quot;, &quot;D&quot;],\\n  &quot;BC&quot;:[&quot;F&quot;]\\n}\\n</code></pre>\\n<p>然后<code>回溯</code>，维护2个变量，当前的字符串<code>str</code>和下一组(金字塔的上一层)字符串<code>newStr</code>。</p>\\n<p>当<code>str</code>只剩下1个，如果<code>newStr</code>也只剩下1个，返回<code>true</code>，否则就开始<code>回溯</code>新的一层<code>newStr</code>。</p>\\n","content":"<p>现在，我们用一些方块来堆砌一个金字塔。 每个方块用仅包含一个字母的字符串表示。</p>\\n\\n<p>使用三元组表示金字塔的堆砌规则如下：</p>\\n\\n<p>对于三元组 <code>ABC</code> ，<code>C</code> 为顶层方块，方块 <code>A</code> 、<code>B</code> 分别作为方块 <code>C</code> 下一层的的左、右子块。当且仅当 <code>ABC</code> 是被允许的三元组，我们才可以将其堆砌上。</p>\\n\\n<p>初始时，给定金字塔的基层 <code>bottom</code>，用一个字符串表示。一个允许的三元组列表 <code>allowed</code>，每个三元组用一个长度为 3 的字符串表示。</p>\\n\\n<p>如果可以由基层一直堆到塔尖就返回 <code>true</code> ，否则返回 <code>false</code> 。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>bottom = \\"BCD\\", allowed = [\\"BCG\\", \\"CDE\\", \\"GEA\\", \\"FFF\\"]\\n<strong>输出：</strong>true\\n<strong>解释：</strong>\\n可以堆砌成这样的金字塔:\\n    A\\n   / \\\\\\n  G   E\\n / \\\\ / \\\\\\nB   C   D\\n\\n因为符合 BCG、CDE 和 GEA 三种规则。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>bottom = \\"AABA\\", allowed = [\\"AAA\\", \\"AAB\\", \\"ABA\\", \\"ABB\\", \\"BAC\\"]\\n<strong>输出：</strong>false\\n<strong>解释：</strong>\\n无法一直堆到塔尖。\\n注意, 允许存在像 ABC 和 ABD 这样的三元组，其中 C != D。\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>bottom</code> 的长度范围在 <code>[2, 8]</code>。</li>\\n\\t<li><code>allowed</code> 的长度范围在<code>[0, 200]</code>。</li>\\n\\t<li>方块的标记字母范围为<code>{\'A\', \'B\', \'C\', \'D\', \'E\', \'F\', \'G\'}</code>。</li>\\n</ul>\\n","title":"756. 金字塔转换矩阵","relatedTags":["位运算","深度优先搜索","广度优先搜索"],"difficult":"Middle","lang":["javascript"],"uniqueID":"756","slug":"756-Pyramid-Transition-Matrix"}')}}]);