(window.webpackJsonp=window.webpackJsonp||[]).push([[1058],{1856:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">nums</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> findShortestSubArray = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">nums</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> hash={},interval={}\\n  <span class=\\"hljs-keyword\\">let</span> maxfreq=<span class=\\"hljs-number\\">0</span>,maxfreqNum=[]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;nums.length;i++){\\n    <span class=\\"hljs-keyword\\">if</span>(hash[nums[i]]==<span class=\\"hljs-literal\\">null</span>){\\n      hash[nums[i]]=<span class=\\"hljs-number\\">1</span>\\n      interval[nums[i]]=[i,i]\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      hash[nums[i]]++\\n      interval[nums[i]][<span class=\\"hljs-number\\">1</span>]=i\\n    }\\n    <span class=\\"hljs-keyword\\">if</span>(hash[nums[i]]&gt;maxfreq){\\n      maxfreq=hash[nums[i]]\\n      maxfreqNum=[nums[i]]\\n    }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(hash[nums[i]]===maxfreq){\\n      maxfreqNum.push(nums[i])\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> maxGap=nums.length\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;maxfreqNum.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> n=maxfreqNum[i]\\n    <span class=\\"hljs-keyword\\">let</span> int=interval[n]\\n    maxGap=<span class=\\"hljs-built_in\\">Math</span>.min(maxGap,int[<span class=\\"hljs-number\\">1</span>]-int[<span class=\\"hljs-number\\">0</span>]+<span class=\\"hljs-number\\">1</span>)\\n  }\\n  \\n  <span class=\\"hljs-keyword\\">return</span> maxGap\\n};\\n</code></pre>\\n"],"querySlug":"degree-of-an-array","created_at":"2019-03-14","timeArr":[2019,2,14,20,36,53,0],"hasThinking":false,"content":"<p>给定一个非空且只包含非负数的整数数组 <code>nums</code>，数组的度的定义是指数组里任一元素出现频数的最大值。</p>\\n\\n<p>你的任务是在 <code>nums</code> 中找到与 <code>nums</code> 拥有相同大小的度的最短连续子数组，返回其长度。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>[1, 2, 2, 3, 1]\\n<strong>输出：</strong>2\\n<strong>解释：</strong>\\n输入数组的度是2，因为元素1和2的出现频数最大，均为2.\\n连续子数组里面拥有相同度的有如下所示:\\n[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]\\n最短连续子数组[2, 2]的长度为2，所以返回2.\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>[1,2,2,3,1,4,2]\\n<strong>输出：</strong>6\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>nums.length</code> 在1到 50,000 区间范围内。</li>\\n\\t<li><code>nums[i]</code> 是一个在 0 到 49,999 范围内的整数。</li>\\n</ul>\\n","title":"697. 数组的度","relatedTags":["数组","哈希表"],"difficult":"Easy","lang":["javascript"],"uniqueID":"697","slug":"697-Degree-of-an-Array"}')}}]);