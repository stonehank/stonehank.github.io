(window.webpackJsonp=window.webpackJsonp||[]).push([[1354],{2152:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">grid</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> uniquePathsIII = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">grid</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> passNum=<span class=\\"hljs-number\\">0</span>,used=[],startX,startY\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;grid.length;i++){\\n    used[i]=[]\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;grid[i].length;j++){\\n      used[i][j]=<span class=\\"hljs-literal\\">false</span>\\n      <span class=\\"hljs-keyword\\">if</span>(grid[i][j]===<span class=\\"hljs-number\\">0</span>){\\n        passNum++\\n      }\\n      <span class=\\"hljs-keyword\\">if</span>(grid[i][j]===<span class=\\"hljs-number\\">1</span>){\\n        startX=i;startY=j\\n      }\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> result=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">let</span> moves=[[<span class=\\"hljs-number\\">1</span>,<span class=\\"hljs-number\\">0</span>],[<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">0</span>],[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">-1</span>],[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">1</span>]]\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">backtrack</span>(<span class=\\"hljs-params\\">x,y,remain</span>)</span>{\\n    <span class=\\"hljs-comment\\">// console.log(grid[x][y],remain)</span>\\n    <span class=\\"hljs-keyword\\">if</span>(grid[x][y]===<span class=\\"hljs-number\\">2</span> &amp;&amp; remain===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span> result++\\n    <span class=\\"hljs-keyword\\">if</span>(grid[x][y]===<span class=\\"hljs-number\\">2</span>)<span class=\\"hljs-keyword\\">return</span>\\n    <span class=\\"hljs-keyword\\">if</span>(remain===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> [dX,dY] <span class=\\"hljs-keyword\\">of</span> moves){\\n      <span class=\\"hljs-keyword\\">let</span> newX=x+dX,newY=y+dY\\n      <span class=\\"hljs-keyword\\">if</span>(newX&lt;<span class=\\"hljs-number\\">0</span> || newX&gt;=grid.length || newY&lt;<span class=\\"hljs-number\\">0</span> || newY &gt;=grid[<span class=\\"hljs-number\\">0</span>].length)<span class=\\"hljs-keyword\\">continue</span>\\n      <span class=\\"hljs-keyword\\">if</span>(grid[newX][newY]===<span class=\\"hljs-number\\">-1</span>)<span class=\\"hljs-keyword\\">continue</span>\\n      <span class=\\"hljs-keyword\\">if</span>(used[newX][newY])<span class=\\"hljs-keyword\\">continue</span>\\n      used[newX][newY]=<span class=\\"hljs-literal\\">true</span>\\n      backtrack(newX,newY,remain<span class=\\"hljs-number\\">-1</span>)\\n      used[newX][newY]=<span class=\\"hljs-literal\\">false</span>\\n    }\\n  }\\n  used[startX][startY]=<span class=\\"hljs-literal\\">true</span>\\n  backtrack(startX,startY,passNum+<span class=\\"hljs-number\\">1</span>)\\n  <span class=\\"hljs-keyword\\">return</span> result\\n};\\n</code></pre>\\n"],"querySlug":"unique-paths-iii","created_at":"2019-01-20","timeArr":[2019,0,20,11,31,31,0],"hasThinking":false,"content":"<p>在二维网格 <code>grid</code> 上，有 4 种类型的方格：</p>\\n\\n<ul>\\n\\t<li><code>1</code> 表示起始方格。且只有一个起始方格。</li>\\n\\t<li><code>2</code> 表示结束方格，且只有一个结束方格。</li>\\n\\t<li><code>0</code> 表示我们可以走过的空方格。</li>\\n\\t<li><code>-1</code> 表示我们无法跨越的障碍。</li>\\n</ul>\\n\\n<p>返回在四个方向（上、下、左、右）上行走时，从起始方格到结束方格的不同路径的数目<strong>。</strong></p>\\n\\n<p><strong>每一个无障碍方格都要通过一次，但是一条路径中不能重复通过同一个方格</strong>。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>[[1,0,0,0],[0,0,0,0],[0,0,2,-1]]\\n<strong>输出：</strong>2\\n<strong>解释：</strong>我们有以下两条路径：\\n1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)\\n2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>[[1,0,0,0],[0,0,0,0],[0,0,0,2]]\\n<strong>输出：</strong>4\\n<strong>解释：</strong>我们有以下四条路径： \\n1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3)\\n2. (0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3)\\n3. (0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3)\\n4. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3)</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>[[0,1],[2,0]]\\n<strong>输出：</strong>0\\n<strong>解释：</strong>\\n没有一条路能完全穿过每一个空的方格一次。\\n请注意，起始和结束方格可以位于网格中的任意位置。\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= grid.length * grid[0].length &lt;= 20</code></li>\\n</ul>\\n","title":"980. 不同路径 III","relatedTags":["位运算","数组","回溯","矩阵"],"difficult":"Hard","lang":["javascript"],"uniqueID":"980","slug":"980-Unique-Paths-III"}')}}]);