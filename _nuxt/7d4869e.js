(window.webpackJsonp=window.webpackJsonp||[]).push([[347],{1145:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Solution</span><span class=\\"hljs-params\\">(object)</span>:</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">minimumTotal</span><span class=\\"hljs-params\\">(self, triangle)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type triangle: List[List[int]]\\n        :rtype: int\\n        \\"\\"\\"</span>\\n        <span class=\\"hljs-comment\\"># print len(triangle[i])</span>\\n        <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(<span class=\\"hljs-number\\">1</span>,len(triangle)):\\n          <span class=\\"hljs-keyword\\">for</span> j <span class=\\"hljs-keyword\\">in</span> range(len(triangle[i])):\\n            <span class=\\"hljs-keyword\\">if</span> <span class=\\"hljs-number\\">0</span>&lt;j&lt;len(triangle[i<span class=\\"hljs-number\\">-1</span>]):\\n              triangle[i][j]+=min(triangle[i<span class=\\"hljs-number\\">-1</span>][j],triangle[i<span class=\\"hljs-number\\">-1</span>][j<span class=\\"hljs-number\\">-1</span>])\\n            <span class=\\"hljs-keyword\\">elif</span> j&lt;len(triangle[i<span class=\\"hljs-number\\">-1</span>]):\\n              triangle[i][j]+=triangle[i<span class=\\"hljs-number\\">-1</span>][j]\\n            <span class=\\"hljs-keyword\\">elif</span> j&gt;<span class=\\"hljs-number\\">0</span>:\\n              triangle[i][j]+=triangle[i<span class=\\"hljs-number\\">-1</span>][j<span class=\\"hljs-number\\">-1</span>]\\n        <span class=\\"hljs-keyword\\">return</span> min(triangle[<span class=\\"hljs-number\\">-1</span>])\\n</code></pre>\\n"],"querySlug":"triangle","created_at":"2019-02-28","timeArr":[2019,1,28,22,10,0,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<ul>\\n<li>修改原数组：</li>\\n</ul>\\n<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">triangle</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> minimumTotal = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">triangle</span>) </span>{\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">1</span>;i&lt;triangle.length;i++){\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;triangle[i].length;j++){\\n      <span class=\\"hljs-keyword\\">let</span> left=<span class=\\"hljs-literal\\">Infinity</span>,right=<span class=\\"hljs-literal\\">Infinity</span>\\n      <span class=\\"hljs-keyword\\">if</span>(j&gt;<span class=\\"hljs-number\\">0</span>)left=triangle[i<span class=\\"hljs-number\\">-1</span>][j<span class=\\"hljs-number\\">-1</span>]\\n      <span class=\\"hljs-keyword\\">if</span>(j&lt;triangle[i<span class=\\"hljs-number\\">-1</span>].length)right=triangle[i<span class=\\"hljs-number\\">-1</span>][j]\\n      triangle[i][j]+=<span class=\\"hljs-built_in\\">Math</span>.min(left,right)\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-built_in\\">Math</span>.min.apply(<span class=\\"hljs-built_in\\">Math</span>,triangle[triangle.length<span class=\\"hljs-number\\">-1</span>])\\n};\\n</code></pre>\\n<ul>\\n<li>不修改原数组，空间<code>O(n)</code></li>\\n</ul>\\n","content":"<p>给定一个三角形 <code>triangle</code> ，找出自顶向下的最小路径和。</p>\\n\\n<p>每一步只能移动到下一行中相邻的结点上。<strong>相邻的结点 </strong>在这里指的是 <strong>下标</strong> 与 <strong>上一层结点下标</strong> 相同或者等于 <strong>上一层结点下标 + 1</strong> 的两个结点。也就是说，如果正位于当前行的下标 <code>i</code> ，那么下一步可以移动到下一行的下标 <code>i</code> 或 <code>i + 1</code> 。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]\\n<strong>输出：</strong>11\\n<strong>解释：</strong>如下面简图所示：\\n   <strong>2</strong>\\n  <strong>3</strong> 4\\n 6 <strong>5</strong> 7\\n4 <strong>1</strong> 8 3\\n自顶向下的最小路径和为 11（即，2 + 3 + 5 + 1 = 11）。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>triangle = [[-10]]\\n<strong>输出：</strong>-10\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= triangle.length <= 200</code></li>\\n\\t<li><code>triangle[0].length == 1</code></li>\\n\\t<li><code>triangle[i].length == triangle[i - 1].length + 1</code></li>\\n\\t<li><code>-10<sup>4</sup> <= triangle[i][j] <= 10<sup>4</sup></code></li>\\n</ul>\\n\\n<p> </p>\\n\\n<p><strong>进阶：</strong></p>\\n\\n<ul>\\n\\t<li>你可以只使用 <code>O(n)</code> 的额外空间（<code>n</code> 为三角形的总行数）来解决这个问题吗？</li>\\n</ul>\\n","title":"120. 三角形最小路径和","relatedTags":["数组","动态规划"],"difficult":"Middle","lang":["python"],"uniqueID":"120","slug":"120-Triangle"}')}}]);