(window.webpackJsonp=window.webpackJsonp||[]).push([[1297],{2095:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string[]}</span> <span class=\\"hljs-variable\\">emails</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> numUniqueEmails = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">emails</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-number\\">0</span>,hash={}\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;emails.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> arr=emails[i].split(<span class=\\"hljs-string\\">\'@\'</span>)\\n    <span class=\\"hljs-keyword\\">let</span> realS=<span class=\\"hljs-string\\">\'\'</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;arr[<span class=\\"hljs-number\\">0</span>].length;j++){\\n      <span class=\\"hljs-keyword\\">if</span>(arr[<span class=\\"hljs-number\\">0</span>][j]===<span class=\\"hljs-string\\">\'.\'</span>)<span class=\\"hljs-keyword\\">continue</span>\\n      <span class=\\"hljs-keyword\\">if</span>(arr[<span class=\\"hljs-number\\">0</span>][j]===<span class=\\"hljs-string\\">\'+\'</span>)<span class=\\"hljs-keyword\\">break</span>\\n      realS+=arr[<span class=\\"hljs-number\\">0</span>][j]\\n    }\\n    realS+=arr[<span class=\\"hljs-number\\">1</span>]\\n    <span class=\\"hljs-keyword\\">if</span>(hash[realS]==<span class=\\"hljs-literal\\">null</span>){\\n      hash[realS]=<span class=\\"hljs-literal\\">true</span>\\n      res++\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"unique-email-addresses","created_at":"2019-03-29","timeArr":[2019,2,29,0,9,29,0],"hasThinking":false,"content":"<p>每封电子邮件都由一个本地名称和一个域名组成，以 @ 符号分隔。</p>\\n\\n<p>例如，在&nbsp;<code>alice@leetcode.com</code>中，&nbsp;<code>alice</code>&nbsp;是本地名称，而&nbsp;<code>leetcode.com</code>&nbsp;是域名。</p>\\n\\n<p>除了小写字母，这些电子邮件还可能包含 <code>&#39;.&#39;</code> 或 <code>&#39;+&#39;</code>。</p>\\n\\n<p>如果在电子邮件地址的<strong>本地名称</strong>部分中的某些字符之间添加句点（<code>&#39;.&#39;</code>），则发往那里的邮件将会转发到本地名称中没有点的同一地址。例如，<code>&quot;alice.z@leetcode.com&rdquo;</code> 和 <code>&ldquo;alicez@leetcode.com&rdquo;</code>&nbsp;会转发到同一电子邮件地址。 （请注意，此规则不适用于域名。）</p>\\n\\n<p>如果在<strong>本地名称</strong>中添加加号（<code>&#39;+&#39;</code>），则会忽略第一个加号后面的所有内容。这允许过滤某些电子邮件，例如 <code>m.y+name@email.com</code> 将转发到 <code>my@email.com</code>。 （同样，此规则不适用于域名。）</p>\\n\\n<p>可以同时使用这两个规则。</p>\\n\\n<p>给定电子邮件列表 <code>emails</code>，我们会向列表中的每个地址发送一封电子邮件。实际收到邮件的不同地址有多少？</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例：</strong></p>\\n\\n<pre><strong>输入：</strong>[&quot;test.email+alex@leetcode.com&quot;,&quot;test.e.mail+bob.cathy@leetcode.com&quot;,&quot;testemail+david@lee.tcode.com&quot;]\\n<strong>输出：</strong>2\\n<strong>解释：</strong>实际收到邮件的是 &quot;testemail@leetcode.com&quot; 和 &quot;testemail@lee.tcode.com&quot;。\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= emails[i].length&nbsp;&lt;= 100</code></li>\\n\\t<li><code>1 &lt;= emails.length &lt;= 100</code></li>\\n\\t<li>每封 <code>emails[i]</code> 都包含有且仅有一个 <code>&#39;@&#39;</code> 字符。</li>\\n</ul>\\n","title":"929. 独特的电子邮件地址","relatedTags":["数组","哈希表","字符串"],"difficult":"Easy","lang":["javascript"],"uniqueID":"929","slug":"929-Unique-Email-Addresses"}')}}]);