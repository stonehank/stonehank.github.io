(window.webpackJsonp=window.webpackJsonp||[]).push([[571],{1369:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">grid</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> maxProductPath = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">grid</span>) </span>{\\n    <span class=\\"hljs-keyword\\">let</span> MOD=<span class=\\"hljs-number\\">1e9</span>+<span class=\\"hljs-number\\">7</span>\\n    <span class=\\"hljs-keyword\\">let</span> m=grid.length\\n    <span class=\\"hljs-keyword\\">let</span> n=grid[<span class=\\"hljs-number\\">0</span>].length\\n    <span class=\\"hljs-keyword\\">let</span> arr=<span class=\\"hljs-built_in\\">Array</span>(m).fill().map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span>=&gt;</span><span class=\\"hljs-built_in\\">Array</span>(n).fill().map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span>=&gt;</span><span class=\\"hljs-built_in\\">Array</span>(<span class=\\"hljs-number\\">2</span>).fill(<span class=\\"hljs-number\\">0</span>)))\\n    <span class=\\"hljs-keyword\\">if</span>(grid[<span class=\\"hljs-number\\">0</span>][<span class=\\"hljs-number\\">0</span>]&gt;<span class=\\"hljs-number\\">0</span>){\\n        arr[<span class=\\"hljs-number\\">0</span>][<span class=\\"hljs-number\\">0</span>]=[grid[<span class=\\"hljs-number\\">0</span>][<span class=\\"hljs-number\\">0</span>],<span class=\\"hljs-number\\">0</span>]\\n    }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(grid[<span class=\\"hljs-number\\">0</span>][<span class=\\"hljs-number\\">0</span>]&lt;<span class=\\"hljs-number\\">0</span>){\\n        arr[<span class=\\"hljs-number\\">0</span>][<span class=\\"hljs-number\\">0</span>]=[<span class=\\"hljs-number\\">0</span>,grid[<span class=\\"hljs-number\\">0</span>][<span class=\\"hljs-number\\">0</span>]]\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n        <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>\\n    }\\n    <span class=\\"hljs-keyword\\">let</span> hasZero=<span class=\\"hljs-literal\\">false</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;m;i++){\\n        <span class=\\"hljs-keyword\\">if</span>(hasZero)<span class=\\"hljs-keyword\\">break</span>\\n        <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;n;j++){\\n            <span class=\\"hljs-keyword\\">if</span>(grid[i][j]===<span class=\\"hljs-number\\">0</span>){\\n                hasZero=<span class=\\"hljs-literal\\">true</span>\\n                <span class=\\"hljs-keyword\\">break</span>\\n            }\\n        }\\n    }\\n\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">1</span>;i&lt;m;i++){\\n        <span class=\\"hljs-keyword\\">let</span> newV1=arr[i<span class=\\"hljs-number\\">-1</span>][<span class=\\"hljs-number\\">0</span>][<span class=\\"hljs-number\\">0</span>]*grid[i][<span class=\\"hljs-number\\">0</span>]\\n        <span class=\\"hljs-keyword\\">let</span> newV2=arr[i<span class=\\"hljs-number\\">-1</span>][<span class=\\"hljs-number\\">0</span>][<span class=\\"hljs-number\\">1</span>]*grid[i][<span class=\\"hljs-number\\">0</span>]\\n        arr[i][<span class=\\"hljs-number\\">0</span>][<span class=\\"hljs-number\\">0</span>]=<span class=\\"hljs-built_in\\">Math</span>.max(arr[i][<span class=\\"hljs-number\\">0</span>][<span class=\\"hljs-number\\">0</span>],newV1,newV2) \\n        arr[i][<span class=\\"hljs-number\\">0</span>][<span class=\\"hljs-number\\">1</span>]=<span class=\\"hljs-built_in\\">Math</span>.min(arr[i][<span class=\\"hljs-number\\">0</span>][<span class=\\"hljs-number\\">1</span>],newV1,newV2) \\n    }\\n\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">1</span>;i&lt;n;i++){\\n        <span class=\\"hljs-keyword\\">let</span> newV1=arr[<span class=\\"hljs-number\\">0</span>][i<span class=\\"hljs-number\\">-1</span>][<span class=\\"hljs-number\\">0</span>]*grid[<span class=\\"hljs-number\\">0</span>][i]\\n        <span class=\\"hljs-keyword\\">let</span> newV2=arr[<span class=\\"hljs-number\\">0</span>][i<span class=\\"hljs-number\\">-1</span>][<span class=\\"hljs-number\\">1</span>]*grid[<span class=\\"hljs-number\\">0</span>][i]\\n        arr[<span class=\\"hljs-number\\">0</span>][i][<span class=\\"hljs-number\\">0</span>]=<span class=\\"hljs-built_in\\">Math</span>.max(arr[<span class=\\"hljs-number\\">0</span>][i][<span class=\\"hljs-number\\">0</span>],newV1,newV2)\\n        arr[<span class=\\"hljs-number\\">0</span>][i][<span class=\\"hljs-number\\">1</span>]=<span class=\\"hljs-built_in\\">Math</span>.min(arr[<span class=\\"hljs-number\\">0</span>][i][<span class=\\"hljs-number\\">1</span>],newV1,newV2)\\n\\n    }\\n \\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">1</span>;i&lt;m;i++){\\n        <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">1</span>;j&lt;n;j++){\\n            <span class=\\"hljs-keyword\\">let</span> newVLeft1=grid[i][j] * arr[i][j<span class=\\"hljs-number\\">-1</span>][<span class=\\"hljs-number\\">0</span>] \\n            <span class=\\"hljs-keyword\\">let</span> newVLeft2=grid[i][j] * arr[i][j<span class=\\"hljs-number\\">-1</span>][<span class=\\"hljs-number\\">1</span>] \\n            <span class=\\"hljs-keyword\\">let</span> newVTop1=grid[i][j] * arr[i<span class=\\"hljs-number\\">-1</span>][j][<span class=\\"hljs-number\\">0</span>] \\n            <span class=\\"hljs-keyword\\">let</span> newVTop2=grid[i][j] * arr[i<span class=\\"hljs-number\\">-1</span>][j][<span class=\\"hljs-number\\">1</span>] \\n            arr[i][j][<span class=\\"hljs-number\\">0</span>]=<span class=\\"hljs-built_in\\">Math</span>.max(arr[i][j][<span class=\\"hljs-number\\">0</span>],newVLeft1,newVLeft2,newVTop1,newVTop2)\\n            arr[i][j][<span class=\\"hljs-number\\">1</span>]=<span class=\\"hljs-built_in\\">Math</span>.min(arr[i][j][<span class=\\"hljs-number\\">1</span>],newVLeft1,newVLeft2,newVTop1,newVTop2)\\n        }\\n    }\\n    <span class=\\"hljs-keyword\\">let</span> res=arr[m<span class=\\"hljs-number\\">-1</span>][n<span class=\\"hljs-number\\">-1</span>][<span class=\\"hljs-number\\">0</span>] % MOD\\n    <span class=\\"hljs-keyword\\">return</span> res&gt;<span class=\\"hljs-number\\">0</span> ? res : res===<span class=\\"hljs-number\\">0</span> &amp;&amp; hasZero ? <span class=\\"hljs-number\\">0</span> : <span class=\\"hljs-number\\">-1</span>\\n};\\n</code></pre>\\n"],"querySlug":"maximum-non-negative-product-in-a-matrix","created_at":"2020-09-26","timeArr":[2020,8,26,19,8,43,0],"hasThinking":false,"content":"<p>给你一个大小为 <code>rows x cols</code> 的矩阵 <code>grid</code> 。最初，你位于左上角 <code>(0, 0)</code> ，每一步，你可以在矩阵中 <strong>向右</strong> 或 <strong>向下</strong> 移动。</p>\\n\\n<p>在从左上角 <code>(0, 0)</code> 开始到右下角 <code>(rows - 1, cols - 1)</code> 结束的所有路径中，找出具有 <strong>最大非负积</strong> 的路径。路径的积是沿路径访问的单元格中所有整数的乘积。</p>\\n\\n<p>返回 <strong>最大非负积 </strong>对<strong><em> </em><code>10<sup>9</sup>&nbsp;+ 7</code></strong> <strong>取余</strong> 的结果。如果最大积为负数，则返回<em> </em><code>-1</code> 。</p>\\n\\n<p><strong>注意，</strong>取余是在得到最大积之后执行的。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>grid = [[-1,-2,-3],\\n&nbsp;            [-2,-3,-3],\\n&nbsp;            [-3,-3,-2]]\\n<strong>输出：</strong>-1\\n<strong>解释：</strong>从 (0, 0) 到 (2, 2) 的路径中无法得到非负积，所以返回 -1\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>grid = [[<strong>1</strong>,-2,1],\\n&nbsp;            [<strong>1</strong>,<strong>-2</strong>,1],\\n&nbsp;            [3,<strong>-4</strong>,<strong>1</strong>]]\\n<strong>输出：</strong>8\\n<strong>解释：</strong>最大非负积对应的路径已经用粗体标出 (1 * 1 * -2 * -4 * 1 = 8)\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>grid = [[<strong>1</strong>, 3],\\n&nbsp;            [<strong>0</strong>,<strong>-4</strong>]]\\n<strong>输出：</strong>0\\n<strong>解释：</strong>最大非负积对应的路径已经用粗体标出 (1 * 0 * -4 = 0)\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre><strong>输入：</strong>grid = [[ <strong>1</strong>, 4,4,0],\\n&nbsp;            [<strong>-2</strong>, 0,0,1],\\n&nbsp;            [ <strong>1</strong>,<strong>-1</strong>,<strong>1</strong>,<strong>1</strong>]]\\n<strong>输出：</strong>2\\n<strong>解释：</strong>最大非负积对应的路径已经用粗体标出 (1 * -2 * 1 * -1 * 1 * 1 = 2)\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= rows, cols &lt;= 15</code></li>\\n\\t<li><code>-4 &lt;= grid[i][j] &lt;= 4</code></li>\\n</ul>\\n","title":"1594. 矩阵的最大非负积","relatedTags":["数组","动态规划","矩阵"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1594","slug":"1594-Maximum-Non-Negative-Product-in-a-Matrix"}')}}]);