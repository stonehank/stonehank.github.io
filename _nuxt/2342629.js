(window.webpackJsonp=window.webpackJsonp||[]).push([[960],{1758:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{TreeNode}</span> <span class=\\"hljs-variable\\">root</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> findTilt = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">root</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> sum=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">dfs</span>(<span class=\\"hljs-params\\">root</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(!root)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">let</span> leftSum=dfs(root.left),\\n        rightSum=dfs(root.right)\\n    sum+=<span class=\\"hljs-built_in\\">Math</span>.abs(leftSum-rightSum)\\n    <span class=\\"hljs-keyword\\">return</span> leftSum+rightSum+root.val\\n  }\\n  dfs(root)\\n  <span class=\\"hljs-keyword\\">return</span> sum\\n};\\n</code></pre>\\n"],"querySlug":"binary-tree-tilt","created_at":"2019-03-19","timeArr":[2019,2,19,11,35,19,0],"hasThinking":false,"content":"<p>给定一个二叉树，计算 <strong>整个树 </strong>的坡度 。</p>\\n\\n<p>一个树的<strong> 节点的坡度 </strong>定义即为，该节点左子树的节点之和和右子树节点之和的 <strong>差的绝对值 </strong>。如果没有左子树的话，左子树的节点之和为 0 ；没有右子树的话也是一样。空结点的坡度是 0 。</p>\\n\\n<p><strong>整个树</strong> 的坡度就是其所有节点的坡度之和。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2020/10/20/tilt1.jpg\\" style=\\"width: 712px; height: 182px;\\" />\\n<pre>\\n<strong>输入：</strong>root = [1,2,3]\\n<strong>输出：</strong>1\\n<strong>解释：</strong>\\n节点 2 的坡度：|0-0| = 0（没有子节点）\\n节点 3 的坡度：|0-0| = 0（没有子节点）\\n节点 1 的坡度：|2-3| = 1（左子树就是左子节点，所以和是 2 ；右子树就是右子节点，所以和是 3 ）\\n坡度总和：0 + 0 + 1 = 1\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2020/10/20/tilt2.jpg\\" style=\\"width: 800px; height: 203px;\\" />\\n<pre>\\n<strong>输入：</strong>root = [4,2,9,3,5,null,7]\\n<strong>输出：</strong>15\\n<strong>解释：</strong>\\n节点 3 的坡度：|0-0| = 0（没有子节点）\\n节点 5 的坡度：|0-0| = 0（没有子节点）\\n节点 7 的坡度：|0-0| = 0（没有子节点）\\n节点 2 的坡度：|3-5| = 2（左子树就是左子节点，所以和是 3 ；右子树就是右子节点，所以和是 5 ）\\n节点 9 的坡度：|0-7| = 7（没有左子树，所以和是 0 ；右子树正好是右子节点，所以和是 7 ）\\n节点 4 的坡度：|(3+5+2)-(9+7)| = |10-16| = 6（左子树值为 3、5 和 2 ，和是 10 ；右子树值为 9 和 7 ，和是 16 ）\\n坡度总和：0 + 0 + 0 + 2 + 7 + 6 = 15\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2020/10/20/tilt3.jpg\\" style=\\"width: 800px; height: 293px;\\" />\\n<pre>\\n<strong>输入：</strong>root = [21,7,14,1,1,2,2,3,3]\\n<strong>输出：</strong>9\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li>树中节点数目的范围在 <code>[0, 10<sup>4</sup>]</code> 内</li>\\n\\t<li><code>-1000 <= Node.val <= 1000</code></li>\\n</ul>\\n","title":"563. 二叉树的坡度","relatedTags":["树","深度优先搜索","二叉树"],"difficult":"Easy","lang":["javascript"],"uniqueID":"563","slug":"563-Binary-Tree-Tilt"}')}}]);