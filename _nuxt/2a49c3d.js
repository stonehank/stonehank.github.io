(window.webpackJsonp=window.webpackJsonp||[]).push([[773],{1571:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">envelopes</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> maxEnvelopes = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">envelopes</span>) </span>{\\n  envelopes.sort(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">a,b</span>)=&gt;</span>a[<span class=\\"hljs-number\\">0</span>]===b[<span class=\\"hljs-number\\">0</span>]?b[<span class=\\"hljs-number\\">1</span>]-a[<span class=\\"hljs-number\\">1</span>]:a[<span class=\\"hljs-number\\">0</span>]-b[<span class=\\"hljs-number\\">0</span>])\\n  <span class=\\"hljs-keyword\\">let</span> dp=<span class=\\"hljs-built_in\\">Array</span>(envelopes.length).fill(<span class=\\"hljs-number\\">1</span>)\\n  <span class=\\"hljs-keyword\\">let</span> maxLen=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=envelopes.length<span class=\\"hljs-number\\">-1</span>;i&gt;=<span class=\\"hljs-number\\">0</span>;i--){\\n    <span class=\\"hljs-keyword\\">let</span> s=envelopes[i]\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=i+<span class=\\"hljs-number\\">1</span>;j&lt;envelopes.length;j++){\\n      <span class=\\"hljs-keyword\\">let</span> e=envelopes[j]\\n      <span class=\\"hljs-keyword\\">if</span>(s[<span class=\\"hljs-number\\">0</span>]&lt;e[<span class=\\"hljs-number\\">0</span>] &amp;&amp; s[<span class=\\"hljs-number\\">1</span>]&lt;e[<span class=\\"hljs-number\\">1</span>]){\\n        dp[i]=<span class=\\"hljs-built_in\\">Math</span>.max(dp[i],dp[j]+<span class=\\"hljs-number\\">1</span>)\\n      }\\n    }\\n    maxLen=<span class=\\"hljs-built_in\\">Math</span>.max(maxLen,dp[i])\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> maxLen\\n  \\n};\\n</code></pre>\\n","<pre class=\\"hljs\\"><code><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Solution</span><span class=\\"hljs-params\\">(object)</span>:</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">maxEnvelopes</span><span class=\\"hljs-params\\">(self, envelopes)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type envelopes: List[List[int]]\\n        :rtype: int\\n        \\"\\"\\"</span>\\n        envelopes.sort(key=<span class=\\"hljs-keyword\\">lambda</span> x:(x[<span class=\\"hljs-number\\">0</span>],-x[<span class=\\"hljs-number\\">1</span>]))\\n        result=[]\\n        <span class=\\"hljs-keyword\\">for</span> n <span class=\\"hljs-keyword\\">in</span> envelopes:\\n          <span class=\\"hljs-keyword\\">if</span> <span class=\\"hljs-keyword\\">not</span> result <span class=\\"hljs-keyword\\">or</span> result[<span class=\\"hljs-number\\">-1</span>][<span class=\\"hljs-number\\">1</span>]&lt;n[<span class=\\"hljs-number\\">1</span>]:\\n            result.append(n)\\n          <span class=\\"hljs-keyword\\">else</span>:\\n            lo,hi=<span class=\\"hljs-number\\">0</span>,len(result)<span class=\\"hljs-number\\">-1</span>\\n            <span class=\\"hljs-keyword\\">while</span> lo&lt;hi:\\n              mid=(lo+hi)//<span class=\\"hljs-number\\">2</span>\\n              <span class=\\"hljs-keyword\\">if</span> result[mid][<span class=\\"hljs-number\\">1</span>]&lt;n[<span class=\\"hljs-number\\">1</span>]:\\n                lo=mid+<span class=\\"hljs-number\\">1</span>\\n              <span class=\\"hljs-keyword\\">else</span>:\\n                hi=mid\\n            result[lo]=n\\n        <span class=\\"hljs-keyword\\">return</span> len(result)\\n        \\n</code></pre>\\n"],"querySlug":"russian-doll-envelopes","hasThinking":false,"content":"<p>给你一个二维整数数组 <code>envelopes</code> ，其中 <code>envelopes[i] = [w<sub>i</sub>, h<sub>i</sub>]</code> ，表示第 <code>i</code> 个信封的宽度和高度。</p>\\n\\n<p>当另一个信封的宽度和高度都比这个信封大的时候，这个信封就可以放进另一个信封里，如同俄罗斯套娃一样。</p>\\n\\n<p>请计算 <strong>最多能有多少个</strong> 信封能组成一组“俄罗斯套娃”信封（即可以把一个信封放到另一个信封里面）。</p>\\n\\n<p><strong>注意</strong>：不允许旋转信封。</p>\\n \\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>envelopes = [[5,4],[6,4],[6,7],[2,3]]\\n<strong>输出：</strong>3\\n<strong>解释：</strong>最多信封的个数为 <code>3, 组合为: </code>[2,3] => [5,4] => [6,7]。</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>envelopes = [[1,1],[1,1],[1,1]]\\n<strong>输出：</strong>1\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= envelopes.length <= 5000</code></li>\\n\\t<li><code>envelopes[i].length == 2</code></li>\\n\\t<li><code>1 <= w<sub>i</sub>, h<sub>i</sub> <= 10<sup>4</sup></code></li>\\n</ul>\\n","title":"354. 俄罗斯套娃信封问题","relatedTags":["数组","二分查找","动态规划","排序"],"difficult":"Hard","lang":["javascript","python"],"uniqueID":"354","slug":"354-Russian-Doll-Envelopes"}')}}]);