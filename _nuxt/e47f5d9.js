(window.webpackJsonp=window.webpackJsonp||[]).push([[544],{1342:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for a binary tree node.\\n * function TreeNode(val, left, right) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.left = (left===undefined ? null : left)\\n *     this.right = (right===undefined ? null : right)\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{TreeNode}</span> <span class=\\"hljs-variable\\">root</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">distance</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> countPairs = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">root, distance</span>) </span>{\\n    <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-number\\">0</span>\\n    dfs(root)\\n    <span class=\\"hljs-keyword\\">return</span> res\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">dfs</span>(<span class=\\"hljs-params\\">root</span>)</span>{\\n        <span class=\\"hljs-keyword\\">if</span>(!root)<span class=\\"hljs-keyword\\">return</span> []\\n        <span class=\\"hljs-keyword\\">if</span>(!root.left &amp;&amp; !root.right)<span class=\\"hljs-keyword\\">return</span> [<span class=\\"hljs-number\\">0</span>]\\n        <span class=\\"hljs-keyword\\">let</span> arr=[]\\n        <span class=\\"hljs-keyword\\">let</span> left=[], right=[]\\n        <span class=\\"hljs-keyword\\">if</span>(root.left){\\n            left=dfs(root.left)\\n            <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> n <span class=\\"hljs-keyword\\">of</span> left){\\n                <span class=\\"hljs-keyword\\">if</span>(++n&gt;distance)<span class=\\"hljs-keyword\\">continue</span>\\n                arr.push(n)\\n            }            \\n        }\\n        <span class=\\"hljs-keyword\\">if</span>(root.right){\\n            right=dfs(root.right)\\n            <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> n <span class=\\"hljs-keyword\\">of</span> right){\\n                <span class=\\"hljs-keyword\\">if</span>(++n&gt;distance)<span class=\\"hljs-keyword\\">continue</span>\\n                arr.push(n)\\n            }            \\n        }\\n        <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;left.length;i++){\\n            <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;right.length;j++){\\n                <span class=\\"hljs-keyword\\">if</span>(left[i]+right[j]+<span class=\\"hljs-number\\">2</span>&lt;=distance)res++\\n            }\\n        }\\n        <span class=\\"hljs-comment\\">// console.log(root.val,arr,left,right)</span>\\n        <span class=\\"hljs-keyword\\">return</span> arr\\n    }\\n};\\n</code></pre>\\n"],"querySlug":"number-of-good-leaf-nodes-pairs","created_at":"2020-07-26","timeArr":[2020,6,26,15,15,36,0],"hasThinking":false,"content":"<p>给你二叉树的根节点 <code>root</code> 和一个整数 <code>distance</code> 。</p>\\n\\n<p>如果二叉树中两个 <strong>叶</strong> 节点之间的 <strong>最短路径长度</strong> 小于或者等于 <code>distance</code> ，那它们就可以构成一组 <strong>好叶子节点对</strong> 。</p>\\n\\n<p>返回树中 <strong>好叶子节点对的数量</strong> 。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<p>&nbsp;</p>\\n\\n<p><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/07/26/e1.jpg\\" style=\\"height: 321px; width: 321px;\\"></p>\\n\\n<pre><strong>输入：</strong>root = [1,2,3,null,4], distance = 3\\n<strong>输出：</strong>1\\n<strong>解释：</strong>树的叶节点是 3 和 4 ，它们之间的最短路径的长度是 3 。这是唯一的好叶子节点对。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<p><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/07/26/e2.jpg\\" style=\\"height: 321px; width: 441px;\\"></p>\\n\\n<pre><strong>输入：</strong>root = [1,2,3,4,5,6,7], distance = 3\\n<strong>输出：</strong>2\\n<strong>解释：</strong>好叶子节点对为 [4,5] 和 [6,7] ，最短路径长度都是 2 。但是叶子节点对 [4,6] 不满足要求，因为它们之间的最短路径长度为 4 。\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>root = [7,1,4,6,null,5,3,null,null,null,null,null,2], distance = 3\\n<strong>输出：</strong>1\\n<strong>解释：</strong>唯一的好叶子节点对是 [2,5] 。\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre><strong>输入：</strong>root = [100], distance = 1\\n<strong>输出：</strong>0\\n</pre>\\n\\n<p><strong>示例 5：</strong></p>\\n\\n<pre><strong>输入：</strong>root = [1,1,1], distance = 2\\n<strong>输出：</strong>1\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>tree</code> 的节点数在 <code>[1, 2^10]</code> 范围内。</li>\\n\\t<li>每个节点的值都在 <code>[1, 100]</code> 之间。</li>\\n\\t<li><code>1 &lt;= distance &lt;= 10</code></li>\\n</ul>\\n","title":"1530. 好叶子节点对的数量","relatedTags":["树","深度优先搜索","二叉树"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1530","slug":"1530-Number-of-Good-Leaf-Nodes-Pairs"}')}}]);