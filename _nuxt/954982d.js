(window.webpackJsonp=window.webpackJsonp||[]).push([[417],{1215:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">s</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{string[]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> printVertically = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">s</span>) </span>{\\n\\n  <span class=\\"hljs-keyword\\">let</span> arr=s.split(<span class=\\"hljs-string\\">\' \'</span>)\\n  <span class=\\"hljs-keyword\\">let</span> maxLen=<span class=\\"hljs-number\\">-1</span>\\n  \\n  <span class=\\"hljs-keyword\\">let</span> res=[]\\n  arr.forEach(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">str</span>=&gt;</span>maxLen=<span class=\\"hljs-built_in\\">Math</span>.max(maxLen,str.length))\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;maxLen;i++){\\n    res.push(<span class=\\"hljs-string\\">\'\'</span>)\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;arr.length;j++){\\n      res[i]+=arr[j][i] || <span class=\\"hljs-string\\">\' \'</span>\\n    }\\n    res[i]=trimBack(res[i])\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n  \\n  \\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">trimBack</span>(<span class=\\"hljs-params\\">str</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-string\\">\'\'</span>\\n    <span class=\\"hljs-keyword\\">let</span> b=<span class=\\"hljs-literal\\">true</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=str.length<span class=\\"hljs-number\\">-1</span>;i&gt;=<span class=\\"hljs-number\\">0</span>;i--){\\n      <span class=\\"hljs-keyword\\">if</span>(str[i]===<span class=\\"hljs-string\\">\' \'</span> &amp;&amp; b){\\n        <span class=\\"hljs-keyword\\">continue</span>\\n      }\\n      b=<span class=\\"hljs-literal\\">false</span>\\n      res=str[i]+res\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> res\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"print-words-vertically","created_at":"2020-01-19","timeArr":[2020,0,19,10,39,58,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>竖向遍历，如果不存在，则插入空格，每一次遍历好的字符串去掉尾部空格。</p>\\n","content":"<p>给你一个字符串&nbsp;<code>s</code>。请你按照单词在 <code>s</code> 中的出现顺序将它们全部竖直返回。<br>\\n单词应该以字符串列表的形式返回，必要时用空格补位，但输出尾部的空格需要删除（不允许尾随空格）。<br>\\n每个单词只能放在一列上，每一列中也只能有一个单词。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>s = &quot;HOW ARE YOU&quot;\\n<strong>输出：</strong>[&quot;HAY&quot;,&quot;ORO&quot;,&quot;WEU&quot;]\\n<strong>解释：</strong>每个单词都应该竖直打印。 \\n &quot;HAY&quot;\\n&nbsp;&quot;ORO&quot;\\n&nbsp;&quot;WEU&quot;\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>s = &quot;TO BE OR NOT TO BE&quot;\\n<strong>输出：</strong>[&quot;TBONTB&quot;,&quot;OEROOE&quot;,&quot;   T&quot;]\\n<strong>解释：</strong>题目允许使用空格补位，但不允许输出末尾出现空格。\\n&quot;TBONTB&quot;\\n&quot;OEROOE&quot;\\n&quot;   T&quot;\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>s = &quot;CONTEST IS COMING&quot;\\n<strong>输出：</strong>[&quot;CIC&quot;,&quot;OSO&quot;,&quot;N M&quot;,&quot;T I&quot;,&quot;E N&quot;,&quot;S G&quot;,&quot;T&quot;]\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= s.length &lt;= 200</code></li>\\n\\t<li><code>s</code>&nbsp;仅含大写英文字母。</li>\\n\\t<li>题目数据保证两个单词之间只有一个空格。</li>\\n</ul>\\n","title":"1324. 竖直打印单词","relatedTags":["数组","字符串","模拟"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1324","slug":"1324-Print-Words-Vertically"}')}}]);