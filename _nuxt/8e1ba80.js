(window.webpackJsonp=window.webpackJsonp||[]).push([[1341],{2139:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">A</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> pancakeSort = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">A</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> res=[]\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">swapR</span>(<span class=\\"hljs-params\\">start,end</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(end&gt;<span class=\\"hljs-number\\">1</span>)res.push(end)\\n    <span class=\\"hljs-keyword\\">if</span>(start&gt;<span class=\\"hljs-number\\">1</span>)res.push(start)\\n    res.push(start+<span class=\\"hljs-number\\">1</span>)\\n    <span class=\\"hljs-keyword\\">if</span>(end+<span class=\\"hljs-number\\">1</span>&gt;<span class=\\"hljs-number\\">1</span>)res.push(end+<span class=\\"hljs-number\\">1</span>)\\n    <span class=\\"hljs-keyword\\">let</span> t=A[start]\\n    <span class=\\"hljs-comment\\">// console.log(start,end,t,A)</span>\\n    A.splice(start,<span class=\\"hljs-number\\">1</span>)\\n    A.splice(end,<span class=\\"hljs-number\\">0</span>,t)\\n    <span class=\\"hljs-comment\\">// console.log(A)</span>\\n  }\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">1</span>;i&lt;A.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> cur=A[i]\\n    <span class=\\"hljs-keyword\\">let</span> id=i\\n    <span class=\\"hljs-keyword\\">while</span>(id&gt;<span class=\\"hljs-number\\">0</span> &amp;&amp; A[id<span class=\\"hljs-number\\">-1</span>]&gt;cur){\\n      id--\\n    }\\n    <span class=\\"hljs-keyword\\">if</span>(i===id)<span class=\\"hljs-keyword\\">continue</span>\\n    <span class=\\"hljs-comment\\">// console.log(i,id)</span>\\n    swapR(i,id)\\n    <span class=\\"hljs-comment\\">// console.log(A)</span>\\n  }\\n  \\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"pancake-sorting","created_at":"2019-03-17","timeArr":[2019,2,17,23,27,54,0],"hasThinking":false,"content":"<p>给你一个整数数组 <code>arr</code> ，请使用 <strong>煎饼翻转</strong><em> </em>完成对数组的排序。</p>\\n\\n<p>一次煎饼翻转的执行过程如下：</p>\\n\\n<ul>\\n\\t<li>选择一个整数 <code>k</code> ，<code>1 <= k <= arr.length</code></li>\\n\\t<li>反转子数组 <code>arr[0...k-1]</code>（<strong>下标从 0 开始</strong>）</li>\\n</ul>\\n\\n<p>例如，<code>arr = [3,2,1,4]</code> ，选择 <code>k = 3</code> 进行一次煎饼翻转，反转子数组 <code>[3,2,1]</code> ，得到 <code>arr = [<strong>1</strong>,<strong>2</strong>,<strong>3</strong>,4]</code> 。</p>\\n\\n<p>以数组形式返回能使 <code>arr</code> 有序的煎饼翻转操作所对应的 <code>k</code> 值序列。任何将数组排序且翻转次数在 <code>10 * arr.length</code> 范围内的有效答案都将被判断为正确。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>[3,2,4,1]\\n<strong>输出：</strong>[4,2,4,3]\\n<strong>解释：</strong>\\n我们执行 4 次煎饼翻转，k 值分别为 4，2，4，和 3。\\n初始状态 arr = [3, 2, 4, 1]\\n第一次翻转后（k = 4）：arr = [<strong>1</strong>, <strong>4</strong>, <strong>2</strong>, <strong>3</strong>]\\n第二次翻转后（k = 2）：arr = [<strong>4</strong>, <strong>1</strong>, 2, 3]\\n第三次翻转后（k = 4）：arr = [<strong>3</strong>, <strong>2</strong>, <strong>1</strong>, <strong>4</strong>]\\n第四次翻转后（k = 3）：arr = [<strong>1</strong>, <strong>2</strong>, <strong>3</strong>, 4]，此时已完成排序。 \\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>[1,2,3]\\n<strong>输出：</strong>[]\\n<strong>解释：\\n</strong>输入已经排序，因此不需要翻转任何内容。\\n请注意，其他可能的答案，如 [3，3] ，也将被判断为正确。\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= arr.length <= 100</code></li>\\n\\t<li><code>1 <= arr[i] <= arr.length</code></li>\\n\\t<li><code>arr</code> 中的所有整数互不相同（即，<code>arr</code> 是从 <code>1</code> 到 <code>arr.length</code> 整数的一个排列）</li>\\n</ul>\\n","title":"969. 煎饼排序","relatedTags":["贪心","数组","双指针","排序"],"difficult":"Middle","lang":["javascript"],"uniqueID":"969","slug":"969-Pancake-Sorting"}')}}]);