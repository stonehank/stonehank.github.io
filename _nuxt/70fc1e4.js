(window.webpackJsonp=window.webpackJsonp||[]).push([[462],{1260:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Solution</span><span class=\\"hljs-params\\">(object)</span>:</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">wordBreak</span><span class=\\"hljs-params\\">(self, s, wordDict)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type s: str\\n        :type wordDict: List[str]\\n        :rtype: bool\\n        \\"\\"\\"</span>\\n        N=len(s)\\n        mem={}\\n        <span class=\\"hljs-keyword\\">for</span> n <span class=\\"hljs-keyword\\">in</span> wordDict:\\n          mem.setdefault(n,<span class=\\"hljs-literal\\">True</span>)\\n        dp=[<span class=\\"hljs-literal\\">False</span>]*(N+<span class=\\"hljs-number\\">1</span>)\\n        dp[<span class=\\"hljs-number\\">0</span>]=<span class=\\"hljs-literal\\">True</span>\\n        <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(<span class=\\"hljs-number\\">1</span>,N+<span class=\\"hljs-number\\">1</span>):\\n          <span class=\\"hljs-keyword\\">for</span> j <span class=\\"hljs-keyword\\">in</span> range(<span class=\\"hljs-number\\">0</span>,i):\\n            <span class=\\"hljs-keyword\\">if</span> dp[j] <span class=\\"hljs-keyword\\">and</span> mem.has_key(s[j:i]):\\n              dp[i]=<span class=\\"hljs-literal\\">True</span>\\n        <span class=\\"hljs-comment\\"># print dp</span>\\n        <span class=\\"hljs-keyword\\">return</span> dp[<span class=\\"hljs-number\\">-1</span>]\\n              \\n</code></pre>\\n"],"querySlug":"word-break","created_at":"2019-03-01","timeArr":[2019,2,1,10,6,32,0],"hasThinking":false,"content":"<p>给定一个<strong>非空</strong>字符串 <em>s</em> 和一个包含<strong>非空</strong>单词的列表 <em>wordDict</em>，判定&nbsp;<em>s</em> 是否可以被空格拆分为一个或多个在字典中出现的单词。</p>\\n\\n<p><strong>说明：</strong></p>\\n\\n<ul>\\n\\t<li>拆分时可以重复使用字典中的单词。</li>\\n\\t<li>你可以假设字典中没有重复的单词。</li>\\n</ul>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入:</strong> s = &quot;leetcode&quot;, wordDict = [&quot;leet&quot;, &quot;code&quot;]\\n<strong>输出:</strong> true\\n<strong>解释:</strong> 返回 true 因为 &quot;leetcode&quot; 可以被拆分成 &quot;leet code&quot;。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入:</strong> s = &quot;applepenapple&quot;, wordDict = [&quot;apple&quot;, &quot;pen&quot;]\\n<strong>输出:</strong> true\\n<strong>解释:</strong> 返回 true 因为 <code>&quot;</code>applepenapple<code>&quot;</code> 可以被拆分成 <code>&quot;</code>apple pen apple<code>&quot;</code>。\\n&nbsp;    注意你可以重复使用字典中的单词。\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入:</strong> s = &quot;catsandog&quot;, wordDict = [&quot;cats&quot;, &quot;dog&quot;, &quot;sand&quot;, &quot;and&quot;, &quot;cat&quot;]\\n<strong>输出:</strong> false\\n</pre>\\n","title":"139. 单词拆分","relatedTags":["字典树","记忆化搜索","哈希表","字符串","动态规划"],"difficult":"Middle","lang":["python"],"uniqueID":"139","slug":"139-Word-Break"}')}}]);