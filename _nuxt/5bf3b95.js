(window.webpackJsonp=window.webpackJsonp||[]).push([[981],{1779:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string[]}</span> <span class=\\"hljs-variable\\">list1</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string[]}</span> <span class=\\"hljs-variable\\">list2</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{string[]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> findRestaurant = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">list1, list2</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> hash1={}\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;list1.length;i++){\\n    hash1[list1[i]]=i\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> minIdxSum=<span class=\\"hljs-literal\\">Infinity</span>\\n  <span class=\\"hljs-keyword\\">let</span> res=[]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;list2.length;i++){\\n    <span class=\\"hljs-keyword\\">if</span>(hash1[list2[i]]!=<span class=\\"hljs-literal\\">null</span>){\\n      <span class=\\"hljs-keyword\\">let</span> curIdxSum=i+hash1[list2[i]]\\n      <span class=\\"hljs-keyword\\">if</span>(curIdxSum&lt;minIdxSum){\\n        minIdxSum=curIdxSum\\n        res=[list2[i]]\\n      }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(curIdxSum===minIdxSum){\\n        res.push(list2[i])\\n      }\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"minimum-index-sum-of-two-lists","created_at":"2019-04-06","timeArr":[2019,3,6,13,39,44,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>遍历<code>list1</code>，以<code>lits1[i]</code>作为<code>key</code>，<code>i</code>作为<code>val</code>，保存进<code>hash</code>；</p>\\n<p>再遍历<code>list2</code>，存在<code>hash[list2[i]]</code>就检查是否能加入结果。</p>\\n","content":"<p>假设Andy和Doris想在晚餐时选择一家餐厅，并且他们都有一个表示最喜爱餐厅的列表，每个餐厅的名字用字符串表示。</p>\\n\\n<p>你需要帮助他们用<strong>最少的索引和</strong>找出他们<strong>共同喜爱的餐厅</strong>。 如果答案不止一个，则输出所有答案并且不考虑顺序。 你可以假设总是存在一个答案。</p>\\n\\n<p><strong>示例 1:</strong></p>\\n\\n<pre><strong>输入:</strong>\\n[&quot;Shogun&quot;, &quot;Tapioca Express&quot;, &quot;Burger King&quot;, &quot;KFC&quot;]\\n[&quot;Piatti&quot;, &quot;The Grill at Torrey Pines&quot;, &quot;Hungry Hunter Steakhouse&quot;, &quot;Shogun&quot;]\\n<strong>输出:</strong> [&quot;Shogun&quot;]\\n<strong>解释:</strong> 他们唯一共同喜爱的餐厅是&ldquo;Shogun&rdquo;。\\n</pre>\\n\\n<p><strong>示例 2:</strong></p>\\n\\n<pre><strong>输入:</strong>\\n[&quot;Shogun&quot;, &quot;Tapioca Express&quot;, &quot;Burger King&quot;, &quot;KFC&quot;]\\n[&quot;KFC&quot;, &quot;Shogun&quot;, &quot;Burger King&quot;]\\n<strong>输出:</strong> [&quot;Shogun&quot;]\\n<strong>解释:</strong> 他们共同喜爱且具有最小索引和的餐厅是&ldquo;Shogun&rdquo;，它有最小的索引和1(0+1)。\\n</pre>\\n\\n<p><strong>提示:</strong></p>\\n\\n<ol>\\n\\t<li>两个列表的长度范围都在&nbsp;[1, 1000]内。</li>\\n\\t<li>两个列表中的字符串的长度将在[1，30]的范围内。</li>\\n\\t<li>下标从0开始，到列表的长度减1。</li>\\n\\t<li>两个列表都没有重复的元素。</li>\\n</ol>\\n","title":"599. 两个列表的最小索引总和","relatedTags":["数组","哈希表","字符串"],"difficult":"Easy","lang":["javascript"],"uniqueID":"599","slug":"599-Minimum-Index-Sum-of-Two-Lists"}')}}]);