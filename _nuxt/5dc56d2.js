(window.webpackJsonp=window.webpackJsonp||[]).push([[725],{1523:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * initialize your data structure here.\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> MedianFinder = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{  \\n  <span class=\\"hljs-keyword\\">let</span> list=[]\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">bsEnd</span>(<span class=\\"hljs-params\\">arr,n</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> lo=<span class=\\"hljs-number\\">0</span>,hi=arr.length<span class=\\"hljs-number\\">-1</span>\\n    <span class=\\"hljs-keyword\\">while</span>(lo&lt;hi){\\n      <span class=\\"hljs-keyword\\">let</span> mid=<span class=\\"hljs-built_in\\">Math</span>.floor((lo+hi)/<span class=\\"hljs-number\\">2</span>)\\n      <span class=\\"hljs-keyword\\">if</span>(arr[mid]&lt;n)lo=mid+<span class=\\"hljs-number\\">1</span>\\n      <span class=\\"hljs-keyword\\">else</span> hi=mid\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> hi\\n  }\\n  <span class=\\"hljs-keyword\\">this</span>.insert=<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">n</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(list.length===<span class=\\"hljs-number\\">0</span> || list[list.length<span class=\\"hljs-number\\">-1</span>]&lt;=n){\\n      list.push(n)\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      <span class=\\"hljs-keyword\\">let</span> idx=bsEnd(list,n)\\n      list.splice(idx,<span class=\\"hljs-number\\">0</span>,n)\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">this</span>.findMid=<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> len=list.length\\n    <span class=\\"hljs-keyword\\">if</span>(len % <span class=\\"hljs-number\\">2</span>===<span class=\\"hljs-number\\">0</span>){\\n      <span class=\\"hljs-keyword\\">return</span> (list[<span class=\\"hljs-built_in\\">Math</span>.floor((len<span class=\\"hljs-number\\">-1</span>)/<span class=\\"hljs-number\\">2</span>)]+list[<span class=\\"hljs-built_in\\">Math</span>.ceil((len<span class=\\"hljs-number\\">-1</span>)/<span class=\\"hljs-number\\">2</span>)])/<span class=\\"hljs-number\\">2</span>\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      <span class=\\"hljs-keyword\\">return</span> list[(len<span class=\\"hljs-number\\">-1</span>)/<span class=\\"hljs-number\\">2</span>]\\n    }\\n  }\\n};\\n\\n<span class=\\"hljs-comment\\">/** \\n * @param {number} num\\n * @return {void}\\n */</span>\\nMedianFinder.prototype.addNum = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">num</span>) </span>{\\n  <span class=\\"hljs-keyword\\">this</span>.insert(num)\\n};\\n\\n<span class=\\"hljs-comment\\">/**\\n * @return {number}\\n */</span>\\nMedianFinder.prototype.findMedian = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-keyword\\">this</span>.findMid()\\n};\\n\\n<span class=\\"hljs-comment\\">/** \\n * Your MedianFinder object will be instantiated and called as such:\\n * var obj = Object.create(MedianFinder).createNew()\\n * obj.addNum(num)\\n * var param_2 = obj.findMedian()\\n */</span>\\n</code></pre>\\n"],"querySlug":"find-median-from-data-stream","created_at":"2019-04-19","timeArr":[2019,3,19,11,23,51,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>2种方法，</p>\\n<ol>\\n<li>每次<code>addNum</code>就去构造一个有序数组(插入排序)，<code>findMedian</code>的时候就返回数组中间部分即可。</li>\\n</ol>\\n<pre class=\\"hljs\\"><code><span class=\\"hljs-keyword\\">var</span> MedianFinder = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{  \\n  <span class=\\"hljs-keyword\\">let</span> list=[]\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">bsEnd</span>(<span class=\\"hljs-params\\">arr,n</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> lo=<span class=\\"hljs-number\\">0</span>,hi=arr.length<span class=\\"hljs-number\\">-1</span>\\n    <span class=\\"hljs-keyword\\">while</span>(lo&lt;hi){\\n      <span class=\\"hljs-keyword\\">let</span> mid=<span class=\\"hljs-built_in\\">Math</span>.floor((lo+hi)/<span class=\\"hljs-number\\">2</span>)\\n      <span class=\\"hljs-keyword\\">if</span>(arr[mid]&lt;n)lo=mid+<span class=\\"hljs-number\\">1</span>\\n      <span class=\\"hljs-keyword\\">else</span> hi=mid\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> hi\\n  }\\n  <span class=\\"hljs-keyword\\">this</span>.insert=<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">n</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(list.length===<span class=\\"hljs-number\\">0</span> || list[list.length<span class=\\"hljs-number\\">-1</span>]&lt;=n){\\n      list.push(n)\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      <span class=\\"hljs-keyword\\">let</span> idx=bsEnd(list,n)\\n      list.splice(idx,<span class=\\"hljs-number\\">0</span>,n)\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">this</span>.findMid=<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> len=list.length\\n    <span class=\\"hljs-keyword\\">if</span>(len % <span class=\\"hljs-number\\">2</span>===<span class=\\"hljs-number\\">0</span>){\\n      <span class=\\"hljs-keyword\\">return</span> (list[<span class=\\"hljs-built_in\\">Math</span>.floor((len<span class=\\"hljs-number\\">-1</span>)/<span class=\\"hljs-number\\">2</span>)]+list[<span class=\\"hljs-built_in\\">Math</span>.ceil((len<span class=\\"hljs-number\\">-1</span>)/<span class=\\"hljs-number\\">2</span>)])/<span class=\\"hljs-number\\">2</span>\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      <span class=\\"hljs-keyword\\">return</span> list[(len<span class=\\"hljs-number\\">-1</span>)/<span class=\\"hljs-number\\">2</span>]\\n    }\\n  }\\n};\\n\\nMedianFinder.prototype.addNum = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">num</span>) </span>{\\n  <span class=\\"hljs-keyword\\">this</span>.insert(num)\\n};\\n\\nMedianFinder.prototype.findMedian = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-keyword\\">this</span>.findMid()\\n};\\n</code></pre>\\n<ol start=\\"2\\">\\n<li>双堆方法(2个优先队列)。</li>\\n</ol>\\n<p><code>large</code>排序从大到小，存放数字较小的一半；</p>\\n<p><code>small</code>存放从小到大，存放数字较大的一半；</p>\\n<p><code>large</code>不能比<code>small</code>更少。</p>\\n<p>那么<code>large</code>里的数一定都小于等于<code>small</code>里的数字，并且<code>large</code>里的所有数字都小于<code>large.peek()</code>的数字，</p>\\n<p>同样<code>small</code>里所有数字都大于<code>small.peek()</code>的数字，因此两边的堆顶的数字就构成了中位值。</p>\\n","content":"<p>中位数是有序列表中间的数。如果列表长度是偶数，中位数则是中间两个数的平均值。</p>\\n\\n<p>例如，</p>\\n\\n<p>[2,3,4]&nbsp;的中位数是 3</p>\\n\\n<p>[2,3] 的中位数是 (2 + 3) / 2 = 2.5</p>\\n\\n<p>设计一个支持以下两种操作的数据结构：</p>\\n\\n<ul>\\n\\t<li>void addNum(int num) - 从数据流中添加一个整数到数据结构中。</li>\\n\\t<li>double findMedian() - 返回目前所有元素的中位数。</li>\\n</ul>\\n\\n<p><strong>示例：</strong></p>\\n\\n<pre>addNum(1)\\naddNum(2)\\nfindMedian() -&gt; 1.5\\naddNum(3) \\nfindMedian() -&gt; 2</pre>\\n\\n<p><strong>进阶:</strong></p>\\n\\n<ol>\\n\\t<li>如果数据流中所有整数都在 0 到 100 范围内，你将如何优化你的算法？</li>\\n\\t<li>如果数据流中 99% 的整数都在 0 到 100 范围内，你将如何优化你的算法？</li>\\n</ol>\\n","title":"295. 数据流的中位数","relatedTags":["设计","双指针","数据流","排序","堆（优先队列）"],"difficult":"Hard","lang":["javascript"],"uniqueID":"295","slug":"295-Find-Median-from-Data-Stream"}')}}]);