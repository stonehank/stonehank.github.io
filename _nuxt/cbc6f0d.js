(window.webpackJsonp=window.webpackJsonp||[]).push([[966],{1764:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{TreeNode}</span> <span class=\\"hljs-variable\\">s</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{TreeNode}</span> <span class=\\"hljs-variable\\">t</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{boolean}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> isSubtree = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">s, t</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(!s &amp;&amp; !t)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">isSame</span>(<span class=\\"hljs-params\\">root1,root2</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(!root1 &amp;&amp; !root2)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n    <span class=\\"hljs-keyword\\">if</span>(!root1 || !root2)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n    <span class=\\"hljs-keyword\\">if</span>(root1.val!==root2.val)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n    <span class=\\"hljs-keyword\\">return</span> isSame(root1.left,root2.left) &amp;&amp; isSame(root1.right,root2.right)\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> valid=<span class=\\"hljs-literal\\">false</span>\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">dfs</span>(<span class=\\"hljs-params\\">root</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(valid)<span class=\\"hljs-keyword\\">return</span>\\n    <span class=\\"hljs-keyword\\">if</span>(!root)<span class=\\"hljs-keyword\\">return</span>\\n    <span class=\\"hljs-keyword\\">if</span>(root.val===t.val &amp;&amp; isSame(root,t))<span class=\\"hljs-keyword\\">return</span> valid=<span class=\\"hljs-literal\\">true</span>\\n    <span class=\\"hljs-keyword\\">if</span>(root.left)dfs(root.left)\\n    <span class=\\"hljs-keyword\\">if</span>(root.right)dfs(root.right)\\n  }\\n  dfs(s)\\n  \\n  <span class=\\"hljs-keyword\\">return</span> valid\\n};\\n</code></pre>\\n"],"querySlug":"subtree-of-another-tree","created_at":"2019-03-19","timeArr":[2019,2,19,11,42,52,0],"hasThinking":false,"content":"<div class=\\"original__bRMd\\">\\n<div>\\n<p>给你两棵二叉树 <code>root</code> 和 <code>subRoot</code> 。检验 <code>root</code> 中是否包含和 <code>subRoot</code> 具有相同结构和节点值的子树。如果存在，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>\\n\\n<p>二叉树 <code>tree</code> 的一棵子树包括 <code>tree</code> 的某个节点和这个节点的所有后代节点。<code>tree</code> 也可以看做它自身的一棵子树。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2021/04/28/subtree1-tree.jpg\\" style=\\"width: 532px; height: 400px;\\" />\\n<pre>\\n<strong>输入：</strong>root = [3,4,5,1,2], subRoot = [4,1,2]\\n<strong>输出：</strong>true\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2021/04/28/subtree2-tree.jpg\\" style=\\"width: 502px; height: 458px;\\" />\\n<pre>\\n<strong>输入：</strong>root = [3,4,5,1,2,null,null,null,null,0], subRoot = [4,1,2]\\n<strong>输出：</strong>false\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>root</code> 树上的节点数量范围是 <code>[1, 2000]</code></li>\\n\\t<li><code>subRoot</code> 树上的节点数量范围是 <code>[1, 1000]</code></li>\\n\\t<li><code>-10<sup>4</sup> <= root.val <= 10<sup>4</sup></code></li>\\n\\t<li><code>-10<sup>4</sup> <= subRoot.val <= 10<sup>4</sup></code></li>\\n</ul>\\n</div>\\n</div>\\n","title":"572. 另一棵树的子树","relatedTags":["树","深度优先搜索","二叉树","字符串匹配","哈希函数"],"difficult":"Easy","lang":["javascript"],"uniqueID":"572","slug":"572-Subtree-of-Another-Tree"}')}}]);