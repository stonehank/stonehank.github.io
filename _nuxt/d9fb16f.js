(window.webpackJsonp=window.webpackJsonp||[]).push([[278],{1076:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">values</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">labels</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">num_wanted</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">use_limit</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> largestValsFromLabels = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">values, labels, num_wanted, use_limit</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> labelCount=<span class=\\"hljs-built_in\\">Array</span>(<span class=\\"hljs-number\\">20001</span>).fill(<span class=\\"hljs-number\\">0</span>)\\n  <span class=\\"hljs-keyword\\">let</span> aux=[],res=<span class=\\"hljs-number\\">0</span>\\n  \\n  <span class=\\"hljs-keyword\\">let</span> pq=<span class=\\"hljs-keyword\\">new</span> PriorityQueue(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">a,b</span>)=&gt;</span>b[<span class=\\"hljs-number\\">0</span>]-a[<span class=\\"hljs-number\\">0</span>])\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;values.length;i++){\\n    aux[i]=[values[i],labels[i]]\\n    pq.insert(aux[i])\\n  }\\n  <span class=\\"hljs-keyword\\">while</span>(!pq.isEmpty() &amp;&amp; num_wanted&gt;<span class=\\"hljs-number\\">0</span>){\\n    <span class=\\"hljs-keyword\\">let</span> [maxV,lab]=pq.pop()\\n    <span class=\\"hljs-keyword\\">if</span>(labelCount[lab]&gt;=use_limit){\\n      <span class=\\"hljs-keyword\\">continue</span>\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      labelCount[lab]++\\n      res+=maxV\\n      num_wanted--\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n\\n\\n<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">PriorityQueue</span>(<span class=\\"hljs-params\\">compareFunction</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span> (!compareFunction) {\\n    compareFunction = <span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">a, b</span>) =&gt;</span> a - b\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> heap = [<span class=\\"hljs-literal\\">null</span>]\\n\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">swim</span>(<span class=\\"hljs-params\\">idx</span>) </span>{\\n    <span class=\\"hljs-keyword\\">if</span> (idx &lt; <span class=\\"hljs-number\\">2</span>) <span class=\\"hljs-keyword\\">return</span>\\n    <span class=\\"hljs-keyword\\">let</span> k = <span class=\\"hljs-built_in\\">Math</span>.floor(idx / <span class=\\"hljs-number\\">2</span>)\\n    <span class=\\"hljs-keyword\\">if</span> (compareFunction(heap[idx], heap[k]) &lt; <span class=\\"hljs-number\\">0</span>) {\\n      swap(heap, idx, k)\\n      idx = k\\n      swim(idx)\\n    }\\n  }\\n\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">sink</span>(<span class=\\"hljs-params\\">idx</span>) </span>{\\n    <span class=\\"hljs-keyword\\">let</span> k = <span class=\\"hljs-built_in\\">Math</span>.floor(idx * <span class=\\"hljs-number\\">2</span>)\\n    <span class=\\"hljs-keyword\\">if</span> (k &gt;= heap.length) <span class=\\"hljs-keyword\\">return</span>\\n    <span class=\\"hljs-keyword\\">if</span> (k &lt; heap.length &amp;&amp; heap[k + <span class=\\"hljs-number\\">1</span>] &amp;&amp; compareFunction(heap[k + <span class=\\"hljs-number\\">1</span>], heap[k]) &lt; <span class=\\"hljs-number\\">0</span>) k++\\n    <span class=\\"hljs-keyword\\">if</span> (compareFunction(heap[k], heap[idx]) &lt; <span class=\\"hljs-number\\">0</span>) {\\n      swap(heap, idx, k)\\n      idx = k\\n      sink(idx)\\n    }\\n  }\\n\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">swap</span>(<span class=\\"hljs-params\\">arr, i, j</span>) </span>{\\n    <span class=\\"hljs-keyword\\">let</span> temp = arr[i]\\n    arr[i] = arr[j]\\n    arr[j] = temp\\n  }\\n\\n  <span class=\\"hljs-keyword\\">this</span>.insert = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\">v</span>) </span>{\\n    heap.push(v)\\n    swim(heap.length - <span class=\\"hljs-number\\">1</span>)\\n  }\\n  <span class=\\"hljs-keyword\\">this</span>.pop = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\"></span>) </span>{\\n    swap(heap, <span class=\\"hljs-number\\">1</span>, heap.length - <span class=\\"hljs-number\\">1</span>)\\n    <span class=\\"hljs-keyword\\">let</span> v = heap.pop()\\n    sink(<span class=\\"hljs-number\\">1</span>)\\n    <span class=\\"hljs-keyword\\">return</span> v\\n  }\\n  <span class=\\"hljs-keyword\\">this</span>.peek = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\"></span>) </span>{\\n    <span class=\\"hljs-keyword\\">return</span> heap[<span class=\\"hljs-number\\">1</span>]\\n  }\\n  <span class=\\"hljs-keyword\\">this</span>.size = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\"></span>) </span>{\\n    <span class=\\"hljs-keyword\\">return</span> heap.length - <span class=\\"hljs-number\\">1</span>\\n  }\\n  <span class=\\"hljs-keyword\\">this</span>.isEmpty = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> (<span class=\\"hljs-params\\"></span>) </span>{\\n    <span class=\\"hljs-keyword\\">return</span> heap.length === <span class=\\"hljs-number\\">1</span>\\n  }\\n}\\n\\n\\n\\n</code></pre>\\n"],"querySlug":"largest-values-from-labels","created_at":"2019-06-16","timeArr":[2019,5,16,10,53,23,0],"hasThinking":false,"content":"<p>我们有一个项的集合，其中第&nbsp;<code>i</code>&nbsp;项的值为&nbsp;<code>values[i]</code>，标签为&nbsp;<code>labels[i]</code>。</p>\\n\\n<p>我们从这些项中选出一个子集&nbsp;<code>S</code>，这样一来：</p>\\n\\n<ul>\\n\\t<li><code>|S| &lt;= num_wanted</code></li>\\n\\t<li>对于任意的标签 <code>L</code>，子集 <code>S</code> 中标签为 <code>L</code>&nbsp;的项的数目总满足&nbsp;<code>&lt;= use_limit</code>。</li>\\n</ul>\\n\\n<p>返回子集&nbsp;<code>S</code>&nbsp;的最大可能的&nbsp;<strong>和</strong>。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>values = [5,4,3,2,1], labels = [1,1,2,2,3], <code>num_wanted </code>= 3, use_limit = 1\\n<strong>输出：</strong>9\\n<strong>解释：</strong>选出的子集是第一项，第三项和第五项。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>values = [5,4,3,2,1], labels = [1,3,3,3,2], <code>num_wanted </code>= 3, use_limit = 2\\n<strong>输出：</strong>12\\n<strong>解释：</strong>选出的子集是第一项，第二项和第三项。\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>values = [9,8,8,7,6], labels = [0,0,0,1,1], <code>num_wanted </code>= 3, use_limit = 1\\n<strong>输出：</strong>16\\n<strong>解释：</strong>选出的子集是第一项和第四项。\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre><strong>输入：</strong>values = [9,8,8,7,6], labels = [0,0,0,1,1], <code>num_wanted </code>= 3, use_limit = 2\\n<strong>输出：</strong>24\\n<strong>解释：</strong>选出的子集是第一项，第二项和第四项。\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ol>\\n\\t<li><code>1 &lt;= values.length == labels.length &lt;= 20000</code></li>\\n\\t<li><code>0 &lt;= values[i], labels[i]&nbsp;&lt;= 20000</code></li>\\n\\t<li><code>1 &lt;= num_wanted, use_limit&nbsp;&lt;= values.length</code></li>\\n</ol>\\n","title":"1090. 受标签影响的最大值","relatedTags":["贪心","数组","哈希表","计数","排序"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1090","slug":"1090-Largest-Values-From-Labels"}')}}]);