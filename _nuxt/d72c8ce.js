(window.webpackJsonp=window.webpackJsonp||[]).push([[497],{1295:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string[]}</span> <span class=\\"hljs-variable\\">pizza</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">k</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> ways = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">pizza, k</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> MOD=<span class=\\"hljs-number\\">1e9</span>+<span class=\\"hljs-number\\">7</span>\\n  <span class=\\"hljs-keyword\\">let</span> m=pizza.length\\n  <span class=\\"hljs-keyword\\">let</span> n=pizza[<span class=\\"hljs-number\\">0</span>].length\\n  <span class=\\"hljs-keyword\\">let</span> allApples=findApples(<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">0</span>)\\n  <span class=\\"hljs-keyword\\">if</span>(allApples&lt;k)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">if</span>(k===<span class=\\"hljs-number\\">1</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">1</span>\\n  <span class=\\"hljs-keyword\\">let</span> hash={}\\n  <span class=\\"hljs-keyword\\">return</span> dfs(<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">0</span>,k,allApples) % MOD\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">dfs</span>(<span class=\\"hljs-params\\">x,y,restK,allApples</span>)</span>{\\n    <span class=\\"hljs-comment\\">// console.log(x,y,restK,allApples)</span>\\n    <span class=\\"hljs-keyword\\">if</span>(restK===<span class=\\"hljs-number\\">1</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">1</span>\\n    <span class=\\"hljs-keyword\\">if</span>(hash[x+<span class=\\"hljs-string\\">\' \'</span>+y+<span class=\\"hljs-string\\">\' \'</span>+restK]!=<span class=\\"hljs-literal\\">null</span>)<span class=\\"hljs-keyword\\">return</span> hash[x+<span class=\\"hljs-string\\">\' \'</span>+y+<span class=\\"hljs-string\\">\' \'</span>+restK]\\n    <span class=\\"hljs-keyword\\">let</span> count=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=x+<span class=\\"hljs-number\\">1</span>;i&lt;m;i++){\\n      <span class=\\"hljs-keyword\\">let</span> restApple=findApples(i,y)\\n      <span class=\\"hljs-keyword\\">if</span>(restApple&lt;restK<span class=\\"hljs-number\\">-1</span> || allApples===restApple)<span class=\\"hljs-keyword\\">continue</span>\\n      count+=dfs(i,y,restK<span class=\\"hljs-number\\">-1</span>,restApple)\\n    }\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=y+<span class=\\"hljs-number\\">1</span>;j&lt;n;j++){\\n      <span class=\\"hljs-keyword\\">let</span> restApple=findApples(x,j)\\n      <span class=\\"hljs-keyword\\">if</span>(restApple&lt;restK<span class=\\"hljs-number\\">-1</span> || allApples===restApple)<span class=\\"hljs-keyword\\">continue</span>\\n      count+=dfs(x,j,restK<span class=\\"hljs-number\\">-1</span>,restApple)\\n    }\\n    hash[x+<span class=\\"hljs-string\\">\' \'</span>+y+<span class=\\"hljs-string\\">\' \'</span>+restK]=count\\n    <span class=\\"hljs-keyword\\">return</span> count\\n  }\\n  \\n  \\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">findApples</span>(<span class=\\"hljs-params\\">x,y</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=x;i&lt;m;i++){\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=y;j&lt;n;j++){\\n        <span class=\\"hljs-keyword\\">if</span>(pizza[i][j]===<span class=\\"hljs-string\\">\'A\'</span>)res++\\n      }\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> res\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"number-of-ways-of-cutting-a-pizza","created_at":"2020-05-10","timeArr":[2020,4,10,11,52,44,0],"hasThinking":false,"content":"<p>给你一个&nbsp;<code>rows x cols</code>&nbsp;大小的矩形披萨和一个整数 <code>k</code>&nbsp;，矩形包含两种字符：&nbsp;<code>&#39;A&#39;</code> （表示苹果）和&nbsp;<code>&#39;.&#39;</code>&nbsp;（表示空白格子）。你需要切披萨 <code>k-1</code> 次，得到&nbsp;<code>k</code>&nbsp;块披萨并送给别人。</p>\\n\\n<p>切披萨的每一刀，先要选择是向垂直还是水平方向切，再在矩形的边界上选一个切的位置，将披萨一分为二。如果垂直地切披萨，那么需要把左边的部分送给一个人，如果水平地切，那么需要把上面的部分送给一个人。在切完最后一刀后，需要把剩下来的一块送给最后一个人。</p>\\n\\n<p>请你返回确保每一块披萨包含&nbsp;<strong>至少</strong>&nbsp;一个苹果的切披萨方案数。由于答案可能是个很大的数字，请你返回它对 10^9 + 7 取余的结果。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<p><strong><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/05/10/ways_to_cut_apple_1.png\\" style=\\"height: 378px; width: 500px;\\"></strong></p>\\n\\n<pre><strong>输入：</strong>pizza = [&quot;A..&quot;,&quot;AAA&quot;,&quot;...&quot;], k = 3\\n<strong>输出：</strong>3 \\n<strong>解释：</strong>上图展示了三种切披萨的方案。注意每一块披萨都至少包含一个苹果。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>pizza = [&quot;A..&quot;,&quot;AA.&quot;,&quot;...&quot;], k = 3\\n<strong>输出：</strong>1\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>pizza = [&quot;A..&quot;,&quot;A..&quot;,&quot;...&quot;], k = 1\\n<strong>输出：</strong>1\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= rows, cols &lt;= 50</code></li>\\n\\t<li><code>rows ==&nbsp;pizza.length</code></li>\\n\\t<li><code>cols ==&nbsp;pizza[i].length</code></li>\\n\\t<li><code>1 &lt;= k &lt;= 10</code></li>\\n\\t<li><code>pizza</code>&nbsp;只包含字符&nbsp;<code>&#39;A&#39;</code>&nbsp;和&nbsp;<code>&#39;.&#39;</code>&nbsp;。</li>\\n</ul>\\n","title":"1444. 切披萨的方案数","relatedTags":["记忆化搜索","数组","动态规划","矩阵"],"difficult":"Hard","lang":["javascript"],"uniqueID":"1444","slug":"1444-Number-of-Ways-of-Cutting-a-Pizza"}')}}]);