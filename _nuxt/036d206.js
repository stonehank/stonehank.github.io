(window.webpackJsonp=window.webpackJsonp||[]).push([[1258],{2056:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">N</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{TreeNode[]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> allPossibleFBT = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">N</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(N % <span class=\\"hljs-number\\">2</span>===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span> []\\n  <span class=\\"hljs-keyword\\">if</span>(N===<span class=\\"hljs-number\\">1</span>)<span class=\\"hljs-keyword\\">return</span> [<span class=\\"hljs-keyword\\">new</span> TreeNode(<span class=\\"hljs-number\\">0</span>)]\\n  <span class=\\"hljs-keyword\\">let</span> res=[]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">1</span>;i&lt;N<span class=\\"hljs-number\\">-1</span>;i+=<span class=\\"hljs-number\\">2</span>){\\n    <span class=\\"hljs-keyword\\">let</span> l=allPossibleFBT(i),\\n        r=allPossibleFBT(N<span class=\\"hljs-number\\">-1</span>-i)\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;l.length;j++){\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> k=<span class=\\"hljs-number\\">0</span>;k&lt;r.length;k++){\\n        <span class=\\"hljs-keyword\\">let</span> root=<span class=\\"hljs-keyword\\">new</span> TreeNode(<span class=\\"hljs-number\\">0</span>)\\n        root.left=l[j]\\n        root.right=r[k]\\n        res.push(root)\\n      }\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"all-possible-full-binary-trees","created_at":"2019-03-21","timeArr":[2019,2,21,0,9,42,0],"hasThinking":false,"content":"<p><em>满二叉树</em>是一类二叉树，其中每个结点恰好有 0 或 2 个子结点。</p>\\n\\n<p>返回包含 <code>N</code> 个结点的所有可能满二叉树的列表。 答案的每个元素都是一个可能树的根结点。</p>\\n\\n<p>答案中每个树的每个<code>结点</code>都<strong>必须</strong>有 <code>node.val=0</code>。</p>\\n\\n<p>你可以按任何顺序返回树的最终列表。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例：</strong></p>\\n\\n<pre><strong>输入：</strong>7\\n<strong>输出：</strong>[[0,0,0,null,null,0,0,null,null,0,0],[0,0,0,null,null,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,null,null,null,null,0,0],[0,0,0,0,0,null,null,0,0]]\\n<strong>解释：</strong>\\n<img alt=\\"\\" src=\\"https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/08/24/fivetrees.png\\" style=\\"height: 400px; width: 700px;\\">\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= N &lt;= 20</code></li>\\n</ul>\\n","title":"894. 所有可能的满二叉树","relatedTags":["树","递归","记忆化搜索","动态规划","二叉树"],"difficult":"Middle","lang":["javascript"],"uniqueID":"894","slug":"894-All-Possible-Full-Binary-Trees"}')}}]);