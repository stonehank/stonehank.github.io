(window.webpackJsonp=window.webpackJsonp||[]).push([[648],{1446:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for singly-linked list.\\n * function ListNode(val) {\\n *     this.val = val;\\n *     this.next = null;\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{ListNode}</span> <span class=\\"hljs-variable\\">head</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">n</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{ListNode}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> removeNthFromEnd = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">head, n</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(!head)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">null</span>\\n  <span class=\\"hljs-keyword\\">let</span> first=head,second=head\\n  <span class=\\"hljs-keyword\\">while</span>(first &amp;&amp; n--&gt;<span class=\\"hljs-number\\">0</span>)first=first.next\\n  <span class=\\"hljs-keyword\\">if</span>(!first)<span class=\\"hljs-keyword\\">return</span> head.next\\n  <span class=\\"hljs-keyword\\">while</span>(first &amp;&amp; first.next){\\n    first=first.next\\n    second=second.next\\n  }\\n  second.next=second.next.next\\n  <span class=\\"hljs-keyword\\">return</span> head\\n};\\n</code></pre>\\n"],"querySlug":"remove-nth-node-from-end-of-list","created_at":"2019-04-11","timeArr":[2019,3,11,14,42,40,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>定义<code>双指针</code>，其中<code>指针2</code>比<code>指针1</code>慢<code>n</code>，等到<code>指针1</code>到达最后的时候，需要删除的就是<code>指针2.next</code>。</p>\\n<p>注意：</p>\\n<p>如果定义时<code>指针1</code>已经为<code>null</code>，说明要删除的就是头一个，直接返回<code>head.next</code>。</p>\\n","content":"<p>给你一个链表，删除链表的倒数第 <code>n</code><em> </em>个结点，并且返回链表的头结点。</p>\\n\\n<p><strong>进阶：</strong>你能尝试使用一趟扫描实现吗？</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2020/10/03/remove_ex1.jpg\\" style=\\"width: 542px; height: 222px;\\" />\\n<pre>\\n<strong>输入：</strong>head = [1,2,3,4,5], n = 2\\n<strong>输出：</strong>[1,2,3,5]\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>head = [1], n = 1\\n<strong>输出：</strong>[]\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>head = [1,2], n = 1\\n<strong>输出：</strong>[1]\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li>链表中结点的数目为 <code>sz</code></li>\\n\\t<li><code>1 <= sz <= 30</code></li>\\n\\t<li><code>0 <= Node.val <= 100</code></li>\\n\\t<li><code>1 <= n <= sz</code></li>\\n</ul>\\n","title":"19. 删除链表的倒数第 N 个结点","relatedTags":["链表","双指针"],"difficult":"Middle","lang":["javascript"],"uniqueID":"19","slug":"19-Remove-Nth-Node-From-End-of-List"}')}}]);