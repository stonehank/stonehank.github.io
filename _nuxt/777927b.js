(window.webpackJsonp=window.webpackJsonp||[]).push([[270],{1068:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">matrix</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">target</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> numSubmatrixSumTarget = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">matrix, target</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> m=matrix.length,n=matrix[<span class=\\"hljs-number\\">0</span>].length\\n  <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> left=<span class=\\"hljs-number\\">0</span>;left&lt;n;left++){\\n    <span class=\\"hljs-keyword\\">let</span> sum=<span class=\\"hljs-built_in\\">Array</span>(m).fill(<span class=\\"hljs-number\\">0</span>)\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> right=left;right&lt;n;right++){\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> r=<span class=\\"hljs-number\\">0</span>;r&lt;m;r++){\\n        sum[r]+=matrix[r][right]\\n      }\\n      <span class=\\"hljs-keyword\\">let</span> countHash=<span class=\\"hljs-keyword\\">new</span> <span class=\\"hljs-built_in\\">Map</span>()\\n      countHash.set(<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">1</span>)\\n      <span class=\\"hljs-keyword\\">let</span> csum=<span class=\\"hljs-number\\">0</span>\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> s <span class=\\"hljs-keyword\\">of</span> sum){\\n        csum+=s\\n        <span class=\\"hljs-keyword\\">let</span> t=csum-target\\n        <span class=\\"hljs-keyword\\">if</span>(countHash.has(t))res+=countHash.get(t)\\n        <span class=\\"hljs-keyword\\">if</span>(countHash.has(csum))countHash.set(csum,countHash.get(csum)+<span class=\\"hljs-number\\">1</span>)\\n        <span class=\\"hljs-keyword\\">else</span> countHash.set(csum,<span class=\\"hljs-number\\">1</span>)\\n      }   \\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"number-of-submatrices-that-sum-to-target","created_at":"2019-06-02","timeArr":[2019,5,2,15,15,54,0],"hasThinking":false,"content":"<p>给出矩阵 <code>matrix</code> 和目标值 <code>target</code>，返回元素总和等于目标值的非空子矩阵的数量。</p>\\n\\n<p>子矩阵 <code>x1, y1, x2, y2</code> 是满足 <code>x1 <= x <= x2</code> 且 <code>y1 <= y <= y2</code> 的所有单元 <code>matrix[x][y]</code> 的集合。</p>\\n\\n<p>如果 <code>(x1, y1, x2, y2)</code> 和 <code>(x1\', y1\', x2\', y2\')</code> 两个子矩阵中部分坐标不同（如：<code>x1 != x1\'</code>），那么这两个子矩阵也不同。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<p><img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2020/09/02/mate1.jpg\\" style=\\"width: 242px; height: 242px;\\" /></p>\\n\\n<pre>\\n<strong>输入：</strong>matrix = [[0,1,0],[1,1,1],[0,1,0]], target = 0\\n<strong>输出：</strong>4\\n<strong>解释：</strong>四个只含 0 的 1x1 子矩阵。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>matrix = [[1,-1],[-1,1]], target = 0\\n<strong>输出：</strong>5\\n<strong>解释：</strong>两个 1x2 子矩阵，加上两个 2x1 子矩阵，再加上一个 2x2 子矩阵。\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>matrix = [[904]], target = 0\\n<strong>输出：</strong>0\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong><strong>提示：</strong></strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= matrix.length <= 100</code></li>\\n\\t<li><code>1 <= matrix[0].length <= 100</code></li>\\n\\t<li><code>-1000 <= matrix[i] <= 1000</code></li>\\n\\t<li><code>-10^8 <= target <= 10^8</code></li>\\n</ul>\\n","title":"1074. 元素和为目标值的子矩阵数量","relatedTags":["数组","哈希表","矩阵","前缀和"],"difficult":"Hard","lang":["javascript"],"uniqueID":"1074","slug":"1074-Number-of-Submatrices-That-Sum-to-Target"}')}}]);