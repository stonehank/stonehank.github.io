(window.webpackJsonp=window.webpackJsonp||[]).push([[1392],{2190:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">cap</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> StackOfPlates = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">cap</span>) </span>{\\n  <span class=\\"hljs-keyword\\">this</span>.list=[]\\n  <span class=\\"hljs-keyword\\">this</span>.limit=cap\\n  <span class=\\"hljs-keyword\\">this</span>.index=<span class=\\"hljs-number\\">0</span>\\n};\\n\\n<span class=\\"hljs-comment\\">/** \\n * @param {number} val\\n * @return {void}\\n */</span>\\nStackOfPlates.prototype.push = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">val</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-keyword\\">this</span>.limit===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span>\\n  <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-keyword\\">this</span>.list[<span class=\\"hljs-keyword\\">this</span>.index]==<span class=\\"hljs-literal\\">null</span>){\\n    <span class=\\"hljs-keyword\\">this</span>.list.push([val])\\n  }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-keyword\\">this</span>.list[<span class=\\"hljs-keyword\\">this</span>.index].length===<span class=\\"hljs-keyword\\">this</span>.limit){\\n    <span class=\\"hljs-keyword\\">this</span>.list.push([val])\\n    <span class=\\"hljs-keyword\\">this</span>.index++\\n  }<span class=\\"hljs-keyword\\">else</span>{\\n    <span class=\\"hljs-keyword\\">this</span>.list[<span class=\\"hljs-keyword\\">this</span>.index].push(val)\\n  }\\n};\\n\\n<span class=\\"hljs-comment\\">/**\\n * @return {number}\\n */</span>\\nStackOfPlates.prototype.pop = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-keyword\\">this</span>.limit===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">-1</span>\\n  <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-keyword\\">this</span>.list.length===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">-1</span>\\n  <span class=\\"hljs-keyword\\">let</span> n=<span class=\\"hljs-keyword\\">this</span>.list[<span class=\\"hljs-keyword\\">this</span>.index].pop()\\n  <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-keyword\\">this</span>.list[<span class=\\"hljs-keyword\\">this</span>.index].length===<span class=\\"hljs-number\\">0</span>){\\n    <span class=\\"hljs-keyword\\">this</span>.list.splice(<span class=\\"hljs-keyword\\">this</span>.index,<span class=\\"hljs-number\\">1</span>)\\n  }\\n  <span class=\\"hljs-keyword\\">this</span>.index=<span class=\\"hljs-built_in\\">Math</span>.max(<span class=\\"hljs-keyword\\">this</span>.list.length<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">0</span>)\\n  <span class=\\"hljs-keyword\\">return</span> n\\n};\\n\\n<span class=\\"hljs-comment\\">/** \\n * @param {number} index\\n * @return {number}\\n */</span>\\nStackOfPlates.prototype.popAt = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">index</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-keyword\\">this</span>.limit===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">-1</span>\\n  <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-keyword\\">this</span>.list.length===<span class=\\"hljs-number\\">0</span> || !<span class=\\"hljs-keyword\\">this</span>.list[index])<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">-1</span>\\n  <span class=\\"hljs-keyword\\">let</span> n=<span class=\\"hljs-keyword\\">this</span>.list[index].pop()\\n  <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-keyword\\">this</span>.list[index].length===<span class=\\"hljs-number\\">0</span>){\\n    <span class=\\"hljs-keyword\\">this</span>.list.splice(index,<span class=\\"hljs-number\\">1</span>)\\n    <span class=\\"hljs-keyword\\">this</span>.index=<span class=\\"hljs-built_in\\">Math</span>.max(<span class=\\"hljs-keyword\\">this</span>.list.length<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">0</span>)\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> n\\n};\\n\\n<span class=\\"hljs-comment\\">/**\\n * Your StackOfPlates object will be instantiated and called as such:\\n * var obj = new StackOfPlates(cap)\\n * obj.push(val)\\n * var param_2 = obj.pop()\\n * var param_3 = obj.popAt(index)\\n */</span>\\n</code></pre>\\n"],"querySlug":"stack-of-plates-lcci","created_at":"2020-04-24","timeArr":[2020,3,24,20,42,1,0],"hasThinking":false,"content":"<p>堆盘子。设想有一堆盘子，堆太高可能会倒下来。因此，在现实生活中，盘子堆到一定高度时，我们就会另外堆一堆盘子。请实现数据结构<code>SetOfStacks</code>，模拟这种行为。<code>SetOfStacks</code>应该由多个栈组成，并且在前一个栈填满时新建一个栈。此外，<code>SetOfStacks.push()</code>和<code>SetOfStacks.pop()</code>应该与普通栈的操作方法相同（也就是说，pop()返回的值，应该跟只有一个栈时的情况一样）。 进阶：实现一个<code>popAt(int index)</code>方法，根据指定的子栈，执行pop操作。</p>\\n\\n<p>当某个栈为空时，应当删除该栈。当栈中没有元素或不存在该栈时，<code>pop</code>，<code>popAt</code>&nbsp;应返回 -1.</p>\\n\\n<p><strong>示例1:</strong></p>\\n\\n<pre><strong> 输入</strong>：\\n[&quot;StackOfPlates&quot;, &quot;push&quot;, &quot;push&quot;, &quot;popAt&quot;, &quot;pop&quot;, &quot;pop&quot;]\\n[[1], [1], [2], [1], [], []]\\n<strong> 输出</strong>：\\n[null, null, null, 2, 1, -1]\\n</pre>\\n\\n<p><strong>示例2:</strong></p>\\n\\n<pre><strong> 输入</strong>：\\n[&quot;StackOfPlates&quot;, &quot;push&quot;, &quot;push&quot;, &quot;push&quot;, &quot;popAt&quot;, &quot;popAt&quot;, &quot;popAt&quot;]\\n[[2], [1], [2], [3], [0], [0], [0]]\\n<strong> 输出</strong>：\\n[null, null, null, null, 2, 1, 3]\\n</pre>\\n","title":"面试题 03.03. 堆盘子","relatedTags":["栈","设计","链表"],"difficult":"Middle","lang":["javascript"],"uniqueID":"面试题 03.03","slug":"mian-shi-ti-03.03-Stack-of-Plates-LCCI"}')}}]);