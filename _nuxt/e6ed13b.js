(window.webpackJsonp=window.webpackJsonp||[]).push([[86],{568:function(e){e.exports=JSON.parse('{"content":"<p><code>React.Children</code>和<code>this.props.children</code>都是获取父组件的子元素(子组件)</p>\\n<p>this.props.children:</p>\\n<ol>\\n<li>1个子元素  =&gt; {Object}(React元素(组件)对象)</li>\\n<li>多个子元素 =&gt; [{Object},{Object}...]</li>\\n<li>无子元素   =&gt; undefined</li>\\n<li>text元素   =&gt; text(字符串)</li>\\n<li>注释       =&gt; undefined</li>\\n</ol>\\n<p>11-21补充：</p>\\n<p><code>this.props.children</code>很重要的一点是，当组件更新时，并不会重复渲染。</p>\\n<p>搭配<code>React.createContext</code>能达到只渲染<code>context</code>改变的组件，类似<code>react-redux</code>的效果。</p>\\n<p>参考自：<a href=\\"https://zhuanlan.zhihu.com/p/50336226\\">避免React Context导致的重复渲染</a></p>\\n<p>React.Children:</p>\\n<p>一个方法集合</p>\\n<p>包含<code>map,forEach,count,toArray,only</code></p>\\n<ul>\\n<li><p><code>count(children)</code>:计算子组件数量(无就为0)</p>\\n</li>\\n<li><p><code>only(children)</code>:children必须是唯一一个React元素对象(不可以是text)</p>\\n</li>\\n</ul>\\n<p>其他和ES6一样了</p>\\n<p>其中<code>map</code>和<code>forEach</code>第一个参数都是children，第二个参数就是自定义函数<code>(child,index)=&gt;{}</code></p>\\n<p>无论几个子元素，使用上面的<code>map</code>和<code>toArray</code>都会返回一个数组，包含着{Object}</p>\\n<p>这样来进行处理就不需要再去判断，方便安全</p>\\n","toc":[],"relatedTags":null,"created_at":"2018-06-10","timeArr":[2018,5,10,0,0,0,0],"title":"React.Children","uuid":"07cc2d304f96574c9995198fe6ff05e9fc342322","summary":"<p><code>React.Children</code>和<code>this.props.children</code>都是获取父组件的子元素(子组件)</p>\\n<p>this.props.children:</p>\\n<ol>\\n<li>1个子元素  =&gt; {Object}(React元素(组件)对象)</li>\\n<li>多个子元素 =&gt; [{Object},{Object}...]</li>\\n<li>无子元素   =...</li>\\n</ol>","slug":"React.Children","sha":"30a4f1281825a6b1c904adf8abddc4b886ccbd1a"}')}}]);