(window.webpackJsonp=window.webpackJsonp||[]).push([[1224],{2022:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{TreeNode}</span> <span class=\\"hljs-variable\\">root</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{TreeNode}</span> <span class=\\"hljs-variable\\">target</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">K</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> distanceK = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">root, target, K</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(K===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span> [target.val]\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">setParent</span>(<span class=\\"hljs-params\\">root,p</span>)</span>{\\n    root.parent=p\\n    <span class=\\"hljs-keyword\\">if</span>(root.left)setParent(root.left,root)\\n    <span class=\\"hljs-keyword\\">if</span>(root.right)setParent(root.right,root)\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> res=[]\\n  setParent(root,<span class=\\"hljs-literal\\">null</span>)\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">setDis</span>(<span class=\\"hljs-params\\">root,last</span>)</span>{\\n    root.dis=last.dis+<span class=\\"hljs-number\\">1</span>\\n    <span class=\\"hljs-keyword\\">if</span>(root.dis===K)res.push(root.val)\\n    <span class=\\"hljs-keyword\\">if</span>(root.left &amp;&amp; root.left!==last)setDis(root.left,root)\\n    <span class=\\"hljs-keyword\\">if</span>(root.right &amp;&amp; root.right!==last)setDis(root.right,root)\\n    <span class=\\"hljs-keyword\\">if</span>(root.parent &amp;&amp; root.parent!==last)setDis(root.parent,root)\\n  }\\n  target.dis=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">if</span>(target.left)setDis(target.left,target)\\n  <span class=\\"hljs-keyword\\">if</span>(target.right)setDis(target.right,target)\\n  <span class=\\"hljs-keyword\\">if</span>(target.parent)setDis(target.parent,target)\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"all-nodes-distance-k-in-binary-tree","created_at":"2019-03-20","timeArr":[2019,2,20,16,6,22,0],"hasThinking":false,"content":"<p>给定一个二叉树（具有根结点&nbsp;<code>root</code>），&nbsp;一个目标结点&nbsp;<code>target</code>&nbsp;，和一个整数值 <code>K</code> 。</p>\\n\\n<p>返回到目标结点 <code>target</code> 距离为 <code>K</code> 的所有结点的值的列表。 答案可以以任何顺序返回。</p>\\n\\n<p>&nbsp;</p>\\n\\n<ol>\\n</ol>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, K = 2\\n<strong>输出：</strong>[7,4,1]\\n<strong>解释：</strong>\\n所求结点为与目标结点（值为 5）距离为 2 的结点，\\n值分别为 7，4，以及 1\\n\\n<img alt=\\"\\" src=\\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/06/28/sketch0.png\\" style=\\"height: 240px; width: 280px;\\">\\n\\n注意，输入的 &quot;root&quot; 和 &quot;target&quot; 实际上是树上的结点。\\n上面的输入仅仅是对这些对象进行了序列化描述。\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ol>\\n\\t<li>给定的树是非空的。</li>\\n\\t<li>树上的每个结点都具有唯一的值&nbsp;<code>0 &lt;= node.val &lt;= 500</code>&nbsp;。</li>\\n\\t<li>目标结点&nbsp;<code>target</code>&nbsp;是树上的结点。</li>\\n\\t<li><code>0 &lt;= K &lt;= 1000</code>.</li>\\n</ol>\\n","title":"863. 二叉树中所有距离为 K 的结点","relatedTags":["树","深度优先搜索","广度优先搜索","二叉树"],"difficult":"Middle","lang":["javascript"],"uniqueID":"863","slug":"863-All-Nodes-Distance-K-in-Binary-Tree"}')}}]);