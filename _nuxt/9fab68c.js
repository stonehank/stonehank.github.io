(window.webpackJsonp=window.webpackJsonp||[]).push([[987],{1785:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string[]}</span> <span class=\\"hljs-variable\\">paths</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{string[][]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> findDuplicate = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">paths</span>) </span>{\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">findContent</span>(<span class=\\"hljs-params\\">str</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> s=str.indexOf(<span class=\\"hljs-string\\">\'(\'</span>),\\n        e=str.indexOf(<span class=\\"hljs-string\\">\')\'</span>)\\n    <span class=\\"hljs-keyword\\">return</span> str.substring(s+<span class=\\"hljs-number\\">1</span>,e)\\n  }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">findFilename</span>(<span class=\\"hljs-params\\">str</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> s=str.indexOf(<span class=\\"hljs-string\\">\'(\'</span>)\\n    <span class=\\"hljs-keyword\\">return</span> str.substring(<span class=\\"hljs-number\\">0</span>,s)\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> hash={}\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;paths.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> arr=paths[i].split(<span class=\\"hljs-string\\">\' \'</span>)\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">1</span>;j&lt;arr.length;j++){\\n      <span class=\\"hljs-keyword\\">let</span> c=findContent(arr[j]),\\n          fn=findFilename(arr[j])\\n      <span class=\\"hljs-keyword\\">if</span>(hash[c]==<span class=\\"hljs-literal\\">null</span>)hash[c]=[arr[<span class=\\"hljs-number\\">0</span>]+<span class=\\"hljs-string\\">\'/\'</span>+fn]\\n      <span class=\\"hljs-keyword\\">else</span> hash[c].push(arr[<span class=\\"hljs-number\\">0</span>]+<span class=\\"hljs-string\\">\'/\'</span>+fn)\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> ans=[]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> k <span class=\\"hljs-keyword\\">in</span> hash){\\n    <span class=\\"hljs-keyword\\">if</span>(hash[k].length&gt;<span class=\\"hljs-number\\">1</span>)ans.push(hash[k])\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> ans\\n};\\n</code></pre>\\n"],"querySlug":"find-duplicate-file-in-system","created_at":"2019-03-26","timeArr":[2019,2,26,11,29,8,0],"hasThinking":false,"content":"<p>给定一个目录信息列表，包括目录路径，以及该目录中的所有包含内容的文件，您需要找到文件系统中的所有重复文件组的路径。一组重复的文件至少包括<strong>二个</strong>具有完全相同内容的文件。</p>\\n\\n<p><strong>输入</strong>列表中的单个目录信息字符串的格式如下：</p>\\n\\n<p><code>&quot;root/d1/d2/.../dm f1.txt(f1_content) f2.txt(f2_content) ... fn.txt(fn_content)&quot;</code></p>\\n\\n<p>这意味着有 n 个文件（<code>f1.txt</code>,&nbsp;<code>f2.txt</code>&nbsp;...&nbsp;<code>fn.txt</code> 的内容分别是 <code>f1_content</code>,&nbsp;<code>f2_content</code>&nbsp;...&nbsp;<code>fn_content</code>）在目录&nbsp;<code>root/d1/d2/.../dm</code>&nbsp;下。注意：n&gt;=1 且 m&gt;=0。如果 m=0，则表示该目录是根目录。</p>\\n\\n<p>该<strong>输出</strong>是重复文件路径组的列表。对于每个组，它包含具有相同内容的文件的所有文件路径。文件路径是具有下列格式的字符串：</p>\\n\\n<p><code>&quot;directory_path/file_name.txt&quot;</code></p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>\\n[&quot;root/a 1.txt(abcd) 2.txt(efgh)&quot;, &quot;root/c 3.txt(abcd)&quot;, &quot;root/c/d 4.txt(efgh)&quot;, &quot;root 4.txt(efgh)&quot;]\\n<strong>输出：</strong>  \\n[[&quot;root/a/2.txt&quot;,&quot;root/c/d/4.txt&quot;,&quot;root/4.txt&quot;],[&quot;root/a/1.txt&quot;,&quot;root/c/3.txt&quot;]]\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>注：</strong></p>\\n\\n<ol>\\n\\t<li>最终输出不需要顺序。</li>\\n\\t<li>您可以假设目录名、文件名和文件内容只有字母和数字，并且文件内容的长度在 [1，50] 的范围内。</li>\\n\\t<li>给定的文件数量在 [1，20000] 个范围内。</li>\\n\\t<li>您可以假设在同一目录中没有任何文件或目录共享相同的名称。</li>\\n\\t<li>您可以假设每个给定的目录信息代表一个唯一的目录。目录路径和文件信息用一个空格分隔。</li>\\n</ol>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>超越竞赛的后续行动：</strong></p>\\n\\n<ol>\\n\\t<li>假设您有一个真正的文件系统，您将如何搜索文件？广度搜索还是宽度搜索？</li>\\n\\t<li>如果文件内容非常大（GB级别），您将如何修改您的解决方案？</li>\\n\\t<li>如果每次只能读取 1 kb 的文件，您将如何修改解决方案？</li>\\n\\t<li>修改后的解决方案的时间复杂度是多少？其中最耗时的部分和消耗内存的部分是什么？如何优化？</li>\\n\\t<li>如何确保您发现的重复文件不是误报？</li>\\n</ol>\\n","title":"609. 在系统中查找重复文件","relatedTags":["数组","哈希表","字符串"],"difficult":"Middle","lang":["javascript"],"uniqueID":"609","slug":"609-Find-Duplicate-File-in-System"}')}}]);