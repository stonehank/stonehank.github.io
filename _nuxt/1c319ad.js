(window.webpackJsonp=window.webpackJsonp||[]).push([[938],{1736:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">a</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">b</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{string}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> complexNumberMultiply = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">a, b</span>) </span>{\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">parse</span>(<span class=\\"hljs-params\\">str</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> arr=str.split(<span class=\\"hljs-string\\">\'+\'</span>)\\n    <span class=\\"hljs-keyword\\">let</span> a=<span class=\\"hljs-built_in\\">parseInt</span>(arr[<span class=\\"hljs-number\\">0</span>],<span class=\\"hljs-number\\">10</span>),\\n        b=<span class=\\"hljs-built_in\\">parseInt</span>(arr[<span class=\\"hljs-number\\">1</span>],<span class=\\"hljs-number\\">10</span>)\\n    <span class=\\"hljs-keyword\\">return</span> [a,b]\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> [x1,y1]=parse(a),[x2,y2]=parse(b)\\n  \\n  <span class=\\"hljs-keyword\\">let</span> intNum=x1*x2-y1*y2\\n  <span class=\\"hljs-keyword\\">let</span> complexNum=x1*y2+x2*y1\\n  \\n  <span class=\\"hljs-keyword\\">return</span> intNum+<span class=\\"hljs-string\\">\\"+\\"</span>+complexNum+<span class=\\"hljs-string\\">\\"i\\"</span>\\n};\\n</code></pre>\\n"],"querySlug":"complex-number-multiplication","created_at":"2019-03-25","timeArr":[2019,2,25,14,43,55,0],"hasThinking":false,"content":"<p><a href=\\"https://baike.baidu.com/item/%E5%A4%8D%E6%95%B0/254365?fr=aladdin\\" target=\\"_blank\\">复数</a> 可以用字符串表示，遵循 <code>\\"<strong>实部</strong>+<strong>虚部</strong>i\\"</code> 的形式，并满足下述条件：</p>\\n\\n<ul>\\n\\t<li><code>实部</code> 是一个整数，取值范围是 <code>[-100, 100]</code></li>\\n\\t<li><code>虚部</code> 也是一个整数，取值范围是 <code>[-100, 100]</code></li>\\n\\t<li><code>i<sup>2</sup> == -1</code></li>\\n</ul>\\n\\n<p>给你两个字符串表示的复数 <code>num1</code> 和 <code>num2</code> ，请你遵循复数表示形式，返回表示它们乘积的字符串。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>num1 = \\"1+1i\\", num2 = \\"1+1i\\"\\n<strong>输出：</strong>\\"0+2i\\"\\n<strong>解释：</strong>(1 + i) * (1 + i) = 1 + i2 + 2 * i = 2i ，你需要将它转换为 0+2i 的形式。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>num1 = \\"1+-1i\\", num2 = \\"1+-1i\\"\\n<strong>输出：</strong>\\"0+-2i\\"\\n<strong>解释：</strong>(1 - i) * (1 - i) = 1 + i2 - 2 * i = -2i ，你需要将它转换为 0+-2i 的形式。 \\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>num1</code> 和 <code>num2</code> 都是有效的复数表示。</li>\\n</ul>\\n","title":"537. 复数乘法","relatedTags":["数学","字符串","模拟"],"difficult":"Middle","lang":["javascript"],"uniqueID":"537","slug":"537-Complex-Number-Multiplication"}')}}]);