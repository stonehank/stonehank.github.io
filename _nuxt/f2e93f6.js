(window.webpackJsonp=window.webpackJsonp||[]).push([[400],{1198:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">s</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> romanToInt = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">s</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> hash={\\n    <span class=\\"hljs-string\\">\\"I\\"</span>:<span class=\\"hljs-number\\">1</span>,\\n    <span class=\\"hljs-string\\">\\"IV\\"</span>:<span class=\\"hljs-number\\">4</span>,\\n    <span class=\\"hljs-string\\">\\"V\\"</span>:<span class=\\"hljs-number\\">5</span>,\\n    <span class=\\"hljs-string\\">\\"IX\\"</span>:<span class=\\"hljs-number\\">9</span>,\\n    <span class=\\"hljs-string\\">\\"X\\"</span>:<span class=\\"hljs-number\\">10</span>,\\n    <span class=\\"hljs-string\\">\\"XL\\"</span>:<span class=\\"hljs-number\\">40</span>,\\n    <span class=\\"hljs-string\\">\\"L\\"</span>:<span class=\\"hljs-number\\">50</span>,\\n    <span class=\\"hljs-string\\">\\"XC\\"</span>:<span class=\\"hljs-number\\">90</span>,\\n    <span class=\\"hljs-string\\">\\"C\\"</span>:<span class=\\"hljs-number\\">100</span>,\\n    <span class=\\"hljs-string\\">\\"CD\\"</span>:<span class=\\"hljs-number\\">400</span>,\\n    <span class=\\"hljs-string\\">\\"D\\"</span>:<span class=\\"hljs-number\\">500</span>,\\n    <span class=\\"hljs-string\\">\\"CM\\"</span>:<span class=\\"hljs-number\\">900</span>,\\n    <span class=\\"hljs-string\\">\\"M\\"</span>:<span class=\\"hljs-number\\">1000</span>\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">let</span> num=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">while</span>(i&lt;s.length){\\n    <span class=\\"hljs-keyword\\">if</span>(i===s.length<span class=\\"hljs-number\\">-1</span>){\\n      <span class=\\"hljs-keyword\\">return</span> num+hash[s[i]]\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      <span class=\\"hljs-keyword\\">let</span> special=s[i]+s[i+<span class=\\"hljs-number\\">1</span>]\\n      <span class=\\"hljs-keyword\\">if</span>(hash[special]!=<span class=\\"hljs-literal\\">null</span>){\\n        num+=hash[special]\\n        i+=<span class=\\"hljs-number\\">2</span>\\n      }<span class=\\"hljs-keyword\\">else</span>{\\n        num+=hash[s[i]]\\n        i++\\n      }\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> num\\n};\\n  \\n</code></pre>\\n"],"querySlug":"roman-to-integer","created_at":"2019-03-21","timeArr":[2019,2,21,18,50,15,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>注意<code>4</code>和<code>9</code>是前一个数字比后一个数字小，其他都是前一个数字比后一个数字大。</p>\\n","content":"<p>罗马数字包含以下七种字符: <code>I</code>， <code>V</code>， <code>X</code>， <code>L</code>，<code>C</code>，<code>D</code> 和 <code>M</code>。</p>\\n\\n<pre>\\n<strong>字符</strong>          <strong>数值</strong>\\nI             1\\nV             5\\nX             10\\nL             50\\nC             100\\nD             500\\nM             1000</pre>\\n\\n<p>例如， 罗马数字 2 写做 <code>II</code> ，即为两个并列的 1。12 写做 <code>XII</code> ，即为 <code>X</code> + <code>II</code> 。 27 写做  <code>XXVII</code>, 即为 <code>XX</code> + <code>V</code> + <code>II</code> 。</p>\\n\\n<p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 <code>IIII</code>，而是 <code>IV</code>。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 <code>IX</code>。这个特殊的规则只适用于以下六种情况：</p>\\n\\n<ul>\\n\\t<li><code>I</code> 可以放在 <code>V</code> (5) 和 <code>X</code> (10) 的左边，来表示 4 和 9。</li>\\n\\t<li><code>X</code> 可以放在 <code>L</code> (50) 和 <code>C</code> (100) 的左边，来表示 40 和 90。 </li>\\n\\t<li><code>C</code> 可以放在 <code>D</code> (500) 和 <code>M</code> (1000) 的左边，来表示 400 和 900。</li>\\n</ul>\\n\\n<p>给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1:</strong></p>\\n\\n<pre>\\n<strong>输入:</strong> \\"III\\"\\n<strong>输出:</strong> 3</pre>\\n\\n<p><strong>示例 2:</strong></p>\\n\\n<pre>\\n<strong>输入:</strong> \\"IV\\"\\n<strong>输出:</strong> 4</pre>\\n\\n<p><strong>示例 3:</strong></p>\\n\\n<pre>\\n<strong>输入:</strong> \\"IX\\"\\n<strong>输出:</strong> 9</pre>\\n\\n<p><strong>示例 4:</strong></p>\\n\\n<pre>\\n<strong>输入:</strong> \\"LVIII\\"\\n<strong>输出:</strong> 58\\n<strong>解释:</strong> L = 50, V= 5, III = 3.\\n</pre>\\n\\n<p><strong>示例 5:</strong></p>\\n\\n<pre>\\n<strong>输入:</strong> \\"MCMXCIV\\"\\n<strong>输出:</strong> 1994\\n<strong>解释:</strong> M = 1000, CM = 900, XC = 90, IV = 4.</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= s.length <= 15</code></li>\\n\\t<li><code>s</code> 仅含字符 <code>(\'I\', \'V\', \'X\', \'L\', \'C\', \'D\', \'M\')</code></li>\\n\\t<li>题目数据保证 <code>s</code> 是一个有效的罗马数字，且表示整数在范围 <code>[1, 3999]</code> 内</li>\\n\\t<li>题目所给测试用例皆符合罗马数字书写规则，不会出现跨位等情况。</li>\\n\\t<li>IL 和 IM 这样的例子并不符合题目要求，49 应该写作 XLIX，999 应该写作 CMXCIX 。</li>\\n\\t<li>关于罗马数字的详尽书写规则，可以参考 <a href=\\"https://b2b.partcommunity.com/community/knowledge/zh_CN/detail/10753/%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97#knowledge_article\\">罗马数字 - Mathematics </a>。</li>\\n</ul>\\n","title":"13. 罗马数字转整数","relatedTags":["哈希表","数学","字符串"],"difficult":"Easy","lang":["javascript"],"uniqueID":"13","slug":"13-Roman-to-Integer"}')}}]);