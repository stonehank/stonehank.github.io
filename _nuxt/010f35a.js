(window.webpackJsonp=window.webpackJsonp||[]).push([[1236],{2034:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">commands</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">obstacles</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> robotSim = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">commands, obstacles</span>) </span>{\\n  <span class=\\"hljs-comment\\">// 0:up,1:right,2:down,3:left</span>\\n  <span class=\\"hljs-keyword\\">let</span> moves=[[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">1</span>],[<span class=\\"hljs-number\\">1</span>,<span class=\\"hljs-number\\">0</span>],[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">-1</span>],[<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">0</span>]]  \\n  <span class=\\"hljs-keyword\\">let</span> obsHash=<span class=\\"hljs-keyword\\">new</span> <span class=\\"hljs-built_in\\">Map</span>()\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> obs <span class=\\"hljs-keyword\\">of</span> obstacles) obsHash.set(obs[<span class=\\"hljs-number\\">0</span>]+<span class=\\"hljs-string\\">\\"-\\"</span>+obs[<span class=\\"hljs-number\\">1</span>],<span class=\\"hljs-literal\\">true</span>)\\n  <span class=\\"hljs-keyword\\">let</span> max=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">let</span> state=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">let</span> curPos=[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">0</span>]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> cur <span class=\\"hljs-keyword\\">of</span> commands){\\n    <span class=\\"hljs-keyword\\">if</span>(cur===<span class=\\"hljs-number\\">-1</span>){\\n      state=(state+<span class=\\"hljs-number\\">1</span>)%<span class=\\"hljs-number\\">4</span>\\n    }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(cur===<span class=\\"hljs-number\\">-2</span>){\\n      state=(state+<span class=\\"hljs-number\\">3</span>)%<span class=\\"hljs-number\\">4</span>\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;cur;j++){\\n        <span class=\\"hljs-keyword\\">if</span>(!obsHash.has((curPos[<span class=\\"hljs-number\\">0</span>]+moves[state][<span class=\\"hljs-number\\">0</span>])+<span class=\\"hljs-string\\">\'-\'</span>+(curPos[<span class=\\"hljs-number\\">1</span>]+moves[state][<span class=\\"hljs-number\\">1</span>]))){\\n          curPos[<span class=\\"hljs-number\\">0</span>]+=moves[state][<span class=\\"hljs-number\\">0</span>]\\n          curPos[<span class=\\"hljs-number\\">1</span>]+=moves[state][<span class=\\"hljs-number\\">1</span>] \\n        }\\n      }\\n    }\\n    max=<span class=\\"hljs-built_in\\">Math</span>.max(max,<span class=\\"hljs-built_in\\">Math</span>.pow(curPos[<span class=\\"hljs-number\\">0</span>],<span class=\\"hljs-number\\">2</span>)+<span class=\\"hljs-built_in\\">Math</span>.pow(curPos[<span class=\\"hljs-number\\">1</span>],<span class=\\"hljs-number\\">2</span>))\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> max\\n};\\n</code></pre>\\n"],"querySlug":"walking-robot-simulation","created_at":"2019-04-15","timeArr":[2019,3,15,12,50,39,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>由于题目给出了<code>1 &lt;= x &lt;= 9</code>，因此我们可以使用模拟。</p>\\n<p>首先用<code>map</code>保存所有<code>obstacles</code>，在构建出机器人行走的方向<code>moves</code>，每次遇到<code>-1</code>，则方向索引<code>state++</code>，遇到<code>-2</code>，则<code>state--</code>，\\n行走步数则遍历并且模拟行走，并且检查是否存在障碍，遇到障碍直接停止。</p>\\n<p>一个大坑：在行走的<strong>过程中</strong>不断找最大的平方和。</p>\\n","content":"<p>机器人在一个无限大小的 XY 网格平面上行走，从点 <code>(0, 0)</code> 处开始出发，面向北方。该机器人可以接收以下三种类型的命令 <code>commands</code> ：</p>\\n\\n<ul>\\n\\t<li><code>-2</code> ：向左转 <code>90</code> 度</li>\\n\\t<li><code>-1</code> ：向右转 <code>90</code> 度</li>\\n\\t<li><code>1 <= x <= 9</code> ：向前移动 <code>x</code> 个单位长度</li>\\n</ul>\\n\\n<p>在网格上有一些格子被视为障碍物 <code>obstacles</code> 。第 <code>i</code> 个障碍物位于网格点  <code>obstacles[i] = (x<sub>i</sub>, y<sub>i</sub>)</code> 。</p>\\n\\n<p>机器人无法走到障碍物上，它将会停留在障碍物的前一个网格方块上，但仍然可以继续尝试进行该路线的其余部分。</p>\\n\\n<p>返回从原点到机器人所有经过的路径点（坐标为整数）的最大欧式距离的平方。（即，如果距离为 <code>5</code> ，则返回 <code>25</code> ）</p>\\n\\n<div class=\\"d-google dictRoot saladict-panel isAnimate\\">\\n<div>\\n<div class=\\"MachineTrans-Text\\">\\n<div class=\\"MachineTrans-Lines\\">\\n<div class=\\"MachineTrans-Lines-collapse MachineTrans-lang-en\\"> </div>\\n</div>\\n\\n<div class=\\"MachineTrans-Lines\\">\\n<p class=\\"MachineTrans-lang-zh-CN\\"><strong>注意：</strong></p>\\n\\n<ul>\\n\\t<li class=\\"MachineTrans-lang-zh-CN\\">北表示 <code>+Y</code> 方向。</li>\\n\\t<li class=\\"MachineTrans-lang-zh-CN\\">东表示 <code>+X</code> 方向。</li>\\n\\t<li class=\\"MachineTrans-lang-zh-CN\\">南表示 <code>-Y</code> 方向。</li>\\n\\t<li class=\\"MachineTrans-lang-zh-CN\\">西表示 <code>-X</code> 方向。</li>\\n</ul>\\n</div>\\n</div>\\n</div>\\n</div>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>commands = [4,-1,3], obstacles = []\\n<strong>输出：</strong>25\\n<strong>解释：\\n</strong>机器人开始位于 (0, 0)：\\n1. 向北移动 4 个单位，到达 (0, 4)\\n2. 右转\\n3. 向东移动 3 个单位，到达 (3, 4)\\n距离原点最远的是 (3, 4) ，距离为 3<sup>2</sup> + 4<sup>2</sup> = 25</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>commands = [4,-1,4,-2,4], obstacles = [[2,4]]\\n<strong>输出：</strong>65\\n<strong>解释</strong>：机器人开始位于 (0, 0)：\\n1. 向北移动 4 个单位，到达 (0, 4)\\n2. 右转\\n3. 向东移动 1 个单位，然后被位于 (2, 4) 的障碍物阻挡，机器人停在 (1, 4)\\n4. 左转\\n5. 向北走 4 个单位，到达 (1, 8)\\n距离原点最远的是 (1, 8) ，距离为 1<sup>2</sup> + 8<sup>2</sup> = 65</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= commands.length <= 10<sup>4</sup></code></li>\\n\\t<li><code>commands[i]</code> is one of the values in the list <code>[-2,-1,1,2,3,4,5,6,7,8,9]</code>.</li>\\n\\t<li><code>0 <= obstacles.length <= 10<sup>4</sup></code></li>\\n\\t<li><code>-3 * 10<sup>4</sup> <= x<sub>i</sub>, y<sub>i</sub> <= 3 * 10<sup>4</sup></code></li>\\n\\t<li>答案保证小于 <code>2<sup>31</sup></code></li>\\n</ul>\\n","title":"874. 模拟行走机器人","relatedTags":["数组","模拟"],"difficult":"Easy","lang":["javascript"],"uniqueID":"874","slug":"874-Walking-Robot-Simulation"}')}}]);