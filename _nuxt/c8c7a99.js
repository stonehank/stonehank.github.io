(window.webpackJsonp=window.webpackJsonp||[]).push([[1355],{2153:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Initialize your data structure here.\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> TimeMap = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{\\n  <span class=\\"hljs-keyword\\">this</span>.hash={}\\n};\\n\\n<span class=\\"hljs-comment\\">/** \\n * @param {string} key \\n * @param {string} value \\n * @param {number} timestamp\\n * @return {void}\\n */</span>\\nTimeMap.prototype.set = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">key, value, timestamp</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-keyword\\">this</span>.hash[key]==<span class=\\"hljs-literal\\">null</span>)<span class=\\"hljs-keyword\\">this</span>.hash[key]=[]\\n  <span class=\\"hljs-keyword\\">this</span>.hash[key].push([value,timestamp])\\n};\\n\\n<span class=\\"hljs-comment\\">/** \\n * @param {string} key \\n * @param {number} timestamp\\n * @return {string}\\n */</span>\\nTimeMap.prototype.get = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">key, timestamp</span>) </span>{\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">bsFront</span>(<span class=\\"hljs-params\\">arr,n</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> lo=<span class=\\"hljs-number\\">0</span>,hi=arr.length<span class=\\"hljs-number\\">-1</span>\\n    <span class=\\"hljs-keyword\\">while</span>(lo&lt;hi){\\n      <span class=\\"hljs-keyword\\">let</span> mid=<span class=\\"hljs-built_in\\">Math</span>.ceil((lo+hi)/<span class=\\"hljs-number\\">2</span>)\\n      <span class=\\"hljs-keyword\\">if</span>(arr[mid][<span class=\\"hljs-number\\">1</span>]&gt;n)hi=mid<span class=\\"hljs-number\\">-1</span>\\n      <span class=\\"hljs-keyword\\">else</span> lo=mid\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> lo\\n  }\\n  <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-keyword\\">this</span>.hash[key]==<span class=\\"hljs-literal\\">null</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-string\\">\'\'</span>\\n  <span class=\\"hljs-keyword\\">let</span> cand=<span class=\\"hljs-keyword\\">this</span>.hash[key]\\n  <span class=\\"hljs-keyword\\">if</span>(timestamp&lt;cand[<span class=\\"hljs-number\\">0</span>][<span class=\\"hljs-number\\">1</span>])<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-string\\">\'\'</span>\\n  <span class=\\"hljs-keyword\\">let</span> idx=bsFront(cand,timestamp)\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-keyword\\">this</span>.hash[key][idx][<span class=\\"hljs-number\\">0</span>]\\n};\\n\\n<span class=\\"hljs-comment\\">/** \\n * Your TimeMap object will be instantiated and called as such:\\n * var obj = Object.create(TimeMap).createNew()\\n * obj.set(key,value,timestamp)\\n * var param_2 = obj.get(key,timestamp)\\n */</span>\\n</code></pre>\\n"],"querySlug":"time-based-key-value-store","created_at":"2019-02-27","timeArr":[2019,1,27,15,7,7,0],"hasThinking":false,"content":"<p>设计一个基于时间的键值数据结构，该结构可以在不同时间戳存储对应同一个键的多个值，并针对特定时间戳检索键对应的值。</p>\\n\\n<p>实现 <code>TimeMap</code> 类：</p>\\n\\n<ul>\\n\\t<li><code>TimeMap()</code> 初始化数据结构对象</li>\\n\\t<li><code>void set(String key, String value, int timestamp)</code> 存储键 <code>key</code>、值 <code>value</code>，以及给定的时间戳 <code>timestamp</code>。</li>\\n\\t<li><code>String get(String key, int timestamp)</code>\\n\\t<ul>\\n\\t\\t<li>返回先前调用 <code>set(key, value, timestamp_prev)</code> 所存储的值，其中 <code>timestamp_prev <= timestamp</code> 。</li>\\n\\t\\t<li>如果有多个这样的值，则返回对应最大的  <code>timestamp_prev</code> 的那个值。</li>\\n\\t\\t<li>如果没有值，则返回空字符串（<code>\\"\\"</code>）。</li>\\n\\t</ul>\\n\\t</li>\\n</ul>\\n \\n\\n<p><strong>示例：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>\\n[\\"TimeMap\\", \\"set\\", \\"get\\", \\"get\\", \\"set\\", \\"get\\", \\"get\\"]\\n[[], [\\"foo\\", \\"bar\\", 1], [\\"foo\\", 1], [\\"foo\\", 3], [\\"foo\\", \\"bar2\\", 4], [\\"foo\\", 4], [\\"foo\\", 5]]\\n<strong>输出：</strong>\\n[null, null, \\"bar\\", \\"bar\\", null, \\"bar2\\", \\"bar2\\"]\\n\\n<strong>解释：</strong>\\nTimeMap timeMap = new TimeMap();\\ntimeMap.set(\\"foo\\", \\"bar\\", 1);  // 存储键 \\"foo\\" 和值 \\"bar\\" ，时间戳 timestamp = 1   \\ntimeMap.get(\\"foo\\", 1);         // 返回 \\"bar\\"\\ntimeMap.get(\\"foo\\", 3);         // 返回 \\"bar\\", 因为在时间戳 3 和时间戳 2 处没有对应 \\"foo\\" 的值，所以唯一的值位于时间戳 1 处（即 \\"bar\\"） 。\\ntimeMap.set(\\"foo\\", \\"bar2\\", 4); // 存储键 \\"foo\\" 和值 \\"bar2\\" ，时间戳 timestamp = 4  \\ntimeMap.get(\\"foo\\", 4);         // 返回 \\"bar2\\"\\ntimeMap.get(\\"foo\\", 5);         // 返回 \\"bar2\\"\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= key.length, value.length <= 100</code></li>\\n\\t<li><code>key</code> 和 <code>value</code> 由小写英文字母和数字组成</li>\\n\\t<li><code>1 <= timestamp <= 10<sup>7</sup></code></li>\\n\\t<li><code>set</code> 操作中的时间戳 <code>timestamp</code> 都是严格递增的</li>\\n\\t<li>最多调用 <code>set</code> 和 <code>get</code> 操作 <code>2 * 10<sup>5</sup></code> 次</li>\\n</ul>\\n","title":"981. 基于时间的键值存储","relatedTags":["设计","哈希表","字符串","二分查找"],"difficult":"Middle","lang":["javascript"],"uniqueID":"981","slug":"981-Time-Based-Key-Value-Store"}')}}]);