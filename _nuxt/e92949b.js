(window.webpackJsonp=window.webpackJsonp||[]).push([[758],{1556:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">x</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{boolean}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> isSelfCrossing = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">x</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> aux=x.slice()\\n  aux.unshift(<span class=\\"hljs-number\\">0</span>)\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">4</span>;i&lt;aux.length;i++){\\n    <span class=\\"hljs-keyword\\">if</span>(aux[i]&gt;=aux[i<span class=\\"hljs-number\\">-2</span>] &amp;&amp; aux[i<span class=\\"hljs-number\\">-1</span>]&lt;=aux[i<span class=\\"hljs-number\\">-3</span>])<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n    <span class=\\"hljs-keyword\\">if</span>(i&gt;<span class=\\"hljs-number\\">4</span> &amp;&amp; \\n       aux[i<span class=\\"hljs-number\\">-2</span>]&gt;=aux[i<span class=\\"hljs-number\\">-4</span>] &amp;&amp;\\n       aux[i]&gt;=(aux[i<span class=\\"hljs-number\\">-2</span>]-aux[i<span class=\\"hljs-number\\">-4</span>]) &amp;&amp; \\n       aux[i<span class=\\"hljs-number\\">-1</span>]&lt;=aux[i<span class=\\"hljs-number\\">-3</span>] &amp;&amp; \\n       aux[i<span class=\\"hljs-number\\">-1</span>]&gt;=(aux[i<span class=\\"hljs-number\\">-3</span>]-aux[i<span class=\\"hljs-number\\">-5</span>])) {\\n      <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n};\\n</code></pre>\\n"],"querySlug":"self-crossing","created_at":"2019-03-31","timeArr":[2019,2,31,16,4,32,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>一共就2种绕圈的方法，一种往内绕（越绕越小），一种往外绕（越绕越大），画个图就很简单了。</p>\\n<ul>\\n<li>\\n<p>往内绕</p>\\n<pre class=\\"hljs\\"><code>      /|\\\\     \\n __1___|_\\n|      |\\n2      4\\n|___3__|\\n</code></pre>\\n</li>\\n<li>\\n<p>往外绕</p>\\n<pre class=\\"hljs\\"><code>     ___5_\\n __1_|__  |\\n|    |    |\\n|    6    |\\n2    |    4\\n|   \\\\|/   |\\n|___3_____|\\n</code></pre>\\n</li>\\n</ul>\\n<p>对于往内绕，比较简单，每次只需判断之前的<code>3条边</code>，</p>\\n<p>判断：<code>4 &gt;= 2 &amp;&amp; 3 &lt;= 1</code></p>\\n<p>转换成公式：<code>aux[i]&gt;=aux[i-2] &amp;&amp; aux[i-1]&lt;=aux[i-3]</code></p>\\n<p>对于往外绕，要判断更多的边，</p>\\n<p>判断：<code>4 &gt;= 2 &amp;&amp; 6 &gt;= 4-2 &amp;&amp;  5 &lt;= 3 &amp;&amp; 5 &gt;= 3-1</code></p>\\n<p>转换成公式：<code>aux[i-2]&gt;=aux[i-4] &amp;&amp; aux[i]&gt;=(aux[i-2]-aux[i-4]) &amp;&amp;  aux[i-1]&lt;=aux[i-3] &amp;&amp;  aux[i-1]&gt;=(aux[i-3]-aux[i-5])</code></p>\\n","content":"<p>给定一个含有&nbsp;<code>n</code>&nbsp;个正数的数组&nbsp;<em>x</em>。从点&nbsp;<code>(0,0)</code>&nbsp;开始，先向北移动&nbsp;<code>x[0]</code>&nbsp;米，然后向西移动&nbsp;<code>x[1]</code>&nbsp;米，向南移动&nbsp;<code>x[2]</code>&nbsp;米，向东移动&nbsp;<code>x[3]</code>&nbsp;米，持续移动。也就是说，每次移动后你的方位会发生逆时针变化。</p>\\n\\n<p>编写一个&nbsp;<code>O(1)</code>&nbsp;空间复杂度的一趟扫描算法，判断你所经过的路径是否相交。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例&nbsp;1:</strong></p>\\n\\n<pre><strong>┌───┐\\n│ &nbsp; │\\n└───┼──&gt;\\n&nbsp; &nbsp; │\\n\\n输入: </strong><code>[2,1,1,2]</code>\\n<strong>输出:</strong> true \\n</pre>\\n\\n<p><strong>示例&nbsp;2:</strong></p>\\n\\n<pre><strong>┌──────┐\\n│ &nbsp; &nbsp; &nbsp;│\\n│\\n│\\n└────────────&gt;\\n\\n输入: </strong><code>[1,2,3,4]</code>\\n<strong>输出: </strong>false \\n</pre>\\n\\n<p><strong>示例 3:</strong></p>\\n\\n<pre><strong>┌───┐\\n│ &nbsp; │\\n└───┼&gt;\\n\\n输入:</strong> <code>[1,1,1,1]</code>\\n<strong>输出:</strong> true \\n</pre>\\n","title":"335. 路径交叉","relatedTags":["几何","数组","数学"],"difficult":"Hard","lang":["javascript"],"uniqueID":"335","slug":"335-Self-Crossing"}')}}]);