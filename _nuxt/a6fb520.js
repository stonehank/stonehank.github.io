(window.webpackJsonp=window.webpackJsonp||[]).push([[653],{1451:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for singly-linked list.\\n * function ListNode(val) {\\n *     this.val = val;\\n *     this.next = null;\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{ListNode}</span> <span class=\\"hljs-variable\\">l1</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{ListNode}</span> <span class=\\"hljs-variable\\">l2</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{ListNode}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> addTwoNumbers = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">l1, l2</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> carry=<span class=\\"hljs-number\\">0</span>,res=<span class=\\"hljs-keyword\\">new</span> ListNode(<span class=\\"hljs-literal\\">null</span>)\\n  <span class=\\"hljs-keyword\\">let</span> root=res\\n  <span class=\\"hljs-keyword\\">while</span>(l1 || l2 || carry&gt;<span class=\\"hljs-number\\">0</span>){\\n    <span class=\\"hljs-keyword\\">let</span> sum=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">if</span>(!l1 &amp;&amp; !l2){\\n      sum=carry\\n    }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(!l1){\\n      sum=l2.val+carry\\n      l2=l2.next\\n    }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(!l2){\\n      sum=l1.val+carry\\n      l1=l1.next\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      sum=l1.val+l2.val+carry\\n      l1=l1.next\\n      l2=l2.next\\n    }\\n    carry=<span class=\\"hljs-built_in\\">Math</span>.floor(sum /<span class=\\"hljs-number\\">10</span>)\\n    sum %=<span class=\\"hljs-number\\">10</span>\\n    root.next=<span class=\\"hljs-keyword\\">new</span> ListNode(sum)\\n    root=root.next\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res.next\\n};\\n</code></pre>\\n"],"querySlug":"add-two-numbers","created_at":"2019-03-29","timeArr":[2019,2,29,9,51,39,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>和<code>NO.415</code>字符串的相加的原理一样。</p>\\n<p>只不过数据结构换成链表，而且给的是反向链表，方便我们进行进位操作。</p>\\n<p>对<code>l1</code>和<code>l2</code>只需要逐步遍历，如果一方不存在，则认为<code>val</code>为0。</p>\\n<p>注意最后遍历完还要检查<code>carry</code>，如果<code>carry&gt;0</code>还在再次添加一个链表<code>new ListNode(carry)</code>。</p>\\n","content":"<p>给你两个 <strong>非空</strong> 的链表，表示两个非负的整数。它们每位数字都是按照 <strong>逆序</strong> 的方式存储的，并且每个节点只能存储 <strong>一位</strong> 数字。</p>\\n\\n<p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p>\\n\\n<p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/01/02/addtwonumber1.jpg\\" style=\\"width: 483px; height: 342px;\\" />\\n<pre>\\n<strong>输入：</strong>l1 = [2,4,3], l2 = [5,6,4]\\n<strong>输出：</strong>[7,0,8]\\n<strong>解释：</strong>342 + 465 = 807.\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>l1 = [0], l2 = [0]\\n<strong>输出：</strong>[0]\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\\n<strong>输出：</strong>[8,9,9,9,0,0,0,1]\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li>每个链表中的节点数在范围 <code>[1, 100]</code> 内</li>\\n\\t<li><code>0 <= Node.val <= 9</code></li>\\n\\t<li>题目数据保证列表表示的数字不含前导零</li>\\n</ul>\\n","title":"2. 两数相加","relatedTags":["递归","链表","数学"],"difficult":"Middle","lang":["javascript"],"uniqueID":"2","slug":"2-Add-Two-Numbers"}')}}]);