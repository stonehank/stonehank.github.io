(window.webpackJsonp=window.webpackJsonp||[]).push([[340],{1138:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">arr</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> maximumSum = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">arr</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> n=arr.length\\n  <span class=\\"hljs-keyword\\">let</span> dp=<span class=\\"hljs-built_in\\">Array</span>(n+<span class=\\"hljs-number\\">1</span>).fill().map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span>=&gt;</span><span class=\\"hljs-built_in\\">Array</span>(<span class=\\"hljs-number\\">2</span>).fill(-<span class=\\"hljs-literal\\">Infinity</span>))\\n  <span class=\\"hljs-keyword\\">let</span> max=-<span class=\\"hljs-literal\\">Infinity</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">1</span>;i&lt;n+<span class=\\"hljs-number\\">1</span>;i++){\\n    <span class=\\"hljs-comment\\">// not ignore</span>\\n    dp[i][<span class=\\"hljs-number\\">0</span>]=<span class=\\"hljs-built_in\\">Math</span>.max(dp[i<span class=\\"hljs-number\\">-1</span>][<span class=\\"hljs-number\\">0</span>]+arr[i<span class=\\"hljs-number\\">-1</span>],arr[i<span class=\\"hljs-number\\">-1</span>])\\n    <span class=\\"hljs-comment\\">// ignore</span>\\n    dp[i][<span class=\\"hljs-number\\">1</span>]=<span class=\\"hljs-built_in\\">Math</span>.max(dp[i<span class=\\"hljs-number\\">-1</span>][<span class=\\"hljs-number\\">1</span>]+arr[i<span class=\\"hljs-number\\">-1</span>],dp[i<span class=\\"hljs-number\\">-1</span>][<span class=\\"hljs-number\\">0</span>])\\n    \\n    max=<span class=\\"hljs-built_in\\">Math</span>.max(max,<span class=\\"hljs-built_in\\">Math</span>.max(dp[i][<span class=\\"hljs-number\\">0</span>],dp[i][<span class=\\"hljs-number\\">1</span>]))\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> max\\n};\\n</code></pre>\\n"],"querySlug":"maximum-subarray-sum-with-one-deletion","created_at":"2019-09-08","timeArr":[2019,8,8,12,36,38,0],"hasThinking":false,"content":"<p>给你一个整数数组，返回它的某个&nbsp;<strong>非空</strong> 子数组（连续元素）在执行一次可选的删除操作后，所能得到的最大元素总和。</p>\\n\\n<p>换句话说，你可以从原数组中选出一个子数组，并可以决定要不要从中删除一个元素（只能删一次哦），（删除后）子数组中至少应当有一个元素，然后该子数组（剩下）的元素总和是所有子数组之中最大的。</p>\\n\\n<p>注意，删除一个元素后，子数组 <strong>不能为空</strong>。</p>\\n\\n<p>请看示例：</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>arr = [1,-2,0,3]\\n<strong>输出：</strong>4\\n<strong>解释：</strong>我们可以选出 [1, -2, 0, 3]，然后删掉 -2，这样得到 [1, 0, 3]，和最大。</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>arr = [1,-2,-2,3]\\n<strong>输出：</strong>3\\n<strong>解释：</strong>我们直接选出 [3]，这就是最大和。\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>arr = [-1,-1,-1,-1]\\n<strong>输出：</strong>-1\\n<strong>解释：</strong>最后得到的子数组不能为空，所以我们不能选择 [-1] 并从中删去 -1 来得到 0。\\n     我们应该直接选择 [-1]，或者选择 [-1, -1] 再从中删去一个 -1。\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= arr.length &lt;= 10^5</code></li>\\n\\t<li><code>-10^4 &lt;= arr[i] &lt;= 10^4</code></li>\\n</ul>\\n","title":"1186. 删除一次得到子数组最大和","relatedTags":["数组","动态规划"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1186","slug":"1186-Maximum-Subarray-Sum-with-One-Deletion"}')}}]);