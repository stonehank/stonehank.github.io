(window.webpackJsonp=window.webpackJsonp||[]).push([[860],{1658:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">s</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{string}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> frequencySort = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">s</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> hash=[]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;s.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> code=s.charCodeAt(i)\\n    <span class=\\"hljs-keyword\\">if</span>(hash[code]==<span class=\\"hljs-literal\\">null</span>)hash[code]=<span class=\\"hljs-number\\">1</span>\\n    <span class=\\"hljs-keyword\\">else</span> hash[code]++\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> bucket=[]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;hash.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> freq=hash[i]\\n    <span class=\\"hljs-keyword\\">if</span>(bucket[freq]==<span class=\\"hljs-literal\\">null</span>)bucket[freq]=[i]\\n    <span class=\\"hljs-keyword\\">else</span> bucket[freq].push(i)\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-string\\">\'\'</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=bucket.length<span class=\\"hljs-number\\">-1</span>;i&gt;=<span class=\\"hljs-number\\">0</span>;i--){\\n    <span class=\\"hljs-keyword\\">if</span>(bucket[i]==<span class=\\"hljs-literal\\">null</span>)<span class=\\"hljs-keyword\\">continue</span>\\n    <span class=\\"hljs-keyword\\">let</span> letters=bucket[i]\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;letters.length;j++){\\n      <span class=\\"hljs-keyword\\">let</span> l=<span class=\\"hljs-built_in\\">String</span>.fromCharCode(letters[j])\\n      res+=l.repeat(i)\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"sort-characters-by-frequency","created_at":"2019-04-05","timeArr":[2019,3,5,17,12,21,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>先用<code>hash</code>找出每个字母的频率，再对其进行排序，可以使用<code>桶排序</code>，或者直接<code>sort</code>。</p>\\n<p>对排好序的频率构建字符串。</p>\\n","content":"<p>给定一个字符串，请将字符串里的字符按照出现的频率降序排列。</p>\\n\\n<p><strong>示例 1:</strong></p>\\n\\n<pre>\\n<strong>输入:</strong>\\n&quot;tree&quot;\\n\\n<strong>输出:</strong>\\n&quot;eert&quot;\\n\\n<strong>解释:\\n</strong>&#39;e&#39;出现两次，&#39;r&#39;和&#39;t&#39;都只出现一次。\\n因此&#39;e&#39;必须出现在&#39;r&#39;和&#39;t&#39;之前。此外，&quot;eetr&quot;也是一个有效的答案。\\n</pre>\\n\\n<p><strong>示例 2:</strong></p>\\n\\n<pre>\\n<strong>输入:</strong>\\n&quot;cccaaa&quot;\\n\\n<strong>输出:</strong>\\n&quot;cccaaa&quot;\\n\\n<strong>解释:\\n</strong>&#39;c&#39;和&#39;a&#39;都出现三次。此外，&quot;aaaccc&quot;也是有效的答案。\\n注意&quot;cacaca&quot;是不正确的，因为相同的字母必须放在一起。\\n</pre>\\n\\n<p><strong>示例 3:</strong></p>\\n\\n<pre>\\n<strong>输入:</strong>\\n&quot;Aabb&quot;\\n\\n<strong>输出:</strong>\\n&quot;bbAa&quot;\\n\\n<strong>解释:\\n</strong>此外，&quot;bbaA&quot;也是一个有效的答案，但&quot;Aabb&quot;是不正确的。\\n注意&#39;A&#39;和&#39;a&#39;被认为是两种不同的字符。\\n</pre>\\n","title":"451. 根据字符出现频率排序","relatedTags":["哈希表","字符串","桶排序","计数","排序","堆（优先队列）"],"difficult":"Middle","lang":["javascript"],"uniqueID":"451","slug":"451-Sort-Characters-By-Frequency"}')}}]);