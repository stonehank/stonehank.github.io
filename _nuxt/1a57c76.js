(window.webpackJsonp=window.webpackJsonp||[]).push([[990],{1788:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{TreeNode}</span> <span class=\\"hljs-variable\\">t1</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{TreeNode}</span> <span class=\\"hljs-variable\\">t2</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{TreeNode}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> mergeTrees = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">t1, t2</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(!t1 &amp;&amp; !t2)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">null</span>\\n  <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(!t1)<span class=\\"hljs-keyword\\">return</span> t2\\n  <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(!t2)<span class=\\"hljs-keyword\\">return</span> t1\\n  <span class=\\"hljs-keyword\\">else</span>{\\n    t1.val+=t2.val\\n    t1.left=mergeTrees(t1.left,t2.left)\\n    t1.right=mergeTrees(t1.right,t2.right)\\n    <span class=\\"hljs-keyword\\">return</span> t1\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"merge-two-binary-trees","created_at":"2019-03-19","timeArr":[2019,2,19,13,6,47,0],"hasThinking":false,"content":"<p>给定两个二叉树，想象当你将它们中的一个覆盖到另一个上时，两个二叉树的一些节点便会重叠。</p>\\n\\n<p>你需要将他们合并为一个新的二叉树。合并的规则是如果两个节点重叠，那么将他们的值相加作为节点合并后的新值，否则<strong>不为&nbsp;</strong>NULL 的节点将直接作为新二叉树的节点。</p>\\n\\n<p><strong>示例&nbsp;1:</strong></p>\\n\\n<pre>\\n<strong>输入:</strong> \\n\\tTree 1                     Tree 2                  \\n          1                         2                             \\n         / \\\\                       / \\\\                            \\n        3   2                     1   3                        \\n       /                           \\\\   \\\\                      \\n      5                             4   7                  \\n<strong>输出:</strong> \\n合并后的树:\\n\\t     3\\n\\t    / \\\\\\n\\t   4   5\\n\\t  / \\\\   \\\\ \\n\\t 5   4   7\\n</pre>\\n\\n<p><strong>注意:</strong>&nbsp;合并必须从两个树的根节点开始。</p>\\n","title":"617. 合并二叉树","relatedTags":["树","深度优先搜索","广度优先搜索","二叉树"],"difficult":"Easy","lang":["javascript"],"uniqueID":"617","slug":"617-Merge-Two-Binary-Trees"}')}}]);