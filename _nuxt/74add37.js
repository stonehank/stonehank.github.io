(window.webpackJsonp=window.webpackJsonp||[]).push([[761],{1559:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Solution</span><span class=\\"hljs-params\\">(object)</span>:</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">countBits</span><span class=\\"hljs-params\\">(self, num)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type num: int\\n        :rtype: List[int]\\n        \\"\\"\\"</span>\\n        allLen=num\\n        curBit=<span class=\\"hljs-number\\">1</span>\\n        dp=[<span class=\\"hljs-number\\">0</span>]*(num+<span class=\\"hljs-number\\">1</span>)\\n        result=[]\\n        <span class=\\"hljs-keyword\\">while</span> allLen&gt;<span class=\\"hljs-number\\">0</span>:\\n            i=<span class=\\"hljs-number\\">0</span>\\n            <span class=\\"hljs-keyword\\">while</span> i&lt;curBit <span class=\\"hljs-keyword\\">and</span> allLen&gt;<span class=\\"hljs-number\\">0</span>:\\n                dp[i+curBit]=dp[i]+<span class=\\"hljs-number\\">1</span>\\n                allLen-=<span class=\\"hljs-number\\">1</span>\\n                i+=<span class=\\"hljs-number\\">1</span>\\n            curBit*=<span class=\\"hljs-number\\">2</span>\\n        <span class=\\"hljs-keyword\\">return</span> dp\\n</code></pre>\\n"],"querySlug":"counting-bits","created_at":"2019-03-02","timeArr":[2019,2,2,13,45,56,0],"hasThinking":false,"content":"<p>给定一个非负整数&nbsp;<strong>num</strong>。对于&nbsp;<strong>0 &le; i &le; num </strong>范围中的每个数字&nbsp;<strong>i&nbsp;</strong>，计算其二进制数中的 1 的数目并将它们作为数组返回。</p>\\n\\n<p><strong>示例 1:</strong></p>\\n\\n<pre><strong>输入: </strong>2\\n<strong>输出: </strong>[0,1,1]</pre>\\n\\n<p><strong>示例&nbsp;2:</strong></p>\\n\\n<pre><strong>输入: </strong>5\\n<strong>输出: </strong><code>[0,1,1,2,1,2]</code></pre>\\n\\n<p><strong>进阶:</strong></p>\\n\\n<ul>\\n\\t<li>给出时间复杂度为<strong>O(n*sizeof(integer))</strong>的解答非常容易。但你可以在线性时间<strong>O(n)</strong>内用一趟扫描做到吗？</li>\\n\\t<li>要求算法的空间复杂度为<strong>O(n)</strong>。</li>\\n\\t<li>你能进一步完善解法吗？要求在C++或任何其他语言中不使用任何内置函数（如 C++ 中的&nbsp;<strong>__builtin_popcount</strong>）来执行此操作。</li>\\n</ul>\\n","title":"338. 比特位计数","relatedTags":["位运算","动态规划"],"difficult":"Easy","lang":["python"],"uniqueID":"338","slug":"338-Counting-Bits"}')}}]);