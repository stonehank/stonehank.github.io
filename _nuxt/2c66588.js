(window.webpackJsonp=window.webpackJsonp||[]).push([[792],{1590:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Initialize your data structure here.\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> RandomizedCollection = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{\\n  <span class=\\"hljs-keyword\\">this</span>.list=[]\\n  <span class=\\"hljs-keyword\\">this</span>.map={}   \\n};\\n\\n<span class=\\"hljs-comment\\">/**\\n * Inserts a value to the collection. Returns true if the collection did not already contain the specified element. \\n * @param {number} val\\n * @return {boolean}\\n */</span>\\nRandomizedCollection.prototype.insert = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">val</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-keyword\\">this</span>.map[val]!=<span class=\\"hljs-literal\\">null</span>){\\n    <span class=\\"hljs-keyword\\">this</span>.map[val].push(<span class=\\"hljs-keyword\\">this</span>.list.length)\\n    <span class=\\"hljs-keyword\\">this</span>.list.push(val)\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n  }\\n  <span class=\\"hljs-keyword\\">this</span>.map[val]=[<span class=\\"hljs-keyword\\">this</span>.list.length]\\n  <span class=\\"hljs-keyword\\">this</span>.list.push(val)\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n};\\n\\n<span class=\\"hljs-comment\\">/**\\n * Removes a value from the set. Returns true if the set contained the specified element. \\n * @param {number} val\\n * @return {boolean}\\n */</span>\\nRandomizedCollection.prototype.remove = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">val</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-keyword\\">this</span>.map[val]==<span class=\\"hljs-literal\\">null</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n  <span class=\\"hljs-keyword\\">let</span> idx=<span class=\\"hljs-keyword\\">this</span>.map[val].pop(),\\n      lastIdx=<span class=\\"hljs-keyword\\">this</span>.list.length<span class=\\"hljs-number\\">-1</span>\\n  <span class=\\"hljs-keyword\\">if</span>(idx&lt;lastIdx){\\n    <span class=\\"hljs-keyword\\">let</span> last=<span class=\\"hljs-keyword\\">this</span>.list[lastIdx]\\n    <span class=\\"hljs-keyword\\">this</span>.list[idx]=last\\n    <span class=\\"hljs-keyword\\">this</span>.map[last].pop()\\n    <span class=\\"hljs-keyword\\">this</span>.map[last].unshift(idx)\\n  }\\n  <span class=\\"hljs-keyword\\">this</span>.list.pop()\\n  <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-keyword\\">this</span>.map[val].length===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">delete</span>(<span class=\\"hljs-keyword\\">this</span>.map[val])\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n};\\n\\n<span class=\\"hljs-comment\\">/**\\n * Get a random element from the set.\\n * @return {number}\\n */</span>\\nRandomizedCollection.prototype.getRandom = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> rd=<span class=\\"hljs-built_in\\">Math</span>.floor(<span class=\\"hljs-keyword\\">this</span>.list.length*<span class=\\"hljs-built_in\\">Math</span>.random())\\n  <span class=\\"hljs-comment\\">// console.log(this.list)</span>\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-keyword\\">this</span>.list[rd]\\n};\\n\\n<span class=\\"hljs-comment\\">/** \\n * Your RandomizedCollection object will be instantiated and called as such:\\n * var obj = Object.create(RandomizedCollection).createNew()\\n * var param_1 = obj.insert(val)\\n * var param_2 = obj.remove(val)\\n * var param_3 = obj.getRandom()\\n */</span>\\n</code></pre>\\n"],"querySlug":"insert-delete-getrandom-o1-duplicates-allowed","created_at":"2019-03-13","timeArr":[2019,2,13,15,57,57,0],"hasThinking":false,"content":"<p>设计一个支持在<em>平均&nbsp;</em>时间复杂度&nbsp;<strong>O(1)&nbsp;</strong>下<strong>，&nbsp;</strong>执行以下操作的数据结构。</p>\\n\\n<p><strong>注意: 允许出现重复元素。</strong></p>\\n\\n<ol>\\n\\t<li><code>insert(val)</code>：向集合中插入元素 val。</li>\\n\\t<li><code>remove(val)</code>：当 val 存在时，从集合中移除一个 val。</li>\\n\\t<li><code>getRandom</code>：从现有集合中随机获取一个元素。每个元素被返回的概率应该与其在集合中的数量呈线性相关。</li>\\n</ol>\\n\\n<p><strong>示例:</strong></p>\\n\\n<pre>// 初始化一个空的集合。\\nRandomizedCollection collection = new RandomizedCollection();\\n\\n// 向集合中插入 1 。返回 true 表示集合不包含 1 。\\ncollection.insert(1);\\n\\n// 向集合中插入另一个 1 。返回 false 表示集合包含 1 。集合现在包含 [1,1] 。\\ncollection.insert(1);\\n\\n// 向集合中插入 2 ，返回 true 。集合现在包含 [1,1,2] 。\\ncollection.insert(2);\\n\\n// getRandom 应当有 2/3 的概率返回 1 ，1/3 的概率返回 2 。\\ncollection.getRandom();\\n\\n// 从集合中删除 1 ，返回 true 。集合现在包含 [1,2] 。\\ncollection.remove(1);\\n\\n// getRandom 应有相同概率返回 1 和 2 。\\ncollection.getRandom();\\n</pre>\\n","title":"381. O(1) 时间插入、删除和获取随机元素 - 允许重复","relatedTags":["设计","数组","哈希表","数学","随机化"],"difficult":"Hard","lang":["javascript"],"uniqueID":"381","slug":"381-Insert-Delete-GetRandom-O(1)-Duplicates-allowed"}')}}]);