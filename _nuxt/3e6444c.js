(window.webpackJsonp=window.webpackJsonp||[]).push([[836],{1634:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">s</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">k</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> characterReplacement = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">s, k</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> maxLen=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;<span class=\\"hljs-number\\">26</span>;i++){\\n    <span class=\\"hljs-keyword\\">let</span> cur=<span class=\\"hljs-built_in\\">String</span>.fromCharCode(i+<span class=\\"hljs-number\\">65</span>)\\n    <span class=\\"hljs-keyword\\">let</span> rest=k, len=<span class=\\"hljs-number\\">0</span>, start=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;s.length;j++){\\n      <span class=\\"hljs-keyword\\">if</span>(s[j]!==cur){\\n        <span class=\\"hljs-keyword\\">if</span>(rest===<span class=\\"hljs-number\\">0</span>){\\n          <span class=\\"hljs-keyword\\">while</span>(s[start]===cur){\\n            start++\\n            len--\\n          }\\n          start++\\n          len--\\n          rest++\\n        }\\n        rest--\\n        len++\\n      }<span class=\\"hljs-keyword\\">else</span>{\\n        len++\\n      }\\n      maxLen=<span class=\\"hljs-built_in\\">Math</span>.max(maxLen,len)\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> maxLen\\n};\\n</code></pre>\\n"],"querySlug":"longest-repeating-character-replacement","created_at":"2019-04-11","timeArr":[2019,3,11,20,35,34,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<ol>\\n<li>定义一个滑动窗口，这个窗口不断增大，直到 <code>窗口长度-里面出现频率最高字母的次数&gt;k</code>，说明这个窗口已经到了极限</li>\\n<li>需要去掉窗口的头部对应字母的次数，然后窗口向后滑动<code>start++</code>，继续第1步的判断</li>\\n</ol>\\n<p>例如：<code>ABABABB，k=1</code></p>\\n<p>第一个窗口:<code>ABA</code>, 到达极限\\n第二个窗口:<code>BAB</code>, 到达极限\\n第三个窗口:<code>ABA</code>, 到达极限\\n第四个窗口:<code>BABB</code>,<code>end</code>到达尾部，最大值4</p>\\n","content":"<p>给你一个仅由大写英文字母组成的字符串，你可以将任意位置上的字符替换成另外的字符，总共可最多替换 <em>k </em>次。在执行上述操作后，找到包含重复字母的最长子串的长度。</p>\\n\\n<p><strong>注意：</strong>字符串长度 和 <em>k </em>不会超过 10<sup>4</sup>。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = \\"ABAB\\", k = 2\\n<strong>输出：</strong>4\\n<strong>解释：</strong>用两个\'A\'替换为两个\'B\',反之亦然。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = \\"AABABBA\\", k = 1\\n<strong>输出：</strong>4\\n<strong>解释：</strong>\\n将中间的一个\'A\'替换为\'B\',字符串变为 \\"AABBBBA\\"。\\n子串 \\"BBBB\\" 有最长重复字母, 答案为 4。\\n</pre>\\n","title":"424. 替换后的最长重复字符","relatedTags":["哈希表","字符串","滑动窗口"],"difficult":"Middle","lang":["javascript"],"uniqueID":"424","slug":"424-Longest-Repeating-Character-Replacement"}')}}]);