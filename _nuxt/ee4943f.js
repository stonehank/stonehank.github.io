(window.webpackJsonp=window.webpackJsonp||[]).push([[889],{1687:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">nums</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">k</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> medianSlidingWindow = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">nums, k</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> pq=[]\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">findMid</span>(<span class=\\"hljs-params\\"></span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> mid=(pq.length<span class=\\"hljs-number\\">-1</span>)/<span class=\\"hljs-number\\">2</span>\\n    <span class=\\"hljs-keyword\\">return</span> (pq[<span class=\\"hljs-built_in\\">Math</span>.ceil(mid)]+pq[<span class=\\"hljs-built_in\\">Math</span>.floor(mid)])/<span class=\\"hljs-number\\">2</span>\\n  }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">insert</span>(<span class=\\"hljs-params\\">n</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(pq.length===<span class=\\"hljs-number\\">0</span> || pq[pq.length<span class=\\"hljs-number\\">-1</span>]&lt;=n){\\n      pq.push(n)\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      <span class=\\"hljs-keyword\\">let</span> idx=bsEnd(pq,n)\\n      pq.splice(idx,<span class=\\"hljs-number\\">0</span>,n)\\n    }\\n  }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">bsEnd</span>(<span class=\\"hljs-params\\">arr,n</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> lo=<span class=\\"hljs-number\\">0</span>,hi=arr.length<span class=\\"hljs-number\\">-1</span>\\n    <span class=\\"hljs-keyword\\">while</span>(lo&lt;hi){\\n      <span class=\\"hljs-keyword\\">let</span> mid=<span class=\\"hljs-built_in\\">Math</span>.floor((lo+hi)/<span class=\\"hljs-number\\">2</span>)\\n      <span class=\\"hljs-keyword\\">if</span>(arr[mid]&lt;n)lo=mid+<span class=\\"hljs-number\\">1</span>\\n      <span class=\\"hljs-keyword\\">else</span> hi=mid\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> hi\\n  }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">remove</span>(<span class=\\"hljs-params\\">n</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> idx=bsEnd(pq,n)\\n    pq.splice(idx,<span class=\\"hljs-number\\">1</span>)\\n  }\\n  \\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;k;i++){\\n    insert(nums[i])\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> res=[]\\n  res.push(findMid())\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=k;i&lt;nums.length;i++){\\n    remove(nums[i-k])\\n    insert(nums[i])\\n    res.push(findMid())\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"sliding-window-median","created_at":"2019-04-28","timeArr":[2019,3,28,23,5,37,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>通过<code>二分法</code>进行添加和删除，构造一个长度为<code>k</code>有序数组，最终时间复杂度是<code>O(nk)</code>。</p>\\n","content":"<p>中位数是有序序列最中间的那个数。如果序列的长度是偶数，则没有最中间的数；此时中位数是最中间的两个数的平均数。</p>\\n\\n<p>例如：</p>\\n\\n<ul>\\n\\t<li><code>[2,3,4]</code>，中位数是 <code>3</code></li>\\n\\t<li><code>[2,3]</code>，中位数是 <code>(2 + 3) / 2 = 2.5</code></li>\\n</ul>\\n\\n<p>给你一个数组 <em>nums</em>，有一个长度为 <em>k</em> 的窗口从最左端滑动到最右端。窗口中有 <em>k</em> 个数，每次窗口向右移动 <em>1</em> 位。你的任务是找出每次窗口移动后得到的新窗口中元素的中位数，并输出由它们组成的数组。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例：</strong></p>\\n\\n<p>给出 <em>nums</em> = <code>[1,3,-1,-3,5,3,6,7]</code>，以及 <em>k</em> = 3。</p>\\n\\n<pre>\\n窗口位置                      中位数\\n---------------               -----\\n[1  3  -1] -3  5  3  6  7       1\\n 1 [3  -1  -3] 5  3  6  7      -1\\n 1  3 [-1  -3  5] 3  6  7      -1\\n 1  3  -1 [-3  5  3] 6  7       3\\n 1  3  -1  -3 [5  3  6] 7       5\\n 1  3  -1  -3  5 [3  6  7]      6\\n</pre>\\n\\n<p> 因此，返回该滑动窗口的中位数数组 <code>[1,-1,-1,3,5,6]</code>。</p>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li>你可以假设 <code>k</code> 始终有效，即：<code>k</code> 始终小于等于输入的非空数组的元素个数。</li>\\n\\t<li>与真实值误差在 <code>10 ^ -5</code> 以内的答案将被视作正确答案。</li>\\n</ul>\\n","title":"480. 滑动窗口中位数","relatedTags":["数组","哈希表","滑动窗口","堆（优先队列）"],"difficult":"Hard","lang":["javascript"],"uniqueID":"480","slug":"480-Sliding-Window-Median"}')}}]);