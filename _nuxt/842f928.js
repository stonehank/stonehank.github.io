(window.webpackJsonp=window.webpackJsonp||[]).push([[431],{1229:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">arr</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">d</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> maxJumps = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">arr, d</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> dp=<span class=\\"hljs-built_in\\">Array</span>(arr.length).fill(<span class=\\"hljs-literal\\">null</span>)\\n  <span class=\\"hljs-keyword\\">let</span> memo=[]\\n  \\n  <span class=\\"hljs-keyword\\">let</span> max=<span class=\\"hljs-number\\">-1</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;arr.length;i++){\\n    max=<span class=\\"hljs-built_in\\">Math</span>.max(max,resolve(i))\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> max\\n  \\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">resolve</span>(<span class=\\"hljs-params\\">idx</span>)</span>{\\n    <span class=\\"hljs-comment\\">// if(idx===arr.length)return 0</span>\\n    <span class=\\"hljs-comment\\">// console.log(idx)</span>\\n    <span class=\\"hljs-keyword\\">if</span>(memo[idx]!=<span class=\\"hljs-literal\\">null</span>)<span class=\\"hljs-keyword\\">return</span> memo[idx]\\n    <span class=\\"hljs-keyword\\">let</span> leftMax=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">let</span> rightMax=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=idx<span class=\\"hljs-number\\">-1</span>;i&gt;=idx-d;i--){\\n      <span class=\\"hljs-keyword\\">if</span>(i&lt;<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">break</span>\\n      <span class=\\"hljs-keyword\\">if</span>(arr[i]&gt;=arr[idx])<span class=\\"hljs-keyword\\">break</span>\\n      leftMax=<span class=\\"hljs-built_in\\">Math</span>.max(leftMax,resolve(i))\\n    }\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=idx+<span class=\\"hljs-number\\">1</span>;i&lt;=idx+d;i++){\\n      <span class=\\"hljs-keyword\\">if</span>(i&gt;=arr.length)<span class=\\"hljs-keyword\\">break</span>\\n      <span class=\\"hljs-keyword\\">if</span>(arr[i]&gt;=arr[idx])<span class=\\"hljs-keyword\\">break</span>\\n      rightMax=<span class=\\"hljs-built_in\\">Math</span>.max(rightMax,resolve(i))\\n    }\\n    memo[idx]=<span class=\\"hljs-built_in\\">Math</span>.max(leftMax,rightMax)+<span class=\\"hljs-number\\">1</span>\\n    <span class=\\"hljs-keyword\\">return</span> memo[idx]\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"jump-game-v","created_at":"2020-02-02","timeArr":[2020,1,2,11,16,40,0],"hasThinking":false,"content":"<p>给你一个整数数组&nbsp;<code>arr</code> 和一个整数&nbsp;<code>d</code> 。每一步你可以从下标&nbsp;<code>i</code>&nbsp;跳到：</p>\\n\\n<ul>\\n\\t<li><code>i + x</code>&nbsp;，其中&nbsp;<code>i + x &lt; arr.length</code>&nbsp;且&nbsp;<code>0 &lt; x &lt;= d</code>&nbsp;。</li>\\n\\t<li><code>i - x</code>&nbsp;，其中&nbsp;<code>i - x &gt;= 0</code>&nbsp;且&nbsp;<code>0 &lt; x &lt;= d</code>&nbsp;。</li>\\n</ul>\\n\\n<p>除此以外，你从下标&nbsp;<code>i</code> 跳到下标 <code>j</code>&nbsp;需要满足：<code>arr[i] &gt; arr[j]</code>&nbsp;且 <code>arr[i] &gt; arr[k]</code>&nbsp;，其中下标&nbsp;<code>k</code>&nbsp;是所有 <code>i</code>&nbsp;到 <code>j</code>&nbsp;之间的数字（更正式的，<code>min(i, j) &lt; k &lt; max(i, j)</code>）。</p>\\n\\n<p>你可以选择数组的任意下标开始跳跃。请你返回你 <strong>最多</strong>&nbsp;可以访问多少个下标。</p>\\n\\n<p>请注意，任何时刻你都不能跳到数组的外面。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<p><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/02/02/meta-chart.jpeg\\" style=\\"height: 419px; width: 633px;\\"></p>\\n\\n<pre><strong>输入：</strong>arr = [6,4,14,6,8,13,9,7,10,6,12], d = 2\\n<strong>输出：</strong>4\\n<strong>解释：</strong>你可以从下标 10 出发，然后如上图依次经过 10 --&gt; 8 --&gt; 6 --&gt; 7 。\\n注意，如果你从下标 6 开始，你只能跳到下标 7 处。你不能跳到下标 5 处因为 13 &gt; 9 。你也不能跳到下标 4 处，因为下标 5 在下标 4 和 6 之间且 13 &gt; 9 。\\n类似的，你不能从下标 3 处跳到下标 2 或者下标 1 处。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>arr = [3,3,3,3,3], d = 3\\n<strong>输出：</strong>1\\n<strong>解释：</strong>你可以从任意下标处开始且你永远无法跳到任何其他坐标。\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>arr = [7,6,5,4,3,2,1], d = 1\\n<strong>输出：</strong>7\\n<strong>解释：</strong>从下标 0 处开始，你可以按照数值从大到小，访问所有的下标。\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre><strong>输入：</strong>arr = [7,1,7,1,7,1], d = 2\\n<strong>输出：</strong>2\\n</pre>\\n\\n<p><strong>示例 5：</strong></p>\\n\\n<pre><strong>输入：</strong>arr = [66], d = 1\\n<strong>输出：</strong>1\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= arr.length &lt;= 1000</code></li>\\n\\t<li><code>1 &lt;= arr[i] &lt;= 10^5</code></li>\\n\\t<li><code>1 &lt;= d &lt;= arr.length</code></li>\\n</ul>\\n","title":"1340. 跳跃游戏 V","relatedTags":["数组","动态规划","排序"],"difficult":"Hard","lang":["javascript"],"uniqueID":"1340","slug":"1340-Jump-Game-V"}')}}]);