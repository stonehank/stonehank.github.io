(window.webpackJsonp=window.webpackJsonp||[]).push([[1088],{1886:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code>\\n<span class=\\"hljs-keyword\\">var</span> MyCalendar = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{\\n  <span class=\\"hljs-keyword\\">this</span>.range=[]\\n};\\n\\n<span class=\\"hljs-comment\\">/** \\n * @param {number} start \\n * @param {number} end\\n * @return {boolean}\\n */</span>\\nMyCalendar.prototype.book = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">start, end</span>) </span>{\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;<span class=\\"hljs-keyword\\">this</span>.range.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> itv=<span class=\\"hljs-keyword\\">this</span>.range[i]\\n    <span class=\\"hljs-keyword\\">if</span>(start &lt; itv[<span class=\\"hljs-number\\">1</span>] &amp;&amp; end &gt; itv[<span class=\\"hljs-number\\">0</span>])<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n  }\\n  <span class=\\"hljs-keyword\\">this</span>.range.push([start,end])\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n};\\n\\n<span class=\\"hljs-comment\\">/** \\n * Your MyCalendar object will be instantiated and called as such:\\n * var obj = Object.create(MyCalendar).createNew()\\n * var param_1 = obj.book(start,end)\\n */</span>\\n</code></pre>\\n"],"querySlug":"my-calendar-i","created_at":"2019-03-15","timeArr":[2019,2,15,10,44,31,0],"hasThinking":false,"content":"<p>实现一个 <code>MyCalendar</code> 类来存放你的日程安排。如果要添加的时间内没有其他安排，则可以存储这个新的日程安排。</p>\\n\\n<p><code>MyCalendar</code> 有一个 <code>book(int start, int end)</code>方法。它意味着在 start 到 end 时间内增加一个日程安排，注意，这里的时间是半开区间，即 <code>[start, end)</code>, 实数 <code>x</code> 的范围为，  <code>start <= x < end</code>。</p>\\n\\n<p>当两个日程安排有一些时间上的交叉时（例如两个日程安排都在同一时间内），就会产生重复预订。</p>\\n\\n<p>每次调用 <code>MyCalendar.book</code>方法时，如果可以将日程安排成功添加到日历中而不会导致重复预订，返回 <code>true</code>。否则，返回 <code>false</code> 并且不要将该日程安排添加到日历中。</p>\\n\\n<p>请按照以下步骤调用 <code>MyCalendar</code> 类: <code>MyCalendar cal = new MyCalendar();</code> <code>MyCalendar.book(start, end)</code></p>\\n\\n<p><strong>示例 1:</strong></p>\\n\\n<pre>\\nMyCalendar();\\nMyCalendar.book(10, 20); // returns true\\nMyCalendar.book(15, 25); // returns false\\nMyCalendar.book(20, 30); // returns true\\n<strong>解释:</strong> \\n第一个日程安排可以添加到日历中.  第二个日程安排不能添加到日历中，因为时间 15 已经被第一个日程安排预定了。\\n第三个日程安排可以添加到日历中，因为第一个日程安排并不包含时间 20 。\\n</pre>\\n\\n<p><strong>说明:</strong></p>\\n\\n<ul>\\n\\t<li>每个测试用例，调用 <code>MyCalendar.book</code> 函数最多不超过 <code>1000</code>次。</li>\\n\\t<li>调用函数 <code>MyCalendar.book(start, end)</code>时， <code>start</code> 和 <code>end</code> 的取值范围为 <code>[0, 10^9]</code>。</li>\\n</ul>\\n","title":"729. 我的日程安排表 I","relatedTags":["设计","线段树","有序集合"],"difficult":"Middle","lang":["javascript"],"uniqueID":"729","slug":"729-My-Calendar-I"}')}}]);