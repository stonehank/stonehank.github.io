(window.webpackJsonp=window.webpackJsonp||[]).push([[1316],{2114:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">pushed</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">popped</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{boolean}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> validateStackSequences = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">pushed, popped</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> stack=[],i=<span class=\\"hljs-number\\">0</span>,j=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(;i&lt;popped.length;i++){\\n    <span class=\\"hljs-keyword\\">while</span>(stack.length===<span class=\\"hljs-number\\">0</span> || stack[stack.length<span class=\\"hljs-number\\">-1</span>]!==popped[i]){\\n      <span class=\\"hljs-keyword\\">if</span>(j===pushed.length)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n      stack.push(pushed[j++])\\n    }\\n    stack.pop()\\n    <span class=\\"hljs-comment\\">// console.log(stack)</span>\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n};\\n</code></pre>\\n"],"querySlug":"validate-stack-sequences","created_at":"2019-04-17","timeArr":[2019,3,17,22,49,23,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>使用<code>stack</code>来模拟压栈和出栈，遍历<code>popped</code>，如果<code>stack[stack.length-1]===popped[i]</code>，说明可以出栈。</p>\\n<p>如果模拟途中无法找到下一个出栈的数字，返回<code>false</code>。</p>\\n","content":"<p>给定&nbsp;<code>pushed</code>&nbsp;和&nbsp;<code>popped</code>&nbsp;两个序列，每个序列中的 <strong>值都不重复</strong>，只有当它们可能是在最初空栈上进行的推入 push 和弹出 pop 操作序列的结果时，返回 <code>true</code>；否则，返回 <code>false</code>&nbsp;。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>pushed = [1,2,3,4,5], popped = [4,5,3,2,1]\\n<strong>输出：</strong>true\\n<strong>解释：</strong>我们可以按以下顺序执行：\\npush(1), push(2), push(3), push(4), pop() -&gt; 4,\\npush(5), pop() -&gt; 5, pop() -&gt; 3, pop() -&gt; 2, pop() -&gt; 1\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>pushed = [1,2,3,4,5], popped = [4,3,5,1,2]\\n<strong>输出：</strong>false\\n<strong>解释：</strong>1 不能在 2 之前弹出。\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ol>\\n\\t<li><code>0 &lt;= pushed.length == popped.length &lt;= 1000</code></li>\\n\\t<li><code>0 &lt;= pushed[i], popped[i] &lt; 1000</code></li>\\n\\t<li><code>pushed</code>&nbsp;是&nbsp;<code>popped</code>&nbsp;的排列。</li>\\n</ol>\\n","title":"946. 验证栈序列","relatedTags":["栈","数组","模拟"],"difficult":"Middle","lang":["javascript"],"uniqueID":"946","slug":"946-Validate-Stack-Sequences"}')}}]);