(window.webpackJsonp=window.webpackJsonp||[]).push([[1215],{2013:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">N</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> ExamRoom = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">N</span>) </span>{\\n  <span class=\\"hljs-keyword\\">this</span>.list=[]\\n  <span class=\\"hljs-keyword\\">this</span>.len=N<span class=\\"hljs-number\\">-1</span>\\n};\\n\\n<span class=\\"hljs-comment\\">/**\\n * @return {number}\\n */</span>\\nExamRoom.prototype.seat = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-keyword\\">this</span>.list.length===<span class=\\"hljs-number\\">0</span>){\\n    <span class=\\"hljs-keyword\\">this</span>.list.push(<span class=\\"hljs-number\\">0</span>)\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> headGap=<span class=\\"hljs-keyword\\">this</span>.list[<span class=\\"hljs-number\\">0</span>],\\n      tailGap=<span class=\\"hljs-keyword\\">this</span>.len-<span class=\\"hljs-keyword\\">this</span>.list[<span class=\\"hljs-keyword\\">this</span>.list.length<span class=\\"hljs-number\\">-1</span>]\\n  <span class=\\"hljs-keyword\\">let</span> maxGap=<span class=\\"hljs-built_in\\">Math</span>.max(headGap,tailGap)\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">1</span>;i&lt;<span class=\\"hljs-keyword\\">this</span>.list.length;i++){\\n    maxGap=<span class=\\"hljs-built_in\\">Math</span>.max(maxGap,<span class=\\"hljs-built_in\\">Math</span>.floor((<span class=\\"hljs-keyword\\">this</span>.list[i]-<span class=\\"hljs-keyword\\">this</span>.list[i<span class=\\"hljs-number\\">-1</span>])/<span class=\\"hljs-number\\">2</span>))\\n  }\\n  <span class=\\"hljs-comment\\">// console.log(headGap,tailGap,maxGap,this.list)</span>\\n  <span class=\\"hljs-keyword\\">if</span>(maxGap===headGap){\\n    <span class=\\"hljs-keyword\\">this</span>.list.unshift(<span class=\\"hljs-number\\">0</span>)\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>\\n  }\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">1</span>;i&lt;<span class=\\"hljs-keyword\\">this</span>.list.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> gap=<span class=\\"hljs-built_in\\">Math</span>.floor((<span class=\\"hljs-keyword\\">this</span>.list[i]-<span class=\\"hljs-keyword\\">this</span>.list[i<span class=\\"hljs-number\\">-1</span>])/<span class=\\"hljs-number\\">2</span>)\\n    <span class=\\"hljs-keyword\\">if</span>(gap===maxGap){\\n      <span class=\\"hljs-keyword\\">let</span> pos=<span class=\\"hljs-built_in\\">Math</span>.floor((<span class=\\"hljs-keyword\\">this</span>.list[i]+<span class=\\"hljs-keyword\\">this</span>.list[i<span class=\\"hljs-number\\">-1</span>])/<span class=\\"hljs-number\\">2</span>)\\n      <span class=\\"hljs-keyword\\">this</span>.list.splice(i,<span class=\\"hljs-number\\">0</span>,pos)\\n      <span class=\\"hljs-keyword\\">return</span> pos\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">this</span>.list.push(<span class=\\"hljs-keyword\\">this</span>.len)\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-keyword\\">this</span>.len\\n};\\n\\n<span class=\\"hljs-comment\\">/** \\n * @param {number} p\\n * @return {void}\\n */</span>\\nExamRoom.prototype.leave = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">p</span>) </span>{\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;<span class=\\"hljs-keyword\\">this</span>.list.length;i++){\\n    <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-keyword\\">this</span>.list[i]===p)<span class=\\"hljs-keyword\\">this</span>.list.splice(i,<span class=\\"hljs-number\\">1</span>)\\n  }\\n};\\n\\n<span class=\\"hljs-comment\\">/** \\n * Your ExamRoom object will be instantiated and called as such:\\n * var obj = new ExamRoom(N)\\n * var param_1 = obj.seat()\\n * obj.leave(p)\\n */</span>\\n</code></pre>\\n"],"querySlug":"exam-room","created_at":"2019-04-24","timeArr":[2019,3,24,22,52,23,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>定义一个数组<code>this.list</code>，用来记录当前已经坐了人的座位。</p>\\n<p>在执行<code>seat</code>方法时，首先计算出当前存在的最大间隔<code>maxGap</code>，注意间隔包括头尾，头尾不需要<code>/2</code>；</p>\\n<p>例如： 总共<code>0-9</code>个座位，<code>[4,9]</code>，这里<code>4</code>和<code>9</code>之间相隔<code>5/2</code>，也就是2个座位，头部的间隔是<code>4</code>个座位，尾巴间隔是<code>0</code>个座位，因此最大间隔是<code>4</code>。</p>\\n<p>接着，检查当前最大间隔是哪一部分的，按照索引顺序，先检查头部间隔，在检查中间的间隔，最后检查尾部间隔。</p>\\n<p>头尾则直接放到<code>0</code>和<code>len-1</code>的位置上，中间则插入对应的位置。</p>\\n<p><code>leave</code>方法就直接找到当前<code>p</code>，从<code>this.list</code>中删除即可。</p>\\n","content":"<p>在考场里，一排有&nbsp;<code>N</code>&nbsp;个座位，分别编号为&nbsp;<code>0, 1, 2, ..., N-1</code>&nbsp;。</p>\\n\\n<p>当学生进入考场后，他必须坐在能够使他与离他最近的人之间的距离达到最大化的座位上。如果有多个这样的座位，他会坐在编号最小的座位上。(另外，如果考场里没有人，那么学生就坐在 0 号座位上。)</p>\\n\\n<p>返回&nbsp;<code>ExamRoom(int N)</code>&nbsp;类，它有两个公开的函数：其中，函数&nbsp;<code>ExamRoom.seat()</code>&nbsp;会返回一个&nbsp;<code>int</code>&nbsp;（整型数据），代表学生坐的位置；函数&nbsp;<code>ExamRoom.leave(int p)</code>&nbsp;代表坐在座位 <code>p</code> 上的学生现在离开了考场。每次调用&nbsp;<code>ExamRoom.leave(p)</code>&nbsp;时都保证有学生坐在座位&nbsp;<code>p</code>&nbsp;上。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例：</strong></p>\\n\\n<pre><strong>输入：</strong>[&quot;ExamRoom&quot;,&quot;seat&quot;,&quot;seat&quot;,&quot;seat&quot;,&quot;seat&quot;,&quot;leave&quot;,&quot;seat&quot;], [[10],[],[],[],[],[4],[]]\\n<strong>输出：</strong>[null,0,9,4,2,null,5]\\n<strong>解释：</strong>\\nExamRoom(10) -&gt; null\\nseat() -&gt; 0，没有人在考场里，那么学生坐在 0 号座位上。\\nseat() -&gt; 9，学生最后坐在 9 号座位上。\\nseat() -&gt; 4，学生最后坐在 4 号座位上。\\nseat() -&gt; 2，学生最后坐在 2 号座位上。\\nleave(4) -&gt; null\\nseat() -&gt; 5，学生最后坐在 5 号座位上。\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ol>\\n\\t<li><code>1 &lt;= N &lt;= 10^9</code></li>\\n\\t<li>在所有的测试样例中&nbsp;<code>ExamRoom.seat()</code>&nbsp;和&nbsp;<code>ExamRoom.leave()</code>&nbsp;最多被调用&nbsp;<code>10^4</code>&nbsp;次。</li>\\n\\t<li>保证在调用&nbsp;<code>ExamRoom.leave(p)</code>&nbsp;时有学生正坐在座位 <code>p</code> 上。</li>\\n</ol>\\n","title":"855. 考场就座","relatedTags":["设计","有序集合"],"difficult":"Middle","lang":["javascript"],"uniqueID":"855","slug":"855-Exam-Room"}')}}]);