(window.webpackJsonp=window.webpackJsonp||[]).push([[1104],{1902:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">cost</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> minCostClimbingStairs = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">cost</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> dp=<span class=\\"hljs-built_in\\">Array</span>(cost.length).fill(<span class=\\"hljs-number\\">0</span>)\\n  dp[<span class=\\"hljs-number\\">0</span>]=cost[<span class=\\"hljs-number\\">0</span>]\\n  dp[<span class=\\"hljs-number\\">1</span>]=cost[<span class=\\"hljs-number\\">1</span>]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">2</span>;i&lt;dp.length;i++){\\n    dp[i]=cost[i]+<span class=\\"hljs-built_in\\">Math</span>.min(dp[i<span class=\\"hljs-number\\">-1</span>],dp[i<span class=\\"hljs-number\\">-2</span>])\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-built_in\\">Math</span>.min(dp[dp.length<span class=\\"hljs-number\\">-1</span>],dp[dp.length<span class=\\"hljs-number\\">-2</span>])\\n};\\n</code></pre>\\n"],"querySlug":"min-cost-climbing-stairs","created_at":"2019-03-07","timeArr":[2019,2,7,20,58,15,0],"hasThinking":false,"content":"<p>数组的每个下标作为一个阶梯，第 <code>i</code> 个阶梯对应着一个非负数的体力花费值 <code>cost[i]</code>（下标从 <code>0</code> 开始）。</p>\\n\\n<p>每当你爬上一个阶梯你都要花费对应的体力值，一旦支付了相应的体力值，你就可以选择向上爬一个阶梯或者爬两个阶梯。</p>\\n\\n<p>请你找出达到楼层顶部的最低花费。在开始时，你可以选择从下标为 0 或 1 的元素作为初始阶梯。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>cost = [10, 15, 20]\\n<strong>输出：</strong>15\\n<strong>解释：</strong>最低花费是从 cost[1] 开始，然后走两步即可到阶梯顶，一共花费 15 。\\n</pre>\\n\\n<p><strong> 示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>cost = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1]\\n<strong>输出：</strong>6\\n<strong>解释：</strong>最低花费方式是从 cost[0] 开始，逐个经过那些 1 ，跳过 cost[3] ，一共花费 6 。\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>cost</code> 的长度范围是 <code>[2, 1000]</code>。</li>\\n\\t<li><code>cost[i]</code> 将会是一个整型数据，范围为 <code>[0, 999]</code> 。</li>\\n</ul>\\n","title":"746. 使用最小花费爬楼梯","relatedTags":["数组","动态规划"],"difficult":"Easy","lang":["javascript"],"uniqueID":"746","slug":"746-Min-Cost-Climbing-Stairs"}')}}]);