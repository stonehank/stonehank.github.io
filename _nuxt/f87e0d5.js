(window.webpackJsonp=window.webpackJsonp||[]).push([[975],{1773:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * // Definition for a Node.\\n * function Node(val,children) {\\n *    this.val = val;\\n *    this.children = children;\\n * };\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{Node}</span> <span class=\\"hljs-variable\\">root</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> postorder = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">root</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(!root)<span class=\\"hljs-keyword\\">return</span> []\\n  <span class=\\"hljs-keyword\\">let</span> stack=[root],res=[]\\n  <span class=\\"hljs-keyword\\">while</span>(stack.length&gt;<span class=\\"hljs-number\\">0</span> ){\\n    <span class=\\"hljs-keyword\\">let</span> node=stack.pop()\\n    res.push(node.val)\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;node.children.length;i++){\\n      stack.push(node.children[i])\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res.reverse()\\n};\\n</code></pre>\\n"],"querySlug":"n-ary-tree-postorder-traversal","created_at":"2019-03-20","timeArr":[2019,2,20,10,54,48,0],"hasThinking":false,"content":"<p>给定一个 N 叉树，返回其节点值的<strong> 后序遍历</strong> 。</p>\\n\\n<p>N 叉树 在输入中按层序遍历进行序列化表示，每组子节点由空值 <code>null</code> 分隔（请参见示例）。</p>\\n\\n<div class=\\"original__bRMd\\">\\n<div>\\n<p> </p>\\n\\n<p><strong>进阶：</strong></p>\\n\\n<p>递归法很简单，你可以使用迭代法完成此题吗?</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<p><img src=\\"https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png\\" style=\\"width: 100%; max-width: 300px;\\" /></p>\\n\\n<pre>\\n<strong>输入：</strong>root = [1,null,3,2,4,null,5,6]\\n<strong>输出：</strong>[5,6,3,2,4,1]\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<p><img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png\\" style=\\"width: 296px; height: 241px;\\" /></p>\\n\\n<pre>\\n<strong>输入：</strong>root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\\n<strong>输出：</strong>[2,6,14,11,7,3,12,8,4,13,9,10,5,1]\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li>N 叉树的高度小于或等于 <code>1000</code></li>\\n\\t<li>节点总数在范围 <code>[0, 10^4]</code> 内</li>\\n</ul>\\n</div>\\n</div>\\n","title":"590. N 叉树的后序遍历","relatedTags":["栈","树","深度优先搜索"],"difficult":"Easy","lang":["javascript"],"uniqueID":"590","slug":"590-N-ary-Tree-Postorder-Traversal"}')}}]);