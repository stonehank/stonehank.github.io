(window.webpackJsonp=window.webpackJsonp||[]).push([[1307],{2105:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{TreeNode}</span> <span class=\\"hljs-variable\\">root</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">L</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">R</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> rangeSumBST = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">root, L, R</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(!root)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">let</span> count=<span class=\\"hljs-number\\">0</span>,val=root.val\\n  <span class=\\"hljs-keyword\\">if</span>(val&gt;=L &amp;&amp; val&lt;=R){\\n    count+=rangeSumBST(root.left,L,R)+rangeSumBST(root.right,L,R)+val\\n  }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(val&lt;L){\\n    count+=rangeSumBST(root.right,L,R)\\n  }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(val&gt;R){\\n    count+=rangeSumBST(root.left,L,R)\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> count\\n};\\n</code></pre>\\n"],"querySlug":"range-sum-of-bst","created_at":"2021-04-27","timeArr":[2021,3,27,17,6,0,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>利用二叉搜索树的特性，如果当前<code>root.val</code>有效，即存在范围内，那么说明它的左子树可能也有有效的，右子树可能也有有效的；</p>\\n<p>如果当前<code>root.val</code>比<code>L</code>小，那么说明它的左子树一定无效；</p>\\n<p>同样，<code>root.val&gt;R</code>，右子树一定无效。</p>\\n","content":"<p>给定二叉搜索树的根结点 <code>root</code>，返回值位于范围 <em><code>[low, high]</code></em> 之间的所有结点的值的和。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2020/11/05/bst1.jpg\\" style=\\"width: 400px; height: 222px;\\" />\\n<pre>\\n<strong>输入：</strong>root = [10,5,15,3,7,null,18], low = 7, high = 15\\n<strong>输出：</strong>32\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2020/11/05/bst2.jpg\\" style=\\"width: 400px; height: 335px;\\" />\\n<pre>\\n<strong>输入：</strong>root = [10,5,15,3,7,13,18,1,null,6], low = 6, high = 10\\n<strong>输出：</strong>23\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li>树中节点数目在范围 <code>[1, 2 * 10<sup>4</sup>]</code> 内</li>\\n\\t<li><code>1 <= Node.val <= 10<sup>5</sup></code></li>\\n\\t<li><code>1 <= low <= high <= 10<sup>5</sup></code></li>\\n\\t<li>所有 <code>Node.val</code> <strong>互不相同</strong></li>\\n</ul>\\n","title":"938. 二叉搜索树的范围和","relatedTags":["树","深度优先搜索","二叉搜索树","二叉树"],"difficult":"Easy","lang":["javascript"],"uniqueID":"938","slug":"938-Range-Sum-of-BST"}')}}]);