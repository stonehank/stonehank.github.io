(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{546:function(e){e.exports=JSON.parse('{"content":"<p>关于二叉树的遍历，使用栈递归或者仿栈循环都是需要<code>O(N)</code>的空间，<code>Morris Traversal</code>保证了空间为<code>O(1)</code>，时间还是<code>O(N)</code>（比原来多了一遍）。</p>\\n<p>这里只介绍<code>inOrder</code>顺序。</p>\\n<p>思路：</p>\\n<p>对每一个<code>cur</code>节点，优先找到一个<code>pre</code>节点，这个<code>pre</code>节点的作用是，当后续<code>cur</code>节点遍历                到这个位置时，可以直接通过这个<code>pre</code>节点返回它需要返回的位置。</p>\\n<p>例如：</p>\\n<pre><code><pre class=\\"hljs\\"><code>        6\\n       / \\\\\\n      4   8\\n    /  \\\\\\n   2    5</code></pre></code></pre><ul>\\n<li>上面当<code>cur</code>节点在<code>6</code>的时候，<code>pre</code>节点会在<code>5</code>，因为后面当<code>cur</code>节点遍历到<code>5</code>的时候，可以通过<code>pre</code>节点直接返回<code>6</code></li>\\n<li>当<code>cur</code>节点再<code>4</code>的时候，<code>pre</code>节点会在<code>2</code>，当后面<code>cur</code>到<code>2</code>的时候，可以直接返回<code>4</code></li>\\n</ul>\\n<hr>\\n<p><code>pre</code>找到了，是通过什么返回呢，因为不能修改二叉树结构，也不能使用堆栈记录。</p>\\n<p>通过<code>mirror</code>(镜像)，也就是说，当找到<code>pre</code>的时候（每个<code>pre</code>的右节点确保为null），在它的右节点创建一个镜像节点，\\n这个镜像节点直接指向当前的<code>cur</code>节点。</p>\\n<p>这个操作是不占用空间的，因为只是互相引用。</p>\\n<p>例如：当上面的<code>cur</code>为<code>6</code>，<code>pre</code>为<code>5</code>，那么设置<code>pre.right=cur</code>，感觉上是这样：</p>\\n<pre><code><pre class=\\"hljs\\"><code>        6\\n       / \\\\\\n      4   8\\n    /  \\\\\\n   2    5\\n         \\\\\\n          6\\n         / \\\\\\n        4   8\\n        ...</code></pre></code></pre><p> 其实并没有多出来那一块，只是<code>5</code>引用到<code>6</code>罢了</p>\\n<pre><code><pre class=\\"hljs\\"><code>         6\\n       / ↑ \\\\\\n      4  ↑  8\\n    /   \\\\↑\\n  2      5\\n</code></pre></code></pre><hr>\\n<p>理解了这些，那么后续就简单了，当<code>cur</code>遍历到<code>pre</code>的时候并且打印后，将<code>pre</code>新增的引用删除恢复原来的树便可。</p>\\n<p>代码：</p>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">morrisTraversal</span>(<span class=\\"hljs-params\\">root</span>)</span>{\\n  <span class=\\"hljs-keyword\\">let</span> cur=root,pre\\n  <span class=\\"hljs-keyword\\">while</span>(cur!=<span class=\\"hljs-literal\\">null</span>){\\n    <span class=\\"hljs-comment\\">// 当左为空，直接打印</span>\\n    <span class=\\"hljs-keyword\\">if</span>(cur.left==<span class=\\"hljs-literal\\">null</span>){\\n      <span class=\\"hljs-built_in\\">console</span>.log(cur.val)\\n      cur=cur.right\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      <span class=\\"hljs-comment\\">// 当左不为空，先去找 pre</span>\\n      pre=cur.left\\n      <span class=\\"hljs-keyword\\">while</span>(pre.right!=<span class=\\"hljs-literal\\">null</span> &amp;&amp; pre.right!==cur){\\n        pre=pre.right\\n      }\\n      <span class=\\"hljs-comment\\">// 建立引用，用于返回</span>\\n      <span class=\\"hljs-keyword\\">if</span>(pre.right==<span class=\\"hljs-literal\\">null</span>){\\n        pre.right=cur\\n        cur=cur.left\\n      }<span class=\\"hljs-keyword\\">else</span>{\\n        <span class=\\"hljs-comment\\">// 删除引用</span>\\n        <span class=\\"hljs-built_in\\">console</span>.log(cur.val)\\n        pre.right=<span class=\\"hljs-literal\\">null</span>\\n        cur=cur.right\\n      }\\n    }\\n  }\\n}</code></pre></code></pre>\\n","toc":[],"relatedTags":null,"created_at":"2019-01-09","timeArr":[2019,0,9,0,0,0,0],"title":"BST的Morris Traversal-O(1)遍历","uuid":"6bb049b1a078a0b78387fb4624933c478107281e","summary":"<p>关于二叉树的遍历，使用栈递归或者仿栈循环都是需要<code>O(N)</code>的空间，<code>Morris Traversal</code>保证了空间为<code>O(1)</code>，时间还是<code>O(N)</code>（比原来多了一遍）。</p>\\n<p>这里只介绍<code>inOrder</code>顺序。</p>\\n<p>思路：</p>\\n<p>对每一个<code>cur</code>节点，优先找到一个<code>pre</code>节点，这个<code>pre</code>节点的作用是，当后续<code>cur</code>节...</p>","slug":"BST-de-Morris-Traversal-O(1)-bian-li","sha":"58cf220aadf082c27c39c6bf0db303d77f20ea86"}')}}]);