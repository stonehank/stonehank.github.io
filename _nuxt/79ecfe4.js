(window.webpackJsonp=window.webpackJsonp||[]).push([[626],{1424:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">grid</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> findBall = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">grid</span>) </span>{\\n    <span class=\\"hljs-keyword\\">let</span> res=[]\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;grid[<span class=\\"hljs-number\\">0</span>].length;i++){\\n        res[i]=checkCurPos(<span class=\\"hljs-number\\">0</span>,i)\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> res\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">checkCurPos</span>(<span class=\\"hljs-params\\">x,y</span>)</span>{\\n         <span class=\\"hljs-keyword\\">if</span>(x&gt;=grid.length)<span class=\\"hljs-keyword\\">return</span> y\\n         <span class=\\"hljs-keyword\\">if</span>(grid[x][y]===<span class=\\"hljs-number\\">1</span>){\\n             <span class=\\"hljs-keyword\\">if</span>(y===grid[<span class=\\"hljs-number\\">0</span>].length<span class=\\"hljs-number\\">-1</span>){\\n                 <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">-1</span>\\n             }<span class=\\"hljs-keyword\\">else</span>{\\n                 <span class=\\"hljs-keyword\\">if</span>(grid[x][y+<span class=\\"hljs-number\\">1</span>]===<span class=\\"hljs-number\\">-1</span>){\\n                     <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">-1</span>\\n                 }<span class=\\"hljs-keyword\\">else</span>{\\n                     <span class=\\"hljs-keyword\\">return</span> checkCurPos(x+<span class=\\"hljs-number\\">1</span>,y+<span class=\\"hljs-number\\">1</span>)\\n                 }\\n             }\\n         }<span class=\\"hljs-keyword\\">else</span>{\\n             <span class=\\"hljs-keyword\\">if</span>(y===<span class=\\"hljs-number\\">0</span>){\\n                 <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">-1</span>\\n             }<span class=\\"hljs-keyword\\">else</span>{\\n                 <span class=\\"hljs-keyword\\">if</span>(grid[x][y<span class=\\"hljs-number\\">-1</span>]===<span class=\\"hljs-number\\">1</span>){\\n                     <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">-1</span>\\n                 }<span class=\\"hljs-keyword\\">else</span>{\\n                     <span class=\\"hljs-keyword\\">return</span> checkCurPos(x+<span class=\\"hljs-number\\">1</span>,y<span class=\\"hljs-number\\">-1</span>)\\n                 }\\n             }\\n         }\\n    }\\n};\\n</code></pre>\\n"],"querySlug":"where-will-the-ball-fall","created_at":"2021-01-16","timeArr":[2021,0,16,12,2,50,0],"hasThinking":false,"content":"<p>用一个大小为 <code>m x n</code> 的二维网格 <code>grid</code> 表示一个箱子。你有 <code>n</code> 颗球。箱子的顶部和底部都是开着的。</p>\\n\\n<p>箱子中的每个单元格都有一个对角线挡板，跨过单元格的两个角，可以将球导向左侧或者右侧。</p>\\n\\n<ul>\\n\\t<li>将球导向右侧的挡板跨过左上角和右下角，在网格中用 <code>1</code> 表示。</li>\\n\\t<li>将球导向左侧的挡板跨过右上角和左下角，在网格中用 <code>-1</code> 表示。</li>\\n</ul>\\n\\n<p>在箱子每一列的顶端各放一颗球。每颗球都可能卡在箱子里或从底部掉出来。如果球恰好卡在两块挡板之间的 \\"V\\" 形图案，或者被一块挡导向到箱子的任意一侧边上，就会卡住。</p>\\n\\n<p>返回一个大小为 <code>n</code> 的数组 <code>answer</code> ，其中 <code>answer[i]</code> 是球放在顶部的第 <code>i</code> 列后从底部掉出来的那一列对应的下标，如果球卡在盒子里，则返回 <code>-1</code> 。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<p><strong><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/12/26/ball.jpg\\" style=\\"width: 500px; height: 385px;\\" /></strong></p>\\n\\n<pre>\\n<strong>输入：</strong>grid = [[1,1,1,-1,-1],[1,1,1,-1,-1],[-1,-1,-1,1,1],[1,1,1,1,-1],[-1,-1,-1,-1,-1]]\\n<strong>输出：</strong>[1,-1,-1,-1,-1]\\n<strong>解释：</strong>示例如图：\\nb0 球开始放在第 0 列上，最终从箱子底部第 1 列掉出。\\nb1 球开始放在第 1 列上，会卡在第 2、3 列和第 1 行之间的 \\"V\\" 形里。\\nb2 球开始放在第 2 列上，会卡在第 2、3 列和第 0 行之间的 \\"V\\" 形里。\\nb3 球开始放在第 3 列上，会卡在第 2、3 列和第 0 行之间的 \\"V\\" 形里。\\nb4 球开始放在第 4 列上，会卡在第 2、3 列和第 1 行之间的 \\"V\\" 形里。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>grid = [[-1]]\\n<strong>输出：</strong>[-1]\\n<strong>解释：</strong>球被卡在箱子左侧边上。\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>grid = [[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1],[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1]]\\n<strong>输出：</strong>[0,1,2,3,4,-1]\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>m == grid.length</code></li>\\n\\t<li><code>n == grid[i].length</code></li>\\n\\t<li><code>1 <= m, n <= 100</code></li>\\n\\t<li><code>grid[i][j]</code> 为 <code>1</code> 或 <code>-1</code></li>\\n</ul>\\n","title":"1706. 球会落何处","relatedTags":["深度优先搜索","数组","动态规划","矩阵","模拟"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1706","slug":"1706-Where-Will-the-Ball-Fall"}')}}]);