(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{562:function(e){e.exports=JSON.parse('{"content":"<p>这是看了两篇文章后个人的一些总结和理解，如果有误，还请指出！</p>\\n<blockquote>\\n<p><code>Fiber</code>可以看成一种数据结构，它内部包含了对当前组件的行为，包括对组件行为的跟踪、安排、暂停和取消。</p>\\n</blockquote>\\n<h3 id=\\"fiber-de-jie-gou\\">Fiber的结构</h3>\\n<p><code>React</code>的组件对象每次<code>render</code>的时候都会重新创建</p>\\n<p><code>React</code>组件对象如下：</p>\\n<pre><code><pre class=\\"hljs\\"><code>{\\n    $$typeof: Symbol(react.element),\\n    type: \'button\',\\n    key: &quot;1&quot;,\\n    props: {\\n        children: \'Update counter\',\\n        onClick: () =&gt; { ... }\\n    }\\n}</code></pre></code></pre><p>而<code>Fiber</code>并不会每次创建，而是直接在原内容上修改。</p>\\n<p>每个组件都有一个<code>Fiber</code>结构，它们共同组成了树，而它们互相连接通过<code>child</code>,<code>sibling</code>,<code>return</code>(相当于parent)。</p>\\n<pre><code><pre class=\\"hljs\\"><code>  return\\n    |\\n  FiberNode --sibling\\n    |\\n  child</code></pre></code></pre><h3 id=\\"fiber-nei-bu-gong-zuo-fang-shi\\">Fiber内部工作方式</h3>\\n<p><code>Fiber</code>展示给用户的界面的的树称为<code>current</code>树，内部还有一个<code>workInProgress</code>树，它们二者互相通过属性<code>alternate</code>引用对方。</p>\\n<p>当组件内部执行<code>redner</code>阶段更新时，都是在<code>workInProgress</code>内部进行；</p>\\n<p>在<code>commit</code>阶段，<code>workInProgress</code>树变为<code>current</code>树，<code>current</code>树变为<code>workInProgress</code>树。</p>\\n<h3 id=\\"fiber-de-render-jie-duan-he-commit-jie-duan\\">Fiber的render阶段和commit阶段</h3>\\n<ul>\\n<li><p>render阶段</p>\\n<p>  <code>render</code>是异步执行，可阻断，执行效果对用户不可见。</p>\\n<p>  执行方式是通过4个方法去遍历一棵树(<code>virtual stack</code>)：</p>\\n<ul>\\n<li><p>performUnitOfWork</p>\\n</li>\\n<li><p>beginWork</p>\\n</li>\\n<li><p>completeUnitOfWork</p>\\n</li>\\n<li><p>completeWork</p>\\n<p>如下gif</p>\\n<p><img src=\\"/article/img/fiber-render-phase.gif\\" alt=\\"\\"></p>\\n<p><code>render</code>阶段是在<code>workInProgress</code>树中执行，通过<code>nextEffect</code>属性将每个执行更新的组件连接。</p>\\n</li>\\n</ul>\\n</li>\\n<li><p>commit阶段</p>\\n<p>  <code>commit</code>是同步执行更新阶段，不可阻断，执行效果对用户可见。</p>\\n<p>  通过<code>nextEffect</code>线性执行<code>commit</code>更新。</p>\\n</li>\\n</ul>\\n<h3 id=\\"fiber-nei-bu-de-loop，react-shi-xian-fei-zu-se-render-de-ao-mi\\"><code>Fiber</code>内部的loop，<code>React</code>实现非阻塞<code>render</code>的奥秘</h3>\\n<p><code>React</code>多个交互组件组成了一棵树，每次执行<code>render</code>的时候，需要去遍历这棵树判断哪个组件需要更新。</p>\\n<p>遍历一棵树，可能我们的第一想法就是递归，的确递归简洁明了，但是有一个缺陷，一旦它沿着栈执行，那必须将栈执行到结束。\\n在这之前，无法去检测是否有优先级更高的任务。</p>\\n<p>因此，<code>React</code>为了保证非阻塞更新，它不能使用递归的方法遍历，它需要在每个组件<code>render</code>阶段执行完毕的同时，去查看是否有优先级更高的任务。</p>\\n<p>这里是通过<code>requestIdleCallback</code>中的<code>deadline.timeRemaining()</code>检测，<code>deadline.timeRemaining()</code>表示在浏览器下一帧执行之前，当前帧的剩余时间。</p>\\n<p>每个组件<code>render</code>阶段完成后，如果检测到还有剩余时间，则继续下一个组件的<code>render</code>。</p>\\n<p>那么<code>React</code>怎么样才能在一棵树内部遍历，并且每次都清空栈，检查剩余时间？</p>\\n<p>它使用了一种叫做<code>virtual stack</code>(虚拟栈)，一个while循环。</p>\\n<p>它的实现依赖了<code>Fiber</code>结构的<code>return</code>属性，确保能正确回到当前调用组件的上一层。</p>\\n<p>通过<code>virtual stack</code>，能够实现递归的执行顺序并且没有栈的堆叠。</p>\\n<p>实现类似如下：</p>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">walk</span>(<span class=\\"hljs-params\\">o</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> root = o;\\n  <span class=\\"hljs-keyword\\">let</span> current = o;\\n\\n  <span class=\\"hljs-keyword\\">while</span> (<span class=\\"hljs-literal\\">true</span>) {\\n    <span class=\\"hljs-keyword\\">let</span> child = doRenderWork(current);\\n    <span class=\\"hljs-comment\\">// 发现子组件，重复执行，这里没有栈(模拟入栈)</span>\\n    <span class=\\"hljs-keyword\\">if</span> (child) {\\n      current = child;\\n      <span class=\\"hljs-keyword\\">continue</span>;\\n    }\\n    <span class=\\"hljs-comment\\">// 发现已经到达起点，退出</span>\\n    <span class=\\"hljs-keyword\\">if</span> (current === root) {\\n      <span class=\\"hljs-keyword\\">return</span>;\\n    }\\n    <span class=\\"hljs-comment\\">// 当无child，并且无sibling，通过return返回上一层(模拟出栈)</span>\\n    <span class=\\"hljs-keyword\\">while</span> (!current.sibling) {\\n      <span class=\\"hljs-comment\\">// 到达原始点或者无法return，退出</span>\\n      <span class=\\"hljs-keyword\\">if</span> (!current.return || current.return === root) {\\n        <span class=\\"hljs-keyword\\">return</span>;\\n      }\\n      <span class=\\"hljs-comment\\">// set the parent as the current active node</span>\\n      current = current.return;\\n    }\\n    <span class=\\"hljs-comment\\">// 存在sibling，进入sibling</span>\\n    current = current.sibling;\\n  }\\n}</code></pre></code></pre>\\n<h3 id=\\"fiber-de-effectlist\\"><code>Fiber</code>的<code>EffectList</code></h3>\\n<p>当一棵组件树内部有多个组件需要更新，<code>Fiber</code>在<code>render</code>阶段通过<code>virtual stack</code>的方式去标记出需要渲染的组件，\\n记录到<code>EffectList</code>中。</p>\\n<p><code>React</code>的<code>commit</code>阶段通过<code>nextEffect</code>对<code>EffectList</code>的组件进行线性处理(渲染)，而不是在一棵树内部再次遍历。</p>\\n<p>其中<code>firstEffect</code>属性标记了从哪个组件开始更新，然后不断执行<code>nextEffect</code>对应的组件的更新。</p>\\n<h3 id=\\"can-kao\\">参考</h3>\\n<ul>\\n<li><a href=\\"https://medium.com/react-in-depth/inside-fiber-in-depth-overview-of-the-new-reconciliation-algorithm-in-react-e1c04700ef6e\\">https://medium.com/react-in-depth/inside-fiber-in-depth-overview-of-the-new-reconciliation-algorithm-in-react-e1c04700ef6e</a></li>\\n<li><a href=\\"https://medium.com/dailyjs/the-how-and-why-on-reacts-usage-of-linked-list-in-fiber-67f1014d0eb7\\">https://medium.com/dailyjs/the-how-and-why-on-reacts-usage-of-linked-list-in-fiber-67f1014d0eb7</a></li>\\n</ul>\\n","toc":[{"anchor":"fiber-de-jie-gou","level":3,"text":"Fiber的结构"},{"anchor":"fiber-nei-bu-gong-zuo-fang-shi","level":3,"text":"Fiber内部工作方式"},{"anchor":"fiber-de-render-jie-duan-he-commit-jie-duan","level":3,"text":"Fiber的render阶段和commit阶段"},{"anchor":"fiber-nei-bu-de-loop，react-shi-xian-fei-zu-se-render-de-ao-mi","level":3,"text":"<code>Fiber</code>内部的loop，<code>React</code>实现非阻塞<code>render</code>的奥秘"},{"anchor":"fiber-de-effectlist","level":3,"text":"<code>Fiber</code>的<code>EffectList</code>"},{"anchor":"can-kao","level":3,"text":"参考"}],"relatedTags":null,"created_at":"2018-11-28","timeArr":[2018,10,28,0,0,0,0],"title":"React-Fiber简述","uuid":"b1f5ca61aa11b54e8e854bd3c67096d01428d37b","summary":"<p><code>Fiber</code>可以看成一种数据结构，它内部包含了对当前组件的行为，包括对组件行为的跟踪、安排、暂停和取消。</p>","slug":"React-Fiber-jian-shu","sha":"0577a959c7299927efbe8e15eb104f1a45ad84ee"}')}}]);