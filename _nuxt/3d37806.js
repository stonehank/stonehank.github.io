(window.webpackJsonp=window.webpackJsonp||[]).push([[1324],{2122:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string[]}</span> <span class=\\"hljs-variable\\">words</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">order</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{boolean}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> isAlienSorted = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">words, order</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> hash={}\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;order.length;i++){\\n    hash[order[i]]=i\\n  }\\n  \\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;words.length<span class=\\"hljs-number\\">-1</span>;i++){\\n    <span class=\\"hljs-keyword\\">if</span>(!compare(words[i],words[i+<span class=\\"hljs-number\\">1</span>]))<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n  \\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">compare</span>(<span class=\\"hljs-params\\">w1,w2</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>,j=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">while</span>(i&lt;w1.length &amp;&amp; j&lt;w2.length){\\n      <span class=\\"hljs-keyword\\">if</span>(hash[w1[i]]!==hash[w2[j]]){\\n        <span class=\\"hljs-keyword\\">return</span> hash[w1[i]]&lt;hash[w2[j]]\\n      }\\n      i++;j++\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> w1.length&lt;w2.length\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"verifying-an-alien-dictionary","created_at":"2019-04-08","timeArr":[2019,3,8,9,33,20,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>对新的字母顺序表构建hash，<code>val</code>为它的索引，检查每一个单词和它后面那一个单词的字典序大小。</p>\\n","content":"<p>某种外星语也使用英文小写字母，但可能顺序 <code>order</code> 不同。字母表的顺序（<code>order</code>）是一些小写字母的排列。</p>\\n\\n<p>给定一组用外星语书写的单词 <code>words</code>，以及其字母表的顺序 <code>order</code>，只有当给定的单词在这种外星语中按字典序排列时，返回 <code>true</code>；否则，返回 <code>false</code>。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>words = [\\"hello\\",\\"leetcode\\"], order = \\"hlabcdefgijkmnopqrstuvwxyz\\"\\n<strong>输出：</strong>true\\n<strong>解释：</strong>在该语言的字母表中，\'h\' 位于 \'l\' 之前，所以单词序列是按字典序排列的。</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>words = [\\"word\\",\\"world\\",\\"row\\"], order = \\"worldabcefghijkmnpqstuvxyz\\"\\n<strong>输出：</strong>false\\n<strong>解释：</strong>在该语言的字母表中，\'d\' 位于 \'l\' 之后，那么 words[0] > words[1]，因此单词序列不是按字典序排列的。</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>words = [\\"apple\\",\\"app\\"], order = \\"abcdefghijklmnopqrstuvwxyz\\"\\n<strong>输出：</strong>false\\n<strong>解释：</strong>当前三个字符 \\"app\\" 匹配时，第二个字符串相对短一些，然后根据词典编纂规则 \\"apple\\" > \\"app\\"，因为 \'l\' > \'∅\'，其中 \'∅\' 是空白字符，定义为比任何其他字符都小（<a href=\\"https://baike.baidu.com/item/%E5%AD%97%E5%85%B8%E5%BA%8F\\" target=\\"_blank\\">更多信息</a>）。\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= words.length <= 100</code></li>\\n\\t<li><code>1 <= words[i].length <= 20</code></li>\\n\\t<li><code>order.length == 26</code></li>\\n\\t<li>在 <code>words[i]</code> 和 <code>order</code> 中的所有字符都是英文小写字母。</li>\\n</ul>\\n","title":"953. 验证外星语词典","relatedTags":["数组","哈希表","字符串"],"difficult":"Easy","lang":["javascript"],"uniqueID":"953","slug":"953-Verifying-an-Alien-Dictionary"}')}}]);