(window.webpackJsonp=window.webpackJsonp||[]).push([[666],{1464:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">numCourses</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">prerequisites</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> findOrder = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">numCourses, prerequisites</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> graph=<span class=\\"hljs-built_in\\">Array</span>(numCourses).fill().map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span>=&gt;</span>[])\\n  <span class=\\"hljs-keyword\\">let</span> visited=<span class=\\"hljs-built_in\\">Array</span>(numCourses).fill(<span class=\\"hljs-literal\\">false</span>)\\n  <span class=\\"hljs-keyword\\">let</span> res=[]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> [to,<span class=\\"hljs-keyword\\">from</span>] <span class=\\"hljs-keyword\\">of</span> prerequisites){\\n    graph[<span class=\\"hljs-keyword\\">from</span>].push(to)\\n  }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">hasCycle</span>(<span class=\\"hljs-params\\">v,marked</span>)</span>{\\n    marked[v]=<span class=\\"hljs-literal\\">true</span>\\n    visited[v]=<span class=\\"hljs-literal\\">true</span>\\n    <span class=\\"hljs-keyword\\">let</span> adj=graph[v]\\n    <span class=\\"hljs-keyword\\">if</span>(adj){\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;adj.length;i++){\\n        <span class=\\"hljs-keyword\\">if</span>(!visited[adj[i]]){\\n          <span class=\\"hljs-keyword\\">if</span>(hasCycle(adj[i],marked))<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n        }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(marked[adj[i]]){\\n          <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n        }\\n      }\\n    }\\n    res.unshift(v)\\n    marked[v]=<span class=\\"hljs-literal\\">false</span>\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n  }\\n\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;numCourses;i++){\\n    <span class=\\"hljs-keyword\\">if</span>(visited[i])<span class=\\"hljs-keyword\\">continue</span>\\n    <span class=\\"hljs-keyword\\">if</span>(hasCycle(i,[]))<span class=\\"hljs-keyword\\">return</span> []\\n  } \\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"course-schedule-ii","created_at":"2019-04-08","timeArr":[2019,3,8,16,25,54,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>和<code>207</code>基本一致，只不过在查找环的同时，建立<code>拓扑排序</code>列表，建立规则就是<code>dfs</code>的逆后序。</p>\\n","content":"<p>现在你总共有 <em>n</em> 门课需要选，记为&nbsp;<code>0</code>&nbsp;到&nbsp;<code>n-1</code>。</p>\\n\\n<p>在选修某些课程之前需要一些先修课程。&nbsp;例如，想要学习课程 0 ，你需要先完成课程&nbsp;1 ，我们用一个匹配来表示他们: <code>[0,1]</code></p>\\n\\n<p>给定课程总量以及它们的先决条件，返回你为了学完所有课程所安排的学习顺序。</p>\\n\\n<p>可能会有多个正确的顺序，你只要返回一种就可以了。如果不可能完成所有课程，返回一个空数组。</p>\\n\\n<p><strong>示例&nbsp;1:</strong></p>\\n\\n<pre><strong>输入:</strong> 2, [[1,0]] \\n<strong>输出: </strong><code>[0,1]</code>\\n<strong>解释:</strong>&nbsp;总共有 2 门课程。要学习课程 1，你需要先完成课程 0。因此，正确的课程顺序为 <code>[0,1] 。</code></pre>\\n\\n<p><strong>示例&nbsp;2:</strong></p>\\n\\n<pre><strong>输入:</strong> 4, [[1,0],[2,0],[3,1],[3,2]]\\n<strong>输出: </strong><code>[0,1,2,3] or [0,2,1,3]</code>\\n<strong>解释:</strong>&nbsp;总共有 4 门课程。要学习课程 3，你应该先完成课程 1 和课程 2。并且课程 1 和课程 2 都应该排在课程 0 之后。\\n&nbsp;    因此，一个正确的课程顺序是&nbsp;<code>[0,1,2,3]</code> 。另一个正确的排序是&nbsp;<code>[0,2,1,3]</code> 。\\n</pre>\\n\\n<p><strong>说明:</strong></p>\\n\\n<ol>\\n\\t<li>输入的先决条件是由<strong>边缘列表</strong>表示的图形，而不是邻接矩阵。详情请参见<a href=\\"http://blog.csdn.net/woaidapaopao/article/details/51732947\\" target=\\"_blank\\">图的表示法</a>。</li>\\n\\t<li>你可以假定输入的先决条件中没有重复的边。</li>\\n</ol>\\n\\n<p><strong>提示:</strong></p>\\n\\n<ol>\\n\\t<li>这个问题相当于查找一个循环是否存在于有向图中。如果存在循环，则不存在拓扑排序，因此不可能选取所有课程进行学习。</li>\\n\\t<li><a href=\\"https://www.coursera.org/specializations/algorithms\\" target=\\"_blank\\">通过 DFS 进行拓扑排序</a> - 一个关于Coursera的精彩视频教程（21分钟），介绍拓扑排序的基本概念。</li>\\n\\t<li>\\n\\t<p>拓扑排序也可以通过&nbsp;<a href=\\"https://baike.baidu.com/item/%E5%AE%BD%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/5224802?fr=aladdin&amp;fromid=2148012&amp;fromtitle=%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2\\" target=\\"_blank\\">BFS</a>&nbsp;完成。</p>\\n\\t</li>\\n</ol>\\n","title":"210. 课程表 II","relatedTags":["深度优先搜索","广度优先搜索","图","拓扑排序"],"difficult":"Middle","lang":["javascript"],"uniqueID":"210","slug":"210-Course-Schedule-II"}')}}]);