(window.webpackJsonp=window.webpackJsonp||[]).push([[639],{1437:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">nums</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> tupleSameProduct = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">nums</span>) </span>{\\n    <span class=\\"hljs-keyword\\">let</span> cache={}\\n    <span class=\\"hljs-keyword\\">let</span> allProdCount=<span class=\\"hljs-keyword\\">new</span> <span class=\\"hljs-built_in\\">Map</span>()\\n    nums.sort(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">a,b</span>)=&gt;</span>a-b)\\n    getAllProd()\\n\\n    <span class=\\"hljs-keyword\\">let</span> ans=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;nums.length;i++){\\n        <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=i+<span class=\\"hljs-number\\">1</span>;j&lt;nums.length;j++){\\n            <span class=\\"hljs-keyword\\">let</span> prod=nums[i]*nums[j]\\n            <span class=\\"hljs-keyword\\">if</span>(cache[prod])<span class=\\"hljs-keyword\\">continue</span>\\n            cache[prod]=<span class=\\"hljs-literal\\">true</span>\\n            <span class=\\"hljs-keyword\\">let</span> c=allProdCount.get(prod)<span class=\\"hljs-number\\">-1</span>\\n            ans+=factory(c)\\n        }\\n    }\\n\\n    <span class=\\"hljs-keyword\\">return</span> ans*<span class=\\"hljs-number\\">8</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">factory</span>(<span class=\\"hljs-params\\">n</span>)</span>{\\n        <span class=\\"hljs-keyword\\">if</span>(n===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>\\n        <span class=\\"hljs-keyword\\">let</span> sum=<span class=\\"hljs-number\\">0</span>\\n        <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">1</span>;i&lt;=n;i++){\\n            sum+=i\\n        }\\n        <span class=\\"hljs-keyword\\">return</span> sum\\n    }\\n\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">getAllProd</span>(<span class=\\"hljs-params\\">prod</span>)</span>{\\n        <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;nums.length;i++){\\n            <span class=\\"hljs-keyword\\">let</span> iNum=nums[i]\\n            <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=i+<span class=\\"hljs-number\\">1</span>;j&lt;nums.length;j++){\\n                <span class=\\"hljs-keyword\\">let</span> jNum=nums[j]\\n                <span class=\\"hljs-keyword\\">let</span> prod=iNum*jNum\\n                <span class=\\"hljs-keyword\\">if</span>(!allProdCount.has(prod)){\\n                    allProdCount.set(prod,<span class=\\"hljs-number\\">0</span>)\\n                }\\n                allProdCount.set(prod,allProdCount.get(prod)+<span class=\\"hljs-number\\">1</span>)\\n            }\\n        }\\n    }\\n};\\n</code></pre>\\n"],"querySlug":"tuple-with-same-product","created_at":"2021-02-24","timeArr":[2021,1,24,10,7,44,0],"hasThinking":false,"content":"<p>给你一个由 <strong>不同</strong> 正整数组成的数组 <code>nums</code> ，请你返回满足 <code>a * b = c * d</code> 的元组<em> </em><code>(a, b, c, d)</code><em> </em>的数量。其中 <code>a</code>、<code>b</code>、<code>c</code> 和 <code>d</code> 都是 <code>nums</code> 中的元素，且 <code>a != b != c != d</code> 。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [2,3,4,6]\\n<strong>输出：</strong>8\\n<strong>解释：</strong>存在 8 个满足题意的元组：\\n(2,6,3,4) , (2,6,4,3) , (6,2,3,4) , (6,2,4,3)\\n(3,4,2,6) , (4,3,2,6) , (3,4,6,2) , (4,3,6,2)\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [1,2,4,5,10]\\n<strong>输出：</strong>16\\n<strong>解释：</strong>存在 16 个满足题意的元组：\\n(1,10,2,5) , (1,10,5,2) , (10,1,2,5) , (10,1,5,2)\\n(2,5,1,10) , (2,5,10,1) , (5,2,1,10) , (5,2,10,1)\\n(2,10,4,5) , (2,10,5,4) , (10,2,4,5) , (10,2,4,5)\\n(4,5,2,10) , (4,5,10,2) , (5,4,2,10) , (5,4,10,2)\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [2,3,4,6,8,12]\\n<strong>输出：</strong>40\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [2,3,5,7]\\n<strong>输出：</strong>0\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= nums.length <= 1000</code></li>\\n\\t<li><code>1 <= nums[i] <= 10<sup>4</sup></code></li>\\n\\t<li><code>nums</code> 中的所有元素 <strong>互不相同</strong></li>\\n</ul>\\n","title":"1726. 同积元组","relatedTags":["数组","哈希表"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1726","slug":"1726-Tuple-with-Same-Product"}')}}]);