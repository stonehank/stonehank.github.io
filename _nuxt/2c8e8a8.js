(window.webpackJsonp=window.webpackJsonp||[]).push([[515],{1313:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for singly-linked list.\\n * function ListNode(val) {\\n *     this.val = val;\\n *     this.next = null;\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{ListNode}</span> <span class=\\"hljs-variable\\">head</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{ListNode}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> sortList = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">head</span>) </span>{\\n  <span class=\\"hljs-keyword\\">return</span> divid(head)\\n  \\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">divid</span>(<span class=\\"hljs-params\\">node</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(!node || !node.next)<span class=\\"hljs-keyword\\">return</span> node\\n    <span class=\\"hljs-keyword\\">let</span> fast=node,slow=node,prev\\n    <span class=\\"hljs-keyword\\">while</span>(fast &amp;&amp; fast.next){\\n      prev=slow\\n      slow=slow.next\\n      fast=fast.next.next\\n    }\\n    prev.next=<span class=\\"hljs-literal\\">null</span>\\n    <span class=\\"hljs-keyword\\">return</span> merge(divid(node),divid(slow))\\n  }\\n  \\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">merge</span>(<span class=\\"hljs-params\\">l1,l2</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(!l1)<span class=\\"hljs-keyword\\">return</span> l2\\n    <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(!l2)<span class=\\"hljs-keyword\\">return</span> l1\\n    <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(l1.val&lt;l2.val){\\n      l1.next=merge(l1.next,l2)\\n      <span class=\\"hljs-keyword\\">return</span> l1\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      l2.next=merge(l1,l2.next)\\n      <span class=\\"hljs-keyword\\">return</span> l2\\n    }\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"sort-list","created_at":"2019-04-20","timeArr":[2019,3,20,13,46,21,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>这里使用了<code>归并排序</code>，分为分割和合并两个部分。</p>\\n","content":"<p>给你链表的头结点 <code>head</code> ，请将其按 <strong>升序</strong> 排列并返回 <strong>排序后的链表</strong> 。</p>\\n\\n<p><b>进阶：</b></p>\\n\\n<ul>\\n\\t<li>你可以在 <code>O(n log n)</code> 时间复杂度和常数级空间复杂度下，对链表进行排序吗？</li>\\n</ul>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2020/09/14/sort_list_1.jpg\\" style=\\"width: 302px; \\"/>\\n<pre>\\n<b>输入：</b>head = [4,2,1,3]\\n<b>输出：</b>[1,2,3,4]\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2020/09/14/sort_list_2.jpg\\" style=\\"width: 402px; \\" />\\n<pre>\\n<b>输入：</b>head = [-1,5,3,4,0]\\n<b>输出：</b>[-1,0,3,4,5]\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<b>输入：</b>head = []\\n<b>输出：</b>[]\\n</pre>\\n\\n<p> </p>\\n\\n<p><b>提示：</b></p>\\n\\n<ul>\\n\\t<li>链表中节点的数目在范围 <code>[0, 5 * 10<sup>4</sup>]</code> 内</li>\\n\\t<li><code>-10<sup>5</sup> <= Node.val <= 10<sup>5</sup></code></li>\\n</ul>\\n","title":"148. 排序链表","relatedTags":["链表","双指针","分治","排序","归并排序"],"difficult":"Middle","lang":["javascript"],"uniqueID":"148","slug":"148-Sort-List"}')}}]);