(window.webpackJsonp=window.webpackJsonp||[]).push([[344],{1142:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">arr</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">k</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> kConcatenationMaxSum = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">arr, k</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> MOD=<span class=\\"hljs-number\\">1e9</span>+<span class=\\"hljs-number\\">7</span>\\n  <span class=\\"hljs-keyword\\">let</span> max=<span class=\\"hljs-built_in\\">Math</span>.max.apply(<span class=\\"hljs-built_in\\">Math</span>,arr)\\n  <span class=\\"hljs-keyword\\">if</span>(max&lt;=<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">let</span> sum=arr.reduce(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">a,b</span>)=&gt;</span>a+b)\\n  <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">if</span>(sum&gt;<span class=\\"hljs-number\\">0</span>){\\n    res=maxSubSum(arr)+sum*(k<span class=\\"hljs-number\\">-1</span>) % MOD\\n  }<span class=\\"hljs-keyword\\">else</span>{\\n    <span class=\\"hljs-keyword\\">let</span> mergeArr=arr\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;<span class=\\"hljs-built_in\\">Math</span>.min(k,<span class=\\"hljs-number\\">2</span>);i++){\\n      mergeArr=mergeArr.concat(arr)\\n    }\\n    res=maxSubSum(mergeArr) % MOD\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n  \\n  \\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">maxSubSum</span>(<span class=\\"hljs-params\\">arr</span>)</span>{\\n    <span class=\\"hljs-comment\\">// console.log(arr)</span>\\n    <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">let</span> max=-<span class=\\"hljs-literal\\">Infinity</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;arr.length;i++){\\n      <span class=\\"hljs-keyword\\">if</span>(res+arr[i]&lt;=<span class=\\"hljs-number\\">0</span>){\\n        res=<span class=\\"hljs-number\\">0</span>\\n      }<span class=\\"hljs-keyword\\">else</span>{\\n        res+=arr[i] \\n      }\\n      max=<span class=\\"hljs-built_in\\">Math</span>.max(max,res)\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> max\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"k-concatenation-maximum-sum","created_at":"2019-09-15","timeArr":[2019,8,15,10,54,56,0],"hasThinking":false,"content":"<p>给你一个整数数组&nbsp;<code>arr</code>&nbsp;和一个整数&nbsp;<code>k</code>。</p>\\n\\n<p>首先，我们要对该数组进行修改，即把原数组 <code>arr</code> 重复&nbsp;<code>k</code>&nbsp;次。</p>\\n\\n<blockquote>\\n<p>举个例子，如果&nbsp;<code>arr&nbsp;= [1, 2]</code> 且 <code>k = 3</code>，那么修改后的数组就是&nbsp;<code>[1, 2, 1, 2, 1, 2]</code>。</p>\\n</blockquote>\\n\\n<p>然后，请你返回修改后的数组中的最大的子数组之和。</p>\\n\\n<p>注意，子数组长度可以是 <code>0</code>，在这种情况下它的总和也是 <code>0</code>。</p>\\n\\n<p>由于&nbsp;<strong>结果可能会很大</strong>，所以需要 <strong>模（mod）</strong>&nbsp;<code>10^9 + 7</code>&nbsp;后再返回。&nbsp;</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>arr = [1,2], k = 3\\n<strong>输出：</strong>9\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>arr = [1,-2,1], k = 5\\n<strong>输出：</strong>2\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>arr = [-1,-2], k = 7\\n<strong>输出：</strong>0\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= arr.length &lt;= 10^5</code></li>\\n\\t<li><code>1 &lt;= k &lt;= 10^5</code></li>\\n\\t<li><code>-10^4 &lt;= arr[i] &lt;= 10^4</code></li>\\n</ul>\\n","title":"1191. K 次串联后最大子数组之和","relatedTags":["数组","动态规划"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1191","slug":"1191-K-Concatenation-Maximum-Sum"}')}}]);