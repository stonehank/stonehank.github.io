(window.webpackJsonp=window.webpackJsonp||[]).push([[671],{1469:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">nums</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">k</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> findKthLargest = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">nums, k</span>) </span>{\\n  \\n  <span class=\\"hljs-keyword\\">return</span> qs(<span class=\\"hljs-number\\">0</span>,nums.length<span class=\\"hljs-number\\">-1</span>,k)\\n  \\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">qs</span>(<span class=\\"hljs-params\\">lo,hi,k</span>)  </span>{\\n    <span class=\\"hljs-keyword\\">let</span> p=nums[hi],l=lo,r=hi<span class=\\"hljs-number\\">-1</span>\\n    <span class=\\"hljs-keyword\\">while</span>(l&lt;=r){\\n      <span class=\\"hljs-keyword\\">while</span>(l&lt;=r &amp;&amp; nums[l]&lt;p){\\n        l++\\n      }\\n      <span class=\\"hljs-keyword\\">while</span>(l&lt;=r &amp;&amp; nums[r]&gt;p){\\n        r--\\n      }      \\n      <span class=\\"hljs-keyword\\">if</span>(l&gt;r)<span class=\\"hljs-keyword\\">break</span>\\n      swap(nums,l,r)\\n      l++\\n      r--\\n    }\\n    swap(nums,l,hi)\\n    <span class=\\"hljs-keyword\\">let</span> count=hi-l+<span class=\\"hljs-number\\">1</span>\\n    <span class=\\"hljs-keyword\\">if</span>(count===k)<span class=\\"hljs-keyword\\">return</span> p\\n    <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(count&gt;k){\\n      <span class=\\"hljs-keyword\\">return</span> qs(l+<span class=\\"hljs-number\\">1</span>,hi,k)\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      <span class=\\"hljs-keyword\\">return</span> qs(lo,l<span class=\\"hljs-number\\">-1</span>,k-count)\\n    }\\n  }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">swap</span>(<span class=\\"hljs-params\\">arr,i,j</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> t=arr[i]\\n    arr[i]=arr[j]\\n    arr[j]=t\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"kth-largest-element-in-an-array","created_at":"2019-04-22","timeArr":[2019,3,22,15,7,31,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<ul>\\n<li><code>sort</code>排序。</li>\\n</ul>\\n<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">nums</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">k</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> findKthLargest = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">nums, k</span>) </span>{\\n  <span class=\\"hljs-comment\\">// O(nlgn)</span>\\n  nums.sort(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">a,b</span>)=&gt;</span>b-a)\\n  <span class=\\"hljs-keyword\\">return</span> nums[k<span class=\\"hljs-number\\">-1</span>]\\n};\\n</code></pre>\\n<ul>\\n<li><code>二分法</code>筛选。</li>\\n</ul>\\n<p>每次选一个数，查看这个数能排第几位，如果更大则减小，更小则增大。</p>\\n<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">nums</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">k</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> findKthLargest = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">nums, k</span>) </span>{\\n  <span class=\\"hljs-comment\\">// O(nlgn)</span>\\n  k=nums.length-k+<span class=\\"hljs-number\\">1</span>\\n  <span class=\\"hljs-keyword\\">let</span> lo=<span class=\\"hljs-literal\\">Infinity</span>,hi=-<span class=\\"hljs-literal\\">Infinity</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;nums.length;i++){\\n    <span class=\\"hljs-keyword\\">if</span>(nums[i]&lt;lo)lo=nums[i]\\n    <span class=\\"hljs-keyword\\">if</span>(nums[i]&gt;hi)hi=nums[i]\\n  }      \\n  <span class=\\"hljs-keyword\\">while</span>(lo&lt;hi){\\n    <span class=\\"hljs-keyword\\">let</span> mid=<span class=\\"hljs-built_in\\">Math</span>.floor((lo+hi)/<span class=\\"hljs-number\\">2</span>)\\n    <span class=\\"hljs-keyword\\">let</span> count=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;nums.length;i++){\\n      <span class=\\"hljs-keyword\\">if</span>(nums[i]&lt;=mid)count++\\n    }\\n    <span class=\\"hljs-keyword\\">if</span>(count&gt;=k)hi=mid\\n    <span class=\\"hljs-keyword\\">else</span> lo=mid+<span class=\\"hljs-number\\">1</span>\\n    }\\n  <span class=\\"hljs-keyword\\">return</span> lo\\n};\\n</code></pre>\\n<ul>\\n<li>使用快速选择。</li>\\n</ul>\\n<ol>\\n<li>快速排序我们都很清楚，每一次选中一个<code>pivot</code>，将小于它的放左边，大于它的放右边，执行<code>lgN</code>次。</li>\\n<li>快速选择同理，唯一的区别是当每次左右排序后，检查我们要找的值是在左边还是在右边，然后继续执行<code>左</code>或者<code>右</code>，另一边丢弃。</li>\\n</ol>\\n","content":"<p>给定整数数组 <code>nums</code> 和整数 <code>k</code>，请返回数组中第 <code><strong>k</strong></code> 个最大的元素。</p>\\n\\n<p>请注意，你需要找的是数组排序后的第 <code>k</code> 个最大的元素，而不是第 <code>k</code> 个不同的元素。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1:</strong></p>\\n\\n<pre>\\n<strong>输入:</strong> <code>[3,2,1,5,6,4] 和</code> k = 2\\n<strong>输出:</strong> 5\\n</pre>\\n\\n<p><strong>示例 2:</strong></p>\\n\\n<pre>\\n<strong>输入:</strong> <code>[3,2,3,1,2,4,5,5,6] 和</code> k = 4\\n<strong>输出:</strong> 4</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示： </strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= k <= nums.length <= 10<sup>4</sup></code></li>\\n\\t<li><code>-10<sup>4</sup> <= nums[i] <= 10<sup>4</sup></code></li>\\n</ul>\\n","title":"215. 数组中的第K个最大元素","relatedTags":["数组","分治","快速选择","排序","堆（优先队列）"],"difficult":"Middle","lang":["javascript"],"uniqueID":"215","slug":"215-Kth-Largest-Element-in-an-Array"}')}}]);