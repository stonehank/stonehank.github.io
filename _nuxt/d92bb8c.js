(window.webpackJsonp=window.webpackJsonp||[]).push([[1223],{2021:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Solution</span><span class=\\"hljs-params\\">(object)</span>:</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">shortestSubarray</span><span class=\\"hljs-params\\">(self, A, K)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type A: List[int]\\n        :type K: int\\n        :rtype: int\\n        \\"\\"\\"</span>\\n        d=[]\\n        N=len(A)\\n        numSums=[<span class=\\"hljs-number\\">0</span>]*(N+<span class=\\"hljs-number\\">1</span>)\\n        minLen=float(<span class=\\"hljs-string\\">\'inf\'</span>)\\n        <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(<span class=\\"hljs-number\\">1</span>,N+<span class=\\"hljs-number\\">1</span>):\\n          numSums[i]=numSums[i<span class=\\"hljs-number\\">-1</span>]+A[i<span class=\\"hljs-number\\">-1</span>]\\n        <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(<span class=\\"hljs-number\\">0</span>,N+<span class=\\"hljs-number\\">1</span>):\\n          <span class=\\"hljs-keyword\\">while</span> d <span class=\\"hljs-keyword\\">and</span> numSums[i]-numSums[d[<span class=\\"hljs-number\\">0</span>]]&gt;=K:\\n            minLen=min(minLen,i-d.pop(<span class=\\"hljs-number\\">0</span>))\\n          <span class=\\"hljs-keyword\\">while</span> d <span class=\\"hljs-keyword\\">and</span> numSums[i]&lt;=numSums[d[<span class=\\"hljs-number\\">-1</span>]]:\\n            d.pop()\\n          \\n          d.append(i)\\n        <span class=\\"hljs-keyword\\">if</span> minLen==float(<span class=\\"hljs-string\\">\'inf\'</span>):<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">-1</span>\\n        <span class=\\"hljs-keyword\\">return</span> minLen\\n</code></pre>\\n"],"querySlug":"shortest-subarray-with-sum-at-least-k","created_at":"2019-02-26","timeArr":[2019,1,26,22,46,57,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>刚开始处理这个问题，我使用的是处理和为<code>K</code>的子数组的方法，再通过一个<code>window slide</code>不断处理内部的值，当其大于等于<code>K</code>的时候，\\n记录一下<code>slide</code>的长度。</p>\\n<p>但这个方法的问题就是一旦需要的子数组在<code>slide</code>中间，则无法获取</p>\\n<p>例如：</p>\\n<pre class=\\"hljs\\"><code>A=[-34,37,51,3,-12,-50,51,100,-47,99,34]\\nK=151\\n</code></pre>\\n<p>用上面的办法结果是<code>4</code>，会卡在<code>[51,100,-47,99]</code>这样的子数组中，接着是<code>[100,-47,99]</code>，无法算出<code>51,100</code>这个子数组。</p>\\n<p>正确应该是<code>2</code>。</p>\\n<p>正确思路：</p>\\n<ol>\\n<li>第一步相同，需要算出当前数与之前的和的数组。</li>\\n<li>定义一个数组<code>d</code>，存放可以作为子数组开始的点。</li>\\n<li><code>d</code>中的值遇到以下2种情况，可以删除。\\n<ol>\\n<li>遇到某个点<code>i</code>与<code>d[0]</code>之间的和已经<code>&gt;=K</code>了，说明<code>d[0]</code>这个点是有效的，需要记录长度，并且删除(尝试右移)。</li>\\n<li>遇到某个点<code>i</code>加上它后，当前和比<code>d[d.length-1]</code>这个点的和更小或者相等，说明这个<code>i</code>是负值或者0，\\n说明这个<code>d[d.length-1]</code>点是无效的，是不能做为子数组开始的点，需要删除。</li>\\n</ol>\\n</li>\\n</ol>\\n","content":"<p>返回 <code>A</code> 的最短的非空连续子数组的<strong>长度</strong>，该子数组的和至少为 <code>K</code> 。</p>\\n\\n<p>如果没有和至少为&nbsp;<code>K</code>&nbsp;的非空子数组，返回&nbsp;<code>-1</code>&nbsp;。</p>\\n\\n<p>&nbsp;</p>\\n\\n<ol>\\n</ol>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>A = [1], K = 1\\n<strong>输出：</strong>1\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>A = [1,2], K = 4\\n<strong>输出：</strong>-1\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>A = [2,-1,2], K = 3\\n<strong>输出：</strong>3\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ol>\\n\\t<li><code>1 &lt;= A.length &lt;= 50000</code></li>\\n\\t<li><code>-10 ^ 5&nbsp;&lt;= A[i] &lt;= 10 ^ 5</code></li>\\n\\t<li><code>1 &lt;= K &lt;= 10 ^ 9</code></li>\\n</ol>\\n","title":"862. 和至少为 K 的最短子数组","relatedTags":["队列","数组","二分查找","前缀和","滑动窗口","单调队列","堆（优先队列）"],"difficult":"Hard","lang":["python"],"uniqueID":"862","slug":"862-Shortest-Subarray-with-Sum-at-Least-K"}')}}]);