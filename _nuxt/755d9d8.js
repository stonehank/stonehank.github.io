(window.webpackJsonp=window.webpackJsonp||[]).push([[167],{649:function(e){e.exports=JSON.parse('{"content":"<p>调用<code>import()</code>执行动态加载时，如果使用变量模板进行请求，会潜在的请求当前确定的路径下的<strong>所有文件</strong>！</p>\\n<p>例如：</p>\\n<p>现在有如下文件结构：</p>\\n<pre><code><pre class=\\"hljs\\"><code>|---asset\\n  |---blog\\n    |---tech\\n      |---001.json\\n      |---002.json\\n      |---003.json\\n      ...\\n    |---essay\\n      |---001.json\\n      |---002.json\\n      |---003.json\\n      ...\\n  |---img\\n    |---a.png\\n    |---b.png</code></pre></code></pre><p>现在想<code>import</code>文件夹<code>tech</code>内部的所有文章，如果里面有100篇，可以考虑<code>lazy-once</code>，这样只需要1个请求而不是100个，接着设计了一个请求模块，接受一个路径参数<code>fetchPath</code></p>\\n<pre><code><pre class=\\"hljs\\"><code>// fetchPath: \'asset/blog/tech\'\\n// datas包含tech每一个文件的title\\ndatas.forEach((data)=&gt;{\\n  let filename=data.title+&quot;.json&quot;\\n  import(\\n    /* webpackMode: &quot;lazy-once&quot; */\\n    `/${fetchPath}/${filename}`\\n  )\\n  .then(...)\\n})</code></pre></code></pre><p>上面这一段，原本的意思可能就是希望在<code>tech</code>文件夹内部获取每一个文件的具体内容。</p>\\n<p>但这么写，实际上请求会将<code>/</code>目录以内的<strong>所有格式的文件</strong>都进行请求，包括<code>img</code>内部的<code>*.png</code>，\\n再去比对你所需要的<code>${filename}</code>，这是因为如果你的请求中包含变量模板(变量)，\\n<code>webpack</code>会潜在的请求已经确定的路径中的内容，例如这里已经确定的就是<code>/</code></p>\\n<p>如果请求路径这么写： <code>/${fetchPath}/${data.title}.json</code>，则<code>webpack</code>能确定的是<code>/</code>和后缀<code>.json</code>，因此会去请求<code>/</code>路径下所有后缀为<code>.json</code>的文件。</p>\\n<p>官方给出的解决方案是使用<code>webpackInclude</code>和<code>webpackExclude</code>，但这两个选项在这里改变的意义不大，这里的变量包括路径名，\\n而<code>webpackInclude</code>和<code>webpackExclude</code>是不会匹配前缀(路径)的。</p>\\n<p>因此个人的解决方案就是给<code>webpack</code>一个能确定的目录，在这个目录之中去请求。</p>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">// fetchPath: \'asset/blog/tech\'</span>\\n<span class=\\"hljs-comment\\">// datas包含tech每一个文件的title</span>\\ndatas.forEach(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">data</span>)=&gt;</span>{\\n  <span class=\\"hljs-keyword\\">if</span>(fetchPath.includes(<span class=\\"hljs-string\\">\'tech\'</span>) ){\\n     <span class=\\"hljs-keyword\\">import</span>(\\n       <span class=\\"hljs-comment\\">/* webpackMode: \\"lazy-once\\" */</span>\\n       <span class=\\"hljs-string\\">`/asset/blog/tech/<span class=\\"hljs-subst\\">${data.title}</span>.json`</span>\\n     )\\n     .then(...) \\n  }<span class=\\"hljs-keyword\\">else</span>{\\n    ...\\n  }\\n})</code></pre></code></pre>\\n<p>当已经确定是在<code>tech</code>内部，就可以让<code>import</code>放心的去请求需要的文件。</p>\\n<p>另一个解决方案是使用<code>lazy</code>而不是<code>lazy-once</code>，但是如果存在100个文件，则需要请求100次，而且<code>100次请求</code>总大小也比请求<code>1次请求包含100项</code>内容大很多（包含重复请求头和响应头）。</p>\\n","toc":[],"relatedTags":null,"created_at":"2018-12-22","timeArr":[2018,11,22,0,0,0,0],"title":"webpack动态import的一个坑","uuid":"eef7e96833e36dd1982a065c2bf4658180ae9581","summary":"<p>调用<code> import()</code>执行动态加载时，如果使用变量模板进行请求，会潜在的请求当前确定的路径下的<strong>所有文件</strong>！</p>\\n<p>例如：</p>\\n<p>现在有如下文件结构：</p>\\n<pre class=\\"hljs\\"><code>|---asset\\n  |---blog\\n    |---tech\\n      |---001.json\\n      |---002.json\\n      |-...</code></pre>","slug":"webpack-dong-tai-import-de-yi-ge-keng","sha":"4edeb6d395d6a622ada753d259d16102786a87f9"}')}}]);