(window.webpackJsonp=window.webpackJsonp||[]).push([[403],{1201:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{TreeNode}</span> <span class=\\"hljs-variable\\">root1</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{TreeNode}</span> <span class=\\"hljs-variable\\">root2</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> getAllElements = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">root1, root2</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> arr1=[]\\n  csort(root1,arr1)\\n  <span class=\\"hljs-keyword\\">let</span> arr2=[]\\n  csort(root2,arr2)\\n  <span class=\\"hljs-keyword\\">let</span> res=arr1.concat(arr2)\\n  res.sort(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">a,b</span>)=&gt;</span>a-b)\\n  <span class=\\"hljs-keyword\\">return</span> res\\n      \\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">csort</span>(<span class=\\"hljs-params\\">root,arr</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(!root)<span class=\\"hljs-keyword\\">return</span>\\n    arr.push(root.val)\\n    <span class=\\"hljs-keyword\\">if</span>(root.left)csort(root.left,arr)\\n    <span class=\\"hljs-keyword\\">if</span>(root.right)csort(root.right,arr)\\n  }\\n  \\n};\\n</code></pre>\\n"],"querySlug":"all-elements-in-two-binary-search-trees","created_at":"2019-12-29","timeArr":[2019,11,29,10,37,52,0],"hasThinking":false,"content":"<p>给你&nbsp;<code>root1</code> 和 <code>root2</code>&nbsp;这两棵二叉搜索树。</p>\\n\\n<p>请你返回一个列表，其中包含&nbsp;<strong>两棵树&nbsp;</strong>中的所有整数并按 <strong>升序</strong> 排序。.</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<p><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/12/29/q2-e1.png\\"></p>\\n\\n<pre><strong>输入：</strong>root1 = [2,1,4], root2 = [1,0,3]\\n<strong>输出：</strong>[0,1,1,2,3,4]\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>root1 = [0,-10,10], root2 = [5,1,7,0,2]\\n<strong>输出：</strong>[-10,0,0,1,2,5,7,10]\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>root1 = [], root2 = [5,1,7,0,2]\\n<strong>输出：</strong>[0,1,2,5,7]\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre><strong>输入：</strong>root1 = [0,-10,10], root2 = []\\n<strong>输出：</strong>[-10,0,10]\\n</pre>\\n\\n<p><strong>示例 5：</strong></p>\\n\\n<p><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/12/29/q2-e5-.png\\"></p>\\n\\n<pre><strong>输入：</strong>root1 = [1,null,8], root2 = [8,1]\\n<strong>输出：</strong>[1,1,8,8]\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li>每棵树最多有&nbsp;<code>5000</code>&nbsp;个节点。</li>\\n\\t<li>每个节点的值在&nbsp;<code>[-10^5, 10^5]</code>&nbsp;之间。</li>\\n</ul>\\n","title":"1305. 两棵二叉搜索树中的所有元素","relatedTags":["树","深度优先搜索","二叉搜索树","二叉树","排序"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1305","slug":"1305-All-Elements-in-Two-Binary-Search-Trees"}')}}]);