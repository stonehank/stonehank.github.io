(window.webpackJsonp=window.webpackJsonp||[]).push([[433],{1231:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">s</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">t</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> minSteps = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">s, t</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(s===t)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">let</span> sCount=count(s)\\n  <span class=\\"hljs-keyword\\">let</span> tCount=count(t)\\n  \\n  <span class=\\"hljs-keyword\\">let</span> min=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-number\\">0</span>\\n  \\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;<span class=\\"hljs-number\\">26</span>;i++){\\n    <span class=\\"hljs-keyword\\">let</span> a=sCount[i]\\n    <span class=\\"hljs-keyword\\">let</span> b=tCount[i]\\n    <span class=\\"hljs-keyword\\">if</span>(a===b)<span class=\\"hljs-keyword\\">continue</span>\\n    <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(a&lt;b)res+=(b-a)\\n    <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(a&gt;b)<span class=\\"hljs-keyword\\">continue</span>\\n  }\\n  \\n  <span class=\\"hljs-keyword\\">return</span> res\\n  \\n  \\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">count</span>(<span class=\\"hljs-params\\">str</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-built_in\\">Array</span>(<span class=\\"hljs-number\\">26</span>).fill(<span class=\\"hljs-number\\">0</span>)\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;str.length;i++){\\n      <span class=\\"hljs-keyword\\">let</span> code=str.charCodeAt(i)<span class=\\"hljs-number\\">-97</span>\\n      res[code]++\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> res\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"minimum-number-of-steps-to-make-two-strings-anagram","created_at":"2020-02-09","timeArr":[2020,1,9,10,46,28,0],"hasThinking":false,"content":"<p>给你两个长度相等的字符串&nbsp;<code>s</code> 和 <code>t</code>。每一个步骤中，你可以选择将&nbsp;<code>t</code>&nbsp;中的 <strong>任一字符</strong> 替换为 <strong>另一个字符</strong>。</p>\\n\\n<p>返回使&nbsp;<code>t</code>&nbsp;成为&nbsp;<code>s</code>&nbsp;的字母异位词的最小步骤数。</p>\\n\\n<p><strong>字母异位词</strong> 指字母相同，但排列不同（也可能相同）的字符串。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输出：</strong>s = &quot;bab&quot;, t = &quot;aba&quot;\\n<strong>输出：</strong>1\\n<strong>提示：</strong>用 &#39;b&#39; 替换 t 中的第一个 &#39;a&#39;，t = &quot;bba&quot; 是 s 的一个字母异位词。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输出：</strong>s = &quot;leetcode&quot;, t = &quot;practice&quot;\\n<strong>输出：</strong>5\\n<strong>提示：</strong>用合适的字符替换 t 中的 &#39;p&#39;, &#39;r&#39;, &#39;a&#39;, &#39;i&#39; 和 &#39;c&#39;，使 t 变成 s 的字母异位词。\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输出：</strong>s = &quot;anagram&quot;, t = &quot;mangaar&quot;\\n<strong>输出：</strong>0\\n<strong>提示：</strong>&quot;anagram&quot; 和 &quot;mangaar&quot; 本身就是一组字母异位词。 \\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre><strong>输出：</strong>s = &quot;xxyyzz&quot;, t = &quot;xxyyzz&quot;\\n<strong>输出：</strong>0\\n</pre>\\n\\n<p><strong>示例 5：</strong></p>\\n\\n<pre><strong>输出：</strong>s = &quot;friend&quot;, t = &quot;family&quot;\\n<strong>输出：</strong>4\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= s.length &lt;= 50000</code></li>\\n\\t<li><code>s.length == t.length</code></li>\\n\\t<li><code>s</code> 和 <code>t</code>&nbsp;只包含小写英文字母</li>\\n</ul>\\n","title":"1347. 制造字母异位词的最小步骤数","relatedTags":["哈希表","字符串"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1347","slug":"1347-Minimum-Number-of-Steps-to-Make-Two-Strings-Anagram"}')}}]);