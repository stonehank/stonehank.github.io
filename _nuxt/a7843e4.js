(window.webpackJsonp=window.webpackJsonp||[]).push([[589],{1387:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">version1</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">version2</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> compareVersion = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">version1, version2</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> arr1=version1.split(<span class=\\"hljs-string\\">\'.\'</span>),\\n      arr2=version2.split(<span class=\\"hljs-string\\">\'.\'</span>)\\n  <span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>,j=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">while</span>(i&lt;arr1.length || j&lt;arr2.length){\\n    <span class=\\"hljs-keyword\\">if</span>(i===arr1.length){\\n      <span class=\\"hljs-keyword\\">if</span>(+arr2[j++]&gt;<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">-1</span>\\n    }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(j===arr2.length){\\n      <span class=\\"hljs-keyword\\">if</span>(+arr1[i++]&gt;<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">1</span>\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      <span class=\\"hljs-keyword\\">let</span> n1=+arr1[i++], n2=+arr2[j++]\\n      <span class=\\"hljs-keyword\\">if</span>(n1&lt;n2)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">-1</span>\\n      <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(n1&gt;n2)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">1</span>\\n    } \\n  }\\n  <span class=\\"hljs-keyword\\">return</span>  <span class=\\"hljs-number\\">0</span>\\n};\\n</code></pre>\\n"],"querySlug":"compare-version-numbers","created_at":"2019-03-23","timeArr":[2019,2,23,13,20,54,0],"hasThinking":false,"content":"<p>给你两个版本号 <code>version1</code> 和 <code>version2</code> ，请你比较它们。</p>\\n\\n<p>版本号由一个或多个修订号组成，各修订号由一个 <code>\'.\'</code> 连接。每个修订号由 <strong>多位数字</strong> 组成，可能包含 <strong>前导零</strong> 。每个版本号至少包含一个字符。修订号从左到右编号，下标从 0 开始，最左边的修订号下标为 0 ，下一个修订号下标为 1 ，以此类推。例如，<code>2.5.33</code> 和 <code>0.1</code> 都是有效的版本号。</p>\\n\\n<p>比较版本号时，请按从左到右的顺序依次比较它们的修订号。比较修订号时，只需比较 <strong>忽略任何前导零后的整数值</strong> 。也就是说，修订号 <code>1</code> 和修订号 <code>001</code> <strong>相等 </strong>。如果版本号没有指定某个下标处的修订号，则该修订号视为 <code>0</code> 。例如，版本 <code>1.0</code> 小于版本 <code>1.1</code> ，因为它们下标为 <code>0</code> 的修订号相同，而下标为 <code>1</code> 的修订号分别为 <code>0</code> 和 <code>1</code> ，<code>0 < 1</code> 。</p>\\n\\n<p>返回规则如下：</p>\\n\\n<ul>\\n\\t<li>如果 <code><em>version1 </em>> <em>version2</em></code> 返回 <code>1</code>，</li>\\n\\t<li>如果 <code><em>version1 </em>< <em>version2</em></code> 返回 <code>-1</code>，</li>\\n\\t<li>除此之外返回 <code>0</code>。</li>\\n</ul>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>version1 = \\"1.01\\", version2 = \\"1.001\\"\\n<strong>输出：</strong>0\\n<strong>解释：</strong>忽略前导零，\\"01\\" 和 \\"001\\" 都表示相同的整数 \\"1\\"\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>version1 = \\"1.0\\", version2 = \\"1.0.0\\"\\n<strong>输出：</strong>0\\n<strong>解释：</strong>version1 没有指定下标为 2 的修订号，即视为 \\"0\\"\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>version1 = \\"0.1\\", version2 = \\"1.1\\"\\n<strong>输出：</strong>-1\\n<strong>解释：</strong>version1 中下标为 0 的修订号是 \\"0\\"，version2 中下标为 0 的修订号是 \\"1\\" 。0 < 1，所以 version1 < version2\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>version1 = \\"1.0.1\\", version2 = \\"1\\"\\n<strong>输出：</strong>1\\n</pre>\\n\\n<p><strong>示例 5：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>version1 = \\"7.5.2.4\\", version2 = \\"7.5.3\\"\\n<strong>输出：</strong>-1\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= version1.length, version2.length <= 500</code></li>\\n\\t<li><code>version1</code> 和 <code>version2</code> 仅包含数字和 <code>\'.\'</code></li>\\n\\t<li><code>version1</code> 和 <code>version2</code> 都是 <strong>有效版本号</strong></li>\\n\\t<li><code>version1</code> 和 <code>version2</code> 的所有修订号都可以存储在 <strong>32 位整数</strong> 中</li>\\n</ul>\\n","title":"165. 比较版本号","relatedTags":["双指针","字符串"],"difficult":"Middle","lang":["javascript"],"uniqueID":"165","slug":"165-Compare-Version-Numbers"}')}}]);