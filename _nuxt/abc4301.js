(window.webpackJsonp=window.webpackJsonp||[]).push([[1242],{2040:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">nums1</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">m</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">nums2</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">n</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{void}</span> </span>Do not return anything, modify nums1 in-place instead.\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> merge = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">nums1, m, nums2, n</span>) </span>{\\n  <span class=\\"hljs-keyword\\">for</span> (<span class=\\"hljs-keyword\\">let</span> i = m - <span class=\\"hljs-number\\">1</span>; i &gt; <span class=\\"hljs-number\\">-1</span>; i--) {\\n    nums1[i + n] = nums1[i];\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> i=n,j=<span class=\\"hljs-number\\">0</span>,id=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">while</span>(i&lt;m+n || j&lt;n){\\n    <span class=\\"hljs-keyword\\">if</span>(i===m+n) nums1[id]=nums2[j++]\\n    <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(j===n) nums1[id]=nums1[i++]\\n    <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(nums1[i]&lt;nums2[j]) nums1[id]=nums1[i++]\\n    <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(nums1[i]&gt;=nums2[j]) nums1[id]=nums2[j++]\\n    id++\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"merge-sorted-array","created_at":"2021-04-05","timeArr":[2021,3,5,7,27,3,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>归并排序的<code>merge</code>，但是由于需要原地修改，先将<code>nums1</code>的值往后移动直到边界，以避免覆盖；</p>\\n<p>例如：<code>[1,2,3,4,0,0]</code>，移动后变为<code>[1,2,1,2,3,4]</code>，移动后前2位<code>[1,2]</code>，就可以覆盖不影响后续<code>merge</code>。</p>\\n","content":"<p>给你两个按 <strong>非递减顺序</strong> 排列的整数数组&nbsp;<code>nums1</code><em> </em>和 <code>nums2</code>，另有两个整数 <code>m</code> 和 <code>n</code> ，分别表示 <code>nums1</code> 和 <code>nums2</code> 中的元素数目。</p>\\n\\n<p>请你 <strong>合并</strong> <code>nums2</code><em> </em>到 <code>nums1</code> 中，使合并后的数组同样按 <strong>非递减顺序</strong> 排列。</p>\\n\\n<p><strong>注意：</strong>最终，合并后数组不应由函数返回，而是存储在数组 <code>nums1</code> 中。为了应对这种情况，<code>nums1</code> 的初始长度为 <code>m + n</code>，其中前 <code>m</code> 个元素表示应合并的元素，后 <code>n</code> 个元素为 <code>0</code> ，应忽略。<code>nums2</code> 的长度为 <code>n</code> 。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3\\n<strong>输出：</strong>[1,2,2,3,5,6]\\n<strong>解释：</strong>需要合并 [1,2,3] 和 [2,5,6] 。\\n合并结果是 [<em><strong>1</strong></em>,<em><strong>2</strong></em>,2,<em><strong>3</strong></em>,5,6] ，其中斜体加粗标注的为 nums1 中的元素。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums1 = [1], m = 1, nums2 = [], n = 0\\n<strong>输出：</strong>[1]\\n<strong>解释：</strong>需要合并 [1] 和 [] 。\\n合并结果是 [1] 。\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums1 = [0], m = 0, nums2 = [1], n = 1\\n<strong>输出：</strong>[1]\\n<strong>解释：</strong>需要合并的数组是 [] 和 [1] 。\\n合并结果是 [1] 。\\n注意，因为 m = 0 ，所以 nums1 中没有元素。nums1 中仅存的 0 仅仅是为了确保合并结果可以顺利存放到 nums1 中。\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>nums1.length == m + n</code></li>\\n\\t<li><code>nums2.length == n</code></li>\\n\\t<li><code>0 &lt;= m, n &lt;= 200</code></li>\\n\\t<li><code>1 &lt;= m + n &lt;= 200</code></li>\\n\\t<li><code>-10<sup>9</sup> &lt;= nums1[i], nums2[j] &lt;= 10<sup>9</sup></code></li>\\n</ul>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>进阶：</strong>你可以设计实现一个时间复杂度为 <code>O(m + n)</code> 的算法解决此问题吗？</p>\\n","title":"88. 合并两个有序数组","relatedTags":["数组","双指针","排序"],"difficult":"Easy","lang":["javascript"],"uniqueID":"88","slug":"88-Merge-Sorted-Array"}')}}]);