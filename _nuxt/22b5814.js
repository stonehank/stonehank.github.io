(window.webpackJsonp=window.webpackJsonp||[]).push([[1222],{2020:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">A</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> matrixScore = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">A</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> m=A.length,n=A[<span class=\\"hljs-number\\">0</span>].length\\n  <span class=\\"hljs-comment\\">// 首列先全部设置为1</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;m;i++){\\n    <span class=\\"hljs-keyword\\">if</span>(A[i][<span class=\\"hljs-number\\">0</span>]===<span class=\\"hljs-number\\">0</span>)moveRow(i)\\n  }\\n  <span class=\\"hljs-comment\\">// 其余列尽量多的1</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">1</span>;j&lt;n;j++){\\n    <span class=\\"hljs-keyword\\">let</span> one=<span class=\\"hljs-number\\">0</span>,zero=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;m;i++){\\n      <span class=\\"hljs-keyword\\">if</span>(A[i][j]===<span class=\\"hljs-number\\">0</span>)zero++\\n      <span class=\\"hljs-keyword\\">else</span> one++\\n    }\\n    <span class=\\"hljs-keyword\\">if</span>(zero&gt;one){\\n      moveCol(j)\\n    }\\n  }\\n\\n  <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;m;i++){\\n    <span class=\\"hljs-keyword\\">let</span> s=A[i].join(<span class=\\"hljs-string\\">\'\'</span>)\\n    res+=<span class=\\"hljs-built_in\\">parseInt</span>(s,<span class=\\"hljs-number\\">2</span>)\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n  \\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">moveRow</span>(<span class=\\"hljs-params\\">id</span>)</span>{\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;n;i++){\\n      A[id][i]=A[id][i]===<span class=\\"hljs-number\\">0</span>?<span class=\\"hljs-number\\">1</span>:<span class=\\"hljs-number\\">0</span>\\n    }\\n  }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">moveCol</span>(<span class=\\"hljs-params\\">id</span>)</span>{\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;m;i++){\\n      A[i][id]=A[i][id]===<span class=\\"hljs-number\\">0</span>?<span class=\\"hljs-number\\">1</span>:<span class=\\"hljs-number\\">0</span>\\n    }\\n  }\\n};\\n\\n</code></pre>\\n"],"querySlug":"score-after-flipping-matrix","created_at":"2019-04-15","timeArr":[2019,3,15,11,12,6,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>比较直观的思路就是从位数大到小，优先保证能为<code>1</code>，就比如<code>100000</code>永远也比<code>011111</code>大。</p>\\n<p>先对第一列的<code>0</code>全部通过行转换为<code>1</code>，然后对其他列，通过列转换尽可能保证<code>1</code>的数量最多。</p>\\n<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">A</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> matrixScore = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">A</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> m=A.length,n=A[<span class=\\"hljs-number\\">0</span>].length\\n  <span class=\\"hljs-comment\\">// 首列先全部设置为1</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;m;i++){\\n    <span class=\\"hljs-keyword\\">if</span>(A[i][<span class=\\"hljs-number\\">0</span>]===<span class=\\"hljs-number\\">0</span>)moveRow(i)\\n  }\\n  <span class=\\"hljs-comment\\">// 其余列尽量多的1</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">1</span>;j&lt;n;j++){\\n    <span class=\\"hljs-keyword\\">let</span> one=<span class=\\"hljs-number\\">0</span>,zero=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;m;i++){\\n      <span class=\\"hljs-keyword\\">if</span>(A[i][j]===<span class=\\"hljs-number\\">0</span>)zero++\\n      <span class=\\"hljs-keyword\\">else</span> one++\\n    }\\n    <span class=\\"hljs-keyword\\">if</span>(zero&gt;one) moveCol(j)\\n  }\\n\\n  <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;m;i++){\\n    res+=<span class=\\"hljs-built_in\\">parseInt</span>(A[i].join(<span class=\\"hljs-string\\">\'\'</span>),<span class=\\"hljs-number\\">2</span>)\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n \\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">moveRow</span>(<span class=\\"hljs-params\\">id</span>)</span>{\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;n;i++) \\n      A[id][i]=A[id][i]===<span class=\\"hljs-number\\">0</span>?<span class=\\"hljs-number\\">1</span>:<span class=\\"hljs-number\\">0</span>\\n  }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">moveCol</span>(<span class=\\"hljs-params\\">id</span>)</span>{\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;m;i++)\\n      A[i][id]=A[i][id]===<span class=\\"hljs-number\\">0</span>?<span class=\\"hljs-number\\">1</span>:<span class=\\"hljs-number\\">0</span>\\n  }\\n};\\n</code></pre>\\n<p>另一个优化的思路，不需要模拟转换过程，同样对于第一列，我计算出它作为<code>1</code>能提供的值，</p>\\n<p>例如<code>101010</code>，不用管后面的，第一列能提供的值就是<code>100000</code>，也就是<code>Math.pow(2,5)</code>。</p>\\n<p>由于未修改<code>A</code>，那么其他列不能直接检查是<code>1</code>还是<code>0</code>，但我们只要检查它是否等于第一列的数字<code>A[i][j]===A[i][0]</code>，仔细想一想，\\n会发现它跟第一列的数字是相同的，而第一列的数字是<code>1</code>，因此我们可以找出<code>1</code>的数量，后续<code>1</code>能提供的值为<code>Math.pow(2,n-j-1)</code>。</p>\\n","content":"<p>有一个二维矩阵&nbsp;<code>A</code> 其中每个元素的值为&nbsp;<code>0</code>&nbsp;或&nbsp;<code>1</code>&nbsp;。</p>\\n\\n<p>移动是指选择任一行或列，并转换该行或列中的每一个值：将所有 <code>0</code> 都更改为 <code>1</code>，将所有 <code>1</code> 都更改为 <code>0</code>。</p>\\n\\n<p>在做出任意次数的移动后，将该矩阵的每一行都按照二进制数来解释，矩阵的得分就是这些数字的总和。</p>\\n\\n<p>返回尽可能高的分数。</p>\\n\\n<p>&nbsp;</p>\\n\\n<ol>\\n</ol>\\n\\n<p><strong>示例：</strong></p>\\n\\n<pre><strong>输入：</strong>[[0,0,1,1],[1,0,1,0],[1,1,0,0]]\\n<strong>输出：</strong>39\\n<strong>解释：\\n</strong>转换为 [[1,1,1,1],[1,0,0,1],[1,1,1,1]]\\n0b1111 + 0b1001 + 0b1111 = 15 + 9 + 15 = 39</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ol>\\n\\t<li><code>1 &lt;= A.length &lt;= 20</code></li>\\n\\t<li><code>1 &lt;= A[0].length &lt;= 20</code></li>\\n\\t<li><code>A[i][j]</code>&nbsp;是&nbsp;<code>0</code> 或&nbsp;<code>1</code></li>\\n</ol>\\n","title":"861. 翻转矩阵后的得分","relatedTags":["贪心","位运算","数组","矩阵"],"difficult":"Middle","lang":["javascript"],"uniqueID":"861","slug":"861-Score-After-Flipping-Matrix"}')}}]);