(window.webpackJsonp=window.webpackJsonp||[]).push([[244],{1042:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">grid</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">r0</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">c0</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">color</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[][]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> colorBorder = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">grid, r0, c0, color</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> m=grid.length,n=grid[<span class=\\"hljs-number\\">0</span>].length\\n  <span class=\\"hljs-keyword\\">let</span> used=<span class=\\"hljs-built_in\\">Array</span>(m).fill().map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span>=&gt;</span><span class=\\"hljs-built_in\\">Array</span>(n).fill(<span class=\\"hljs-literal\\">false</span>))\\n  <span class=\\"hljs-keyword\\">let</span> moved=[[<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">0</span>],[<span class=\\"hljs-number\\">1</span>,<span class=\\"hljs-number\\">0</span>],[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">-1</span>],[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">1</span>]]\\n  <span class=\\"hljs-keyword\\">let</span> c=grid[r0][c0]\\n  dfs([r0,c0])\\n  <span class=\\"hljs-keyword\\">return</span> grid\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">dfs</span>(<span class=\\"hljs-params\\">[x,y]</span>)</span>{\\n    used[x][y]=<span class=\\"hljs-literal\\">true</span>\\n    <span class=\\"hljs-keyword\\">let</span> isEdge=<span class=\\"hljs-literal\\">false</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> [dx,dy] <span class=\\"hljs-keyword\\">of</span> moved){\\n      <span class=\\"hljs-keyword\\">let</span> nx=x+dx,ny=y+dy\\n      <span class=\\"hljs-keyword\\">if</span>(nx&lt;<span class=\\"hljs-number\\">0</span> || ny&lt;<span class=\\"hljs-number\\">0</span> || nx&gt;=m || ny&gt;=n){\\n        isEdge=<span class=\\"hljs-literal\\">true</span>\\n        <span class=\\"hljs-keyword\\">continue</span>\\n      }\\n      <span class=\\"hljs-keyword\\">if</span>(used[nx][ny])<span class=\\"hljs-keyword\\">continue</span>\\n      <span class=\\"hljs-keyword\\">if</span>(grid[nx][ny]!==c){\\n        isEdge=<span class=\\"hljs-literal\\">true</span>\\n        <span class=\\"hljs-keyword\\">continue</span>\\n      }\\n      dfs([nx,ny])\\n    }\\n    <span class=\\"hljs-keyword\\">if</span>(isEdge)grid[x][y]=color\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"coloring-a-border","created_at":"2019-04-28","timeArr":[2019,3,28,10,55,21,0],"hasThinking":false,"content":"<p>给出一个二维整数网格&nbsp;<code>grid</code>，网格中的每个值表示该位置处的网格块的颜色。</p>\\n\\n<p>只有当两个网格块的颜色相同，而且在四个方向中任意一个方向上相邻时，它们属于同一<strong>连通分量</strong>。</p>\\n\\n<p>连通分量的<strong>边界</strong>是指连通分量中的所有与不在分量中的正方形相邻（四个方向上）的所有正方形，或者在网格的边界上（第一行/列或最后一行/列）的所有正方形。</p>\\n\\n<p>给出位于&nbsp;<code>(r0, c0)</code>&nbsp;的网格块和颜色&nbsp;<code>color</code>，使用指定颜色&nbsp;<code>color</code>&nbsp;为所给网格块的连通分量的边界进行着色，并返回最终的网格&nbsp;<code>grid</code> 。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>grid = [[1,1],[1,2]], r0 = 0, c0 = 0, color = 3\\n<strong>输出：</strong>[[3, 3], [3, 2]]\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>grid = [[1,2,2],[2,3,2]], r0 = 0, c0 = 1, color = 3\\n<strong>输出：</strong>[[1, 3, 3], [2, 3, 3]]\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>grid = [[1,1,1],[1,1,1],[1,1,1]], r0 = 1, c0 = 1, color = 2\\n<strong>输出：</strong>[[2, 2, 2], [2, 1, 2], [2, 2, 2]]</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ol>\\n\\t<li><code>1 &lt;= grid.length &lt;= 50</code></li>\\n\\t<li><code>1 &lt;= grid[0].length &lt;= 50</code></li>\\n\\t<li><code>1 &lt;= grid[i][j] &lt;= 1000</code></li>\\n\\t<li><code>0 &lt;= r0 &lt; grid.length</code></li>\\n\\t<li><code>0 &lt;= c0 &lt; grid[0].length</code></li>\\n\\t<li><code>1 &lt;= color &lt;= 1000</code></li>\\n</ol>\\n\\n<p>&nbsp;</p>\\n","title":"1034. 边框着色","relatedTags":["深度优先搜索","广度优先搜索","数组","矩阵"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1034","slug":"1034-Coloring-A-Border"}')}}]);