(window.webpackJsonp=window.webpackJsonp||[]).push([[491],{1289:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">nums</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">k</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> constrainedSubsetSum = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">nums, k</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> dp=nums.slice()\\n  <span class=\\"hljs-comment\\">// dp[0]=nums[0]</span>\\n  <span class=\\"hljs-keyword\\">let</span> slide=[nums[<span class=\\"hljs-number\\">0</span>]]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">1</span>;i&lt;nums.length;i++){\\n    \\n\\n    <span class=\\"hljs-comment\\">// console.log(slide,nums[i])</span>\\n\\n\\n    <span class=\\"hljs-comment\\">// console.log(slide)</span>\\n    \\n    dp[i]=<span class=\\"hljs-built_in\\">Math</span>.max(dp[i],(slide[<span class=\\"hljs-number\\">0</span>] || <span class=\\"hljs-number\\">0</span>)+nums[i])\\n    <span class=\\"hljs-keyword\\">if</span>(slide.length===k)slide.shift()\\n    <span class=\\"hljs-keyword\\">while</span>(slide.length&gt;<span class=\\"hljs-number\\">0</span> &amp;&amp; slide[slide.length<span class=\\"hljs-number\\">-1</span>]&lt;=dp[i]){\\n      slide.pop()\\n    }\\n    slide.push(dp[i])\\n    \\n\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-built_in\\">Math</span>.max.apply(<span class=\\"hljs-built_in\\">Math</span>,dp)\\n};\\n</code></pre>\\n"],"querySlug":"constrained-subsequence-sum","created_at":"2020-04-26","timeArr":[2020,3,26,16,36,7,0],"hasThinking":false,"content":"<p>给你一个整数数组&nbsp;<code>nums</code>&nbsp;和一个整数&nbsp;<code>k</code>&nbsp;，请你返回 <strong>非空</strong>&nbsp;子序列元素和的最大值，子序列需要满足：子序列中每两个 <strong>相邻</strong>&nbsp;的整数&nbsp;<code>nums[i]</code>&nbsp;和&nbsp;<code>nums[j]</code>&nbsp;，它们在原数组中的下标&nbsp;<code>i</code>&nbsp;和&nbsp;<code>j</code>&nbsp;满足&nbsp;<code>i &lt; j</code>&nbsp;且 <code>j - i &lt;= k</code> 。</p>\\n\\n<p>数组的子序列定义为：将数组中的若干个数字删除（可以删除 0 个数字），剩下的数字按照原本的顺序排布。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>nums = [10,2,-10,5,20], k = 2\\n<strong>输出：</strong>37\\n<strong>解释：</strong>子序列为 [10, 2, 5, 20] 。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>nums = [-1,-2,-3], k = 1\\n<strong>输出：</strong>-1\\n<strong>解释：</strong>子序列必须是非空的，所以我们选择最大的数字。\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>nums = [10,-2,-10,-5,20], k = 2\\n<strong>输出：</strong>23\\n<strong>解释：</strong>子序列为 [10, -2, -5, 20] 。\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= k &lt;= nums.length &lt;= 10^5</code></li>\\n\\t<li><code>-10^4&nbsp;&lt;= nums[i] &lt;= 10^4</code></li>\\n</ul>\\n","title":"1425. 带限制的子序列和","relatedTags":["队列","数组","动态规划","滑动窗口","单调队列","堆（优先队列）"],"difficult":"Hard","lang":["javascript"],"uniqueID":"1425","slug":"1425-Constrained-Subsequence-Sum"}')}}]);