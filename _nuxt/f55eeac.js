(window.webpackJsonp=window.webpackJsonp||[]).push([[468],{1266:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code>\\n<span class=\\"hljs-keyword\\">var</span> UndergroundSystem = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{\\n  <span class=\\"hljs-keyword\\">this</span>.in_check={}\\n  <span class=\\"hljs-keyword\\">this</span>.out_check={}\\n  <span class=\\"hljs-keyword\\">this</span>.station={}\\n  <span class=\\"hljs-keyword\\">this</span>.inStationName=[]\\n};\\n\\n<span class=\\"hljs-comment\\">/** \\n * @param {number} id \\n * @param {string} stationName \\n * @param {number} t\\n * @return {void}\\n */</span>\\nUndergroundSystem.prototype.checkIn = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">id, stationName, t</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-keyword\\">this</span>.in_check[id]==<span class=\\"hljs-literal\\">null</span>){\\n    <span class=\\"hljs-keyword\\">this</span>.in_check[id]={}\\n  }\\n  <span class=\\"hljs-keyword\\">this</span>.in_check[id][stationName]=t\\n  <span class=\\"hljs-keyword\\">this</span>.inStationName[id]=stationName\\n};\\n\\n<span class=\\"hljs-comment\\">/** \\n * @param {number} id \\n * @param {string} stationName \\n * @param {number} t\\n * @return {void}\\n */</span>\\nUndergroundSystem.prototype.checkOut = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">id, stationName, t</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-keyword\\">this</span>.out_check[id]==<span class=\\"hljs-literal\\">null</span>){\\n    <span class=\\"hljs-keyword\\">this</span>.out_check[id]={}\\n  }\\n  <span class=\\"hljs-keyword\\">this</span>.out_check[id][stationName]=t\\n  <span class=\\"hljs-keyword\\">let</span> inName=<span class=\\"hljs-keyword\\">this</span>.inStationName[id]\\n  <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-keyword\\">this</span>.station[inName+<span class=\\"hljs-string\\">\'-\'</span>+stationName]==<span class=\\"hljs-literal\\">null</span>){\\n    <span class=\\"hljs-keyword\\">this</span>.station[inName+<span class=\\"hljs-string\\">\'-\'</span>+stationName]={<span class=\\"hljs-attr\\">in</span>:<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-attr\\">out</span>:<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-attr\\">time</span>:<span class=\\"hljs-number\\">0</span>}\\n  }\\n  <span class=\\"hljs-keyword\\">this</span>.station[inName+<span class=\\"hljs-string\\">\'-\'</span>+stationName].in+=<span class=\\"hljs-keyword\\">this</span>.in_check[id][inName]\\n  <span class=\\"hljs-keyword\\">this</span>.station[inName+<span class=\\"hljs-string\\">\'-\'</span>+stationName].out+=t\\n  <span class=\\"hljs-keyword\\">this</span>.station[inName+<span class=\\"hljs-string\\">\'-\'</span>+stationName].time++\\n};\\n\\n<span class=\\"hljs-comment\\">/** \\n * @param {string} startStation \\n * @param {string} endStation\\n * @return {number}\\n */</span>\\nUndergroundSystem.prototype.getAverageTime = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">startStation, endStation</span>) </span>{\\n  \\n  <span class=\\"hljs-keyword\\">return</span> (<span class=\\"hljs-keyword\\">this</span>.station[startStation+<span class=\\"hljs-string\\">\'-\'</span>+endStation].out-<span class=\\"hljs-keyword\\">this</span>.station[startStation+<span class=\\"hljs-string\\">\'-\'</span>+endStation].in)/<span class=\\"hljs-keyword\\">this</span>.station[startStation+<span class=\\"hljs-string\\">\'-\'</span>+endStation].time\\n};\\n\\n<span class=\\"hljs-comment\\">/**\\n * Your UndergroundSystem object will be instantiated and called as such:\\n * var obj = new UndergroundSystem()\\n * obj.checkIn(id,stationName,t)\\n * obj.checkOut(id,stationName,t)\\n * var param_3 = obj.getAverageTime(startStation,endStation)\\n */</span>\\n</code></pre>\\n"],"querySlug":"design-underground-system","created_at":"2020-03-29","timeArr":[2020,2,29,11,34,15,0],"hasThinking":false,"content":"<p>请你实现一个类&nbsp;<code>UndergroundSystem</code>&nbsp;，它支持以下 3 种方法：</p>\\n\\n<p>1.<code>&nbsp;checkIn(int id, string stationName, int t)</code></p>\\n\\n<ul>\\n\\t<li>编号为&nbsp;<code>id</code>&nbsp;的乘客在 <code>t</code>&nbsp;时刻进入地铁站&nbsp;<code>stationName</code>&nbsp;。</li>\\n\\t<li>一个乘客在同一时间只能在一个地铁站进入或者离开。</li>\\n</ul>\\n\\n<p>2.<code>&nbsp;checkOut(int id, string stationName, int t)</code></p>\\n\\n<ul>\\n\\t<li>编号为&nbsp;<code>id</code>&nbsp;的乘客在 <code>t</code>&nbsp;时刻离开地铁站 <code>stationName</code>&nbsp;。</li>\\n</ul>\\n\\n<p>3.&nbsp;<code>getAverageTime(string startStation, string endStation)</code>&nbsp;</p>\\n\\n<ul>\\n\\t<li>返回从地铁站&nbsp;<code>startStation</code>&nbsp;到地铁站&nbsp;<code>endStation</code>&nbsp;的平均花费时间。</li>\\n\\t<li>平均时间计算的行程包括当前为止所有从&nbsp;<code>startStation</code>&nbsp;<strong>直接到达</strong>&nbsp;<code>endStation</code>&nbsp;的行程。</li>\\n\\t<li>调用&nbsp;<code>getAverageTime</code>&nbsp;时，询问的路线至少包含一趟行程。</li>\\n</ul>\\n\\n<p>你可以假设所有对&nbsp;<code>checkIn</code>&nbsp;和&nbsp;<code>checkOut</code>&nbsp;的调用都是符合逻辑的。也就是说，如果一个顾客在 <strong>t<sub>1</sub></strong>&nbsp;时刻到达某个地铁站，那么他离开的时间&nbsp;<strong>t<sub>2</sub></strong>&nbsp;一定满足&nbsp;<strong>t<sub>2</sub> &gt; t<sub>1</sub></strong>&nbsp;。所有的事件都按时间顺序给出。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例：</strong></p>\\n\\n<pre><strong>输入：</strong>\\n[&quot;UndergroundSystem&quot;,&quot;checkIn&quot;,&quot;checkIn&quot;,&quot;checkIn&quot;,&quot;checkOut&quot;,&quot;checkOut&quot;,&quot;checkOut&quot;,&quot;getAverageTime&quot;,&quot;getAverageTime&quot;,&quot;checkIn&quot;,&quot;getAverageTime&quot;,&quot;checkOut&quot;,&quot;getAverageTime&quot;]\\n[[],[45,&quot;Leyton&quot;,3],[32,&quot;Paradise&quot;,8],[27,&quot;Leyton&quot;,10],[45,&quot;Waterloo&quot;,15],[27,&quot;Waterloo&quot;,20],[32,&quot;Cambridge&quot;,22],[&quot;Paradise&quot;,&quot;Cambridge&quot;],[&quot;Leyton&quot;,&quot;Waterloo&quot;],[10,&quot;Leyton&quot;,24],[&quot;Leyton&quot;,&quot;Waterloo&quot;],[10,&quot;Waterloo&quot;,38],[&quot;Leyton&quot;,&quot;Waterloo&quot;]]\\n\\n<strong>输出：</strong>\\n[null,null,null,null,null,null,null,14.0,11.0,null,11.0,null,12.0]\\n\\n<strong>解释：</strong>\\nUndergroundSystem undergroundSystem = new UndergroundSystem();\\nundergroundSystem.checkIn(45, &quot;Leyton&quot;, 3);\\nundergroundSystem.checkIn(32, &quot;Paradise&quot;, 8);\\nundergroundSystem.checkIn(27, &quot;Leyton&quot;, 10);\\nundergroundSystem.checkOut(45, &quot;Waterloo&quot;, 15);\\nundergroundSystem.checkOut(27, &quot;Waterloo&quot;, 20);\\nundergroundSystem.checkOut(32, &quot;Cambridge&quot;, 22);\\nundergroundSystem.getAverageTime(&quot;Paradise&quot;, &quot;Cambridge&quot;);       // 返回 14.0。从 &quot;Paradise&quot;（时刻 8）到 &quot;Cambridge&quot;(时刻 22)的行程只有一趟\\nundergroundSystem.getAverageTime(&quot;Leyton&quot;, &quot;Waterloo&quot;);          // 返回 11.0。总共有 2 躺从 &quot;Leyton&quot; 到 &quot;Waterloo&quot; 的行程，编号为 id=45 的乘客出发于 time=3 到达于 time=15，编号为 id=27 的乘客于 time=10 出发于 time=20 到达。所以平均时间为 ( (15-3) + (20-10) ) / 2 = 11.0\\nundergroundSystem.checkIn(10, &quot;Leyton&quot;, 24);\\nundergroundSystem.getAverageTime(&quot;Leyton&quot;, &quot;Waterloo&quot;);          // 返回 11.0\\nundergroundSystem.checkOut(10, &quot;Waterloo&quot;, 38);\\nundergroundSystem.getAverageTime(&quot;Leyton&quot;, &quot;Waterloo&quot;);          // 返回 12.0</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li>总共最多有&nbsp;<code>20000</code>&nbsp;次操作。</li>\\n\\t<li><code>1 &lt;= id, t &lt;= 10^6</code></li>\\n\\t<li>所有的字符串包含大写字母，小写字母和数字。</li>\\n\\t<li><code>1 &lt;=&nbsp;stationName.length &lt;= 10</code></li>\\n\\t<li>与标准答案误差在&nbsp;<code>10^-5</code>&nbsp;以内的结果都视为正确结果。</li>\\n</ul>\\n","title":"1396. 设计地铁系统","relatedTags":["设计","哈希表","字符串"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1396","slug":"1396-Design-Underground-System"}')}}]);