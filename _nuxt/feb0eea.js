(window.webpackJsonp=window.webpackJsonp||[]).push([[1034],{1832:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">n</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">m</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> flipLights = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">n, m</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(m===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">1</span>\\n  <span class=\\"hljs-keyword\\">if</span>(n===<span class=\\"hljs-number\\">1</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">2</span>\\n  <span class=\\"hljs-keyword\\">let</span> buttons=<span class=\\"hljs-string\\">\'1234\'</span>\\n  <span class=\\"hljs-keyword\\">if</span>(n&lt;<span class=\\"hljs-number\\">3</span>)buttons=<span class=\\"hljs-string\\">\'123\'</span>\\n  <span class=\\"hljs-keyword\\">if</span>(m&gt;<span class=\\"hljs-number\\">3</span>)m=<span class=\\"hljs-number\\">3</span>;\\n  <span class=\\"hljs-keyword\\">let</span> buttonSwitch={<span class=\\"hljs-string\\">\'11\'</span>:<span class=\\"hljs-string\\">\'\'</span>,<span class=\\"hljs-string\\">\'22\'</span>:<span class=\\"hljs-string\\">\'\'</span>,<span class=\\"hljs-string\\">\'33\'</span>:<span class=\\"hljs-string\\">\'\'</span>,<span class=\\"hljs-string\\">\'44\'</span>:<span class=\\"hljs-string\\">\'\'</span>,<span class=\\"hljs-string\\">\'12\'</span>:<span class=\\"hljs-string\\">\'3\'</span>,<span class=\\"hljs-string\\">\'13\'</span>:<span class=\\"hljs-string\\">\'2\'</span>,<span class=\\"hljs-string\\">\'23\'</span>:<span class=\\"hljs-string\\">\'1\'</span>}\\n  <span class=\\"hljs-keyword\\">let</span> arr=[<span class=\\"hljs-string\\">\'\'</span>]\\n  <span class=\\"hljs-keyword\\">while</span>(m--&gt;<span class=\\"hljs-number\\">0</span>){\\n    <span class=\\"hljs-keyword\\">let</span> len=arr.length\\n    <span class=\\"hljs-keyword\\">let</span> map=<span class=\\"hljs-keyword\\">new</span> <span class=\\"hljs-built_in\\">Map</span>()\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;len;i++){\\n      <span class=\\"hljs-keyword\\">let</span> state=arr.shift()\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;buttons.length;j++){\\n        <span class=\\"hljs-keyword\\">let</span> newS=state+buttons[j]\\n        newS=newS.split(<span class=\\"hljs-string\\">\'\'</span>).sort().join(<span class=\\"hljs-string\\">\'\'</span>)\\n        newS=meltS(newS)\\n        <span class=\\"hljs-keyword\\">if</span>(!map.has(newS)){\\n          map.set(newS,<span class=\\"hljs-literal\\">true</span>)\\n          arr.push(newS)\\n        }\\n      }\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> arr.length\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">meltS</span>(<span class=\\"hljs-params\\">str</span>)</span>{\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> k <span class=\\"hljs-keyword\\">in</span> buttonSwitch){\\n      str=str.replace(k,buttonSwitch[k])\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> str\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"bulb-switcher-ii","created_at":"2019-04-01","timeArr":[2019,3,1,22,36,42,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>灯泡按钮的特点是，如果存在按了2次相同的按钮，就相当于没有按任何按钮。</p>\\n<p>再根据题目的几个按钮规则，假设按钮分别为<code>1,2,3,4</code></p>\\n<p>可以得到以下几个特点：</p>\\n<p>按了<code>1,2</code>，相当于按了按钮<code>3</code>；</p>\\n<p>按了<code>1,3</code>，相当于按了按钮<code>2</code>；</p>\\n<p>按了<code>2,3</code>，相当于按了按钮<code>1</code>；</p>\\n<p>按任何2个相同的按钮，相当于没按。</p>\\n<p>另外，由于上面几个互相抵消，当<code>m&gt;3</code>之后不会有新的状态添加，因此<code>if(m&gt;3)m=3</code>。</p>\\n<p>可以使用<code>bfs</code>，对每一次的状态，添加4个按钮，在执行按以上规则抵消，储存每一轮后的状态(重复的状态不添加)，直到<code>m</code>为0</p>\\n","content":"<p>现有一个房间，墙上挂有&nbsp;<code>n</code>&nbsp;只已经打开的灯泡和 4 个按钮。在进行了&nbsp;<code>m</code>&nbsp;次未知操作后，你需要返回这&nbsp;<code>n</code>&nbsp;只灯泡可能有多少种不同的状态。</p>\\n\\n<p>假设这 <code>n</code> 只灯泡被编号为 [1, 2, 3 ..., n]，这 4 个按钮的功能如下：</p>\\n\\n<ol>\\n\\t<li>将所有灯泡的状态反转（即开变为关，关变为开）</li>\\n\\t<li>将编号为偶数的灯泡的状态反转</li>\\n\\t<li>将编号为奇数的灯泡的状态反转</li>\\n\\t<li>将编号为 <code>3k+1</code> 的灯泡的状态反转（k = 0, 1, 2, ...)</li>\\n</ol>\\n\\n<p><strong>示例 1:</strong></p>\\n\\n<pre><strong>输入:</strong> n = 1, m = 1.\\n<strong>输出:</strong> 2\\n<strong>说明:</strong> 状态为: [开], [关]\\n</pre>\\n\\n<p><strong>示例 2:</strong></p>\\n\\n<pre><strong>输入:</strong> n = 2, m = 1.\\n<strong>输出:</strong> 3\\n<strong>说明:</strong> 状态为: [开, 关], [关, 开], [关, 关]\\n</pre>\\n\\n<p><strong>示例 3:</strong></p>\\n\\n<pre><strong>输入:</strong> n = 3, m = 1.\\n<strong>输出:</strong> 4\\n<strong>说明:</strong> 状态为: [关, 开, 关], [开, 关, 开], [关, 关, 关], [关, 开, 开].\\n</pre>\\n\\n<p><strong>注意：</strong>&nbsp;<code>n</code>&nbsp;和&nbsp;<code>m</code> 都属于 [0, 1000].</p>\\n","title":"672. 灯泡开关 Ⅱ","relatedTags":["位运算","深度优先搜索","广度优先搜索","数学"],"difficult":"Middle","lang":["javascript"],"uniqueID":"672","slug":"672-Bulb-Switcher-II"}')}}]);