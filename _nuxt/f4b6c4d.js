(window.webpackJsonp=window.webpackJsonp||[]).push([[233],{1031:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">clips</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">T</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> videoStitching = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">clips, T</span>) </span>{\\n  clips.sort(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">a,b</span>)=&gt;</span>a[<span class=\\"hljs-number\\">0</span>]===b[<span class=\\"hljs-number\\">0</span>]?b[<span class=\\"hljs-number\\">1</span>]-a[<span class=\\"hljs-number\\">1</span>]:a[<span class=\\"hljs-number\\">0</span>]-b[<span class=\\"hljs-number\\">0</span>])\\n  <span class=\\"hljs-keyword\\">let</span> aux=[clips[<span class=\\"hljs-number\\">0</span>]],minValid=clips[<span class=\\"hljs-number\\">0</span>][<span class=\\"hljs-number\\">0</span>]&lt;=<span class=\\"hljs-number\\">0</span>,maxValid=clips[<span class=\\"hljs-number\\">0</span>][<span class=\\"hljs-number\\">1</span>]&gt;=T\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">1</span>;i&lt;clips.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> prev=aux[aux.length<span class=\\"hljs-number\\">-1</span>]\\n    <span class=\\"hljs-keyword\\">if</span>(prev[<span class=\\"hljs-number\\">1</span>]&gt;=clips[i][<span class=\\"hljs-number\\">1</span>]) <span class=\\"hljs-keyword\\">continue</span>\\n    <span class=\\"hljs-keyword\\">if</span>(clips[i][<span class=\\"hljs-number\\">0</span>]&lt;=<span class=\\"hljs-number\\">0</span>)minValid=<span class=\\"hljs-literal\\">true</span>\\n    <span class=\\"hljs-keyword\\">if</span>(clips[i][<span class=\\"hljs-number\\">1</span>]&gt;=T)maxValid=<span class=\\"hljs-literal\\">true</span>\\n    aux.push(clips[i])\\n  }\\n  <span class=\\"hljs-keyword\\">if</span>(!minValid || !maxValid)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">-1</span>\\n  <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-number\\">-1</span>\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">dfs</span>(<span class=\\"hljs-params\\">curEnd,step</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(res!=<span class=\\"hljs-number\\">-1</span>)<span class=\\"hljs-keyword\\">return</span> \\n    <span class=\\"hljs-keyword\\">if</span>(curEnd&gt;=T)<span class=\\"hljs-keyword\\">return</span> res=step\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=aux.length<span class=\\"hljs-number\\">-1</span>;i&gt;=<span class=\\"hljs-number\\">0</span>;i--){\\n      <span class=\\"hljs-keyword\\">if</span>(aux[i][<span class=\\"hljs-number\\">0</span>]&lt;=curEnd){\\n        dfs(aux[i][<span class=\\"hljs-number\\">1</span>],step+<span class=\\"hljs-number\\">1</span>)\\n      }\\n    }\\n  }\\n  dfs(<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">0</span>)\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"video-stitching","created_at":"2019-04-07","timeArr":[2019,3,7,14,42,6,0],"hasThinking":false,"content":"<p>你将会获得一系列视频片段，这些片段来自于一项持续时长为 <code>T</code> 秒的体育赛事。这些片段可能有所重叠，也可能长度不一。</p>\\n\\n<p>视频片段 <code>clips[i]</code> 都用区间进行表示：开始于 <code>clips[i][0]</code> 并于 <code>clips[i][1]</code> 结束。我们甚至可以对这些片段自由地再剪辑，例如片段 <code>[0, 7]</code> 可以剪切成 <code>[0, 1] + [1, 3] + [3, 7]</code> 三部分。</p>\\n\\n<p>我们需要将这些片段进行再剪辑，并将剪辑后的内容拼接成覆盖整个运动过程的片段（<code>[0, T]</code>）。返回所需片段的最小数目，如果无法完成该任务，则返回 <code>-1</code> 。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>clips = [[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]], T = 10\\n<strong>输出：</strong>3\\n<strong>解释：</strong>\\n我们选中 [0,2], [8,10], [1,9] 这三个片段。\\n然后，按下面的方案重制比赛片段：\\n将 [1,9] 再剪辑为 [1,2] + [2,8] + [8,9] 。\\n现在我们手上有 [0,2] + [2,8] + [8,10]，而这些涵盖了整场比赛 [0, 10]。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>clips = [[0,1],[1,2]], T = 5\\n<strong>输出：</strong>-1\\n<strong>解释：</strong>\\n我们无法只用 [0,1] 和 [1,2] 覆盖 [0,5] 的整个过程。\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>clips = [[0,1],[6,8],[0,2],[5,6],[0,4],[0,3],[6,7],[1,3],[4,7],[1,4],[2,5],[2,6],[3,4],[4,5],[5,7],[6,9]], T = 9\\n<strong>输出：</strong>3\\n<strong>解释： </strong>\\n我们选取片段 [0,4], [4,7] 和 [6,9] 。\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>clips = [[0,4],[2,8]], T = 5\\n<strong>输出：</strong>2\\n<strong>解释：</strong>\\n注意，你可能录制超过比赛结束时间的视频。\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= clips.length <= 100</code></li>\\n\\t<li><code>0 <= clips[i][0] <= clips[i][1] <= 100</code></li>\\n\\t<li><code>0 <= T <= 100</code></li>\\n</ul>\\n","title":"1024. 视频拼接","relatedTags":["贪心","数组","动态规划"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1024","slug":"1024-Video-Stitching"}')}}]);