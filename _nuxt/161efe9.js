(window.webpackJsonp=window.webpackJsonp||[]).push([[1012],{1810:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string[]}</span> <span class=\\"hljs-variable\\">dict</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">sentence</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{string}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> replaceWords = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">dict, sentence</span>) </span>{\\n  <span class=\\"hljs-comment\\">// let hash=new Map()</span>\\n  <span class=\\"hljs-comment\\">// for(let i=0;i&lt;dict.length;i++){</span>\\n  <span class=\\"hljs-comment\\">//   hash.set(dict[i],true)</span>\\n  <span class=\\"hljs-comment\\">// }</span>\\n  <span class=\\"hljs-comment\\">// let res=\'\'</span>\\n  dict.sort(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">a,b</span>)=&gt;</span>a.length-b.length)\\n  <span class=\\"hljs-keyword\\">let</span> arr=sentence.split(<span class=\\"hljs-string\\">\' \'</span>)\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;arr.length;i++){\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;dict.length;j++){\\n      <span class=\\"hljs-keyword\\">if</span>(arr[i].startsWith(dict[j]))arr[i]=dict[j]\\n    }\\n    <span class=\\"hljs-comment\\">// for(let j=0;j&lt;arr[i].length;j++){</span>\\n    <span class=\\"hljs-comment\\">//   str+=arr[i][j]</span>\\n    <span class=\\"hljs-comment\\">//   if(hash.has(str))break</span>\\n    <span class=\\"hljs-comment\\">// }</span>\\n    <span class=\\"hljs-comment\\">// res+=str+\' \'</span>\\n  }\\n  <span class=\\"hljs-comment\\">// return res.substring(0,res.length-1)</span>\\n  <span class=\\"hljs-keyword\\">return</span> arr.join(<span class=\\"hljs-string\\">\' \'</span>)\\n};\\n</code></pre>\\n"],"querySlug":"replace-words","created_at":"2019-04-06","timeArr":[2019,3,6,13,52,5,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>解法一：对<code>dict</code>构建<code>Tire</code>树，对<code>sentence</code>内每个单词的每个字母，检测是否存在于<code>tire</code>中，如果不存在或者存在一个完整的<code>dict[i]</code>，就可以<code>break</code>。</p>\\n<p>解法二：对<code>dict</code>排序(从短到长)，对<code>sentence</code>内每个单词检查，从<code>dict</code>头到尾检查<code>startsWith</code>，存在则<code>break</code>。</p>\\n","content":"<p>在英语中，我们有一个叫做&nbsp;<code>词根</code>(root)的概念，它可以跟着其他一些词组成另一个较长的单词&mdash;&mdash;我们称这个词为&nbsp;<code>继承词</code>(successor)。例如，词根<code>an</code>，跟随着单词&nbsp;<code>other</code>(其他)，可以形成新的单词&nbsp;<code>another</code>(另一个)。</p>\\n\\n<p>现在，给定一个由许多词根组成的词典和一个句子。你需要将句子中的所有<code>继承词</code>用<code>词根</code>替换掉。如果<code>继承词</code>有许多可以形成它的<code>词根</code>，则用最短的词根替换它。</p>\\n\\n<p>你需要输出替换之后的句子。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>dictionary = [&quot;cat&quot;,&quot;bat&quot;,&quot;rat&quot;], sentence = &quot;the cattle was rattled by the battery&quot;\\n<strong>输出：</strong>&quot;the cat was rat by the bat&quot;\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>dictionary = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;], sentence = &quot;aadsfasf absbs bbab cadsfafs&quot;\\n<strong>输出：</strong>&quot;a a b c&quot;\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>dictionary = [&quot;a&quot;, &quot;aa&quot;, &quot;aaa&quot;, &quot;aaaa&quot;], sentence = &quot;a aa a aaaa aaa aaa aaa aaaaaa bbb baba ababa&quot;\\n<strong>输出：</strong>&quot;a a a a a a a a bbb baba a&quot;\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre><strong>输入：</strong>dictionary = [&quot;catt&quot;,&quot;cat&quot;,&quot;bat&quot;,&quot;rat&quot;], sentence = &quot;the cattle was rattled by the battery&quot;\\n<strong>输出：</strong>&quot;the cat was rat by the bat&quot;\\n</pre>\\n\\n<p><strong>示例 5：</strong></p>\\n\\n<pre><strong>输入：</strong>dictionary = [&quot;ac&quot;,&quot;ab&quot;], sentence = &quot;it is abnormal that this solution is accepted&quot;\\n<strong>输出：</strong>&quot;it is ab that this solution is ac&quot;\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= dictionary.length&nbsp;&lt;= 1000</code></li>\\n\\t<li><code>1 &lt;= dictionary[i].length &lt;= 100</code></li>\\n\\t<li><code>dictionary[i]</code>&nbsp;仅由小写字母组成。</li>\\n\\t<li><code>1 &lt;= sentence.length &lt;= 10^6</code></li>\\n\\t<li><code>sentence</code>&nbsp;仅由小写字母和空格组成。</li>\\n\\t<li><code>sentence</code> 中单词的总量在范围 <code>[1, 1000]</code> 内。</li>\\n\\t<li><code>sentence</code> 中每个单词的长度在范围 <code>[1, 1000]</code> 内。</li>\\n\\t<li><code>sentence</code> 中单词之间由一个空格隔开。</li>\\n\\t<li><code>sentence</code>&nbsp;没有前导或尾随空格。</li>\\n</ul>\\n","title":"648. 单词替换","relatedTags":["字典树","数组","哈希表","字符串"],"difficult":"Middle","lang":["javascript"],"uniqueID":"648","slug":"648-Replace-Words"}')}}]);