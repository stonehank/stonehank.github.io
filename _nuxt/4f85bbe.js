(window.webpackJsonp=window.webpackJsonp||[]).push([[1152],{1950:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">A</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> bestRotation = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">A</span>) </span>{\\n  <span class=\\"hljs-keyword\\">const</span> n = A.length;\\n  <span class=\\"hljs-keyword\\">if</span> (n === <span class=\\"hljs-number\\">0</span>) {\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>;\\n  }\\n  \\n  <span class=\\"hljs-keyword\\">const</span> bad = <span class=\\"hljs-built_in\\">Array</span>(n).fill(<span class=\\"hljs-number\\">0</span>);\\n  \\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i = <span class=\\"hljs-number\\">0</span>; i &lt; n; i++) {\\n    <span class=\\"hljs-keyword\\">const</span> left = (i - A[i] + n + <span class=\\"hljs-number\\">1</span>) % n;\\n    <span class=\\"hljs-keyword\\">const</span> right = (i + <span class=\\"hljs-number\\">1</span>) % n;\\n    bad[left]--;\\n    bad[right]++;\\n    <span class=\\"hljs-keyword\\">if</span> (left &gt; right) {\\n      bad[<span class=\\"hljs-number\\">0</span>]--;\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> best = -n;\\n  <span class=\\"hljs-keyword\\">let</span> ans = <span class=\\"hljs-number\\">0</span>, cur = <span class=\\"hljs-number\\">0</span>;\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i = <span class=\\"hljs-number\\">0</span>; i &lt; n; i++) {\\n    cur += bad[i]\\n    <span class=\\"hljs-keyword\\">if</span> (cur &gt; best) {\\n      best = cur;\\n      ans = i;\\n    }\\n  }\\n  \\n  <span class=\\"hljs-keyword\\">return</span> ans;\\n};\\n</code></pre>\\n"],"querySlug":"smallest-rotation-with-highest-score","created_at":"2019-04-29","timeArr":[2019,3,29,13,33,53,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>对于某一个<code>i</code>和<code>A[i]</code>，它能提供的分数的<code>K</code>的范围一定一个连续区间(可能是首尾相连)；</p>\\n<p>例如：<code>N=5</code>，<code>i=0</code>，<code>A[i]=2</code></p>\\n<p>当<code>K</code>为<code>0</code>，<code>i</code>为0，<code>i-A[i]===-2</code>，不符合；</p>\\n<p>当<code>K</code>为<code>1</code>，<code>i</code>为4，<code>i-A[i]===2</code>，符合；</p>\\n<p>当<code>K</code>为<code>2</code>，<code>i</code>为3，<code>i-A[i]===1</code>，符合；</p>\\n<p>当<code>K</code>为<code>3</code>，<code>i</code>为2，<code>i-A[i]===0</code>，符合；</p>\\n<p>当<code>K</code>为<code>4</code>，<code>i</code>为1，<code>i-A[i]===-1</code>，不符合；</p>\\n<p><code>K</code>在<code>[1,3]</code>这一段连续区间是能提供分数的，对于以上数据，可以通过：</p>\\n<p><code>left=(i - A[i] + n + 1) % n</code></p>\\n<p><code>right = (i + 1) % n</code></p>\\n<p>计算出<code>left</code>为<code>4</code>，<code>right</code>为<code>1</code>，也就是说，从<code>K===4</code>开始一直到<code>K===1</code>之前都是不计分的。</p>\\n<p>对于这个结果，使用一个数组<code>bad</code>专门记录这个区间，可以这么表示<code>bad[4]--</code>，<code>bad[0]--</code>，如果这么表示，那么时间复杂度又回到<code>O(N^2)</code>。</p>\\n<p>因此使用一个非常精妙的连续区间表示方法：<code>bad[left]++</code>，<code>bad[right]--</code>并且如果<code>left&gt;right</code>，说明首尾相连，需要<code>bad[0]--</code>；</p>\\n<p>当我们后续计算的时候，通过<code>bad</code>的前缀和计算，</p>\\n<p>例如现在：<code>bad=[-1,1,0,0,-1]</code>，它的前缀和数组为<code>sum=[-1,0,0,0,-1]</code>，可以很清楚地看到，除了<code>0</code>和<code>4</code>的位置，其他都是能得分的位置。</p>\\n","content":"<p>给定一个数组&nbsp;<code>A</code>，我们可以将它按一个非负整数 <code>K</code>&nbsp;进行轮调，这样可以使数组变为&nbsp;<code>A[K], A[K+1], A{K+2], ... A[A.length - 1], A[0], A[1], ..., A[K-1]</code>&nbsp;的形式。此后，任何值小于或等于其索引的项都可以记作一分。</p>\\n\\n<p>例如，如果数组为&nbsp;<code>[2, 4, 1, 3, 0]</code>，我们按&nbsp;<code>K = 2</code>&nbsp;进行轮调后，它将变成&nbsp;<code>[1, 3, 0, 2, 4]</code>。这将记作 3 分，因为 1 &gt; 0 [no points], 3 &gt; 1 [no points], 0 &lt;= 2 [one point], 2 &lt;= 3 [one point], 4 &lt;= 4 [one point]。</p>\\n\\n<p>在所有可能的轮调中，返回我们所能得到的最高分数对应的轮调索引 K。如果有多个答案，返回满足条件的最小的索引 K。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>[2, 3, 1, 4, 0]\\n<strong>输出：</strong>3\\n<strong>解释：</strong>\\n下面列出了每个 K 的得分：\\nK = 0,  A = [2,3,1,4,0],    score 2\\nK = 1,  A = [3,1,4,0,2],    score 3\\nK = 2,  A = [1,4,0,2,3],    score 3\\nK = 3,  A = [4,0,2,3,1],    score 4\\nK = 4,  A = [0,2,3,1,4],    score 3\\n所以我们应当选择&nbsp;K = 3，得分最高。</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>[1, 3, 0, 2, 4]\\n<strong>输出：</strong>0\\n<strong>解释：</strong>\\nA 无论怎么变化总是有 3 分。\\n所以我们将选择最小的 K，即 0。\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>A</code>&nbsp;的长度最大为&nbsp;<code>20000</code>。</li>\\n\\t<li><code>A[i]</code> 的取值范围是&nbsp;<code>[0, A.length]</code>。</li>\\n</ul>\\n","title":"798. 得分最高的最小轮调","relatedTags":["数组","前缀和"],"difficult":"Hard","lang":["javascript"],"uniqueID":"798","slug":"798-Smallest-Rotation-with-Highest-Score"}')}}]);