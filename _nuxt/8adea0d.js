(window.webpackJsonp=window.webpackJsonp||[]).push([[1098],{1896:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Solution</span><span class=\\"hljs-params\\">(object)</span>:</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">searchMatrix</span><span class=\\"hljs-params\\">(self, matrix, target)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type matrix: List[List[int]]\\n        :type target: int\\n        :rtype: bool\\n        \\"\\"\\"</span>\\n        <span class=\\"hljs-keyword\\">if</span> <span class=\\"hljs-keyword\\">not</span> matrix <span class=\\"hljs-keyword\\">or</span> <span class=\\"hljs-keyword\\">not</span> matrix[<span class=\\"hljs-number\\">-1</span>] <span class=\\"hljs-keyword\\">or</span> matrix[<span class=\\"hljs-number\\">-1</span>][<span class=\\"hljs-number\\">-1</span>]&lt;target: <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">False</span>\\n        m,n=len(matrix),len(matrix[<span class=\\"hljs-number\\">0</span>])\\n        <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">bsR</span><span class=\\"hljs-params\\">(arr,targ)</span>:</span>\\n            lo,hi=<span class=\\"hljs-number\\">0</span>,m*n<span class=\\"hljs-number\\">-1</span>\\n            <span class=\\"hljs-keyword\\">while</span> lo&lt;hi:\\n                mid=(lo+hi) // <span class=\\"hljs-number\\">2</span>\\n                <span class=\\"hljs-comment\\"># print mid,lo,hi,m,n</span>\\n                <span class=\\"hljs-keyword\\">if</span> arr[mid // n][mid % n]&lt;targ:\\n                    lo=mid+<span class=\\"hljs-number\\">1</span>\\n                <span class=\\"hljs-keyword\\">else</span>:\\n                    hi=mid\\n            <span class=\\"hljs-keyword\\">return</span> hi\\n\\n        tarIdx=bsR(matrix,target)\\n        <span class=\\"hljs-keyword\\">if</span> matrix[tarIdx // n][tarIdx % n]==target:\\n            <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">True</span>\\n        <span class=\\"hljs-keyword\\">else</span>:\\n            <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">False</span>\\n        \\n</code></pre>\\n"],"querySlug":"search-a-2d-matrix","created_at":"2019-02-23","timeArr":[2019,1,23,14,43,23,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>方法一：<code>O(m+n)</code>，<code>m</code>为行高，<code>n</code>为列宽。</p>\\n<p>根据矩阵性质，从第一行开始，检查每一行的最后一列，如果存在<code>matrix[i][n-1]&gt;=target</code>，说明<code>target</code>只有可能在当前行，再遍历检查当前行。</p>\\n<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">matrix</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">target</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{boolean}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> searchMatrix = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">matrix, target</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(matrix.length===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n  <span class=\\"hljs-keyword\\">let</span> m=matrix.length,n=matrix[<span class=\\"hljs-number\\">0</span>].length\\n  <span class=\\"hljs-keyword\\">let</span> searchRow=<span class=\\"hljs-literal\\">null</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;m;i++){\\n    <span class=\\"hljs-keyword\\">if</span>(matrix[i][n<span class=\\"hljs-number\\">-1</span>]&gt;=target){\\n      searchRow=i\\n      <span class=\\"hljs-keyword\\">break</span>\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">if</span>(searchRow==<span class=\\"hljs-literal\\">null</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;n;i++){\\n    <span class=\\"hljs-keyword\\">if</span>(matrix[searchRow][i]===target)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n};\\n</code></pre>\\n<p>方法二：<code>O(log(m*n))</code></p>\\n<p>思路是将二维矩阵转化为<strong>一维数组</strong>(当然不需要真的转换，只需索引在一维和二维互相转换)，通过索引进行二分搜索。</p>\\n","content":"<p>编写一个高效的算法来判断 <code>m x n</code> 矩阵中，是否存在一个目标值。该矩阵具有如下特性：</p>\\n\\n<ul>\\n\\t<li>每行中的整数从左到右按升序排列。</li>\\n\\t<li>每行的第一个整数大于前一行的最后一个整数。</li>\\n</ul>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2020/10/05/mat.jpg\\" style=\\"width: 322px; height: 242px;\\" />\\n<pre>\\n<strong>输入：</strong>matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3\\n<strong>输出：</strong>true\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/11/25/mat2.jpg\\" style=\\"width: 322px; height: 242px;\\" />\\n<pre>\\n<strong>输入：</strong>matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13\\n<strong>输出：</strong>false\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>m == matrix.length</code></li>\\n\\t<li><code>n == matrix[i].length</code></li>\\n\\t<li><code>1 <= m, n <= 100</code></li>\\n\\t<li><code>-10<sup>4</sup> <= matrix[i][j], target <= 10<sup>4</sup></code></li>\\n</ul>\\n","title":"74. 搜索二维矩阵","relatedTags":["数组","二分查找","矩阵"],"difficult":"Middle","lang":["python"],"uniqueID":"74","slug":"74-Search-a-2D-Matrix"}')}}]);