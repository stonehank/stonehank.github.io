(window.webpackJsonp=window.webpackJsonp||[]).push([[1345],{2143:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">S</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">T</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{boolean}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> isRationalEqual = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">S, T</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> sArr=S.split(<span class=\\"hljs-string\\">\'.\'</span>),tArr=T.split(<span class=\\"hljs-string\\">\'.\'</span>)\\n  <span class=\\"hljs-comment\\">// find int</span>\\n  <span class=\\"hljs-keyword\\">let</span> intS=sArr[<span class=\\"hljs-number\\">0</span>] || <span class=\\"hljs-number\\">0</span>,\\n      intT=tArr[<span class=\\"hljs-number\\">0</span>] || <span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-comment\\">// find decimal and parentheses</span>\\n  <span class=\\"hljs-keyword\\">let</span> [decS,parS]=findDec_Par(sArr[<span class=\\"hljs-number\\">1</span>]),\\n      [decT,parT]=findDec_Par(tArr[<span class=\\"hljs-number\\">1</span>])\\n  \\n  <span class=\\"hljs-keyword\\">let</span> idS=<span class=\\"hljs-number\\">0</span>,idT=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">if</span>(parS!==<span class=\\"hljs-string\\">\'\'</span> &amp;&amp; parS===<span class=\\"hljs-string\\">\'9\'</span>.repeat(parS.length)){\\n    <span class=\\"hljs-keyword\\">let</span> [dInt,dDec]=stringAddOne(decS)\\n    decS=dDec\\n    intS=+intS+dInt+<span class=\\"hljs-string\\">\'\'</span>\\n    parS=<span class=\\"hljs-string\\">\'\'</span>\\n  }\\n  <span class=\\"hljs-keyword\\">if</span>(parT!==<span class=\\"hljs-string\\">\'\'</span> &amp;&amp; parT===<span class=\\"hljs-string\\">\'9\'</span>.repeat(parT.length)){\\n    <span class=\\"hljs-keyword\\">let</span> [dInt,dDec]=stringAddOne(decT)\\n    decT=dDec\\n    intT=+intT+dInt+<span class=\\"hljs-string\\">\'\'</span>\\n    parT=<span class=\\"hljs-string\\">\'\'</span>\\n  }\\n  <span class=\\"hljs-keyword\\">if</span>(intT!==intS)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n\\n  <span class=\\"hljs-comment\\">// if(parS===\\"0\\".repeat(parS.length))parS=\'\'</span>\\n  <span class=\\"hljs-comment\\">// if(parT===\\"0\\".repeat(parT.length))parT=\'\'</span>\\n  \\n  <span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>,j=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">while</span>(i&lt;decS.length || j&lt;decT.length){\\n    <span class=\\"hljs-keyword\\">if</span>(i===decS.length){\\n      <span class=\\"hljs-keyword\\">if</span>(decT[j]!==parS[idS++] &amp;&amp; (decT[j]!==<span class=\\"hljs-string\\">\\"0\\"</span> || parS!==<span class=\\"hljs-string\\">\'\'</span>)) <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n      j++\\n      idS %= parS.length\\n    }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(j===decT.length){\\n      <span class=\\"hljs-keyword\\">if</span>(decS[i]!==parT[idT++] &amp;&amp; (decS[i]!==<span class=\\"hljs-string\\">\\"0\\"</span> || parT!==<span class=\\"hljs-string\\">\'\'</span>)) <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n      i++\\n      idT %= parT.length\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      <span class=\\"hljs-keyword\\">if</span>(decS[i++]!==decT[j++])<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> hash={}\\n  <span class=\\"hljs-keyword\\">while</span>(<span class=\\"hljs-literal\\">true</span>){\\n    hash[idS+<span class=\\"hljs-string\\">\'-\'</span>+idT]=<span class=\\"hljs-literal\\">true</span>\\n    <span class=\\"hljs-keyword\\">if</span>(parS[idS++]!==parT[idT++]){\\n      <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      idS %= parS.length\\n      idT %= parT.length\\n      <span class=\\"hljs-keyword\\">if</span>(hash[idS+<span class=\\"hljs-string\\">\'-\'</span>+idT])<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n    }\\n  }\\n  \\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">stringAddOne</span>(<span class=\\"hljs-params\\">s</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> carry=<span class=\\"hljs-number\\">1</span>,dec=<span class=\\"hljs-string\\">\'\'</span>,int=<span class=\\"hljs-string\\">\'\'</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=s.length<span class=\\"hljs-number\\">-1</span>;i&gt;=<span class=\\"hljs-number\\">0</span>;i--){\\n      <span class=\\"hljs-keyword\\">let</span> n=+s[i]+carry\\n      carry=<span class=\\"hljs-built_in\\">Math</span>.floor(n/<span class=\\"hljs-number\\">10</span>)\\n      n %=<span class=\\"hljs-number\\">10</span>\\n      dec=n+dec\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> [carry,dec]\\n  }\\n  \\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">findDec_Par</span>(<span class=\\"hljs-params\\">str</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(!str)<span class=\\"hljs-keyword\\">return</span> [<span class=\\"hljs-string\\">\'\'</span>,<span class=\\"hljs-string\\">\'\'</span>]\\n    <span class=\\"hljs-keyword\\">let</span> dec=<span class=\\"hljs-string\\">\'\'</span>,par=<span class=\\"hljs-string\\">\'\'</span>,checkPar=<span class=\\"hljs-literal\\">false</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;str.length;i++){\\n      <span class=\\"hljs-keyword\\">let</span> cur=str[i]\\n      <span class=\\"hljs-keyword\\">if</span>(cur===<span class=\\"hljs-string\\">\\"(\\"</span>){\\n        checkPar=<span class=\\"hljs-literal\\">true</span>\\n        <span class=\\"hljs-keyword\\">continue</span>\\n      }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(cur===<span class=\\"hljs-string\\">\\")\\"</span>){\\n        <span class=\\"hljs-keyword\\">break</span>\\n      }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(checkPar){\\n        par+=cur\\n      }<span class=\\"hljs-keyword\\">else</span>{\\n        dec+=cur\\n      }\\n    }    \\n    <span class=\\"hljs-keyword\\">return</span> [dec,par]\\n  }\\n};\\n<span class=\\"hljs-comment\\">// 找出括号内的，索引循环</span>\\n<span class=\\"hljs-comment\\">// 找出整数位</span>\\n<span class=\\"hljs-comment\\">// 找出小数位</span>\\n\\n<span class=\\"hljs-comment\\">// 如果小数位和重复位都是9 等于1</span>\\n</code></pre>\\n"],"querySlug":"equal-rational-numbers","created_at":"2019-04-04","timeArr":[2019,3,4,12,12,37,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<ul>\\n<li>\\n<p>找出整数，小数，循环数</p>\\n</li>\\n<li>\\n<p>如果循环数全部为<code>9</code>，小数<code>+1</code>，如果小数<code>+1</code>之后长度变长了，那么整数<code>+1</code></p>\\n<p>例如：</p>\\n<p>小数<code>019</code>，<code>+1</code>后就是<code>020</code>，长度不变。</p>\\n<p>小数<code>999</code>，<code>+1</code>后就是<code>1000</code>，长度变长了，整数<code>+1</code></p>\\n</li>\\n<li>\\n<p>如果循环数全部为<code>0</code>，可以视为<code>\'\'</code></p>\\n</li>\\n<li>\\n<p>对比小数，如果其中一边不存在小数，使用循环数代替，用索引<code>id%=s.length</code>不断循环遍历这个循环数</p>\\n</li>\\n<li>\\n<p>小数对比结束后，索引循环对比两边的循环数，用hash保存两边的索引，如果发现重复，则返回true。</p>\\n</li>\\n</ul>\\n","content":"<p>给定两个字符串 <code>S</code> 和 <code>T</code>，每个字符串代表一个非负有理数，只有当它们表示相同的数字时才返回 <strong>true</strong>；否则，返回 <strong>false</strong>。字符串中可以使用括号来表示有理数的重复部分。</p>\\n\\n<p>通常，有理数最多可以用三个部分来表示：<em>整数部分</em>&nbsp;<code>&lt;IntegerPart&gt;</code>、<em>小数非重复部分</em>&nbsp;<code>&lt;NonRepeatingPart&gt;</code>&nbsp;和<em>小数重复部分</em>&nbsp;<code>&lt;(&gt;&lt;RepeatingPart&gt;&lt;)&gt;</code>。数字可以用以下三种方法之一来表示：</p>\\n\\n<ul>\\n\\t<li><code>&lt;IntegerPart&gt;</code>（例：0，12，123）</li>\\n\\t<li><code>&lt;IntegerPart&gt;&lt;.&gt;&lt;NonRepeatingPart&gt;</code> （例：0.5，2.12，2.0001）</li>\\n\\t<li><code>&lt;IntegerPart&gt;&lt;.&gt;&lt;NonRepeatingPart&gt;&lt;(&gt;&lt;RepeatingPart&gt;&lt;)&gt;</code>（例：0.1(6)，0.9(9)，0.00(1212)）</li>\\n</ul>\\n\\n<p>十进制展开的重复部分通常在一对圆括号内表示。例如：</p>\\n\\n<p>1 / 6 = 0.16666666... = 0.1(6) = 0.1666(6) = 0.166(66)</p>\\n\\n<p>0.1(6) 或&nbsp;0.1666(6) 或&nbsp;0.166(66) 都是&nbsp;1 / 6 的正确表示形式。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>S = &quot;0.(52)&quot;, T = &quot;0.5(25)&quot;\\n<strong>输出：</strong>true\\n<strong>解释：</strong>因为 &quot;0.(52)&quot; 代表 0.52525252...，而 &quot;0.5(25)&quot; 代表 0.52525252525.....，则这两个字符串表示相同的数字。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>S = &quot;0.1666(6)&quot;, T = &quot;0.166(66)&quot;\\n<strong>输出：</strong>true\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>S = &quot;0.9(9)&quot;, T = &quot;1.&quot;\\n<strong>输出：</strong>true\\n<strong>解释：\\n</strong>&quot;0.9(9)&quot; 代表 0.999999999... 永远重复，等于 1 。[<a href=\\"https://baike.baidu.com/item/0.999…/5615429?fr=aladdin\\" target=\\"_blank\\">有关说明，请参阅此链接</a>]\\n&quot;1.&quot; 表示数字 1，其格式正确：(IntegerPart) = &quot;1&quot; 且 (NonRepeatingPart) = &quot;&quot; 。</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ol>\\n\\t<li>每个部分仅由数字组成。</li>\\n\\t<li>整数部分&nbsp;<code>&lt;IntegerPart&gt;</code>&nbsp;不会以 2 个或更多的零开头。（对每个部分的数字没有其他限制）。</li>\\n\\t<li><code>1 &lt;= &lt;IntegerPart&gt;.length &lt;= 4 </code></li>\\n\\t<li><code>0 &lt;= &lt;NonRepeatingPart&gt;.length &lt;= 4 </code></li>\\n\\t<li><code>1 &lt;= &lt;RepeatingPart&gt;.length &lt;= 4 </code></li>\\n</ol>\\n","title":"972. 相等的有理数","relatedTags":["数学","字符串"],"difficult":"Hard","lang":["javascript"],"uniqueID":"972","slug":"972-Equal-Rational-Numbers"}')}}]);