(window.webpackJsonp=window.webpackJsonp||[]).push([[1330],{2128:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string[]}</span> <span class=\\"hljs-variable\\">grid</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> regionsBySlashes = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">grid</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> row=grid.length*<span class=\\"hljs-number\\">3</span>,col=grid[<span class=\\"hljs-number\\">0</span>].length*<span class=\\"hljs-number\\">3</span>\\n  <span class=\\"hljs-keyword\\">let</span> newGrid=<span class=\\"hljs-built_in\\">Array</span>(row).fill().map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">n</span>=&gt;</span><span class=\\"hljs-built_in\\">Array</span>(col).fill(<span class=\\"hljs-string\\">\'.\'</span>))\\n  <span class=\\"hljs-keyword\\">let</span> visited=<span class=\\"hljs-built_in\\">Array</span>(row).fill().map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">n</span>=&gt;</span><span class=\\"hljs-built_in\\">Array</span>(col).fill(<span class=\\"hljs-literal\\">false</span>))\\n  <span class=\\"hljs-keyword\\">let</span> moves=[[<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">0</span>],[<span class=\\"hljs-number\\">1</span>,<span class=\\"hljs-number\\">0</span>],[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">-1</span>],[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">1</span>]]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;grid.length;i++){\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;grid[i].length;j++){\\n      <span class=\\"hljs-keyword\\">if</span>(grid[i][j]==<span class=\\"hljs-string\\">\\" \\"</span>)<span class=\\"hljs-keyword\\">continue</span>\\n      <span class=\\"hljs-keyword\\">let</span> r_s=i*<span class=\\"hljs-number\\">3</span>,r_e=r_s+<span class=\\"hljs-number\\">2</span>,\\n          c_s=j*<span class=\\"hljs-number\\">3</span>,c_e=c_s+<span class=\\"hljs-number\\">2</span>\\n      <span class=\\"hljs-keyword\\">if</span>(grid[i][j]===<span class=\\"hljs-string\\">\\"/\\"</span>){\\n        newGrid[r_s][c_e]=<span class=\\"hljs-string\\">\'#\'</span>\\n        newGrid[r_s+<span class=\\"hljs-number\\">1</span>][c_e<span class=\\"hljs-number\\">-1</span>]=<span class=\\"hljs-string\\">\'#\'</span>\\n        newGrid[r_e][c_s]=<span class=\\"hljs-string\\">\'#\'</span>\\n      }<span class=\\"hljs-keyword\\">else</span>{\\n        newGrid[r_s][c_s]=<span class=\\"hljs-string\\">\'#\'</span>\\n        newGrid[r_s+<span class=\\"hljs-number\\">1</span>][c_s+<span class=\\"hljs-number\\">1</span>]=<span class=\\"hljs-string\\">\'#\'</span>\\n        newGrid[r_e][c_e]=<span class=\\"hljs-string\\">\'#\'</span>        \\n      }\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> result=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;row;i++){\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;col;j++){\\n      <span class=\\"hljs-keyword\\">if</span>(newGrid[i][j]===<span class=\\"hljs-string\\">\\"#\\"</span>)<span class=\\"hljs-keyword\\">continue</span>\\n      <span class=\\"hljs-keyword\\">if</span>(visited[i][j])<span class=\\"hljs-keyword\\">continue</span>\\n      dfs([i,j])\\n      result++\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> result\\n  \\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">dfs</span>(<span class=\\"hljs-params\\">[x,y]</span>)</span>{\\n    visited[x][y]=<span class=\\"hljs-literal\\">true</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> [dx,dy] <span class=\\"hljs-keyword\\">of</span> moves){\\n      <span class=\\"hljs-keyword\\">let</span> newx=x+dx,newy=y+dy\\n      <span class=\\"hljs-keyword\\">if</span>(newx&lt;<span class=\\"hljs-number\\">0</span> || newy&lt;<span class=\\"hljs-number\\">0</span> || newx&gt;=row || newy&gt;=col)<span class=\\"hljs-keyword\\">continue</span>\\n      <span class=\\"hljs-keyword\\">if</span>(visited[newx][newy])<span class=\\"hljs-keyword\\">continue</span>\\n      <span class=\\"hljs-keyword\\">if</span>(newGrid[newx][newy]===<span class=\\"hljs-string\\">\\"#\\"</span>)<span class=\\"hljs-keyword\\">continue</span>\\n      dfs([newx,newy])\\n    }\\n  }\\n\\n};\\n</code></pre>\\n"],"querySlug":"regions-cut-by-slashes","created_at":"2019-04-11","timeArr":[2019,3,11,12,57,33,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>将<code>/</code>转化为</p>\\n<pre class=\\"hljs\\"><code>[\'\',\'\',\'#\'],\\n[\'\',\'#\',\'\'],\\n[\'#\',\'\',\'\']\\n</code></pre>\\n<p>将<code>\\\\\\\\</code>转换为</p>\\n<pre class=\\"hljs\\"><code>[\'#\',\'\',\'\'],\\n[\'\',\'#\',\'\'],\\n[\'\',\'\',\'#\']\\n</code></pre>\\n<p>然后<code>dfs</code>遍历，<code>#</code>说明无法通过，<code>\'\'</code>，说明可以通过，问题就成了找岛屿的数量。</p>\\n","content":"<p>在由 1 x 1 方格组成的 N x N 网格&nbsp;<code>grid</code> 中，每个 1 x 1&nbsp;方块由 <code>/</code>、<code>\\\\</code> 或空格构成。这些字符会将方块划分为一些共边的区域。</p>\\n\\n<p>（请注意，反斜杠字符是转义的，因此 <code>\\\\</code> 用 <code>&quot;\\\\\\\\&quot;</code>&nbsp;表示。）。</p>\\n\\n<p>返回区域的数目。</p>\\n\\n<p>&nbsp;</p>\\n\\n<ol>\\n</ol>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：\\n</strong>[\\n&nbsp; &quot; /&quot;,\\n&nbsp; &quot;/ &quot;\\n]\\n<strong>输出：</strong>2\\n<strong>解释：</strong>2x2 网格如下：\\n<img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/15/1.png\\"></pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：\\n</strong>[\\n&nbsp; &quot; /&quot;,\\n&nbsp; &quot;  &quot;\\n]\\n<strong>输出：</strong>1\\n<strong>解释：</strong>2x2 网格如下：\\n<img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/15/2.png\\"></pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：\\n</strong>[\\n&nbsp; &quot;\\\\\\\\/&quot;,\\n&nbsp; &quot;/\\\\\\\\&quot;\\n]\\n<strong>输出：</strong>4\\n<strong>解释：</strong>（回想一下，因为 \\\\ 字符是转义的，所以 &quot;\\\\\\\\/&quot; 表示 \\\\/，而 &quot;/\\\\\\\\&quot; 表示 /\\\\。）\\n2x2 网格如下：\\n<img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/15/3.png\\"></pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre><strong>输入：\\n</strong>[\\n&nbsp; &quot;/\\\\\\\\&quot;,\\n&nbsp; &quot;\\\\\\\\/&quot;\\n]\\n<strong>输出：</strong>5\\n<strong>解释：</strong>（回想一下，因为 \\\\ 字符是转义的，所以 &quot;/\\\\\\\\&quot; 表示 /\\\\，而 &quot;\\\\\\\\/&quot; 表示 \\\\/。）\\n2x2 网格如下：\\n<img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/15/4.png\\"></pre>\\n\\n<p><strong>示例 5：</strong></p>\\n\\n<pre><strong>输入：\\n</strong>[\\n&nbsp; &quot;//&quot;,\\n&nbsp; &quot;/ &quot;\\n]\\n<strong>输出：</strong>3\\n<strong>解释：</strong>2x2 网格如下：\\n<img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/15/5.png\\">\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ol>\\n\\t<li><code>1 &lt;= grid.length == grid[0].length &lt;= 30</code></li>\\n\\t<li><code>grid[i][j]</code> 是&nbsp;<code>&#39;/&#39;</code>、<code>&#39;\\\\&#39;</code>、或&nbsp;<code>&#39; &#39;</code>。</li>\\n</ol>\\n","title":"959. 由斜杠划分区域","relatedTags":["深度优先搜索","广度优先搜索","并查集","图"],"difficult":"Middle","lang":["javascript"],"uniqueID":"959","slug":"959-Regions-Cut-By-Slashes"}')}}]);