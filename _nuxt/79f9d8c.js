(window.webpackJsonp=window.webpackJsonp||[]).push([[684],{1482:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">s</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> calculate = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">s</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> sign=<span class=\\"hljs-string\\">\'+\'</span>\\n  <span class=\\"hljs-keyword\\">let</span> stack=[]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;s.length;i++){\\n    <span class=\\"hljs-keyword\\">if</span>(s[i]===<span class=\\"hljs-string\\">\\" \\"</span>)<span class=\\"hljs-keyword\\">continue</span>\\n    <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-regexp\\">/\\\\d/</span>.test(s[i])){\\n      <span class=\\"hljs-keyword\\">let</span> str=s[i]\\n      <span class=\\"hljs-keyword\\">while</span>(<span class=\\"hljs-regexp\\">/\\\\d/</span>.test(s[i+<span class=\\"hljs-number\\">1</span>])){\\n        str+=s[++i]\\n      }\\n      <span class=\\"hljs-keyword\\">if</span>(sign===<span class=\\"hljs-string\\">\\"+\\"</span>)stack.push(+str)\\n      <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(sign===<span class=\\"hljs-string\\">\\"-\\"</span>)stack.push(-str)\\n      <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(sign===<span class=\\"hljs-string\\">\\"*\\"</span>)stack.push(stack.pop()*str)\\n      <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(sign===<span class=\\"hljs-string\\">\\"/\\"</span>)stack.push(~~(stack.pop()/str))\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      sign=s[i]\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> sum=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> n <span class=\\"hljs-keyword\\">of</span> stack)sum+=n\\n  <span class=\\"hljs-keyword\\">return</span> sum\\n};\\n</code></pre>\\n"],"querySlug":"basic-calculator-ii","created_at":"2021-03-11","timeArr":[2021,2,11,7,54,8,0],"hasThinking":false,"content":"<p>给你一个字符串表达式 <code>s</code> ，请你实现一个基本计算器来计算并返回它的值。</p>\\n\\n<p>整数除法仅保留整数部分。</p>\\n\\n<div class=\\"original__bRMd\\">\\n<div>\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = \\"3+2*2\\"\\n<strong>输出：</strong>7\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = \\" 3/2 \\"\\n<strong>输出：</strong>1\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = \\" 3+5 / 2 \\"\\n<strong>输出：</strong>5\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= s.length <= 3 * 10<sup>5</sup></code></li>\\n\\t<li><code>s</code> 由整数和算符 <code>(\'+\', \'-\', \'*\', \'/\')</code> 组成，中间由一些空格隔开</li>\\n\\t<li><code>s</code> 表示一个 <strong>有效表达式</strong></li>\\n\\t<li>表达式中的所有整数都是非负整数，且在范围 <code>[0, 2<sup>31</sup> - 1]</code> 内</li>\\n\\t<li>题目数据保证答案是一个 <strong>32-bit 整数</strong></li>\\n</ul>\\n</div>\\n</div>\\n","title":"227. 基本计算器 II","relatedTags":["栈","数学","字符串"],"difficult":"Middle","lang":["javascript"],"uniqueID":"227","slug":"227-Basic-Calculator-II"}')}}]);