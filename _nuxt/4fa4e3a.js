(window.webpackJsonp=window.webpackJsonp||[]).push([[312],{1110:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">grid</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> largest1BorderedSquare = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">grid</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> m=grid.length,n=grid[<span class=\\"hljs-number\\">0</span>].length\\n  <span class=\\"hljs-keyword\\">let</span> l2r=<span class=\\"hljs-built_in\\">Array</span>(m).fill(<span class=\\"hljs-number\\">0</span>).map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span>=&gt;</span><span class=\\"hljs-built_in\\">Array</span>(n).fill(<span class=\\"hljs-number\\">0</span>))\\n  <span class=\\"hljs-keyword\\">let</span> u2d=<span class=\\"hljs-built_in\\">Array</span>(m).fill(<span class=\\"hljs-number\\">0</span>).map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span>=&gt;</span><span class=\\"hljs-built_in\\">Array</span>(n).fill(<span class=\\"hljs-number\\">0</span>))\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;n;j++){\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;m;i++){\\n      <span class=\\"hljs-keyword\\">if</span>(grid[i][j]===<span class=\\"hljs-number\\">0</span>)u2d[i][j]=<span class=\\"hljs-number\\">0</span>\\n      <span class=\\"hljs-keyword\\">else</span> u2d[i][j]=(i<span class=\\"hljs-number\\">-1</span>&gt;=<span class=\\"hljs-number\\">0</span> ? u2d[i<span class=\\"hljs-number\\">-1</span>][j] : <span class=\\"hljs-number\\">0</span>) + grid[i][j]\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;m;i++){\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;n;j++){\\n      <span class=\\"hljs-keyword\\">if</span>(grid[i][j]===<span class=\\"hljs-number\\">0</span>)l2r[i][j]=<span class=\\"hljs-number\\">0</span>\\n      <span class=\\"hljs-keyword\\">else</span> l2r[i][j]=(j<span class=\\"hljs-number\\">-1</span>&gt;=<span class=\\"hljs-number\\">0</span> ? l2r[i][j<span class=\\"hljs-number\\">-1</span>] : <span class=\\"hljs-number\\">0</span>) + grid[i][j]\\n    }\\n  }\\n\\n  <span class=\\"hljs-comment\\">// console.log(l2r,u2d)</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> k=<span class=\\"hljs-built_in\\">Math</span>.min(m,n)<span class=\\"hljs-number\\">-1</span>;k&gt;=<span class=\\"hljs-number\\">0</span>;k--){\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;m;i++){\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;n;j++){\\n        <span class=\\"hljs-keyword\\">if</span>(i+k&gt;=m || j+k&gt;=n)<span class=\\"hljs-keyword\\">continue</span>\\n        <span class=\\"hljs-keyword\\">let</span> rt=l2r[i][j+k]\\n        <span class=\\"hljs-keyword\\">let</span> lb=u2d[i+k][j]\\n        <span class=\\"hljs-keyword\\">let</span> rb=<span class=\\"hljs-built_in\\">Math</span>.min(l2r[i+k][j+k],u2d[i+k][j+k])\\n        <span class=\\"hljs-comment\\">// console.log(rt,lb,rb,k)</span>\\n        <span class=\\"hljs-keyword\\">if</span>(rt&gt;=(k+<span class=\\"hljs-number\\">1</span>) &amp;&amp; lb&gt;=(k+<span class=\\"hljs-number\\">1</span>) &amp;&amp; rb&gt;=(k+<span class=\\"hljs-number\\">1</span>)){\\n          <span class=\\"hljs-keyword\\">return</span> (k+<span class=\\"hljs-number\\">1</span>)*(k+<span class=\\"hljs-number\\">1</span>)\\n        }\\n      }\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>\\n};\\n</code></pre>\\n"],"querySlug":"largest-1-bordered-square","created_at":"2019-07-28","timeArr":[2019,6,28,12,18,46,0],"hasThinking":false,"content":"<p>给你一个由若干 <code>0</code> 和 <code>1</code> 组成的二维网格&nbsp;<code>grid</code>，请你找出边界全部由 <code>1</code> 组成的最大 <strong>正方形</strong> 子网格，并返回该子网格中的元素数量。如果不存在，则返回 <code>0</code>。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>grid = [[1,1,1],[1,0,1],[1,1,1]]\\n<strong>输出：</strong>9\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>grid = [[1,1,0,0]]\\n<strong>输出：</strong>1\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= grid.length &lt;= 100</code></li>\\n\\t<li><code>1 &lt;= grid[0].length &lt;= 100</code></li>\\n\\t<li><code>grid[i][j]</code> 为&nbsp;<code>0</code>&nbsp;或&nbsp;<code>1</code></li>\\n</ul>\\n","title":"1139. 最大的以 1 为边界的正方形","relatedTags":["数组","动态规划","矩阵"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1139","slug":"1139-Largest-1-Bordered-Square"}')}}]);