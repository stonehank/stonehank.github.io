(window.webpackJsonp=window.webpackJsonp||[]).push([[829],{1627:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">nums</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{boolean}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> canPartition = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">nums</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> sum=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> n <span class=\\"hljs-keyword\\">of</span> nums)sum+=n\\n  <span class=\\"hljs-keyword\\">if</span>(sum % <span class=\\"hljs-number\\">2</span>!==<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n  <span class=\\"hljs-keyword\\">let</span> final=sum/<span class=\\"hljs-number\\">2</span>\\n  <span class=\\"hljs-keyword\\">let</span> dp=<span class=\\"hljs-built_in\\">Array</span>(nums.length).fill(<span class=\\"hljs-number\\">0</span>).map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">n</span>=&gt;</span><span class=\\"hljs-built_in\\">Array</span>(sum).fill(<span class=\\"hljs-literal\\">false</span>))\\n  dp[<span class=\\"hljs-number\\">0</span>][<span class=\\"hljs-number\\">0</span>]=<span class=\\"hljs-literal\\">true</span>\\n  dp[<span class=\\"hljs-number\\">0</span>][nums[<span class=\\"hljs-number\\">0</span>]]=<span class=\\"hljs-literal\\">true</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">1</span>;i&lt;dp.length;i++){\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;dp[i].length;j++){\\n      <span class=\\"hljs-keyword\\">if</span>(dp[i<span class=\\"hljs-number\\">-1</span>][j]){\\n        dp[i][j]=<span class=\\"hljs-literal\\">true</span>\\n        dp[i][j+nums[i]]=<span class=\\"hljs-literal\\">true</span>\\n      }\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> count=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;nums.length;i++){\\n    <span class=\\"hljs-keyword\\">if</span>(dp[i][final])count++\\n    <span class=\\"hljs-keyword\\">if</span>(count===<span class=\\"hljs-number\\">2</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n};\\n</code></pre>\\n"],"querySlug":"partition-equal-subset-sum","created_at":"2019-03-03","timeArr":[2019,2,3,1,55,15,0],"hasThinking":false,"content":"<p>给你一个 <strong>只包含正整数 </strong>的 <strong>非空 </strong>数组 <code>nums</code> 。请你判断是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [1,5,11,5]\\n<strong>输出：</strong>true\\n<strong>解释：</strong>数组可以分割成 [1, 5, 5] 和 [11] 。</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [1,2,3,5]\\n<strong>输出：</strong>false\\n<strong>解释：</strong>数组不能分割成两个元素和相等的子集。\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= nums.length <= 200</code></li>\\n\\t<li><code>1 <= nums[i] <= 100</code></li>\\n</ul>\\n","title":"416. 分割等和子集","relatedTags":["数组","动态规划"],"difficult":"Middle","lang":["javascript"],"uniqueID":"416","slug":"416-Partition-Equal-Subset-Sum"}')}}]);