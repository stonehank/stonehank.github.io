(window.webpackJsonp=window.webpackJsonp||[]).push([[944],{1742:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">matrix</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[][]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> updateMatrix = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">matrix</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> m=matrix.length,n=matrix[<span class=\\"hljs-number\\">0</span>].length\\n  <span class=\\"hljs-keyword\\">let</span> moves=[[<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">0</span>],[<span class=\\"hljs-number\\">1</span>,<span class=\\"hljs-number\\">0</span>],[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">-1</span>],[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">1</span>]]\\n  <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-built_in\\">Array</span>(m).fill().map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span>=&gt;</span><span class=\\"hljs-built_in\\">Array</span>(n).fill(<span class=\\"hljs-literal\\">Infinity</span>))\\n  <span class=\\"hljs-keyword\\">let</span> arr=[]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;m;i++){\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;n;j++){\\n      <span class=\\"hljs-keyword\\">if</span>(matrix[i][j]===<span class=\\"hljs-number\\">0</span>){\\n        res[i][j]=<span class=\\"hljs-number\\">0</span>\\n        arr.push([i,j])\\n      }\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> step=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">while</span>(arr.length&gt;<span class=\\"hljs-number\\">0</span>){\\n    <span class=\\"hljs-keyword\\">let</span> len=arr.length\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;len;i++){\\n      <span class=\\"hljs-keyword\\">let</span> [x,y]=arr.shift()\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> [dx,dy] <span class=\\"hljs-keyword\\">of</span> moves){\\n        <span class=\\"hljs-keyword\\">let</span> nx=dx+x,ny=dy+y\\n        <span class=\\"hljs-keyword\\">if</span>(nx&lt;<span class=\\"hljs-number\\">0</span> || ny&lt;<span class=\\"hljs-number\\">0</span> || nx&gt;=m || ny&gt;=n)<span class=\\"hljs-keyword\\">continue</span>\\n        <span class=\\"hljs-keyword\\">if</span>(res[nx][ny]&gt;step+<span class=\\"hljs-number\\">1</span>){\\n          res[nx][ny]=step+<span class=\\"hljs-number\\">1</span>\\n          arr.push([nx,ny])\\n        }\\n      }      \\n    }\\n    step++\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"01-matrix","created_at":"2019-04-09","timeArr":[2019,3,9,22,44,9,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>2种思路：</p>\\n<ol>\\n<li>\\n<p><code>BFS</code></p>\\n<p>首先找到都是<code>0</code>的位置，然后检查周边4个位置，如果周边的4个位置中存在<code>res[i+dx][j+dy]&gt;res[i][j]+1</code>，那么将这个位置放进<code>arr</code>。</p>\\n<p>不断处理<code>arr</code>，直到<code>arr.length===0</code></p>\\n</li>\\n<li>\\n<p><code>DP</code></p>\\n<p>2次遍历</p>\\n<p>一次从左上到右下，<code>matrix[i][j]=Math.min(matrix[i][j],matrix[i-1][j],matrix[i][j-1])</code></p>\\n<p>一次从右下到左上，<code>matrix[i][j]=Math.min(matrix[i][j],matrix[i+1][j],matrix[i][j+1])</code></p>\\n</li>\\n</ol>\\n","content":"<p>给定一个由 <code>0</code> 和 <code>1</code> 组成的矩阵 <code>mat</code> ，请输出一个大小相同的矩阵，其中每一个格子是 <code>mat</code> 中对应位置元素到最近的 <code>0</code> 的距离。</p>\\n\\n<p>两个相邻元素间的距离为 <code>1</code> 。</p>\\n\\n<p> </p>\\n\\n<p><b>示例 1：</b></p>\\n\\n<p><img alt=\\"\\" src=\\"https://pic.leetcode-cn.com/1626667201-NCWmuP-image.png\\" style=\\"width: 150px; \\" /></p>\\n\\n<pre>\\n<strong>输入：</strong>mat =<strong> </strong>[[0,0,0],[0,1,0],[0,0,0]]\\n<strong>输出：</strong>[[0,0,0],[0,1,0],[0,0,0]]\\n</pre>\\n\\n<p><b>示例 2：</b></p>\\n\\n<p><img alt=\\"\\" src=\\"https://pic.leetcode-cn.com/1626667205-xFxIeK-image.png\\" style=\\"width: 150px; \\" /></p>\\n\\n<pre>\\n<b>输入：</b>mat =<b> </b>[[0,0,0],[0,1,0],[1,1,1]]\\n<strong>输出：</strong>[[0,0,0],[0,1,0],[1,2,1]]\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>m == mat.length</code></li>\\n\\t<li><code>n == mat[i].length</code></li>\\n\\t<li><code>1 <= m, n <= 10<sup>4</sup></code></li>\\n\\t<li><code>1 <= m * n <= 10<sup>4</sup></code></li>\\n\\t<li><code>mat[i][j] is either 0 or 1.</code></li>\\n\\t<li><code>mat</code> 中至少有一个 <code>0 </code></li>\\n</ul>\\n","title":"542. 01 矩阵","relatedTags":["广度优先搜索","数组","动态规划","矩阵"],"difficult":"Middle","lang":["javascript"],"uniqueID":"542","slug":"542-01-Matrix"}')}}]);