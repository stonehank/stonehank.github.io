(window.webpackJsonp=window.webpackJsonp||[]).push([[979],{1777:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">nums</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> findLHS = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">nums</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> hash={}\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> n <span class=\\"hljs-keyword\\">of</span> nums){\\n    <span class=\\"hljs-keyword\\">if</span>(hash[n]==<span class=\\"hljs-literal\\">null</span>)hash[n]=<span class=\\"hljs-number\\">1</span>\\n    <span class=\\"hljs-keyword\\">else</span> hash[n]++\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> maxLen=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> k <span class=\\"hljs-keyword\\">in</span> hash){\\n    <span class=\\"hljs-keyword\\">let</span> nxt=+k+<span class=\\"hljs-number\\">1</span>\\n    <span class=\\"hljs-keyword\\">if</span>(hash[nxt]&gt;<span class=\\"hljs-number\\">0</span>)maxLen=<span class=\\"hljs-built_in\\">Math</span>.max(maxLen,hash[k]+hash[nxt])\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> maxLen\\n};\\n</code></pre>\\n"],"querySlug":"longest-harmonious-subsequence","created_at":"2019-04-06","timeArr":[2019,3,6,12,25,10,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>首先通过<code>hash</code>将每一个数字的频率保存。</p>\\n<p>然后对每一个<code>hash[k]</code>，找出是否存在<code>hash[k+1]</code>，如果存在<code>hash[k+1]</code>，那么就和最大长度<code>maxLen</code>比较。</p>\\n<p>最后返回<code>maxLen</code>，注意，只需要比较<code>hash[k+1]</code>，不需要比较<code>hash[k-1]</code>，因为每一个数字都是连锁的。</p>\\n","content":"<p>和谐数组是指一个数组里元素的最大值和最小值之间的差别 <strong>正好是 <code>1</code></strong> 。</p>\\n\\n<p>现在，给你一个整数数组 <code>nums</code> ，请你在所有可能的子序列中找到最长的和谐子序列的长度。</p>\\n\\n<p>数组的子序列是一个由数组派生出来的序列，它可以通过删除一些元素或不删除元素、且不改变其余元素的顺序而得到。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [1,3,2,2,5,2,3,7]\\n<strong>输出：</strong>5\\n<strong>解释：</strong>最长的和谐子序列是 [3,2,2,2,3]\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [1,2,3,4]\\n<strong>输出：</strong>2\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [1,1,1,1]\\n<strong>输出：</strong>0\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= nums.length <= 2 * 10<sup>4</sup></code></li>\\n\\t<li><code>-10<sup>9</sup> <= nums[i] <= 10<sup>9</sup></code></li>\\n</ul>\\n","title":"594. 最长和谐子序列","relatedTags":["数组","哈希表","排序"],"difficult":"Easy","lang":["javascript"],"uniqueID":"594","slug":"594-Longest-Harmonious-Subsequence"}')}}]);