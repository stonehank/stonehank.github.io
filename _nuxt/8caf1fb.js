(window.webpackJsonp=window.webpackJsonp||[]).push([[1300],{2098:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">A</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> minFallingPathSum = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">A</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> N=A.length\\n  <span class=\\"hljs-keyword\\">let</span> dp=<span class=\\"hljs-built_in\\">Array</span>(N).fill().map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span>=&gt;</span><span class=\\"hljs-built_in\\">Array</span>(N+<span class=\\"hljs-number\\">2</span>).fill(<span class=\\"hljs-literal\\">Infinity</span>))\\n  \\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">1</span>;i&lt;N+<span class=\\"hljs-number\\">1</span>;i++)dp[<span class=\\"hljs-number\\">0</span>][i]=A[<span class=\\"hljs-number\\">0</span>][i<span class=\\"hljs-number\\">-1</span>]\\n  \\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">1</span>;i&lt;N;i++){\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">1</span>;j&lt;N+<span class=\\"hljs-number\\">1</span>;j++){\\n      dp[i][j]=<span class=\\"hljs-built_in\\">Math</span>.min(dp[i][j],<span class=\\"hljs-built_in\\">Math</span>.min(dp[i<span class=\\"hljs-number\\">-1</span>][j<span class=\\"hljs-number\\">-1</span>],dp[i<span class=\\"hljs-number\\">-1</span>][j],dp[i<span class=\\"hljs-number\\">-1</span>][j+<span class=\\"hljs-number\\">1</span>])+A[i][j<span class=\\"hljs-number\\">-1</span>])\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-literal\\">Infinity</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;dp[N<span class=\\"hljs-number\\">-1</span>].length;i++){\\n    res=<span class=\\"hljs-built_in\\">Math</span>.min(res,dp[N<span class=\\"hljs-number\\">-1</span>][i])\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"minimum-falling-path-sum","created_at":"2019-03-09","timeArr":[2019,2,9,19,15,7,0],"hasThinking":false,"content":"<p>给你一个 <code>n x n</code> 的<strong> 方形 </strong>整数数组&nbsp;<code>matrix</code> ，请你找出并返回通过 <code>matrix</code> 的<strong>下降路径</strong><em> </em>的<strong> </strong><strong>最小和</strong> 。</p>\\n\\n<p><strong>下降路径</strong> 可以从第一行中的任何元素开始，并从每一行中选择一个元素。在下一行选择的元素和当前行所选元素最多相隔一列（即位于正下方或者沿对角线向左或者向右的第一个元素）。具体来说，位置 <code>(row, col)</code> 的下一个元素应当是 <code>(row + 1, col - 1)</code>、<code>(row + 1, col)</code> 或者 <code>(row + 1, col + 1)</code> 。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>matrix = [[2,1,3],[6,5,4],[7,8,9]]\\n<strong>输出：</strong>13\\n<strong>解释：</strong>下面是两条和最小的下降路径，用加粗+斜体标注：\\n[[2,<em><strong>1</strong></em>,3],      [[2,<em><strong>1</strong></em>,3],\\n [6,<em><strong>5</strong></em>,4],       [6,5,<em><strong>4</strong></em>],\\n [<em><strong>7</strong></em>,8,9]]       [7,<em><strong>8</strong></em>,9]]\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>matrix = [[-19,57],[-40,-5]]\\n<strong>输出：</strong>-59\\n<strong>解释：</strong>下面是一条和最小的下降路径，用加粗+斜体标注：\\n[[<em><strong>-19</strong></em>,57],\\n [<em><strong>-40</strong></em>,-5]]\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>matrix = [[-48]]\\n<strong>输出：</strong>-48\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>n == matrix.length</code></li>\\n\\t<li><code>n == matrix[i].length</code></li>\\n\\t<li><code>1 &lt;= n &lt;= 100</code></li>\\n\\t<li><code>-100 &lt;= matrix[i][j] &lt;= 100</code></li>\\n</ul>\\n","title":"931. 下降路径最小和","relatedTags":["数组","动态规划","矩阵"],"difficult":"Middle","lang":["javascript"],"uniqueID":"931","slug":"931-Minimum-Falling-Path-Sum"}')}}]);