(window.webpackJsonp=window.webpackJsonp||[]).push([[523],{1321:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">path</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{boolean}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> isPathCrossing = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">path</span>) </span>{\\n    <span class=\\"hljs-keyword\\">let</span> hash={}\\n    <span class=\\"hljs-keyword\\">let</span> ori={\\n        <span class=\\"hljs-attr\\">N</span>:[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">1</span>],\\n        <span class=\\"hljs-attr\\">S</span>:[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">-1</span>],\\n        <span class=\\"hljs-attr\\">E</span>:[<span class=\\"hljs-number\\">1</span>,<span class=\\"hljs-number\\">0</span>],\\n        <span class=\\"hljs-attr\\">W</span>:[<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">0</span>]\\n    }\\n    <span class=\\"hljs-keyword\\">let</span> cur=[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">0</span>]\\n    hash[<span class=\\"hljs-string\\">\'0 0\'</span>]=<span class=\\"hljs-literal\\">true</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;path.length;i++){\\n        <span class=\\"hljs-keyword\\">let</span> dir=ori[path[i]]\\n        <span class=\\"hljs-keyword\\">let</span> nX=cur[<span class=\\"hljs-number\\">0</span>]+dir[<span class=\\"hljs-number\\">0</span>], nY=cur[<span class=\\"hljs-number\\">1</span>]+dir[<span class=\\"hljs-number\\">1</span>]\\n        <span class=\\"hljs-keyword\\">if</span>(hash[nX+<span class=\\"hljs-string\\">\' \'</span>+nY]){\\n            <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n        }\\n        hash[nX+<span class=\\"hljs-string\\">\' \'</span>+nY]=<span class=\\"hljs-literal\\">true</span>\\n        cur=[nX,nY]\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n};\\n</code></pre>\\n"],"querySlug":"path-crossing","created_at":"2020-06-28","timeArr":[2020,5,28,10,54,35,0],"hasThinking":false,"content":"<p>给你一个字符串 <code>path</code>，其中 <code>path[i]</code> 的值可以是 <code>&#39;N&#39;</code>、<code>&#39;S&#39;</code>、<code>&#39;E&#39;</code> 或者 <code>&#39;W&#39;</code>，分别表示向北、向南、向东、向西移动一个单位。</p>\\n\\n<p>机器人从二维平面上的原点 <code>(0, 0)</code> 处开始出发，按 <code>path</code> 所指示的路径行走。</p>\\n\\n<p>如果路径在任何位置上出现相交的情况，也就是走到之前已经走过的位置，请返回 <code>True</code> ；否则，返回 <code>False</code> 。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<p><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/06/28/screen-shot-2020-06-10-at-123929-pm.png\\" style=\\"height: 224px; width: 250px;\\"></p>\\n\\n<pre><strong>输入：</strong>path = &quot;NES&quot;\\n<strong>输出：</strong>false \\n<strong>解释：</strong>该路径没有在任何位置相交。</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<p><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/06/28/screen-shot-2020-06-10-at-123843-pm.png\\" style=\\"height: 212px; width: 250px;\\"></p>\\n\\n<pre><strong>输入：</strong>path = &quot;NESWW&quot;\\n<strong>输出：</strong>true\\n<strong>解释：</strong>该路径经过原点两次。</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= path.length &lt;= 10^4</code></li>\\n\\t<li><code>path</code> 仅由 <code>{&#39;N&#39;, &#39;S&#39;, &#39;E&#39;, &#39;W}</code> 中的字符组成</li>\\n</ul>\\n","title":"1496. 判断路径是否相交","relatedTags":["哈希表","字符串"],"difficult":"Easy","lang":["javascript"],"uniqueID":"1496","slug":"1496-Path-Crossing"}')}}]);