(window.webpackJsonp=window.webpackJsonp||[]).push([[306],{1104:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">n</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">red_edges</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">blue_edges</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> shortestAlternatingPaths = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">n, red_edges, blue_edges</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> graph=<span class=\\"hljs-built_in\\">Array</span>(n).fill().map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span>=&gt;</span><span class=\\"hljs-built_in\\">Array</span>(n).fill(<span class=\\"hljs-literal\\">null</span>))\\n  <span class=\\"hljs-keyword\\">let</span> dis=<span class=\\"hljs-built_in\\">Array</span>(n).fill().map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span>=&gt;</span>({<span class=\\"hljs-attr\\">r</span>:<span class=\\"hljs-literal\\">Infinity</span>,<span class=\\"hljs-attr\\">b</span>:<span class=\\"hljs-literal\\">Infinity</span>}))\\n  dis[<span class=\\"hljs-number\\">0</span>].r=<span class=\\"hljs-number\\">0</span>\\n  dis[<span class=\\"hljs-number\\">0</span>].b=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;red_edges.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> [<span class=\\"hljs-keyword\\">from</span>,to]=red_edges[i]\\n    <span class=\\"hljs-keyword\\">if</span>(!graph[<span class=\\"hljs-keyword\\">from</span>][to])graph[<span class=\\"hljs-keyword\\">from</span>][to]={}\\n    graph[<span class=\\"hljs-keyword\\">from</span>][to].r=<span class=\\"hljs-literal\\">true</span>\\n  }\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;blue_edges.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> [<span class=\\"hljs-keyword\\">from</span>,to]=blue_edges[i]\\n    <span class=\\"hljs-keyword\\">if</span>(!graph[<span class=\\"hljs-keyword\\">from</span>][to])graph[<span class=\\"hljs-keyword\\">from</span>][to]={}\\n    graph[<span class=\\"hljs-keyword\\">from</span>][to].b=<span class=\\"hljs-literal\\">true</span>\\n  }\\n  \\n  <span class=\\"hljs-keyword\\">let</span> arr=[<span class=\\"hljs-number\\">0</span>]\\n  <span class=\\"hljs-keyword\\">while</span>(arr.length&gt;<span class=\\"hljs-number\\">0</span>){\\n    <span class=\\"hljs-keyword\\">let</span> len=arr.length\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;len;i++){\\n      <span class=\\"hljs-keyword\\">let</span> <span class=\\"hljs-keyword\\">from</span>=arr.shift()\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;graph[<span class=\\"hljs-keyword\\">from</span>].length;j++){\\n        <span class=\\"hljs-keyword\\">let</span> to=j\\n        <span class=\\"hljs-keyword\\">if</span>(!graph[<span class=\\"hljs-keyword\\">from</span>][to])<span class=\\"hljs-keyword\\">continue</span>\\n        <span class=\\"hljs-keyword\\">let</span> {r,b}=graph[<span class=\\"hljs-keyword\\">from</span>][to]\\n        <span class=\\"hljs-keyword\\">let</span> needPush=<span class=\\"hljs-literal\\">false</span>\\n        <span class=\\"hljs-keyword\\">if</span>(r){\\n          <span class=\\"hljs-keyword\\">if</span>(dis[<span class=\\"hljs-keyword\\">from</span>].b+<span class=\\"hljs-number\\">1</span>&lt;dis[to].r){\\n            dis[to].r=dis[<span class=\\"hljs-keyword\\">from</span>].b+<span class=\\"hljs-number\\">1</span>\\n            needPush=<span class=\\"hljs-literal\\">true</span>\\n          }\\n        }\\n        <span class=\\"hljs-keyword\\">if</span>(b){\\n          <span class=\\"hljs-keyword\\">if</span>(dis[<span class=\\"hljs-keyword\\">from</span>].r+<span class=\\"hljs-number\\">1</span>&lt;dis[to].b){\\n            dis[to].b=dis[<span class=\\"hljs-keyword\\">from</span>].r+<span class=\\"hljs-number\\">1</span>\\n            needPush=<span class=\\"hljs-literal\\">true</span>\\n          }\\n        }\\n        <span class=\\"hljs-keyword\\">if</span>(needPush){\\n          arr.push(to)\\n        }\\n      }\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> res=[]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;dis.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> min=<span class=\\"hljs-built_in\\">Math</span>.min(dis[i].r,dis[i].b)\\n    <span class=\\"hljs-keyword\\">if</span>(min===<span class=\\"hljs-literal\\">Infinity</span>)min=<span class=\\"hljs-number\\">-1</span>\\n    res[i]=min\\n  }\\n  <span class=\\"hljs-comment\\">// console.log(dis)</span>\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"shortest-path-with-alternating-colors","created_at":"2019-07-21","timeArr":[2019,6,21,11,12,58,0],"hasThinking":false,"content":"<p>在一个有向图中，节点分别标记为&nbsp;<code>0, 1, ..., n-1</code>。这个图中的每条边不是红色就是蓝色，且存在自环或平行边。</p>\\n\\n<p><code>red_edges</code>&nbsp;中的每一个&nbsp;<code>[i, j]</code>&nbsp;对表示从节点 <code>i</code> 到节点 <code>j</code> 的红色有向边。类似地，<code>blue_edges</code>&nbsp;中的每一个&nbsp;<code>[i, j]</code>&nbsp;对表示从节点 <code>i</code> 到节点 <code>j</code> 的蓝色有向边。</p>\\n\\n<p>返回长度为 <code>n</code> 的数组&nbsp;<code>answer</code>，其中&nbsp;<code>answer[X]</code>&nbsp;是从节点&nbsp;<code>0</code>&nbsp;到节点&nbsp;<code>X</code>&nbsp;的红色边和蓝色边交替出现的最短路径的长度。如果不存在这样的路径，那么 <code>answer[x] = -1</code>。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>n = 3, red_edges = [[0,1],[1,2]], blue_edges = []\\n<strong>输出：</strong>[0,1,-1]\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>n = 3, red_edges = [[0,1]], blue_edges = [[2,1]]\\n<strong>输出：</strong>[0,1,-1]\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>n = 3, red_edges = [[1,0]], blue_edges = [[2,1]]\\n<strong>输出：</strong>[0,-1,-1]\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre><strong>输入：</strong>n = 3, red_edges = [[0,1]], blue_edges = [[1,2]]\\n<strong>输出：</strong>[0,1,2]\\n</pre>\\n\\n<p><strong>示例 5：</strong></p>\\n\\n<pre><strong>输入：</strong>n = 3, red_edges = [[0,1],[0,2]], blue_edges = [[1,0]]\\n<strong>输出：</strong>[0,1,1]\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= n &lt;= 100</code></li>\\n\\t<li><code>red_edges.length &lt;= 400</code></li>\\n\\t<li><code>blue_edges.length &lt;= 400</code></li>\\n\\t<li><code>red_edges[i].length == blue_edges[i].length == 2</code></li>\\n\\t<li><code>0 &lt;= red_edges[i][j], blue_edges[i][j] &lt; n</code></li>\\n</ul>\\n","title":"1129. 颜色交替的最短路径","relatedTags":["广度优先搜索","图"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1129","slug":"1129-Shortest-Path-with-Alternating-Colors"}')}}]);