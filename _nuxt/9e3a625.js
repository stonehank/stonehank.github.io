(window.webpackJsonp=window.webpackJsonp||[]).push([[882],{1680:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Solution</span><span class=\\"hljs-params\\">(object)</span>:</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">findMaxForm</span><span class=\\"hljs-params\\">(self, strs, m, n)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type strs: List[str]\\n        :type m: int\\n        :type n: int\\n        :rtype: int\\n        \\"\\"\\"</span>\\n        <span class=\\"hljs-keyword\\">if</span> <span class=\\"hljs-keyword\\">not</span> strs:<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>\\n        dp=[[<span class=\\"hljs-number\\">0</span>]*(n+<span class=\\"hljs-number\\">1</span>) <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(m+<span class=\\"hljs-number\\">1</span>)]\\n        <span class=\\"hljs-keyword\\">for</span> k <span class=\\"hljs-keyword\\">in</span> range(len(strs)):\\n          s=strs[k]\\n          z,o=s.count(<span class=\\"hljs-string\\">\'0\'</span>),s.count(<span class=\\"hljs-string\\">\'1\'</span>)\\n          <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(m,z<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">-1</span>):\\n            <span class=\\"hljs-keyword\\">for</span> j <span class=\\"hljs-keyword\\">in</span> range(n,o<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">-1</span>):\\n              dp[i][j]=max(dp[i][j],dp[i-z][j-o]+<span class=\\"hljs-number\\">1</span>)\\n        <span class=\\"hljs-keyword\\">return</span> dp[<span class=\\"hljs-number\\">-1</span>][<span class=\\"hljs-number\\">-1</span>]\\n</code></pre>\\n"],"querySlug":"ones-and-zeroes","created_at":"2019-03-04","timeArr":[2019,2,4,15,3,28,0],"hasThinking":false,"content":"<p>给你一个二进制字符串数组 <code>strs</code> 和两个整数 <code>m</code> 和 <code>n</code> 。</p>\\n\\n<div class=\\"MachineTrans-Lines\\">\\n<p class=\\"MachineTrans-lang-zh-CN\\">请你找出并返回 <code>strs</code> 的最大子集的大小，该子集中 <strong>最多</strong> 有 <code>m</code> 个 <code>0</code> 和 <code>n</code> 个 <code>1</code> 。</p>\\n\\n<p class=\\"MachineTrans-lang-zh-CN\\">如果 <code>x</code> 的所有元素也是 <code>y</code> 的元素，集合 <code>x</code> 是集合 <code>y</code> 的 <strong>子集</strong> 。</p>\\n</div>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>strs = [\\"10\\", \\"0001\\", \\"111001\\", \\"1\\", \\"0\\"], m = 5, n = 3\\n<strong>输出：</strong>4\\n<strong>解释：</strong>最多有 5 个 0 和 3 个 1 的最大子集是 {\\"10\\",\\"0001\\",\\"1\\",\\"0\\"} ，因此答案是 4 。\\n其他满足题意但较小的子集包括 {\\"0001\\",\\"1\\"} 和 {\\"10\\",\\"1\\",\\"0\\"} 。{\\"111001\\"} 不满足题意，因为它含 4 个 1 ，大于 n 的值 3 。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>strs = [\\"10\\", \\"0\\", \\"1\\"], m = 1, n = 1\\n<strong>输出：</strong>2\\n<strong>解释：</strong>最大的子集是 {\\"0\\", \\"1\\"} ，所以答案是 2 。\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= strs.length <= 600</code></li>\\n\\t<li><code>1 <= strs[i].length <= 100</code></li>\\n\\t<li><code>strs[i]</code> 仅由 <code>\'0\'</code> 和 <code>\'1\'</code> 组成</li>\\n\\t<li><code>1 <= m, n <= 100</code></li>\\n</ul>\\n","title":"474. 一和零","relatedTags":["数组","字符串","动态规划"],"difficult":"Middle","lang":["python"],"uniqueID":"474","slug":"474-Ones-and-Zeroes"}')}}]);