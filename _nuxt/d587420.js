(window.webpackJsonp=window.webpackJsonp||[]).push([[920],{1718:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Solution</span><span class=\\"hljs-params\\">(object)</span>:</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">longestPalindromeSubseq</span><span class=\\"hljs-params\\">(self, s)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type s: str\\n        :rtype: int\\n        \\"\\"\\"</span>\\n        <span class=\\"hljs-keyword\\">if</span> s == s[::<span class=\\"hljs-number\\">-1</span>]:\\n          <span class=\\"hljs-keyword\\">return</span> len(s)\\n        n=len(s)\\n        <span class=\\"hljs-keyword\\">if</span> n==<span class=\\"hljs-number\\">0</span>:<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>\\n        dp=[[<span class=\\"hljs-number\\">0</span>]*n <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(n)]\\n        <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(n):\\n          dp[i][i]=<span class=\\"hljs-number\\">1</span>\\n        <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(<span class=\\"hljs-number\\">1</span>,n):\\n          <span class=\\"hljs-keyword\\">for</span> j <span class=\\"hljs-keyword\\">in</span> range(n-i):\\n            k=j+i\\n            <span class=\\"hljs-keyword\\">if</span> s[j]==s[k]:\\n              dp[j][k]=dp[j+<span class=\\"hljs-number\\">1</span>][k<span class=\\"hljs-number\\">-1</span>]+<span class=\\"hljs-number\\">2</span>\\n            <span class=\\"hljs-keyword\\">else</span>:\\n              dp[j][k]=max(dp[j+<span class=\\"hljs-number\\">1</span>][k],dp[j][k<span class=\\"hljs-number\\">-1</span>])\\n        <span class=\\"hljs-comment\\"># print dp</span>\\n        <span class=\\"hljs-keyword\\">return</span> dp[<span class=\\"hljs-number\\">0</span>][<span class=\\"hljs-number\\">-1</span>]\\n</code></pre>\\n"],"querySlug":"longest-palindromic-subsequence","created_at":"2019-03-04","timeArr":[2019,2,4,22,6,27,0],"hasThinking":false,"content":"<p>给你一个字符串 <code>s</code> ，找出其中最长的回文子序列，并返回该序列的长度。</p>\\n\\n<p>子序列定义为：不改变剩余字符顺序的情况下，删除某些字符或者不删除任何字符形成的一个序列。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = \\"bbbab\\"\\n<strong>输出：</strong>4\\n<strong>解释：</strong>一个可能的最长回文子序列为 \\"bbbb\\" 。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = \\"cbbd\\"\\n<strong>输出：</strong>2\\n<strong>解释：</strong>一个可能的最长回文子序列为 \\"bb\\" 。\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= s.length <= 1000</code></li>\\n\\t<li><code>s</code> 仅由小写英文字母组成</li>\\n</ul>\\n","title":"516. 最长回文子序列","relatedTags":["字符串","动态规划"],"difficult":"Middle","lang":["python"],"uniqueID":"516","slug":"516-Longest-Palindromic-Subsequence"}')}}]);