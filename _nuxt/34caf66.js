(window.webpackJsonp=window.webpackJsonp||[]).push([[1035],{1833:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Solution</span><span class=\\"hljs-params\\">(object)</span>:</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">findNumberOfLIS</span><span class=\\"hljs-params\\">(self, nums)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type nums: List[int]\\n        :rtype: int\\n        \\"\\"\\"</span>\\n        n=len(nums)\\n        <span class=\\"hljs-keyword\\">if</span> n==<span class=\\"hljs-number\\">0</span>:<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>\\n        dp=[<span class=\\"hljs-number\\">1</span>]*n\\n        aux=[<span class=\\"hljs-number\\">1</span>]*n\\n        <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(<span class=\\"hljs-number\\">1</span>,n):\\n          <span class=\\"hljs-keyword\\">for</span> j <span class=\\"hljs-keyword\\">in</span> range(i):\\n            <span class=\\"hljs-keyword\\">if</span> nums[j]&lt;nums[i]:\\n              <span class=\\"hljs-keyword\\">if</span> dp[j]+<span class=\\"hljs-number\\">1</span>&gt;dp[i]:\\n                dp[i]=dp[j]+<span class=\\"hljs-number\\">1</span>\\n                aux[i]=aux[j]\\n              <span class=\\"hljs-keyword\\">elif</span> dp[j]+<span class=\\"hljs-number\\">1</span>==dp[i]:\\n                aux[i]+=aux[j]\\n        maxl=max(dp)\\n        res=<span class=\\"hljs-number\\">0</span>\\n        <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(len(dp)):\\n          <span class=\\"hljs-keyword\\">if</span> dp[i]==maxl:\\n            res+=aux[i]\\n        <span class=\\"hljs-keyword\\">return</span> res\\n\\n        \\n</code></pre>\\n"],"querySlug":"number-of-longest-increasing-subsequence","created_at":"2019-03-06","timeArr":[2019,2,6,16,27,50,0],"hasThinking":false,"content":"<p>给定一个未排序的整数数组，找到最长递增子序列的个数。</p>\\n\\n<p><strong>示例 1:</strong></p>\\n\\n<pre>\\n<strong>输入:</strong> [1,3,5,4,7]\\n<strong>输出:</strong> 2\\n<strong>解释:</strong> 有两个最长递增子序列，分别是 [1, 3, 4, 7] 和[1, 3, 5, 7]。\\n</pre>\\n\\n<p><strong>示例 2:</strong></p>\\n\\n<pre>\\n<strong>输入:</strong> [2,2,2,2,2]\\n<strong>输出:</strong> 5\\n<strong>解释:</strong> 最长递增子序列的长度是1，并且存在5个子序列的长度为1，因此输出5。\\n</pre>\\n\\n<p><strong>注意:</strong>&nbsp;给定的数组长度不超过 2000 并且结果一定是32位有符号整数。</p>\\n","title":"673. 最长递增子序列的个数","relatedTags":["树状数组","线段树","数组","动态规划"],"difficult":"Middle","lang":["python"],"uniqueID":"673","slug":"673-Number-of-Longest-Increasing-Subsequence"}')}}]);