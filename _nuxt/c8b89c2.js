(window.webpackJsonp=window.webpackJsonp||[]).push([[1040],{1838:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">s</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{boolean}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> checkValidString = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">s</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> stack=[]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;s.length;i++){\\n    <span class=\\"hljs-keyword\\">if</span>(s[i]===<span class=\\"hljs-string\\">\\"(\\"</span> || s[i]===<span class=\\"hljs-string\\">\\"*\\"</span>){\\n      stack.push(s[i])\\n    }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(s[i]===<span class=\\"hljs-string\\">\\")\\"</span>){\\n      <span class=\\"hljs-keyword\\">if</span>(stack.length===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n      <span class=\\"hljs-keyword\\">let</span> id=stack.length<span class=\\"hljs-number\\">-1</span>\\n      <span class=\\"hljs-keyword\\">while</span>(id&gt;=<span class=\\"hljs-number\\">0</span> &amp;&amp; stack[id]!==<span class=\\"hljs-string\\">\\"(\\"</span>)id--\\n      <span class=\\"hljs-keyword\\">if</span>(id===<span class=\\"hljs-number\\">-1</span>)stack.pop()\\n      <span class=\\"hljs-keyword\\">else</span> stack.splice(id,<span class=\\"hljs-number\\">1</span>)\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> leftP=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;stack.length;i++){\\n    <span class=\\"hljs-keyword\\">if</span>(stack[i]===<span class=\\"hljs-string\\">\\"*\\"</span>){\\n      <span class=\\"hljs-keyword\\">if</span>(leftP===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">continue</span>\\n      <span class=\\"hljs-keyword\\">else</span> leftP--\\n    }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(stack[i]===<span class=\\"hljs-string\\">\\"(\\"</span>){\\n      leftP++\\n    }\\n  }\\n\\n  <span class=\\"hljs-keyword\\">return</span> leftP===<span class=\\"hljs-number\\">0</span>\\n};\\n</code></pre>\\n"],"querySlug":"valid-parenthesis-string","created_at":"2019-03-26","timeArr":[2019,2,26,14,53,44,0],"hasThinking":true,"thinking":"<hr>\\n<p>这道题刚拿到的时候，第一反应是认为<code>*</code>可以当成任意值，其实并不是。</p>\\n<p><code>*</code>也有限制，例如：<code>**()(</code>，这里<code>*</code>并不能修复最后的<code>(</code>。</p>\\n<p>因此需要考虑一下4点：</p>\\n<ol>\\n<li><code>*</code>在<code>(</code>之前可以当做<code>any</code>，在<code>(</code>之后，这之前的<code>*</code>只能当做<code>(</code>。</li>\\n<li>一旦<code>)</code>的数量大于<code>(</code>的数量，应该立刻尝试修复。</li>\\n<li>如果<code>(</code>的数量大于<code>)</code>的数量，可以暂时不修复，因为后续可能还会有括号进行修复，如果到最后，则尝试修复。</li>\\n<li>修复的时候，必须遵守<code>条件1</code>，<code>*</code>不能随意用。</li>\\n</ol>\\n<p>使用数组分别记录<code>(</code>和<code>*</code>的索引位置。</p>\\n","content":"<p>给定一个只包含三种字符的字符串：<code>（&nbsp;</code>，<code>）</code>&nbsp;和 <code>*</code>，写一个函数来检验这个字符串是否为有效字符串。有效字符串具有如下规则：</p>\\n\\n<ol>\\n\\t<li>任何左括号 <code>(</code>&nbsp;必须有相应的右括号 <code>)</code>。</li>\\n\\t<li>任何右括号 <code>)</code>&nbsp;必须有相应的左括号 <code>(</code>&nbsp;。</li>\\n\\t<li>左括号 <code>(</code> 必须在对应的右括号之前 <code>)</code>。</li>\\n\\t<li><code>*</code>&nbsp;可以被视为单个右括号 <code>)</code>&nbsp;，或单个左括号 <code>(</code>&nbsp;，或一个空字符串。</li>\\n\\t<li>一个空字符串也被视为有效字符串。</li>\\n</ol>\\n\\n<p><strong>示例 1:</strong></p>\\n\\n<pre>\\n<strong>输入:</strong> &quot;()&quot;\\n<strong>输出:</strong> True\\n</pre>\\n\\n<p><strong>示例 2:</strong></p>\\n\\n<pre>\\n<strong>输入:</strong> &quot;(*)&quot;\\n<strong>输出:</strong> True\\n</pre>\\n\\n<p><strong>示例 3:</strong></p>\\n\\n<pre>\\n<strong>输入:</strong> &quot;(*))&quot;\\n<strong>输出:</strong> True\\n</pre>\\n\\n<p><strong>注意:</strong></p>\\n\\n<ol>\\n\\t<li>字符串大小将在 [1，100] 范围内。</li>\\n</ol>\\n","title":"678. 有效的括号字符串","relatedTags":["栈","贪心","字符串","动态规划"],"difficult":"Middle","lang":["javascript"],"uniqueID":"678","slug":"678-Valid-Parenthesis-String"}')}}]);