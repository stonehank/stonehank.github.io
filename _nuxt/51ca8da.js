(window.webpackJsonp=window.webpackJsonp||[]).push([[445],{1243:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">num</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> closestDivisors = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">num</span>) </span>{\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">isPrime</span>(<span class=\\"hljs-params\\">num</span>)</span>{\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">2</span>, s=<span class=\\"hljs-built_in\\">Math</span>.sqrt(num); i&lt;=s;i++)\\n      <span class=\\"hljs-keyword\\">if</span>(num % i === <span class=\\"hljs-number\\">0</span>) <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>; \\n    <span class=\\"hljs-keyword\\">return</span> num &gt; <span class=\\"hljs-number\\">1</span>;\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> a=num+<span class=\\"hljs-number\\">1</span>\\n  <span class=\\"hljs-keyword\\">let</span> b=num+<span class=\\"hljs-number\\">2</span>\\n  <span class=\\"hljs-keyword\\">if</span>(isPrime(a) &amp;&amp; isPrime(b))<span class=\\"hljs-keyword\\">return</span> [a,<span class=\\"hljs-number\\">1</span>]\\n  <span class=\\"hljs-keyword\\">let</span> [a1,a2,gapA]=calc(a)\\n  <span class=\\"hljs-keyword\\">let</span> [b1,b2,gapB]=calc(b)\\n  <span class=\\"hljs-keyword\\">if</span>(gapA&lt;gapB)<span class=\\"hljs-keyword\\">return</span> [a1,a2]\\n  <span class=\\"hljs-keyword\\">return</span> [b1,b2]\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">calc</span>(<span class=\\"hljs-params\\">num</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> mid=<span class=\\"hljs-built_in\\">Math</span>.ceil(<span class=\\"hljs-built_in\\">Math</span>.sqrt(num))\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=mid;i&gt;=<span class=\\"hljs-number\\">1</span>;i--){\\n      <span class=\\"hljs-keyword\\">if</span>(num % i===<span class=\\"hljs-number\\">0</span>){\\n        <span class=\\"hljs-keyword\\">return</span> [i,num/i,<span class=\\"hljs-built_in\\">Math</span>.abs(num/i-i)]\\n      }\\n    }\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"closest-divisors","created_at":"2020-02-23","timeArr":[2020,1,23,10,58,21,0],"hasThinking":false,"content":"<p>给你一个整数&nbsp;<code>num</code>，请你找出同时满足下面全部要求的两个整数：</p>\\n\\n<ul>\\n\\t<li>两数乘积等于 &nbsp;<code>num + 1</code>&nbsp;或&nbsp;<code>num + 2</code></li>\\n\\t<li>以绝对差进行度量，两数大小最接近</li>\\n</ul>\\n\\n<p>你可以按任意顺序返回这两个整数。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>num = 8\\n<strong>输出：</strong>[3,3]\\n<strong>解释：</strong>对于 num + 1 = 9，最接近的两个因数是 3 &amp; 3；对于 num + 2 = 10, 最接近的两个因数是 2 &amp; 5，因此返回 3 &amp; 3 。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>num = 123\\n<strong>输出：</strong>[5,25]\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>num = 999\\n<strong>输出：</strong>[40,25]\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= num &lt;= 10^9</code></li>\\n</ul>\\n","title":"1362. 最接近的因数","relatedTags":["数学"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1362","slug":"1362-Closest-Divisors"}')}}]);