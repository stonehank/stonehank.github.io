(window.webpackJsonp=window.webpackJsonp||[]).push([[211],{1009:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">A</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">K</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> longestOnes = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">A, K</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> aux=[]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;A.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> count=<span class=\\"hljs-number\\">1</span>\\n    <span class=\\"hljs-keyword\\">let</span> cur=A[i]\\n    <span class=\\"hljs-keyword\\">let</span> nxtID=i+<span class=\\"hljs-number\\">1</span>\\n    <span class=\\"hljs-keyword\\">while</span>(A[nxtID]==cur){\\n      count++\\n      nxtID++\\n    }\\n    aux.push([cur,count])\\n    i=nxtID<span class=\\"hljs-number\\">-1</span>\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> mem={}\\n  <span class=\\"hljs-keyword\\">let</span> maxLen=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">dfs</span>(<span class=\\"hljs-params\\">start,rest,len</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(start===aux.length){\\n       maxLen=<span class=\\"hljs-built_in\\">Math</span>.max(maxLen,len+rest)\\n      <span class=\\"hljs-keyword\\">return</span>\\n    }\\n    <span class=\\"hljs-keyword\\">if</span>(rest===<span class=\\"hljs-number\\">0</span>){\\n        <span class=\\"hljs-keyword\\">if</span>(start&lt;aux.length &amp;&amp; aux[start][<span class=\\"hljs-number\\">0</span>]===<span class=\\"hljs-number\\">1</span>){\\n          len+=aux[start][<span class=\\"hljs-number\\">1</span>]\\n        }\\n      maxLen=<span class=\\"hljs-built_in\\">Math</span>.max(maxLen,len)\\n    }\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=start;i&lt;aux.length;i++){\\n      \\n      <span class=\\"hljs-keyword\\">let</span> [num,count]=aux[i]\\n      <span class=\\"hljs-keyword\\">if</span>(num===<span class=\\"hljs-number\\">0</span>){\\n        <span class=\\"hljs-keyword\\">if</span>(count&gt;rest)<span class=\\"hljs-keyword\\">continue</span>\\n        <span class=\\"hljs-keyword\\">let</span> extra=<span class=\\"hljs-number\\">0</span>\\n\\n        <span class=\\"hljs-keyword\\">if</span>(i&gt;<span class=\\"hljs-number\\">0</span> &amp;&amp; aux[i<span class=\\"hljs-number\\">-1</span>][<span class=\\"hljs-number\\">0</span>]===<span class=\\"hljs-number\\">1</span>){\\n          extra+=aux[i<span class=\\"hljs-number\\">-1</span>][<span class=\\"hljs-number\\">1</span>]\\n        }\\n\\n        dfs(i+<span class=\\"hljs-number\\">1</span>,rest-count,len+count+extra)\\n      }\\n    }\\n  }\\n  dfs(<span class=\\"hljs-number\\">0</span>,K,<span class=\\"hljs-number\\">0</span>)\\n  <span class=\\"hljs-keyword\\">return</span> maxLen\\n};\\n</code></pre>\\n","<pre class=\\"hljs\\"><code><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Solution</span><span class=\\"hljs-params\\">(object)</span>:</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">longestOnes</span><span class=\\"hljs-params\\">(self, A, k)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type A: List[int]\\n        :type K: int\\n        :rtype: int\\n        \\"\\"\\"</span>\\n        l = len(A)\\n        zero = <span class=\\"hljs-number\\">0</span>\\n        lo,hi = <span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">0</span>\\n        res = <span class=\\"hljs-number\\">0</span>\\n        <span class=\\"hljs-keyword\\">for</span> hi <span class=\\"hljs-keyword\\">in</span> range(l):\\n            <span class=\\"hljs-keyword\\">if</span> A[hi] == <span class=\\"hljs-number\\">0</span>:\\n                zero += <span class=\\"hljs-number\\">1</span>\\n            <span class=\\"hljs-keyword\\">while</span> zero &gt; k:               \\n                <span class=\\"hljs-keyword\\">if</span> A[lo] == <span class=\\"hljs-number\\">0</span>:\\n                    zero -= <span class=\\"hljs-number\\">1</span>\\n                lo += <span class=\\"hljs-number\\">1</span>\\n            res = max(res, hi - lo + <span class=\\"hljs-number\\">1</span>)\\n            \\n        <span class=\\"hljs-keyword\\">return</span> res\\n</code></pre>\\n"],"querySlug":"max-consecutive-ones-iii","hasThinking":false,"content":"<p>给定一个由若干 <code>0</code> 和 <code>1</code> 组成的数组&nbsp;<code>A</code>，我们最多可以将&nbsp;<code>K</code>&nbsp;个值从 0 变成 1 。</p>\\n\\n<p>返回仅包含 1 的最长（连续）子数组的长度。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>A = [1,1,1,0,0,0,1,1,1,1,0], K = 2\\n<strong>输出：</strong>6\\n<strong>解释： </strong>\\n[1,1,1,0,0,<strong>1</strong>,1,1,1,1,<strong>1</strong>]\\n粗体数字从 0 翻转到 1，最长的子数组长度为 6。</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>A = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], K = 3\\n<strong>输出：</strong>10\\n<strong>解释：</strong>\\n[0,0,1,1,<strong>1</strong>,<strong>1</strong>,1,1,1,<strong>1</strong>,1,1,0,0,0,1,1,1,1]\\n粗体数字从 0 翻转到 1，最长的子数组长度为 10。</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ol>\\n\\t<li><code>1 &lt;= A.length &lt;= 20000</code></li>\\n\\t<li><code>0 &lt;= K &lt;= A.length</code></li>\\n\\t<li><code>A[i]</code> 为&nbsp;<code>0</code>&nbsp;或&nbsp;<code>1</code>&nbsp;</li>\\n</ol>\\n","title":"1004. 最大连续1的个数 III","relatedTags":["数组","二分查找","前缀和","滑动窗口"],"difficult":"Middle","lang":["javascript","python"],"uniqueID":"1004","slug":"1004-Max-Consecutive-Ones-III"}')}}]);