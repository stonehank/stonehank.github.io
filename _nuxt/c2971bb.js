(window.webpackJsonp=window.webpackJsonp||[]).push([[1038],{1836:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Initialize your data structure here.\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> MagicDictionary = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{\\n  <span class=\\"hljs-keyword\\">this</span>.dicts=[]\\n};\\n\\n<span class=\\"hljs-comment\\">/**\\n * Build a dictionary through a list of words \\n * @param {string[]} dict\\n * @return {void}\\n */</span>\\nMagicDictionary.prototype.buildDict = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">dict</span>) </span>{\\n  <span class=\\"hljs-keyword\\">this</span>.dicts=<span class=\\"hljs-keyword\\">this</span>.dicts.concat(dict)\\n};\\n\\n<span class=\\"hljs-comment\\">/**\\n * Returns if there is any word in the trie that equals to the given word after modifying exactly one character \\n * @param {string} word\\n * @return {boolean}\\n */</span>\\nMagicDictionary.prototype.search = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">word</span>) </span>{\\n\\n  <span class=\\"hljs-keyword\\">let</span> diff=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;<span class=\\"hljs-keyword\\">this</span>.dicts.length;j++){\\n    <span class=\\"hljs-keyword\\">let</span> d=<span class=\\"hljs-keyword\\">this</span>.dicts[j]\\n    <span class=\\"hljs-keyword\\">if</span>(word.length!==d.length)<span class=\\"hljs-keyword\\">continue</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> k=<span class=\\"hljs-number\\">0</span>;k&lt;d.length;k++){\\n      <span class=\\"hljs-keyword\\">if</span>(word[k]!==d[k])diff++\\n      <span class=\\"hljs-keyword\\">if</span>(diff&gt;<span class=\\"hljs-number\\">1</span>)<span class=\\"hljs-keyword\\">break</span>\\n    }\\n    <span class=\\"hljs-keyword\\">if</span>(diff===<span class=\\"hljs-number\\">1</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n    diff=<span class=\\"hljs-number\\">0</span>\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n};\\n\\n<span class=\\"hljs-comment\\">/** \\n * Your MagicDictionary object will be instantiated and called as such:\\n * var obj = new MagicDictionary()\\n * obj.buildDict(dict)\\n * var param_2 = obj.search(word)\\n */</span>\\n</code></pre>\\n"],"querySlug":"implement-magic-dictionary","created_at":"2019-04-06","timeArr":[2019,3,6,14,25,32,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>这道题本身在测试量比较小的情况下，<code>search</code>时间复杂度可以是<code>O(n)</code>，<code>n</code>为<code>dict</code>的长度，空间复杂度也是<code>O(n)</code></p>\\n<p>每次<code>search</code>，检查每一个长度相同的<code>dict[i]</code>，如果发现不同的<code>diff</code>只有1处，则返回<code>true</code>。</p>\\n<ul>\\n<li>进阶</li>\\n</ul>\\n<p>如果在测试量更大的情况，那么需要构建一个<code>hash</code>，这个<code>hash</code>保存了<code>dict</code>中所有可能的值；</p>\\n<p>例如：<code>bass</code>，我们需要保存的不是<code>bass</code>，而是<code>*ass</code>，<code>b*ss</code>，<code>ba*s</code>，<code>bas*</code>这4个。</p>\\n<p>而在<code>search</code>中，对于<code>word</code>，我们先将它的可能值算出<code>candidates</code>，然后遍历<code>candidates</code>，如果<code>hash[candidates[i]]</code>存在，返回<code>true</code>。</p>\\n<p>这种情况下，<code>search</code>的时间复杂度是<code>O(m)</code>，<code>m</code>是<code>dict[i]</code>的长度，空间复杂度是<code>O(mn)</code>，<code>n</code>是<code>dict</code>的长度。</p>\\n","content":"<p>设计一个使用单词列表进行初始化的数据结构，单词列表中的单词 <strong>互不相同</strong> 。 如果给出一个单词，请判定能否只将这个单词中<strong>一个</strong>字母换成另一个字母，使得所形成的新单词存在于你构建的字典中。</p>\\n\\n<p>实现 <code>MagicDictionary</code> 类：</p>\\n\\n<ul>\\n\\t<li><code>MagicDictionary()</code> 初始化对象</li>\\n\\t<li><code>void buildDict(String[] dictionary)</code> 使用字符串数组 <code>dictionary</code> 设定该数据结构，<code>dictionary</code> 中的字符串互不相同</li>\\n\\t<li><code>bool search(String searchWord)</code> 给定一个字符串 <code>searchWord</code> ，判定能否只将字符串中<strong> 一个 </strong>字母换成另一个字母，使得所形成的新字符串能够与字典中的任一字符串匹配。如果可以，返回 <code>true</code> ；否则，返回 <code>false</code> 。</li>\\n</ul>\\n\\n<p> </p>\\n\\n<div class=\\"top-view__1vxA\\">\\n<div class=\\"original__bRMd\\">\\n<div>\\n<p><strong>示例：</strong></p>\\n\\n<pre>\\n<strong>输入</strong>\\n[\\"MagicDictionary\\", \\"buildDict\\", \\"search\\", \\"search\\", \\"search\\", \\"search\\"]\\n[[], [[\\"hello\\", \\"leetcode\\"]], [\\"hello\\"], [\\"hhllo\\"], [\\"hell\\"], [\\"leetcoded\\"]]\\n<strong>输出</strong>\\n[null, null, false, true, false, false]\\n\\n<strong>解释</strong>\\nMagicDictionary magicDictionary = new MagicDictionary();\\nmagicDictionary.buildDict([\\"hello\\", \\"leetcode\\"]);\\nmagicDictionary.search(\\"hello\\"); // 返回 False\\nmagicDictionary.search(\\"hhllo\\"); // 将第二个 \'h\' 替换为 \'e\' 可以匹配 \\"hello\\" ，所以返回 True\\nmagicDictionary.search(\\"hell\\"); // 返回 False\\nmagicDictionary.search(\\"leetcoded\\"); // 返回 False\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= dictionary.length <= 100</code></li>\\n\\t<li><code>1 <= dictionary[i].length <= 100</code></li>\\n\\t<li><code>dictionary[i]</code> 仅由小写英文字母组成</li>\\n\\t<li><code>dictionary</code> 中的所有字符串 <strong>互不相同</strong></li>\\n\\t<li><code>1 <= searchWord.length <= 100</code></li>\\n\\t<li><code>searchWord</code> 仅由小写英文字母组成</li>\\n\\t<li><code>buildDict</code> 仅在 <code>search</code> 之前调用一次</li>\\n\\t<li>最多调用 <code>100</code> 次 <code>search</code></li>\\n</ul>\\n</div>\\n</div>\\n</div>\\n","title":"676. 实现一个魔法字典","relatedTags":["设计","字典树","哈希表","字符串"],"difficult":"Middle","lang":["javascript"],"uniqueID":"676","slug":"676-Implement-Magic-Dictionary"}')}}]);