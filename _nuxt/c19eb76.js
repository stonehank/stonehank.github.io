(window.webpackJsonp=window.webpackJsonp||[]).push([[840],{1638:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * // Definition for a Node.\\n * function Node(val,prev,next,child) {\\n *    this.val = val;\\n *    this.prev = prev;\\n *    this.next = next;\\n *    this.child = child;\\n * };\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{Node}</span> <span class=\\"hljs-variable\\">head</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{Node}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> flatten = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">head</span>) </span>{\\n  <span class=\\"hljs-keyword\\">return</span> _flatten(head)[<span class=\\"hljs-number\\">0</span>]\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">_flatten</span>(<span class=\\"hljs-params\\">head</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> root=head,tail=<span class=\\"hljs-literal\\">null</span>\\n    <span class=\\"hljs-keyword\\">while</span>(root){\\n      <span class=\\"hljs-keyword\\">let</span> nxt=root.next\\n      <span class=\\"hljs-keyword\\">if</span>(root.child){\\n        <span class=\\"hljs-keyword\\">let</span> [subHead,subTail]=_flatten(root.child)\\n        root.child=<span class=\\"hljs-literal\\">null</span>\\n        root.next=subHead\\n        subHead.prev=root\\n        subTail.next=nxt\\n        <span class=\\"hljs-keyword\\">if</span>(nxt)nxt.prev=subTail\\n        <span class=\\"hljs-keyword\\">else</span> tail=subTail\\n      }\\n      <span class=\\"hljs-keyword\\">if</span>(!nxt &amp;&amp; !tail)tail=root\\n      root=nxt\\n    }    \\n    <span class=\\"hljs-keyword\\">return</span> [head,tail]\\n  }\\n\\n};\\n</code></pre>\\n"],"querySlug":"flatten-a-multilevel-doubly-linked-list","created_at":"2019-04-10","timeArr":[2019,3,10,17,26,18,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>遍历<code>root</code>，发现存在<code>child</code>，则递归<code>child</code>，2个注意的地方：</p>\\n<ol>\\n<li>每次递归处理完<code>child</code>，需要将<code>root.child</code>设置为<code>null</code>。</li>\\n<li>每次递归处理完<code>child</code>的返回值需要一个头，一个尾，分别**双向连接*处理<code>child</code>之前的<code>root</code>和<code>root.next</code>。</li>\\n</ol>\\n","content":"<p>多级双向链表中，除了指向下一个节点和前一个节点指针之外，它还有一个子链表指针，可能指向单独的双向链表。这些子列表也可能会有一个或多个自己的子项，依此类推，生成多级数据结构，如下面的示例所示。</p>\\n\\n<p>给你位于列表第一级的头节点，请你扁平化列表，使所有结点出现在单级双链表中。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>head = [1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]\\n<strong>输出：</strong>[1,2,3,7,8,11,12,9,10,4,5,6]\\n<strong>解释：\\n</strong>\\n输入的多级列表如下图所示：\\n\\n<img src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/multilevellinkedlist.png\\" style=\\"height: 363px; width: 640px;\\">\\n\\n扁平化后的链表如下图：\\n\\n<img src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/multilevellinkedlistflattened.png\\" style=\\"height: 80px; width: 1100px;\\">\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>head = [1,2,null,3]\\n<strong>输出：</strong>[1,3,2]\\n<strong>解释：\\n\\n</strong>输入的多级列表如下图所示：\\n\\n  1---2---NULL\\n  |\\n  3---NULL\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>head = []\\n<strong>输出：</strong>[]\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>如何表示测试用例中的多级链表？</strong></p>\\n\\n<p>以 <strong>示例 1</strong> 为例：</p>\\n\\n<pre> 1---2---3---4---5---6--NULL\\n         |\\n         7---8---9---10--NULL\\n             |\\n             11--12--NULL</pre>\\n\\n<p>序列化其中的每一级之后：</p>\\n\\n<pre>[1,2,3,4,5,6,null]\\n[7,8,9,10,null]\\n[11,12,null]\\n</pre>\\n\\n<p>为了将每一级都序列化到一起，我们需要每一级中添加值为 null 的元素，以表示没有节点连接到上一级的上级节点。</p>\\n\\n<pre>[1,2,3,4,5,6,null]\\n[null,null,7,8,9,10,null]\\n[null,11,12,null]\\n</pre>\\n\\n<p>合并所有序列化结果，并去除末尾的 null 。</p>\\n\\n<pre>[1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li>节点数目不超过 1000</li>\\n\\t<li><code>1 &lt;= Node.val &lt;= 10^5</code></li>\\n</ul>\\n","title":"430. 扁平化多级双向链表","relatedTags":["深度优先搜索","链表","双向链表"],"difficult":"Middle","lang":["javascript"],"uniqueID":"430","slug":"430-Flatten-a-Multilevel-Doubly-Linked-List"}')}}]);