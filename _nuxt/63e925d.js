(window.webpackJsonp=window.webpackJsonp||[]).push([[1184],{1982:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">grid</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> largestIsland = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">grid</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> islandId=<span class=\\"hljs-number\\">1</span>\\n  <span class=\\"hljs-keyword\\">let</span> m=grid.length,n=grid[<span class=\\"hljs-number\\">0</span>].length\\n  <span class=\\"hljs-keyword\\">let</span> moves=[[<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">0</span>],[<span class=\\"hljs-number\\">1</span>,<span class=\\"hljs-number\\">0</span>],[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">-1</span>],[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">1</span>]]\\n  <span class=\\"hljs-keyword\\">let</span> hash={}\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;m;i++){\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;n;j++){\\n      <span class=\\"hljs-keyword\\">if</span>(grid[i][j]===<span class=\\"hljs-number\\">1</span>){\\n        islandId++\\n        hash[islandId]=[]\\n        dfs([i,j],islandId,hash[islandId])\\n      }\\n    }\\n  }\\n  \\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">dfs</span>(<span class=\\"hljs-params\\">[x,y],newName,arr</span>)</span>{\\n    grid[x][y]=newName\\n    arr.push([x,y])\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> [dx,dy] <span class=\\"hljs-keyword\\">of</span> moves){\\n      <span class=\\"hljs-keyword\\">let</span> nx=x+dx,ny=y+dy\\n      <span class=\\"hljs-keyword\\">if</span>(nx&lt;<span class=\\"hljs-number\\">0</span> || ny&lt;<span class=\\"hljs-number\\">0</span> || nx&gt;=m || ny&gt;=n)<span class=\\"hljs-keyword\\">continue</span>\\n      <span class=\\"hljs-keyword\\">if</span>(grid[nx][ny]!==<span class=\\"hljs-number\\">1</span>)<span class=\\"hljs-keyword\\">continue</span>\\n      dfs([nx,ny],newName,arr)\\n    }\\n  }\\n  \\n  <span class=\\"hljs-keyword\\">let</span> vals=<span class=\\"hljs-built_in\\">Object</span>.values(hash)\\n  <span class=\\"hljs-keyword\\">if</span>(vals.length===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">1</span>\\n  <span class=\\"hljs-keyword\\">if</span>(vals.length===<span class=\\"hljs-number\\">1</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-built_in\\">Math</span>.min(m*n,vals[<span class=\\"hljs-number\\">0</span>].length+<span class=\\"hljs-number\\">1</span>)\\n  \\n  <span class=\\"hljs-keyword\\">let</span> connected=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> k <span class=\\"hljs-keyword\\">in</span> hash){\\n    <span class=\\"hljs-keyword\\">let</span> step=<span class=\\"hljs-number\\">0</span>,arr=hash[k].slice()\\n    <span class=\\"hljs-keyword\\">while</span>(arr.length&gt;<span class=\\"hljs-number\\">0</span>){\\n      <span class=\\"hljs-keyword\\">if</span>(step++===<span class=\\"hljs-number\\">2</span>)<span class=\\"hljs-keyword\\">break</span>\\n      <span class=\\"hljs-keyword\\">let</span> len=arr.length\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;len;i++){\\n        <span class=\\"hljs-keyword\\">let</span> [x,y]=arr.shift()\\n        <span class=\\"hljs-keyword\\">let</span> dest=<span class=\\"hljs-keyword\\">new</span> <span class=\\"hljs-built_in\\">Set</span>()\\n        <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> [dx,dy] <span class=\\"hljs-keyword\\">of</span> moves){\\n          <span class=\\"hljs-keyword\\">let</span> nx=x+dx,ny=y+dy\\n          <span class=\\"hljs-keyword\\">if</span>(nx&lt;<span class=\\"hljs-number\\">0</span> || ny&lt;<span class=\\"hljs-number\\">0</span> || nx&gt;=m || ny&gt;=n)<span class=\\"hljs-keyword\\">continue</span>\\n          <span class=\\"hljs-keyword\\">if</span>(grid[nx][ny]===+k)<span class=\\"hljs-keyword\\">continue</span>\\n          <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(grid[nx][ny]===<span class=\\"hljs-number\\">0</span>)arr.push([nx,ny])\\n          <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(grid[nx][ny]!==+k)dest.add(grid[nx][ny])\\n        } \\n        <span class=\\"hljs-keyword\\">if</span>(step&lt;<span class=\\"hljs-number\\">2</span>)<span class=\\"hljs-keyword\\">continue</span>\\n        <span class=\\"hljs-keyword\\">if</span>(dest.size===<span class=\\"hljs-number\\">0</span>)connected=<span class=\\"hljs-built_in\\">Math</span>.max(connected,hash[k].length+<span class=\\"hljs-number\\">1</span>)\\n        <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(dest.size&gt;=<span class=\\"hljs-number\\">1</span>){\\n          <span class=\\"hljs-keyword\\">let</span> sum=<span class=\\"hljs-number\\">0</span>\\n          <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> s <span class=\\"hljs-keyword\\">of</span> dest)sum+=hash[s].length\\n          connected=<span class=\\"hljs-built_in\\">Math</span>.max(connected,hash[k].length+<span class=\\"hljs-number\\">1</span>+sum)\\n        }\\n      }   \\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> connected\\n};\\n</code></pre>\\n"],"querySlug":"making-a-large-island","created_at":"2019-04-10","timeArr":[2019,3,10,22,40,6,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>例如 :</p>\\n<pre class=\\"hljs\\"><code>[1,1,0]\\n[1,0,1]\\n[0,1,0]\\n</code></pre>\\n<ol>\\n<li>\\n<p>先使用dfs找出所有的岛，并且将其放置到一个Map(islands)中，并且改写grid</p>\\n<pre class=\\"hljs\\"><code>            [2,2,0]\\n   grid ==&gt; [2,0,3]\\n            [0,4,0]\\n</code></pre>\\n</li>\\n<li>\\n<p>检查islands，</p>\\n<p>如果length为0，说明一个岛都没有，返回1；</p>\\n<p>如果length为1，说明只有1个岛，返回这个岛的<code>length+1</code>或者<code>r*r</code>(<code>length+1&gt;r*r</code>的情况)</p>\\n</li>\\n<li>\\n<p>遍历islands，使用bfs走2步，走完2步后，如果存在不为0并且不是当前岛的，添加到<code>dest</code></p>\\n</li>\\n<li>\\n<p>检查dest</p>\\n<p>如果<code>dest.size===0</code>，说明没有能相互连接的2个岛，选择一个大的岛的<code>length+1</code></p>\\n<p>如果<code>dest.size&gt;=1</code>，说明至少有一个能相互连接的2个岛，选择最大的所有能连接的岛的<code>length+1</code></p>\\n</li>\\n</ol>\\n","content":"<p>给你一个大小为 <code>n x n</code> 二进制矩阵 <code>grid</code> 。<strong>最多</strong> 只能将一格 <code>0</code> 变成 <code>1</code> 。</p>\\n\\n<p>返回执行此操作后，<code>grid</code> 中最大的岛屿面积是多少？</p>\\n\\n<p><strong>岛屿</strong> 由一组上、下、左、右四个方向相连的 <code>1</code> 形成。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1:</strong></p>\\n\\n<pre>\\n<strong>输入: </strong>grid = [[1, 0], [0, 1]]\\n<strong>输出:</strong> 3\\n<strong>解释:</strong> 将一格0变成1，最终连通两个小岛得到面积为 3 的岛屿。\\n</pre>\\n\\n<p><strong>示例 2:</strong></p>\\n\\n<pre>\\n<strong>输入: </strong>grid =<strong> </strong>[[1, 1], [1, 0]]\\n<strong>输出:</strong> 4\\n<strong>解释:</strong> 将一格0变成1，岛屿的面积扩大为 4。</pre>\\n\\n<p><strong>示例 3:</strong></p>\\n\\n<pre>\\n<strong>输入: </strong>grid = [[1, 1], [1, 1]]\\n<strong>输出:</strong> 4\\n<strong>解释:</strong> 没有0可以让我们变成1，面积依然为 4。</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>n == grid.length</code></li>\\n\\t<li><code>n == grid[i].length</code></li>\\n\\t<li><code>1 <= n <= 500</code></li>\\n\\t<li><code>grid[i][j]</code> 为 <code>0</code> 或 <code>1</code></li>\\n</ul>\\n","title":"827. 最大人工岛","relatedTags":["深度优先搜索","广度优先搜索","并查集","数组","矩阵"],"difficult":"Hard","lang":["javascript"],"uniqueID":"827","slug":"827-Making-A-Large-Island"}')}}]);