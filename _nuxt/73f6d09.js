(window.webpackJsonp=window.webpackJsonp||[]).push([[354],{1152:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Solution</span><span class=\\"hljs-params\\">(object)</span>:</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">maxProfit</span><span class=\\"hljs-params\\">(self, prices)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type prices: List[int]\\n        :rtype: int\\n        \\"\\"\\"</span>\\n        <span class=\\"hljs-comment\\"># if not prices:return 0</span>\\n        <span class=\\"hljs-comment\\"># dp=[0]*len(prices)</span>\\n        <span class=\\"hljs-comment\\"># for i in range(1,len(prices)):</span>\\n        <span class=\\"hljs-comment\\">#   dp[i]=max(dp[i],dp[i-1]+prices[i]-prices[i-1])</span>\\n        <span class=\\"hljs-comment\\"># return max(dp)</span>\\n        <span class=\\"hljs-keyword\\">if</span> <span class=\\"hljs-keyword\\">not</span> prices:<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>\\n        N=len(prices)\\n        dp=[[<span class=\\"hljs-number\\">0</span>]*(N) <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(<span class=\\"hljs-number\\">2</span>)]\\n        <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(<span class=\\"hljs-number\\">1</span>,<span class=\\"hljs-number\\">2</span>):\\n          curMaxGap=float(<span class=\\"hljs-string\\">\'-inf\'</span>)\\n          <span class=\\"hljs-keyword\\">for</span> j <span class=\\"hljs-keyword\\">in</span> range(<span class=\\"hljs-number\\">1</span>,N):\\n            curMaxGap=max(curMaxGap,dp[i<span class=\\"hljs-number\\">-1</span>][j<span class=\\"hljs-number\\">-1</span>]-prices[j<span class=\\"hljs-number\\">-1</span>])\\n            dp[i][j]=max(dp[i][j<span class=\\"hljs-number\\">-1</span>],curMaxGap+prices[j])\\n        \\n        <span class=\\"hljs-keyword\\">return</span> dp[<span class=\\"hljs-number\\">-1</span>][<span class=\\"hljs-number\\">-1</span>]\\n</code></pre>\\n"],"querySlug":"best-time-to-buy-and-sell-stock","created_at":"2020-03-09","timeArr":[2020,2,9,22,37,7,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>对于每一天，</p>\\n<p>最大卖出收益为：</p>\\n<ul>\\n<li>上一次买入的+当前卖出的</li>\\n<li>当前不卖(即上一次卖出的)</li>\\n</ul>\\n<p>最大买入收益为：</p>\\n<ul>\\n<li>上一次买入的</li>\\n<li>购买今天的(<code>-prices[i]</code>)</li>\\n</ul>\\n<p>最后返回<code>sell</code>。</p>\\n","content":"<p>给定一个数组 <code>prices</code> ，它的第 <code>i</code> 个元素 <code>prices[i]</code> 表示一支给定股票第 <code>i</code> 天的价格。</p>\\n\\n<p>你只能选择 <strong>某一天</strong> 买入这只股票，并选择在 <strong>未来的某一个不同的日子</strong> 卖出该股票。设计一个算法来计算你所能获取的最大利润。</p>\\n\\n<p>返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 <code>0</code> 。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>[7,1,5,3,6,4]\\n<strong>输出：</strong>5\\n<strong>解释：</strong>在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。\\n     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>prices = [7,6,4,3,1]\\n<strong>输出：</strong>0\\n<strong>解释：</strong>在这种情况下, 没有交易完成, 所以最大利润为 0。\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= prices.length <= 10<sup>5</sup></code></li>\\n\\t<li><code>0 <= prices[i] <= 10<sup>4</sup></code></li>\\n</ul>\\n","title":"121. 买卖股票的最佳时机","relatedTags":["数组","动态规划"],"difficult":"Easy","lang":["python"],"uniqueID":"121","slug":"121-Best-Time-to-Buy-and-Sell-Stock"}')}}]);