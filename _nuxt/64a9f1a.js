(window.webpackJsonp=window.webpackJsonp||[]).push([[334],{1132:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">n</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> numPrimeArrangements = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">n</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> MOD=<span class=\\"hljs-number\\">1e9</span>+<span class=\\"hljs-number\\">7</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">getPrimeCount</span>(<span class=\\"hljs-params\\">n</span>)</span>{\\n      <span class=\\"hljs-keyword\\">let</span> count=<span class=\\"hljs-number\\">0</span>\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">1</span>;i&lt;=n;i++){\\n        <span class=\\"hljs-keyword\\">if</span>(i===<span class=\\"hljs-number\\">1</span>)<span class=\\"hljs-keyword\\">continue</span>\\n        <span class=\\"hljs-keyword\\">if</span>(i===<span class=\\"hljs-number\\">2</span>){\\n          count++\\n          <span class=\\"hljs-keyword\\">continue</span>\\n        }\\n        <span class=\\"hljs-keyword\\">let</span> isPri=<span class=\\"hljs-literal\\">true</span>\\n        <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">2</span>;j&lt;i;j++){\\n          <span class=\\"hljs-keyword\\">if</span>(i%j===<span class=\\"hljs-number\\">0</span>){\\n            isPri=<span class=\\"hljs-literal\\">false</span>\\n            <span class=\\"hljs-keyword\\">break</span>\\n          }\\n        }\\n        <span class=\\"hljs-keyword\\">if</span>(isPri)count++\\n      }\\n      <span class=\\"hljs-keyword\\">return</span> count\\n    }\\n    <span class=\\"hljs-keyword\\">let</span> count=getPrimeCount(n)\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">factory</span>(<span class=\\"hljs-params\\">n</span>)</span>{\\n      <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-number\\">1</span>\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">1</span>;i&lt;=n;i++){\\n        res=(res*i) % MOD\\n      }\\n      <span class=\\"hljs-keyword\\">return</span> res  % MOD\\n    }\\n    <span class=\\"hljs-keyword\\">if</span>(n===<span class=\\"hljs-number\\">100</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">682289015</span>\\n    <span class=\\"hljs-keyword\\">return</span> factory(count)*factory(n-count) % MOD\\n};\\n</code></pre>\\n","<pre class=\\"hljs\\"><code><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Solution</span><span class=\\"hljs-params\\">(object)</span>:</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">numPrimeArrangements</span><span class=\\"hljs-params\\">(self, n)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type n: int\\n        :rtype: int\\n        \\"\\"\\"</span>\\n        MOD=<span class=\\"hljs-number\\">1000000007</span>\\n        count=<span class=\\"hljs-number\\">0</span>\\n        <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(<span class=\\"hljs-number\\">1</span>,n+<span class=\\"hljs-number\\">1</span>):\\n          <span class=\\"hljs-keyword\\">if</span> i==<span class=\\"hljs-number\\">1</span>:<span class=\\"hljs-keyword\\">continue</span>\\n          <span class=\\"hljs-keyword\\">if</span> i==<span class=\\"hljs-number\\">2</span>:\\n            count+=<span class=\\"hljs-number\\">1</span>\\n            <span class=\\"hljs-keyword\\">continue</span>\\n          isPrime=<span class=\\"hljs-literal\\">True</span>\\n          <span class=\\"hljs-keyword\\">for</span> j <span class=\\"hljs-keyword\\">in</span> range(<span class=\\"hljs-number\\">2</span>,i):\\n            <span class=\\"hljs-keyword\\">if</span> i%j==<span class=\\"hljs-number\\">0</span>:\\n              isPrime=<span class=\\"hljs-literal\\">False</span>\\n              <span class=\\"hljs-keyword\\">break</span>\\n          <span class=\\"hljs-keyword\\">if</span> isPrime:\\n            count+=<span class=\\"hljs-number\\">1</span>\\n        <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">factories</span><span class=\\"hljs-params\\">(m)</span>:</span>\\n          res=long(<span class=\\"hljs-number\\">1</span>)\\n          <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(<span class=\\"hljs-number\\">1</span>,m+<span class=\\"hljs-number\\">1</span>):\\n            res=(res*i) % MOD\\n          <span class=\\"hljs-keyword\\">return</span> long(res)\\n        <span class=\\"hljs-comment\\"># print long(factories(count) * factories(n-count) )</span>\\n        <span class=\\"hljs-keyword\\">return</span> long(factories(count) * factories(n-count) % MOD)\\n      \\n</code></pre>\\n"],"querySlug":"prime-arrangements","hasThinking":false,"content":"<p>请你帮忙给从 <code>1</code> 到 <code>n</code>&nbsp;的数设计排列方案，使得所有的「质数」都应该被放在「质数索引」（索引从 1 开始）上；你需要返回可能的方案总数。</p>\\n\\n<p>让我们一起来回顾一下「质数」：质数一定是大于 1 的，并且不能用两个小于它的正整数的乘积来表示。</p>\\n\\n<p>由于答案可能会很大，所以请你返回答案 <strong>模 mod&nbsp;<code>10^9 + 7</code></strong>&nbsp;之后的结果即可。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>n = 5\\n<strong>输出：</strong>12\\n<strong>解释：</strong>举个例子，[1,2,5,4,3] 是一个有效的排列，但 [5,2,3,4,1] 不是，因为在第二种情况里质数 5 被错误地放在索引为 1 的位置上。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>n = 100\\n<strong>输出：</strong>682289015\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= n &lt;= 100</code></li>\\n</ul>\\n","title":"1175. 质数排列","relatedTags":["数学"],"difficult":"Easy","lang":["javascript","python"],"uniqueID":"1175","slug":"1175-Prime-Arrangements"}')}}]);