(window.webpackJsonp=window.webpackJsonp||[]).push([[415],{1213:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">word</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> minimumDistance = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">word</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> letter2p={}\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;<span class=\\"hljs-number\\">26</span>;i++){\\n    <span class=\\"hljs-keyword\\">let</span> x=<span class=\\"hljs-built_in\\">Math</span>.floor(i/<span class=\\"hljs-number\\">6</span>)\\n    <span class=\\"hljs-keyword\\">let</span> y=i % <span class=\\"hljs-number\\">6</span>\\n    letter2p[<span class=\\"hljs-built_in\\">String</span>.fromCharCode(i+<span class=\\"hljs-number\\">65</span>)]=[x,y]\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-literal\\">Infinity</span>\\n  <span class=\\"hljs-keyword\\">let</span> lf=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">let</span> rf=<span class=\\"hljs-number\\">1</span>\\n  <span class=\\"hljs-keyword\\">let</span> hash={}\\n\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">resolve</span>(<span class=\\"hljs-params\\">left,right</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(right&gt;=word.length)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">if</span>(hash[left+<span class=\\"hljs-string\\">\' \'</span>+right])<span class=\\"hljs-keyword\\">return</span> hash[left+<span class=\\"hljs-string\\">\' \'</span>+right]\\n\\n    <span class=\\"hljs-comment\\">// for(let j=right+1;j&lt;word.length;j++){</span>\\n    <span class=\\"hljs-keyword\\">let</span> minDis=<span class=\\"hljs-built_in\\">Math</span>.min(resolve(left,right+<span class=\\"hljs-number\\">1</span>)+getDis(right,right+<span class=\\"hljs-number\\">1</span>),resolve(right,right+<span class=\\"hljs-number\\">1</span>)+getDis(left,right+<span class=\\"hljs-number\\">1</span>))\\n    <span class=\\"hljs-comment\\">// }</span>\\n    <span class=\\"hljs-comment\\">// console.log(minDis,left,right,getDis(right,right+1))</span>\\n    hash[left+<span class=\\"hljs-string\\">\' \'</span>+right]=minDis\\n    <span class=\\"hljs-keyword\\">return</span> minDis\\n  }\\n  \\n  \\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=rf;i&lt;word.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> distance=getDisBetweenLeftRight(lf,i)\\n    res=<span class=\\"hljs-built_in\\">Math</span>.min(resolve(i<span class=\\"hljs-number\\">-1</span>,i)+distance,res)\\n    <span class=\\"hljs-comment\\">// console.log(lf,i,res,distance)</span>\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n  \\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">getDisBetweenLeftRight</span>(<span class=\\"hljs-params\\">lf,rf</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> last=lf\\n    <span class=\\"hljs-keyword\\">let</span> dis=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=lf+<span class=\\"hljs-number\\">1</span>;j&lt;rf;j++){\\n      dis+=getDis(last,j)\\n      last=j\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> dis\\n  }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">getDis</span>(<span class=\\"hljs-params\\">i1,i2</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(i2&gt;=word.length)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">let</span> l1=word[i1]\\n    <span class=\\"hljs-keyword\\">let</span> l2=word[i2]\\n    <span class=\\"hljs-comment\\">// console.log(letter2p[l2],l2,i2)</span>\\n    <span class=\\"hljs-keyword\\">let</span> [x1,y1]=letter2p[l1]\\n    <span class=\\"hljs-keyword\\">let</span> [x2,y2]=letter2p[l2]\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-built_in\\">Math</span>.abs(x1-x2)+<span class=\\"hljs-built_in\\">Math</span>.abs(y1-y2)\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"minimum-distance-to-type-a-word-using-two-fingers","created_at":"2020-01-12","timeArr":[2020,0,12,11,48,0,0],"hasThinking":false,"content":"<p><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/11/leetcode_keyboard.png\\" style=\\"height: 250px; width: 417px;\\"></p>\\n\\n<p>二指输入法定制键盘在 XY 平面上的布局如上图所示，其中每个大写英文字母都位于某个坐标处，例如字母&nbsp;<strong>A</strong>&nbsp;位于坐标&nbsp;<strong>(0,0)</strong>，字母&nbsp;<strong>B</strong>&nbsp;位于坐标&nbsp;<strong>(0,1)</strong>，字母&nbsp;<strong>P</strong>&nbsp;位于坐标&nbsp;<strong>(2,3)</strong>&nbsp;且字母 <strong>Z</strong>&nbsp;位于坐标&nbsp;<strong>(4,1)</strong>。</p>\\n\\n<p>给你一个待输入字符串&nbsp;<code>word</code>，请你计算并返回在仅使用两根手指的情况下，键入该字符串需要的最小移动总距离。坐标&nbsp;<strong>(x<sub>1</sub>,y<sub>1</sub>)</strong> 和 <strong>(x<sub>2</sub>,y<sub>2</sub>)</strong> 之间的距离是&nbsp;<strong>|x<sub>1</sub> - x<sub>2</sub>| + |y<sub>1</sub> - y<sub>2</sub>|</strong>。&nbsp;</p>\\n\\n<p>注意，两根手指的起始位置是零代价的，不计入移动总距离。你的两根手指的起始位置也不必从首字母或者前两个字母开始。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>word = &quot;CAKE&quot;\\n<strong>输出：</strong>3\\n<strong>解释： \\n</strong>使用两根手指输入 &quot;CAKE&quot; 的最佳方案之一是： \\n手指 1 在字母 &#39;C&#39; 上 -&gt; 移动距离 = 0 \\n手指 1 在字母 &#39;A&#39; 上 -&gt; 移动距离 = 从字母 &#39;C&#39; 到字母 &#39;A&#39; 的距离 = 2 \\n手指 2 在字母 &#39;K&#39; 上 -&gt; 移动距离 = 0 \\n手指 2 在字母 &#39;E&#39; 上 -&gt; 移动距离 = 从字母 &#39;K&#39; 到字母 &#39;E&#39; 的距离  = 1 \\n总距离 = 3\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>word = &quot;HAPPY&quot;\\n<strong>输出：</strong>6\\n<strong>解释： </strong>\\n使用两根手指输入 &quot;HAPPY&quot; 的最佳方案之一是：\\n手指 1 在字母 &#39;H&#39; 上 -&gt; 移动距离 = 0\\n手指 1 在字母 &#39;A&#39; 上 -&gt; 移动距离 = 从字母 &#39;H&#39; 到字母 &#39;A&#39; 的距离 = 2\\n手指 2 在字母 &#39;P&#39; 上 -&gt; 移动距离 = 0\\n手指 2 在字母 &#39;P&#39; 上 -&gt; 移动距离 = 从字母 &#39;P&#39; 到字母 &#39;P&#39; 的距离 = 0\\n手指 1 在字母 &#39;Y&#39; 上 -&gt; 移动距离 = 从字母 &#39;A&#39; 到字母 &#39;Y&#39; 的距离 = 4\\n总距离 = 6\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>word = &quot;NEW&quot;\\n<strong>输出：</strong>3\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre><strong>输入：</strong>word = &quot;YEAR&quot;\\n<strong>输出：</strong>7\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>2 &lt;= word.length &lt;= 300</code></li>\\n\\t<li>每个 <code>word[i]</code>&nbsp;都是一个大写英文字母。</li>\\n</ul>\\n","title":"1320. 二指输入的的最小距离","relatedTags":["字符串","动态规划"],"difficult":"Hard","lang":["javascript"],"uniqueID":"1320","slug":"1320-Minimum-Distance-to-Type-a-Word-Using-Two-Fingers"}')}}]);