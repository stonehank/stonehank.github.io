(window.webpackJsonp=window.webpackJsonp||[]).push([[304],{1102:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string[]}</span> <span class=\\"hljs-variable\\">req_skills</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string[][]}</span> <span class=\\"hljs-variable\\">people</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> smallestSufficientTeam = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">req_skills, people</span>) </span>{\\n\\n  <span class=\\"hljs-keyword\\">let</span> skill_len=req_skills.length\\n  \\n  <span class=\\"hljs-comment\\">// 将people转换为id的模式</span>\\n  <span class=\\"hljs-keyword\\">let</span> id_people=[]\\n  <span class=\\"hljs-keyword\\">let</span> hash={}\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;skill_len;i++){\\n    hash[req_skills[i]]=i\\n  }\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;people.length;i++){\\n    id_people[i]=[]\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;people[i].length;j++){\\n      id_people[i][j]=hash[people[i][j]]\\n    }\\n  }\\n\\n  <span class=\\"hljs-comment\\">// 过滤掉不可能的选取的人员</span>\\n  <span class=\\"hljs-keyword\\">let</span> skip={}\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;id_people.length;i++){\\n    <span class=\\"hljs-keyword\\">if</span>(skip[i])<span class=\\"hljs-keyword\\">continue</span>\\n    <span class=\\"hljs-keyword\\">let</span> skills=<span class=\\"hljs-built_in\\">Array</span>(skill_len).fill(<span class=\\"hljs-number\\">0</span>)\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;id_people[i].length;j++){\\n      <span class=\\"hljs-keyword\\">let</span> curId=id_people[i][j]\\n      skills[curId]++\\n    }\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> k=i+<span class=\\"hljs-number\\">1</span>;k&lt;id_people.length;k++){\\n      <span class=\\"hljs-keyword\\">if</span>(skip[k])<span class=\\"hljs-keyword\\">continue</span>\\n      <span class=\\"hljs-keyword\\">let</span> needSkip=<span class=\\"hljs-literal\\">true</span>\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> l=<span class=\\"hljs-number\\">0</span>;l&lt;id_people[k].length;l++){\\n        <span class=\\"hljs-keyword\\">let</span> id=id_people[k][l]\\n        <span class=\\"hljs-keyword\\">if</span>(skills[id]===<span class=\\"hljs-number\\">0</span>){\\n          needSkip=<span class=\\"hljs-literal\\">false</span>\\n          <span class=\\"hljs-keyword\\">break</span>\\n        }\\n      }\\n      <span class=\\"hljs-keyword\\">if</span>(needSkip){\\n        skip[k]=<span class=\\"hljs-literal\\">true</span>\\n      }\\n    }\\n  }\\n\\n  <span class=\\"hljs-comment\\">// 构造精简后的人员，并且保存对应的index关系</span>\\n  <span class=\\"hljs-keyword\\">let</span> slim_people=[]\\n  <span class=\\"hljs-keyword\\">let</span> idHash={}\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;id_people.length;i++){\\n    <span class=\\"hljs-keyword\\">if</span>(skip[i])<span class=\\"hljs-keyword\\">continue</span>\\n    idHash[slim_people.length]=i\\n    slim_people.push(id_people[i])\\n  }\\n\\n  <span class=\\"hljs-comment\\">// 执行回溯</span>\\n  <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-literal\\">Infinity</span>\\n  <span class=\\"hljs-keyword\\">let</span> remain={}\\n  <span class=\\"hljs-keyword\\">let</span> ans=<span class=\\"hljs-literal\\">null</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;slim_people.length;i++){\\n    remain[i]=<span class=\\"hljs-literal\\">false</span>\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> init_select=<span class=\\"hljs-built_in\\">Array</span>(skill_len).fill(<span class=\\"hljs-number\\">0</span>)\\n\\n  backtrack(<span class=\\"hljs-number\\">0</span>,init_select,<span class=\\"hljs-number\\">0</span>,remain)\\n\\n  <span class=\\"hljs-keyword\\">return</span> ans\\n\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">backtrack</span>(<span class=\\"hljs-params\\">id,select,count,remain</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(count&gt;=res)<span class=\\"hljs-keyword\\">return</span>\\n    <span class=\\"hljs-keyword\\">let</span> done=<span class=\\"hljs-literal\\">true</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;select.length;i++){\\n      <span class=\\"hljs-keyword\\">if</span>(select[i]===<span class=\\"hljs-number\\">0</span>){\\n        done=<span class=\\"hljs-literal\\">false</span>\\n      }\\n    }\\n    <span class=\\"hljs-keyword\\">if</span>(done){\\n      res=count\\n      <span class=\\"hljs-keyword\\">let</span> _res_=[]\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> k <span class=\\"hljs-keyword\\">in</span> remain){\\n        <span class=\\"hljs-keyword\\">if</span>(remain[k])_res_.push(idHash[k])\\n      }\\n      ans=_res_\\n      <span class=\\"hljs-keyword\\">return</span>\\n    }\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> k=id;k&lt;slim_people.length;k++){\\n      <span class=\\"hljs-keyword\\">let</span> arr=slim_people[k]\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;arr.length;i++){\\n        select[arr[i]]++\\n      }\\n      remain[k]=<span class=\\"hljs-literal\\">true</span>\\n      backtrack(k+<span class=\\"hljs-number\\">1</span>,select,count+<span class=\\"hljs-number\\">1</span>,remain)\\n      remain[k]=<span class=\\"hljs-literal\\">false</span>\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;arr.length;i++){\\n        select[arr[i]]--\\n      }\\n    }\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"smallest-sufficient-team","created_at":"2019-07-14","timeArr":[2019,6,14,12,28,44,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<ol>\\n<li>\\n<p>将<code>people</code>的内容转换为<code>index</code>。</p>\\n<p>例如：</p>\\n<p><code>req_skills = [&quot;java&quot;,&quot;nodejs&quot;,&quot;reactjs&quot;]</code></p>\\n<p>转换前:</p>\\n<p><code>people = [[&quot;java&quot;],[&quot;nodejs&quot;],[&quot;nodejs&quot;,&quot;reactjs&quot;]]</code></p>\\n<p>转换后:</p>\\n<p><code>id_people=[[0],[1],[1,2]]</code></p>\\n</li>\\n<li>\\n<p>过滤掉那么不可能被选中的人。</p>\\n<p>例如：</p>\\n<p><code>id_people=[[0],[1],[1,2]]</code></p>\\n<p><code>id_people[1]</code>是不可能被选中的，因为<code>id_people[2]</code>包含了他所有的技能。</p>\\n<p>过滤后，<code>slim_people=[[0],[1,2]]</code>.</p>\\n<p>还需要一个<code>idHash</code>，这是一个<code>Ojbect</code>，保存<code>slim_people</code>和<code>id_people</code>的索引关系。</p>\\n</li>\\n<li>\\n<p>回溯，在回溯中，对每一个人尝试添加进队伍，并且检查当前队伍是否满足<code>必要团队</code>。</p>\\n<p>如果满足，检查当前队伍人数是否更小，如果更小，保存当前队伍的索引。</p>\\n</li>\\n</ol>\\n","content":"<p>作为项目经理，你规划了一份需求的技能清单 <code>req_skills</code>，并打算从备选人员名单 <code>people</code> 中选出些人组成一个「必要团队」（ 编号为 <code>i</code> 的备选人员 <code>people[i]</code> 含有一份该备选人员掌握的技能列表）。</p>\\n\\n<p>所谓「必要团队」，就是在这个团队中，对于所需求的技能列表 <code>req_skills</code> 中列出的每项技能，团队中至少有一名成员已经掌握。可以用每个人的编号来表示团队中的成员：</p>\\n\\n<ul>\\n\\t<li>例如，团队 <code>team = [0, 1, 3]</code> 表示掌握技能分别为 <code>people[0]</code>，<code>people[1]</code>，和 <code>people[3]</code> 的备选人员。</li>\\n</ul>\\n\\n<p>请你返回 <strong>任一</strong> 规模最小的必要团队，团队成员用人员编号表示。你可以按 <strong>任意顺序</strong> 返回答案，题目数据保证答案存在。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>req_skills = [\\"java\\",\\"nodejs\\",\\"reactjs\\"], people = [[\\"java\\"],[\\"nodejs\\"],[\\"nodejs\\",\\"reactjs\\"]]\\n<strong>输出：</strong>[0,2]\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>req_skills = [\\"algorithms\\",\\"math\\",\\"java\\",\\"reactjs\\",\\"csharp\\",\\"aws\\"], people = [[\\"algorithms\\",\\"math\\",\\"java\\"],[\\"algorithms\\",\\"math\\",\\"reactjs\\"],[\\"java\\",\\"csharp\\",\\"aws\\"],[\\"reactjs\\",\\"csharp\\"],[\\"csharp\\",\\"math\\"],[\\"aws\\",\\"java\\"]]\\n<strong>输出：</strong>[1,2]\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= req_skills.length <= 16</code></li>\\n\\t<li><code>1 <= req_skills[i].length <= 16</code></li>\\n\\t<li><code>req_skills[i]</code> 由小写英文字母组成</li>\\n\\t<li><code>req_skills</code> 中的所有字符串 <strong>互不相同</strong></li>\\n\\t<li><code>1 <= people.length <= 60</code></li>\\n\\t<li><code>0 <= people[i].length <= 16</code></li>\\n\\t<li><code>1 <= people[i][j].length <= 16</code></li>\\n\\t<li><code>people[i][j]</code> 由小写英文字母组成</li>\\n\\t<li><code>people[i]</code> 中的所有字符串 <strong>互不相同</strong></li>\\n\\t<li><code>people[i]</code> 中的每个技能是 <code>req_skills</code> 中的技能</li>\\n\\t<li>题目数据保证「必要团队」一定存在</li>\\n</ul>\\n","title":"1125. 最小的必要团队","relatedTags":["位运算","数组","动态规划","状态压缩"],"difficult":"Hard","lang":["javascript"],"uniqueID":"1125","slug":"1125-Smallest-Sufficient-Team"}')}}]);