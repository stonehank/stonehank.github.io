(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{567:function(n){n.exports=JSON.parse('{"content":"<p>useReducer</p>\\n<p>模拟reducer</p>\\n<p><code>const [state, dispatch] = useReducer(reducer, initialState, initialAction);</code></p>\\n<ul>\\n<li>参数1<code>reducer</code> </li>\\n</ul>\\n<p>与<code>redux</code>写法相比，不需要默认返回值</p>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">reducer</span>(<span class=\\"hljs-params\\">state, action</span>) </span>{\\n  <span class=\\"hljs-keyword\\">switch</span> (action.type) {\\n    <span class=\\"hljs-keyword\\">case</span> <span class=\\"hljs-string\\">\'reset\'</span>:\\n      <span class=\\"hljs-keyword\\">return</span> initialState;\\n    <span class=\\"hljs-keyword\\">case</span> <span class=\\"hljs-string\\">\'increment\'</span>:\\n      <span class=\\"hljs-keyword\\">return</span> {<span class=\\"hljs-attr\\">count</span>: state.count + <span class=\\"hljs-number\\">1</span>};\\n    <span class=\\"hljs-keyword\\">case</span> <span class=\\"hljs-string\\">\'decrement\'</span>:\\n      <span class=\\"hljs-keyword\\">return</span> {<span class=\\"hljs-attr\\">count</span>: state.count - <span class=\\"hljs-number\\">1</span>};\\n  }\\n}</code></pre></code></pre>\\n<ul>\\n<li>参数2 <code>initialState</code></li>\\n</ul>\\n<p>默认渲染后的初始值，有点类似<code>componentDidMount</code>，第一次执行的时候触发</p>\\n<ul>\\n<li>参数3 <code>initialAction</code></li>\\n</ul>\\n<p>当执行触发后，会立刻执行这个action。</p>\\n<p>官网例子：</p>\\n<pre><code class=\\"language-jsx\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-keyword\\">import</span> { render } <span class=\\"hljs-keyword\\">from</span> <span class=\\"hljs-string\\">\\"react-dom\\"</span>;\\n<span class=\\"hljs-keyword\\">import</span> React, { Component, useState,useReducer } <span class=\\"hljs-keyword\\">from</span> <span class=\\"hljs-string\\">\\"react\\"</span>;\\n\\n<span class=\\"hljs-keyword\\">const</span> initialState = { <span class=\\"hljs-attr\\">count</span>: <span class=\\"hljs-number\\">0</span> };\\n\\n<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">reducer</span>(<span class=\\"hljs-params\\">state, action</span>) </span>{\\n  <span class=\\"hljs-keyword\\">switch</span> (action.type) {\\n    <span class=\\"hljs-keyword\\">case</span> <span class=\\"hljs-string\\">\'reset\'</span>:\\n      <span class=\\"hljs-keyword\\">return</span> { <span class=\\"hljs-attr\\">count</span>: action.payload };\\n    <span class=\\"hljs-keyword\\">case</span> <span class=\\"hljs-string\\">\'increment\'</span>:\\n      <span class=\\"hljs-keyword\\">return</span> { <span class=\\"hljs-attr\\">count</span>: state.count + <span class=\\"hljs-number\\">1</span> };\\n    <span class=\\"hljs-keyword\\">case</span> <span class=\\"hljs-string\\">\'decrement\'</span>:\\n      <span class=\\"hljs-keyword\\">return</span> { <span class=\\"hljs-attr\\">count</span>: state.count - <span class=\\"hljs-number\\">1</span> };\\n  }\\n}\\n<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">Counter</span>(<span class=\\"hljs-params\\">{ initialCount }</span>) </span>{\\n  <span class=\\"hljs-keyword\\">const</span> [state, dispatch] = useReducer(\\n    reducer,\\n    initialState,\\n    { <span class=\\"hljs-attr\\">type</span>: <span class=\\"hljs-string\\">\'reset\'</span>, <span class=\\"hljs-attr\\">payload</span>: initialCount },\\n  );\\n  <span class=\\"hljs-keyword\\">return</span> (\\n    &lt;React.Fragment&gt;\\n      Count: {state.count}\\n      &lt;button\\n        onClick={() =&gt; dispatch({ type: \'reset\', payload: initialCount||initialState.count })}&gt;\\n        Reset\\n      &lt;/button&gt;\\n      &lt;button onClick={() =&gt; dispatch({ type: \'increment\' })}&gt;+&lt;/button&gt;\\n      &lt;button onClick={() =&gt; dispatch({ type: \'decrement\' })}&gt;-&lt;/button&gt;\\n    &lt;/React.Fragment&gt;\\n  );\\n}\\nrender(&lt;Counter initialCount={5} /&gt;, <span class=\\"hljs-built_in\\">document</span>.getElementById(<span class=\\"hljs-string\\">\\"root\\"</span>));</code></pre></code></pre>\\n<ol>\\n<li>这里<code>Counter</code>接受一个<code>initialCount</code>的prop，此处设定为5。</li>\\n<li>这里第2个参数<code>initialState</code>设置为<code>{ count: 0 }</code>，说明初始加载后，显示为0。</li>\\n<li>这里第3个参数<code>initialAction</code>是<code>{ type: &#39;reset&#39;, payload: initialCount }</code>，说明当组件加载完毕，会立刻执行这个action，也就是执行<code>reset</code>，然后显示会变为5。</li>\\n<li>因此组件加载，显示5。</li>\\n</ol>\\n<p><a href=\\"https://codesandbox.io/s/48pn6o407\\">以上代码在线</a></p>\\n<blockquote>\\n<p>可以搭配<code>useContext</code>来传递到深层子组件(传递<code>dispatch</code>)。</p>\\n</blockquote>\\n<p><a href=\\"https://reactjs.org/docs/hooks-faq.html#how-to-avoid-passing-callbacks-down\\">官网例子:https://reactjs.org/docs/hooks-faq.html#how-to-avoid-passing-callbacks-down</a></p>\\n","toc":[],"relatedTags":null,"created_at":"2018-11-08","timeArr":[2018,10,8,0,0,0,0],"title":"React v16.7 Hooks(3)","uuid":"fc7c450a8aab31c939be77ef556ba927f8da6619","summary":"<p>useReducer</p>\\n<p>模拟reducer</p>\\n<p><code>const [state, dispatch] = useReducer(reducer, initialState, initialAction);</code></p>\\n<ul>\\n<li>参数1<code>reducer</code></li>\\n</ul>\\n<p>与<code>redux</code>写法相比，不需要默认返回值</p>\\n<pre class=\\"hljs\\"><code><span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">red</span>...</span></code></pre>","slug":"React-v16.7-Hooks(3)","sha":"012abf1ae3a9d2bef888109e1147dae1407eda09"}')}}]);