(window.webpackJsonp=window.webpackJsonp||[]).push([[525],{1323:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">nums</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">target</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> numSubseq = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">nums, target</span>) </span>{\\n    nums.sort(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">a,b</span>)=&gt;</span>a-b)\\n    <span class=\\"hljs-keyword\\">let</span> MOD=<span class=\\"hljs-number\\">1e9</span>+<span class=\\"hljs-number\\">7</span>\\n    <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">let</span> gap=<span class=\\"hljs-number\\">25</span>\\n    <span class=\\"hljs-keyword\\">let</span> gapPos=<span class=\\"hljs-built_in\\">Math</span>.pow(<span class=\\"hljs-number\\">2</span>,gap) % MOD\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;nums.length;i++){\\n        <span class=\\"hljs-keyword\\">if</span>(nums[i]*<span class=\\"hljs-number\\">2</span>&gt;target)<span class=\\"hljs-keyword\\">continue</span>\\n        <span class=\\"hljs-keyword\\">let</span> l=i, r=nums.length<span class=\\"hljs-number\\">-1</span>\\n        <span class=\\"hljs-keyword\\">while</span>(l&lt;r){\\n            <span class=\\"hljs-keyword\\">let</span> mid=<span class=\\"hljs-built_in\\">Math</span>.floor((l+r)/<span class=\\"hljs-number\\">2</span>)\\n            <span class=\\"hljs-keyword\\">if</span>(nums[i]+nums[mid]&lt;=target)l=mid+<span class=\\"hljs-number\\">1</span>\\n            <span class=\\"hljs-keyword\\">else</span> r=mid\\n        }\\n        <span class=\\"hljs-keyword\\">if</span>(nums[r]+nums[i]&gt;target)r--\\n        res=res+ C(r-i)+<span class=\\"hljs-number\\">1</span>\\n    }\\n\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">pos</span>(<span class=\\"hljs-params\\">m</span>)</span>{\\n        <span class=\\"hljs-keyword\\">if</span>(m===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">1</span>\\n        <span class=\\"hljs-keyword\\">let</span> n=m\\n        <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-number\\">1</span>\\n        <span class=\\"hljs-keyword\\">while</span>(n&gt;gap){\\n            res=res*gapPos % MOD\\n            n-=gap\\n        }\\n        <span class=\\"hljs-keyword\\">let</span> ans=(res* (<span class=\\"hljs-built_in\\">Math</span>.pow(<span class=\\"hljs-number\\">2</span>,n) % MOD)) % MOD\\n        <span class=\\"hljs-keyword\\">return</span> ans\\n    \\n    }\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">C</span>(<span class=\\"hljs-params\\">n</span>)</span>{\\n        <span class=\\"hljs-keyword\\">return</span> (pos(n) % MOD) <span class=\\"hljs-number\\">-1</span>\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> res % MOD\\n \\n};\\n</code></pre>\\n"],"querySlug":"number-of-subsequences-that-satisfy-the-given-sum-condition","created_at":"2020-06-28","timeArr":[2020,5,28,18,18,28,0],"hasThinking":false,"content":"<p>给你一个整数数组 <code>nums</code> 和一个整数 <code>target</code> 。</p>\\n\\n<p>请你统计并返回 <code>nums</code> 中能满足其最小元素与最大元素的 <strong>和</strong> 小于或等于 <code>target</code> 的 <strong>非空</strong> 子序列的数目。</p>\\n\\n<p>由于答案可能很大，请将结果对 10^9 + 7 取余后返回。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>nums = [3,5,6,7], target = 9\\n<strong>输出：</strong>4\\n<strong>解释：</strong>有 4 个子序列满足该条件。\\n[3] -&gt; 最小元素 + 最大元素 &lt;= target (3 + 3 &lt;= 9)\\n[3,5] -&gt; (3 + 5 &lt;= 9)\\n[3,5,6] -&gt; (3 + 6 &lt;= 9)\\n[3,6] -&gt; (3 + 6 &lt;= 9)\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>nums = [3,3,6,8], target = 10\\n<strong>输出：</strong>6\\n<strong>解释：</strong>有 6 个子序列满足该条件。（nums 中可以有重复数字）\\n[3] , [3] , [3,3], [3,6] , [3,6] , [3,3,6]</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>nums = [2,3,3,4,6,7], target = 12\\n<strong>输出：</strong>61\\n<strong>解释：</strong>共有 63 个非空子序列，其中 2 个不满足条件（[6,7], [7]）\\n有效序列总数为（63 - 2 = 61）\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre><strong>输入：</strong>nums = [5,2,4,1,7,6,8], target = 16\\n<strong>输出：</strong>127\\n<strong>解释：</strong>所有非空子序列都满足条件 (2^7 - 1) = 127</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= nums.length &lt;= 10^5</code></li>\\n\\t<li><code>1 &lt;= nums[i] &lt;= 10^6</code></li>\\n\\t<li><code>1 &lt;= target &lt;= 10^6</code></li>\\n</ul>\\n","title":"1498. 满足条件的子序列数目","relatedTags":["数组","双指针","二分查找","排序"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1498","slug":"1498-Number-of-Subsequences-That-Satisfy-the-Given-Sum-Condition"}')}}]);