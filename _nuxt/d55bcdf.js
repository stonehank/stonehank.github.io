(window.webpackJsonp=window.webpackJsonp||[]).push([[679],{1477:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\"># Definition for a binary tree node.</span>\\n<span class=\\"hljs-comment\\"># class TreeNode(object):</span>\\n<span class=\\"hljs-comment\\">#     def __init__(self, x):</span>\\n<span class=\\"hljs-comment\\">#         self.val = x</span>\\n<span class=\\"hljs-comment\\">#         self.left = None</span>\\n<span class=\\"hljs-comment\\">#         self.right = None</span>\\n\\n<span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Solution</span><span class=\\"hljs-params\\">(object)</span>:</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">countNodes</span><span class=\\"hljs-params\\">(self, root)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type root: TreeNode\\n        :rtype: int\\n        \\"\\"\\"</span>\\n        <span class=\\"hljs-keyword\\">if</span> <span class=\\"hljs-keyword\\">not</span> root:<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>\\n        res=<span class=\\"hljs-number\\">1</span>\\n        <span class=\\"hljs-keyword\\">if</span> root.left:\\n          res+=self.countNodes(root.left)\\n        <span class=\\"hljs-keyword\\">if</span> root.right:\\n          res+=self.countNodes(root.right)\\n        <span class=\\"hljs-keyword\\">return</span> res\\n        \\n</code></pre>\\n"],"querySlug":"count-complete-tree-nodes","created_at":"2019-02-25","timeArr":[2019,1,25,0,14,46,0],"hasThinking":false,"content":"<p>给你一棵<strong> 完全二叉树</strong> 的根节点 <code>root</code> ，求出该树的节点个数。</p>\\n\\n<p><a href=\\"https://baike.baidu.com/item/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91/7773232?fr=aladdin\\">完全二叉树</a> 的定义如下：在完全二叉树中，除了最底层节点可能没填满外，其余每层节点数都达到最大值，并且最下面一层的节点都集中在该层最左边的若干位置。若最底层为第 <code>h</code> 层，则该层包含 <code>1~ 2<sup>h</sup></code> 个节点。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2021/01/14/complete.jpg\\" style=\\"width: 372px; height: 302px;\\" />\\n<pre>\\n<strong>输入：</strong>root = [1,2,3,4,5,6]\\n<strong>输出：</strong>6\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>root = []\\n<strong>输出：</strong>0\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>root = [1]\\n<strong>输出：</strong>1\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li>树中节点的数目范围是<code>[0, 5 * 10<sup>4</sup>]</code></li>\\n\\t<li><code>0 <= Node.val <= 5 * 10<sup>4</sup></code></li>\\n\\t<li>题目数据保证输入的树是 <strong>完全二叉树</strong></li>\\n</ul>\\n\\n<p> </p>\\n\\n<p><strong>进阶：</strong>遍历树来统计节点是一种时间复杂度为 <code>O(n)</code> 的简单解决方案。你可以设计一个更快的算法吗？</p>\\n","title":"222. 完全二叉树的节点个数","relatedTags":["树","深度优先搜索","二分查找","二叉树"],"difficult":"Middle","lang":["python"],"uniqueID":"222","slug":"222-Count-Complete-Tree-Nodes"}')}}]);