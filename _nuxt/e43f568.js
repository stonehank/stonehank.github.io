(window.webpackJsonp=window.webpackJsonp||[]).push([[286],{1084:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{TreeNode}</span> <span class=\\"hljs-variable\\">root</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{boolean}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> isBalanced = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">root</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(!root)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">check</span>(<span class=\\"hljs-params\\">node</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(!node)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>\\n    \\n    <span class=\\"hljs-keyword\\">let</span> leftH=check(node.left)\\n    <span class=\\"hljs-keyword\\">if</span>(leftH===<span class=\\"hljs-number\\">-1</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">-1</span>\\n    <span class=\\"hljs-keyword\\">let</span> rightH=check(node.right)\\n    <span class=\\"hljs-keyword\\">if</span>(rightH===<span class=\\"hljs-number\\">-1</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">-1</span>\\n\\n    <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-built_in\\">Math</span>.abs(leftH-rightH)&gt;<span class=\\"hljs-number\\">1</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">-1</span>\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-built_in\\">Math</span>.max(leftH,rightH)+<span class=\\"hljs-number\\">1</span>\\n  }\\n  \\n  <span class=\\"hljs-keyword\\">return</span> check(root)!==<span class=\\"hljs-number\\">-1</span>\\n};\\n</code></pre>\\n"],"querySlug":"balanced-binary-tree","created_at":"2019-03-18","timeArr":[2019,2,18,14,25,21,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<ul>\\n<li>自顶而下<code>O(n^2)</code></li>\\n</ul>\\n<p>对于每一个节点，计算它左子树的高度和右子树的高度，如果它们相差超过<code>1</code>，则不平衡。</p>\\n<pre class=\\"hljs\\"><code><span class=\\"hljs-keyword\\">var</span> isBalanced = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">root</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(!root)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n  <span class=\\"hljs-keyword\\">let</span> leftH=getHeight(root.left),\\n      rightH=getHeight(root.right)\\n  <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-built_in\\">Math</span>.abs(leftH-rightH)&gt;<span class=\\"hljs-number\\">1</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n  <span class=\\"hljs-keyword\\">return</span> isBalanced(root.left) &amp;&amp; isBalanced(root.right)\\n};\\n\\n<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">getHeight</span>(<span class=\\"hljs-params\\">root</span>)</span>{\\n  <span class=\\"hljs-keyword\\">if</span>(!root)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-built_in\\">Math</span>.max(getHeight(root.left),getHeight(root.right))+<span class=\\"hljs-number\\">1</span>\\n}\\n</code></pre>\\n<ul>\\n<li>自底而上<code>O(n)</code></li>\\n</ul>\\n<p>后续遍历，对于每一个节点，比较左子树和右子树的高度。</p>\\n<p>自底而上更高效的原因是后序遍历是从最底端节点开始，之后每一个父节点计算高度都无须重复计算子节点的高度。</p>\\n","content":"<p>给定一个二叉树，判断它是否是高度平衡的二叉树。</p>\\n\\n<p>本题中，一棵高度平衡二叉树定义为：</p>\\n\\n<blockquote>\\n<p>一个二叉树<em>每个节点 </em>的左右两个子树的高度差的绝对值不超过 1 。</p>\\n</blockquote>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2020/10/06/balance_1.jpg\\" style=\\"width: 342px; height: 221px;\\" />\\n<pre>\\n<strong>输入：</strong>root = [3,9,20,null,null,15,7]\\n<strong>输出：</strong>true\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2020/10/06/balance_2.jpg\\" style=\\"width: 452px; height: 301px;\\" />\\n<pre>\\n<strong>输入：</strong>root = [1,2,2,3,3,null,null,4,4]\\n<strong>输出：</strong>false\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>root = []\\n<strong>输出：</strong>true\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li>树中的节点数在范围 <code>[0, 5000]</code> 内</li>\\n\\t<li><code>-10<sup>4</sup> <= Node.val <= 10<sup>4</sup></code></li>\\n</ul>\\n","title":"110. 平衡二叉树","relatedTags":["树","深度优先搜索","二叉树"],"difficult":"Easy","lang":["javascript"],"uniqueID":"110","slug":"110-Balanced-Binary-Tree"}')}}]);