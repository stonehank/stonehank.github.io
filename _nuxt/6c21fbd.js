(window.webpackJsonp=window.webpackJsonp||[]).push([[1113],{1911:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">intervals</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> intersectionSizeTwo = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">intervals</span>) </span>{\\n  intervals.sort(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">a,b</span>)=&gt;</span>a[<span class=\\"hljs-number\\">0</span>]===b[<span class=\\"hljs-number\\">0</span>]?a[<span class=\\"hljs-number\\">1</span>]-b[<span class=\\"hljs-number\\">1</span>]:b[<span class=\\"hljs-number\\">0</span>]-a[<span class=\\"hljs-number\\">0</span>])\\n  <span class=\\"hljs-keyword\\">let</span> aux=[]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> [s,e] <span class=\\"hljs-keyword\\">of</span> intervals){\\n    <span class=\\"hljs-keyword\\">if</span>(aux.length&gt;<span class=\\"hljs-number\\">0</span> &amp;&amp; aux[aux.length<span class=\\"hljs-number\\">-1</span>][<span class=\\"hljs-number\\">0</span>]&gt;=s &amp;&amp; aux[aux.length<span class=\\"hljs-number\\">-1</span>][<span class=\\"hljs-number\\">1</span>]&lt;=e){\\n      <span class=\\"hljs-keyword\\">continue</span>\\n    }\\n    aux.push([s,e])\\n  }\\n  aux.sort(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">a,b</span>)=&gt;</span>a[<span class=\\"hljs-number\\">0</span>]===b[<span class=\\"hljs-number\\">0</span>]?a[<span class=\\"hljs-number\\">1</span>]-b[<span class=\\"hljs-number\\">1</span>]:a[<span class=\\"hljs-number\\">0</span>]-b[<span class=\\"hljs-number\\">0</span>])\\n  <span class=\\"hljs-keyword\\">let</span> l=aux[<span class=\\"hljs-number\\">0</span>][<span class=\\"hljs-number\\">1</span>]<span class=\\"hljs-number\\">-1</span>,r=aux[<span class=\\"hljs-number\\">0</span>][<span class=\\"hljs-number\\">1</span>]\\n  <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-number\\">2</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> [s,e] <span class=\\"hljs-keyword\\">of</span> aux){\\n    <span class=\\"hljs-keyword\\">let</span> lValid=l&gt;=s &amp;&amp; l&lt;=e,\\n        rValid=r&gt;=s &amp;&amp; r&lt;=e\\n    <span class=\\"hljs-keyword\\">if</span>(lValid &amp;&amp; rValid){\\n      <span class=\\"hljs-keyword\\">continue</span>\\n    }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(rValid){\\n      l=r\\n      r=e\\n      res++\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      l=e<span class=\\"hljs-number\\">-1</span>\\n      r=e\\n      res+=<span class=\\"hljs-number\\">2</span>\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"set-intersection-size-at-least-two","created_at":"2019-04-14","timeArr":[2019,3,14,16,9,21,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>首先对<code>intervals</code>去除重复，这里重复不是指相同的区间，而是指相交的子集，去除重复后就不必重复计算。</p>\\n<p>例如<code>[[0,5],[1,4],[2,3]]</code>，我们去除重复后，只剩下<code>[2,3]</code>，因为<code>[2,3]</code>是其他几个区间的子集，计算出<code>[2,3]</code>，其他几个区间自然也符合要求。</p>\\n<p>去重后，对于每个范围，我们默认只取最后两个数，因为取最后两位数能尽可能地与下一个范围共用。</p>\\n<p>对于上一次的两个数，我们称之为<code>left</code>，<code>right</code>，判断它们是否都在当前范围中，</p>\\n<p>如果都在则跳过；</p>\\n<p>如果只有<code>right</code>存在，那么只需要将<code>right</code>更新为当前范围的最后一位，<code>left</code>更新为原本的<code>right</code>；</p>\\n<p>其他情况(<code>left</code>和<code>right</code>都不存在)，则说明没有可以共用的，更新2个为当前范围的最后两个。</p>\\n","content":"<p>一个整数区间&nbsp;<code>[a, b]</code>&nbsp;&nbsp;(&nbsp;<code>a &lt; b</code>&nbsp;) 代表着从&nbsp;<code>a</code>&nbsp;到&nbsp;<code>b</code>&nbsp;的所有连续整数，包括&nbsp;<code>a</code>&nbsp;和&nbsp;<code>b</code>。</p>\\n\\n<p>给你一组整数区间<code>intervals</code>，请找到一个最小的集合 S，使得 S 里的元素与区间<code>intervals</code>中的每一个整数区间都至少有2个元素相交。</p>\\n\\n<p>输出这个最小集合S的大小。</p>\\n\\n<p><strong>示例 1:</strong></p>\\n\\n<pre><strong>输入:</strong> intervals = [[1, 3], [1, 4], [2, 5], [3, 5]]\\n<strong>输出:</strong> 3\\n<strong>解释:</strong>\\n考虑集合 S = {2, 3, 4}. S与intervals中的四个区间都有至少2个相交的元素。\\n且这是S最小的情况，故我们输出3。\\n</pre>\\n\\n<p><strong>示例 2:</strong></p>\\n\\n<pre><strong>输入:</strong> intervals = [[1, 2], [2, 3], [2, 4], [4, 5]]\\n<strong>输出:</strong> 5\\n<strong>解释:</strong>\\n最小的集合S = {1, 2, 3, 4, 5}.\\n</pre>\\n\\n<p><strong>注意:</strong></p>\\n\\n<ol>\\n\\t<li><code>intervals</code>&nbsp;的长度范围为<code>[1, 3000]</code>。</li>\\n\\t<li><code>intervals[i]</code>&nbsp;长度为&nbsp;<code>2</code>，分别代表左、右边界。</li>\\n\\t<li><code>intervals[i][j]</code> 的值是&nbsp;<code>[0, 10^8]</code>范围内的整数。</li>\\n</ol>\\n","title":"757. 设置交集大小至少为2","relatedTags":["贪心","数组","排序"],"difficult":"Hard","lang":["javascript"],"uniqueID":"757","slug":"757-Set-Intersection-Size-At-Least-Two"}')}}]);