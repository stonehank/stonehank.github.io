(window.webpackJsonp=window.webpackJsonp||[]).push([[1254],{2052:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string[]}</span> <span class=\\"hljs-variable\\">words</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">pattern</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{string[]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> findAndReplacePattern = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">words, pattern</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> hash={}\\n  <span class=\\"hljs-keyword\\">let</span> arr=[],uid=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;pattern.length;i++){\\n    <span class=\\"hljs-keyword\\">if</span>(hash[pattern[i]]==<span class=\\"hljs-literal\\">null</span>){\\n      hash[pattern[i]]=uid++\\n    }\\n    arr.push(hash[pattern[i]])\\n  }\\n  <span class=\\"hljs-comment\\">// console.log(arr)</span>\\n  <span class=\\"hljs-keyword\\">let</span> res=[]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;words.length;i++){\\n    <span class=\\"hljs-keyword\\">if</span>(words[i].length!==arr.length)<span class=\\"hljs-keyword\\">continue</span>\\n    <span class=\\"hljs-keyword\\">let</span> mem={},j=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">for</span>(;j&lt;words[i].length;j++){\\n      <span class=\\"hljs-keyword\\">let</span> cur=words[i][j],p=arr[j]\\n      <span class=\\"hljs-comment\\">// console.log(cur,p,mem)</span>\\n      <span class=\\"hljs-keyword\\">if</span>(mem[cur]==<span class=\\"hljs-literal\\">null</span>){\\n        <span class=\\"hljs-keyword\\">if</span>(mem[p]!=<span class=\\"hljs-literal\\">null</span>)<span class=\\"hljs-keyword\\">break</span>\\n        mem[cur]=p\\n        mem[p]=cur\\n      }<span class=\\"hljs-keyword\\">else</span>{\\n        <span class=\\"hljs-keyword\\">if</span>(mem[p]==<span class=\\"hljs-literal\\">null</span> ||  mem[cur]!==p){\\n          <span class=\\"hljs-keyword\\">break</span>\\n        }\\n      }\\n    }\\n    <span class=\\"hljs-keyword\\">if</span>(j===words[i].length)res.push(words[i])\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"find-and-replace-pattern","created_at":"2019-03-28","timeArr":[2019,2,28,17,49,6,0],"hasThinking":false,"content":"<p>你有一个单词列表&nbsp;<code>words</code>&nbsp;和一个模式&nbsp;&nbsp;<code>pattern</code>，你想知道 <code>words</code> 中的哪些单词与模式匹配。</p>\\n\\n<p>如果存在字母的排列 <code>p</code>&nbsp;，使得将模式中的每个字母 <code>x</code> 替换为 <code>p(x)</code> 之后，我们就得到了所需的单词，那么单词与模式是匹配的。</p>\\n\\n<p><em>（回想一下，字母的排列是从字母到字母的双射：每个字母映射到另一个字母，没有两个字母映射到同一个字母。）</em></p>\\n\\n<p>返回 <code>words</code> 中与给定模式匹配的单词列表。</p>\\n\\n<p>你可以按任何顺序返回答案。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例：</strong></p>\\n\\n<pre><strong>输入：</strong>words = [&quot;abc&quot;,&quot;deq&quot;,&quot;mee&quot;,&quot;aqq&quot;,&quot;dkd&quot;,&quot;ccc&quot;], pattern = &quot;abb&quot;\\n<strong>输出：</strong>[&quot;mee&quot;,&quot;aqq&quot;]\\n<strong>解释：\\n</strong>&quot;mee&quot; 与模式匹配，因为存在排列 {a -&gt; m, b -&gt; e, ...}。\\n&quot;ccc&quot; 与模式不匹配，因为 {a -&gt; c, b -&gt; c, ...} 不是排列。\\n因为 a 和 b 映射到同一个字母。</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= words.length &lt;= 50</code></li>\\n\\t<li><code>1 &lt;= pattern.length = words[i].length&nbsp;&lt;= 20</code></li>\\n</ul>\\n","title":"890. 查找和替换模式","relatedTags":["数组","哈希表","字符串"],"difficult":"Middle","lang":["javascript"],"uniqueID":"890","slug":"890-Find-and-Replace-Pattern"}')}}]);