(window.webpackJsonp=window.webpackJsonp||[]).push([[812],{1610:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">nums1</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">nums2</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> findMedianSortedArrays = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">nums1, nums2</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> x=nums1.length,y=nums2.length\\n  <span class=\\"hljs-keyword\\">if</span>(x&gt;y){\\n    <span class=\\"hljs-keyword\\">return</span> findMedianSortedArrays(nums2,nums1)\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> lo=<span class=\\"hljs-number\\">0</span>,hi=x\\n  <span class=\\"hljs-keyword\\">while</span>(lo&lt;=hi){\\n    <span class=\\"hljs-keyword\\">let</span> mid1=<span class=\\"hljs-built_in\\">Math</span>.floor((lo+hi)/<span class=\\"hljs-number\\">2</span>),\\n        mid2=<span class=\\"hljs-built_in\\">Math</span>.floor((x+y+<span class=\\"hljs-number\\">1</span>)/<span class=\\"hljs-number\\">2</span>)-mid1\\n    <span class=\\"hljs-keyword\\">let</span> l1=mid1===<span class=\\"hljs-number\\">0</span> ? -<span class=\\"hljs-literal\\">Infinity</span> : nums1[mid1<span class=\\"hljs-number\\">-1</span>],\\n        l2=mid2===<span class=\\"hljs-number\\">0</span> ? -<span class=\\"hljs-literal\\">Infinity</span> : nums2[mid2<span class=\\"hljs-number\\">-1</span>],\\n        r1=mid1===x ? <span class=\\"hljs-literal\\">Infinity</span> : nums1[mid1],\\n        r2=mid2===y ? <span class=\\"hljs-literal\\">Infinity</span> : nums2[mid2]\\n    <span class=\\"hljs-keyword\\">if</span>(l1&lt;=r2 &amp;&amp; l2&lt;=r1){\\n      <span class=\\"hljs-keyword\\">if</span>((x+y)%<span class=\\"hljs-number\\">2</span>===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span> (<span class=\\"hljs-built_in\\">Math</span>.max(l1,l2)+<span class=\\"hljs-built_in\\">Math</span>.min(r1,r2))/<span class=\\"hljs-number\\">2</span>\\n      <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-built_in\\">Math</span>.max(l1,l2)\\n    }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(l1&gt;r2){\\n      hi=mid1<span class=\\"hljs-number\\">-1</span>\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      lo=mid1+<span class=\\"hljs-number\\">1</span>\\n    }\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"median-of-two-sorted-arrays","created_at":"2019-02-23","timeArr":[2019,1,23,11,50,48,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>对于中位数，如果我们能将<strong>一半的小的数字</strong>放左边，<strong>另一半大的数字</strong>放右边，那么如果他们的数字总和为偶数，就是<code>(小堆的最大值+大堆的最小值)/2</code>；\\n如果是奇数，那么就是<code>小堆的最大值</code>。</p>\\n<p>因此，如何将它们分割成了问题的关键。</p>\\n<p>我们先选择<code>nums1</code>的分割点<code>partition1</code>为<code>Math.floor((m+n)/2)</code>，这里<code>m</code>是<code>nums1.length</code>，<code>n</code>是<code>nums2.length</code>，由于两边的数量要平衡，\\n因此对<code>nums2</code>的分割点<code>partition2</code>也可以确定，为<code>Math.floor((m+n+1)/2)-partition1</code>。</p>\\n<p>因为是有序的，<code>nums</code>左侧一定小于右侧，因此需要检查分割后的<code>nums1</code>左边的最大值是否能小于等于<code>nums2</code>右边的最小值，并且<code>nums2</code>左边的最大值是否小于等于<code>nums1</code>右边的最小值；</p>\\n<p>如果能达到这两个条件，说明分割是成功的，可以直接求出中位值；</p>\\n<p>如果<code>nums1</code>左侧最大值大于<code>nums2</code>右侧最小值，说明<code>nums1</code>的分割点还需要左移；</p>\\n<p>如果<code>nums2</code>左侧的最大值大于<code>nums1</code>右侧最小值，说明<code>nums2</code>的分割点还需要左移，也就是<code>nums1</code>的分割点需要右移。</p>\\n","content":"<p>给定两个大小分别为 <code>m</code> 和 <code>n</code> 的正序（从小到大）数组 <code>nums1</code> 和 <code>nums2</code>。请你找出并返回这两个正序数组的 <strong>中位数</strong> 。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums1 = [1,3], nums2 = [2]\\n<strong>输出：</strong>2.00000\\n<strong>解释：</strong>合并数组 = [1,2,3] ，中位数 2\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums1 = [1,2], nums2 = [3,4]\\n<strong>输出：</strong>2.50000\\n<strong>解释：</strong>合并数组 = [1,2,3,4] ，中位数 (2 + 3) / 2 = 2.5\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums1 = [0,0], nums2 = [0,0]\\n<strong>输出：</strong>0.00000\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums1 = [], nums2 = [1]\\n<strong>输出：</strong>1.00000\\n</pre>\\n\\n<p><strong>示例 5：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums1 = [2], nums2 = []\\n<strong>输出：</strong>2.00000\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>nums1.length == m</code></li>\\n\\t<li><code>nums2.length == n</code></li>\\n\\t<li><code>0 <= m <= 1000</code></li>\\n\\t<li><code>0 <= n <= 1000</code></li>\\n\\t<li><code>1 <= m + n <= 2000</code></li>\\n\\t<li><code>-10<sup>6</sup> <= nums1[i], nums2[i] <= 10<sup>6</sup></code></li>\\n</ul>\\n\\n<p> </p>\\n\\n<p><strong>进阶：</strong>你能设计一个时间复杂度为 <code>O(log (m+n))</code> 的算法解决此问题吗？</p>\\n","title":"4. 寻找两个正序数组的中位数","relatedTags":["数组","二分查找","分治"],"difficult":"Hard","lang":["javascript"],"uniqueID":"4","slug":"4-Median-of-Two-Sorted-Arrays"}')}}]);