(window.webpackJsonp=window.webpackJsonp||[]).push([[476],{1274:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">queries</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">m</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> processQueries = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">queries, m</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> P=<span class=\\"hljs-built_in\\">Array</span>(m).fill().map(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">n,i</span>)=&gt;</span>i+<span class=\\"hljs-number\\">1</span>)\\n  <span class=\\"hljs-keyword\\">let</span> res=[]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;queries.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> pIdx=P.indexOf(queries[i])\\n    res.push(pIdx)\\n    P.splice(pIdx,<span class=\\"hljs-number\\">1</span>)\\n    P.unshift(queries[i])\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"queries-on-a-permutation-with-key","created_at":"2020-04-12","timeArr":[2020,3,12,10,39,31,0],"hasThinking":false,"content":"<p>给你一个待查数组 <code>queries</code> ，数组中的元素为 <code>1</code> 到 <code>m</code> 之间的正整数。 请你根据以下规则处理所有待查项 <code>queries[i]</code>（从 <code>i=0</code> 到 <code>i=queries.length-1</code>）：</p>\\n\\n<ul>\\n\\t<li>一开始，排列 <code>P=[1,2,3,...,m]</code>。</li>\\n\\t<li>对于当前的 <code>i</code> ，请你找出待查项 <code>queries[i]</code> 在排列 <code>P</code> 中的位置（<strong>下标从 0 开始</strong>），然后将其从原位置移动到排列 <code>P</code> 的起始位置（即下标为 0 处）。注意， <code>queries[i]</code> 在 <code>P</code> 中的位置就是 <code>queries[i]</code> 的查询结果。</li>\\n</ul>\\n\\n<p>请你以数组形式返回待查数组&nbsp; <code>queries</code> 的查询结果。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>queries = [3,1,2,1], m = 5\\n<strong>输出：</strong>[2,1,2,1] \\n<strong>解释：</strong>待查数组 queries 处理如下：\\n对于 i=0: queries[i]=3, P=[1,2,3,4,5], 3 在 P 中的位置是 <strong>2</strong>，接着我们把 3 移动到 P 的起始位置，得到 P=[3,1,2,4,5] 。\\n对于 i=1: queries[i]=1, P=[3,1,2,4,5], 1 在 P 中的位置是 <strong>1</strong>，接着我们把 1 移动到 P 的起始位置，得到 P=[1,3,2,4,5] 。 \\n对于 i=2: queries[i]=2, P=[1,3,2,4,5], 2 在 P 中的位置是 <strong>2</strong>，接着我们把 2 移动到 P 的起始位置，得到 P=[2,1,3,4,5] 。\\n对于 i=3: queries[i]=1, P=[2,1,3,4,5], 1 在 P 中的位置是 <strong>1</strong>，接着我们把 1 移动到 P 的起始位置，得到 P=[1,2,3,4,5] 。 \\n因此，返回的结果数组为 [2,1,2,1] 。  \\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>queries = [4,1,2,2], m = 4\\n<strong>输出：</strong>[3,1,2,0]\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>queries = [7,5,5,8,3], m = 8\\n<strong>输出：</strong>[6,5,0,7,5]\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= m &lt;= 10^3</code></li>\\n\\t<li><code>1 &lt;= queries.length &lt;= m</code></li>\\n\\t<li><code>1 &lt;= queries[i] &lt;= m</code></li>\\n</ul>\\n","title":"1409. 查询带键的排列","relatedTags":["树状数组","数组","模拟"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1409","slug":"1409-Queries-on-a-Permutation-With-Key"}')}}]);