(window.webpackJsonp=window.webpackJsonp||[]).push([[217],{1015:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{TreeNode}</span> <span class=\\"hljs-variable\\">root</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{boolean}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> isSymmetric = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">root</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(!root)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">dfs</span>(<span class=\\"hljs-params\\">root1,root2</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(!root1 &amp;&amp; !root2)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n    <span class=\\"hljs-keyword\\">if</span>(!root1 || !root2)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n    <span class=\\"hljs-keyword\\">if</span>(root1.val!==root2.val)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n    <span class=\\"hljs-keyword\\">return</span> dfs(root1.left,root2.right) &amp;&amp; dfs(root1.right,root2.left)\\n  }  \\n  <span class=\\"hljs-keyword\\">return</span> dfs(root.left,root.right)\\n};\\n</code></pre>\\n"],"querySlug":"symmetric-tree","created_at":"2019-03-18","timeArr":[2019,2,18,11,51,59,0],"hasThinking":true,"thinking":"<hr>\\n<p>递归(<code>dfs</code>)：</p>\\n<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{TreeNode}</span> <span class=\\"hljs-variable\\">root</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{boolean}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> isSymmetric = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">root</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(!root)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">dfs</span>(<span class=\\"hljs-params\\">root1,root2</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(!root1 &amp;&amp; !root2)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n    <span class=\\"hljs-keyword\\">if</span>(!root1 || !root2)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n    <span class=\\"hljs-keyword\\">if</span>(root1.val!==root2.val)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n    <span class=\\"hljs-keyword\\">return</span> dfs(root1.left,root2.right) &amp;&amp; dfs(root1.right,root2.left)\\n  }  \\n  <span class=\\"hljs-keyword\\">return</span> dfs(root.left,root.right)\\n};\\n</code></pre>\\n<p>迭代(<code>bfs</code>)：</p>\\n","content":"<p>给定一个二叉树，检查它是否是镜像对称的。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p>例如，二叉树&nbsp;<code>[1,2,2,3,4,4,3]</code> 是对称的。</p>\\n\\n<pre>    1\\n   / \\\\\\n  2   2\\n / \\\\ / \\\\\\n3  4 4  3\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p>但是下面这个&nbsp;<code>[1,2,2,null,3,null,3]</code> 则不是镜像对称的:</p>\\n\\n<pre>    1\\n   / \\\\\\n  2   2\\n   \\\\   \\\\\\n   3    3\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>进阶：</strong></p>\\n\\n<p>你可以运用递归和迭代两种方法解决这个问题吗？</p>\\n","title":"101. 对称二叉树","relatedTags":["树","深度优先搜索","广度优先搜索","二叉树"],"difficult":"Easy","lang":["javascript"],"uniqueID":"101","slug":"101-Symmetric-Tree"}')}}]);