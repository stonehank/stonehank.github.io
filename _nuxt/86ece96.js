(window.webpackJsonp=window.webpackJsonp||[]).push([[928],{1726:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Solution</span><span class=\\"hljs-params\\">(object)</span>:</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">checkSubarraySum</span><span class=\\"hljs-params\\">(self, nums, k)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: bool\\n        \\"\\"\\"</span>\\n        n=len(nums)\\n        sums=[nums[<span class=\\"hljs-number\\">0</span>]]\\n        <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(<span class=\\"hljs-number\\">1</span>,n):\\n          <span class=\\"hljs-keyword\\">if</span> nums[i]==<span class=\\"hljs-number\\">0</span> <span class=\\"hljs-keyword\\">and</span> nums[i<span class=\\"hljs-number\\">-1</span>]==<span class=\\"hljs-number\\">0</span>:<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">True</span>\\n          cur=sums[i<span class=\\"hljs-number\\">-1</span>]+nums[i]\\n          sums.append(cur)\\n          <span class=\\"hljs-keyword\\">if</span> k!=<span class=\\"hljs-number\\">0</span> <span class=\\"hljs-keyword\\">and</span> cur % k==<span class=\\"hljs-number\\">0</span>:<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">True</span>\\n        <span class=\\"hljs-keyword\\">if</span> k==<span class=\\"hljs-number\\">0</span>:<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">False</span>\\n        memo={}\\n        \\n        <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(n):\\n          m=sums[i] % k\\n          <span class=\\"hljs-keyword\\">if</span> m <span class=\\"hljs-keyword\\">in</span> memo:\\n            <span class=\\"hljs-keyword\\">if</span> i-memo[m]&gt;<span class=\\"hljs-number\\">1</span>:<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">True</span>\\n          <span class=\\"hljs-keyword\\">else</span>:\\n            memo[m]=i\\n        <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">False</span>\\n</code></pre>\\n"],"querySlug":"continuous-subarray-sum","created_at":"2019-03-04","timeArr":[2019,2,4,23,58,13,0],"hasThinking":false,"content":"<p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> ，编写一个函数来判断该数组是否含有同时满足下述条件的连续子数组：</p>\\n\\n<ul>\\n\\t<li>子数组大小 <strong>至少为 2</strong> ，且</li>\\n\\t<li>子数组元素总和为 <code>k</code> 的倍数。</li>\\n</ul>\\n\\n<p>如果存在，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>\\n\\n<p>如果存在一个整数 <code>n</code> ，令整数 <code>x</code> 符合 <code>x = n * k</code> ，则称 <code>x</code> 是 <code>k</code> 的一个倍数。<code>0</code> 始终视为 <code>k</code> 的一个倍数。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [23<u>,2,4</u>,6,7], k = 6\\n<strong>输出：</strong>true\\n<strong>解释：</strong>[2,4] 是一个大小为 2 的子数组，并且和为 6 。</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [<u>23,2,6,4,7</u>], k = 6\\n<strong>输出：</strong>true\\n<strong>解释：</strong>[23, 2, 6, 4, 7] 是大小为 5 的子数组，并且和为 42 。 \\n42 是 6 的倍数，因为 42 = 7 * 6 且 7 是一个整数。\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [23,2,6,4,7], k = 13\\n<strong>输出：</strong>false\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= nums.length <= 10<sup>5</sup></code></li>\\n\\t<li><code>0 <= nums[i] <= 10<sup>9</sup></code></li>\\n\\t<li><code>0 <= sum(nums[i]) <= 2<sup>31</sup> - 1</code></li>\\n\\t<li><code>1 <= k <= 2<sup>31</sup> - 1</code></li>\\n</ul>\\n","title":"523. 连续的子数组和","relatedTags":["数组","哈希表","数学","前缀和"],"difficult":"Middle","lang":["python"],"uniqueID":"523","slug":"523-Continuous-Subarray-Sum"}')}}]);