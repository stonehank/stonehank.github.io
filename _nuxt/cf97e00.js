(window.webpackJsonp=window.webpackJsonp||[]).push([[963],{1761:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">nums</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">r</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">c</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[][]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> matrixReshape = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">nums, r, c</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> m=nums.length,n=nums[<span class=\\"hljs-number\\">0</span>].length\\n  <span class=\\"hljs-keyword\\">if</span>(m*n!==r*c)<span class=\\"hljs-keyword\\">return</span> nums\\n  <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-built_in\\">Array</span>(r).fill().map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span>=&gt;</span><span class=\\"hljs-built_in\\">Array</span>(c).fill(<span class=\\"hljs-number\\">0</span>))\\n  <span class=\\"hljs-keyword\\">let</span> save=[]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;m;i++){\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;n;j++){\\n      save.push(nums[i][j])\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> idx=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;r;i++){\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;c;j++){\\n      res[i][j]=save[idx++]\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"reshape-the-matrix","created_at":"2019-03-14","timeArr":[2019,2,14,11,1,35,0],"hasThinking":false,"content":"<p>在 MATLAB 中，有一个非常有用的函数 <code>reshape</code> ，它可以将一个&nbsp;<code>m x n</code> 矩阵重塑为另一个大小不同（<code>r x c</code>）的新矩阵，但保留其原始数据。</p>\\n\\n<p>给你一个由二维数组 <code>mat</code> 表示的&nbsp;<code>m x n</code> 矩阵，以及两个正整数 <code>r</code> 和 <code>c</code> ，分别表示想要的重构的矩阵的行数和列数。</p>\\n\\n<p>重构后的矩阵需要将原始矩阵的所有元素以相同的<strong> 行遍历顺序 </strong>填充。</p>\\n\\n<p>如果具有给定参数的 <code>reshape</code> 操作是可行且合理的，则输出新的重塑矩阵；否则，输出原始矩阵。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2021/04/24/reshape1-grid.jpg\\" style=\\"width: 613px; height: 173px;\\" />\\n<pre>\\n<strong>输入：</strong>mat = [[1,2],[3,4]], r = 1, c = 4\\n<strong>输出：</strong>[[1,2,3,4]]\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2021/04/24/reshape2-grid.jpg\\" style=\\"width: 453px; height: 173px;\\" />\\n<pre>\\n<strong>输入：</strong>mat = [[1,2],[3,4]], r = 2, c = 4\\n<strong>输出：</strong>[[1,2],[3,4]]\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>m == mat.length</code></li>\\n\\t<li><code>n == mat[i].length</code></li>\\n\\t<li><code>1 &lt;= m, n &lt;= 100</code></li>\\n\\t<li><code>-1000 &lt;= mat[i][j] &lt;= 1000</code></li>\\n\\t<li><code>1 &lt;= r, c &lt;= 300</code></li>\\n</ul>\\n","title":"566. 重塑矩阵","relatedTags":["数组","矩阵","模拟"],"difficult":"Easy","lang":["javascript"],"uniqueID":"566","slug":"566-Reshape-the-Matrix"}')}}]);