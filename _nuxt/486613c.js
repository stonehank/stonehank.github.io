(window.webpackJsonp=window.webpackJsonp||[]).push([[293],{1091:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{TreeNode}</span> <span class=\\"hljs-variable\\">root</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> minDepth = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">root</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(!root)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">minD</span>(<span class=\\"hljs-params\\">root</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(!root)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">Infinity</span>\\n    <span class=\\"hljs-keyword\\">if</span>(!root.left &amp;&amp; !root.right)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">1</span>\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-built_in\\">Math</span>.min(minD(root.left),minD(root.right))+<span class=\\"hljs-number\\">1</span>    \\n  }\\n  <span class=\\"hljs-keyword\\">return</span> minD(root)\\n};\\n</code></pre>\\n"],"querySlug":"minimum-depth-of-binary-tree","created_at":"2019-03-18","timeArr":[2019,2,18,14,48,54,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>必须是<code>root</code>到<code>leaf</code>的最小高度，如果当前节点是<code>leaf</code>，返回<code>1</code>；否则：</p>\\n<p>当前节点存在2个子节点，那么返回<code>min(leftH,rightH)+1</code>；</p>\\n<p>当前节点只有1个子节点，那么只能返回<code>存在的子节点的高度+1</code>。</p>\\n","content":"<p>给定一个二叉树，找出其最小深度。</p>\\n\\n<p>最小深度是从根节点到最近叶子节点的最短路径上的节点数量。</p>\\n\\n<p><strong>说明：</strong>叶子节点是指没有子节点的节点。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2020/10/12/ex_depth.jpg\\" style=\\"width: 432px; height: 302px;\\" />\\n<pre>\\n<strong>输入：</strong>root = [3,9,20,null,null,15,7]\\n<strong>输出：</strong>2\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>root = [2,null,3,null,4,null,5,null,6]\\n<strong>输出：</strong>5\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li>树中节点数的范围在 <code>[0, 10<sup>5</sup>]</code> 内</li>\\n\\t<li><code>-1000 <= Node.val <= 1000</code></li>\\n</ul>\\n","title":"111. 二叉树的最小深度","relatedTags":["树","深度优先搜索","广度优先搜索","二叉树"],"difficult":"Easy","lang":["javascript"],"uniqueID":"111","slug":"111-Minimum-Depth-of-Binary-Tree"}')}}]);