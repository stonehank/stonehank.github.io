(window.webpackJsonp=window.webpackJsonp||[]).push([[410],{1208:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">s</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> minInsertions = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">s</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> hash={}\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">dp</span>(<span class=\\"hljs-params\\">i,j</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(i&gt;=j)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">if</span>(hash[i+<span class=\\"hljs-string\\">\' \'</span>+j]!=<span class=\\"hljs-literal\\">null</span>)<span class=\\"hljs-keyword\\">return</span> hash[i+<span class=\\"hljs-string\\">\' \'</span>+j]\\n    <span class=\\"hljs-keyword\\">let</span> step=<span class=\\"hljs-literal\\">Infinity</span>\\n    <span class=\\"hljs-keyword\\">if</span>(s[i]===s[j]){\\n      step=dp(i+<span class=\\"hljs-number\\">1</span>,j<span class=\\"hljs-number\\">-1</span>)\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      step=<span class=\\"hljs-built_in\\">Math</span>.min(dp(i+<span class=\\"hljs-number\\">1</span>,j),dp(i,j<span class=\\"hljs-number\\">-1</span>),step)+<span class=\\"hljs-number\\">1</span>\\n    }\\n    hash[i+<span class=\\"hljs-string\\">\' \'</span>+j]=step\\n    <span class=\\"hljs-keyword\\">return</span> step\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> dp(<span class=\\"hljs-number\\">0</span>,s.length<span class=\\"hljs-number\\">-1</span>)\\n};\\n</code></pre>\\n"],"querySlug":"minimum-insertion-steps-to-make-a-string-palindrome","created_at":"2020-01-05","timeArr":[2020,0,5,12,43,12,0],"hasThinking":false,"content":"<p>给你一个字符串&nbsp;<code>s</code>&nbsp;，每一次操作你都可以在字符串的任意位置插入任意字符。</p>\\n\\n<p>请你返回让&nbsp;<code>s</code>&nbsp;成为回文串的&nbsp;<strong>最少操作次数</strong>&nbsp;。</p>\\n\\n<p>「回文串」是正读和反读都相同的字符串。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = &quot;zzazz&quot;\\n<strong>输出：</strong>0\\n<strong>解释：</strong>字符串 &quot;zzazz&quot; 已经是回文串了，所以不需要做任何插入操作。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = &quot;mbadm&quot;\\n<strong>输出：</strong>2\\n<strong>解释：</strong>字符串可变为 &quot;mbdadbm&quot; 或者 &quot;mdbabdm&quot; 。\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = &quot;leetcode&quot;\\n<strong>输出：</strong>5\\n<strong>解释：</strong>插入 5 个字符后字符串变为 &quot;leetcodocteel&quot; 。\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = &quot;g&quot;\\n<strong>输出：</strong>0\\n</pre>\\n\\n<p><strong>示例 5：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = &quot;no&quot;\\n<strong>输出：</strong>1\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= s.length &lt;= 500</code></li>\\n\\t<li><code>s</code>&nbsp;中所有字符都是小写字母。</li>\\n</ul>\\n","title":"1312. 让字符串成为回文串的最少插入次数","relatedTags":["字符串","动态规划"],"difficult":"Hard","lang":["javascript"],"uniqueID":"1312","slug":"1312-Minimum-Insertion-Steps-to-Make-a-String-Palindrome"}')}}]);