(window.webpackJsonp=window.webpackJsonp||[]).push([[606],{1404:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">nums</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">limit</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> minMoves = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">nums, limit</span>) </span>{\\n    <span class=\\"hljs-keyword\\">let</span> len=nums.length\\n    <span class=\\"hljs-keyword\\">let</span> delta=<span class=\\"hljs-built_in\\">Array</span>(<span class=\\"hljs-number\\">2</span>*limit+<span class=\\"hljs-number\\">2</span>).fill(<span class=\\"hljs-number\\">0</span>)\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i &lt; len / <span class=\\"hljs-number\\">2</span>; ++i){\\n        <span class=\\"hljs-keyword\\">let</span> lo=<span class=\\"hljs-number\\">1</span>+<span class=\\"hljs-built_in\\">Math</span>.min(nums[i],nums[len<span class=\\"hljs-number\\">-1</span>-i])\\n        <span class=\\"hljs-keyword\\">let</span> hi=limit+<span class=\\"hljs-built_in\\">Math</span>.max(nums[i],nums[len<span class=\\"hljs-number\\">-1</span>-i])\\n        <span class=\\"hljs-keyword\\">let</span> sum=nums[i]+nums[len<span class=\\"hljs-number\\">-1</span>-i]\\n        delta[lo]--\\n        delta[sum]--\\n        delta[sum+<span class=\\"hljs-number\\">1</span>]++\\n        delta[hi+<span class=\\"hljs-number\\">1</span>]++\\n    }\\n    <span class=\\"hljs-keyword\\">let</span> now = len;\\n    <span class=\\"hljs-keyword\\">let</span> ans = len;\\n    <span class=\\"hljs-keyword\\">for</span> (<span class=\\"hljs-keyword\\">let</span> i = <span class=\\"hljs-number\\">2</span>; i &lt;= limit * <span class=\\"hljs-number\\">2</span>; ++i) {\\n        now += delta[i];\\n        ans = <span class=\\"hljs-built_in\\">Math</span>.min(ans, now);\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> ans;\\n};\\n</code></pre>\\n"],"querySlug":"minimum-moves-to-make-array-complementary","created_at":"2020-12-13","timeArr":[2020,11,13,10,30,17,0],"hasThinking":false,"content":"<p>给你一个长度为<strong> 偶数</strong> <code>n</code> 的整数数组 <code>nums</code> 和一个整数 <code>limit</code> 。每一次操作，你可以将 <code>nums</code> 中的任何整数替换为 <code>1</code> 到 <code>limit</code> 之间的另一个整数。</p>\\n\\n<p>如果对于所有下标 <code>i</code>（<strong>下标从 </strong><code>0</code><strong> 开始</strong>），<code>nums[i] + nums[n - 1 - i]</code> 都等于同一个数，则数组 <code>nums</code> 是 <strong>互补的</strong> 。例如，数组 <code>[1,2,3,4]</code> 是互补的，因为对于所有下标 <code>i</code> ，<code>nums[i] + nums[n - 1 - i] = 5</code> 。</p>\\n\\n<p>返回使数组 <strong>互补</strong> 的 <strong>最少</strong> 操作次数。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [1,2,4,3], limit = 4\\n<strong>输出：</strong>1\\n<strong>解释：</strong>经过 1 次操作，你可以将数组 nums 变成 [1,2,<strong>2</strong>,3]（加粗元素是变更的数字）：\\nnums[0] + nums[3] = 1 + 3 = 4.\\nnums[1] + nums[2] = 2 + 2 = 4.\\nnums[2] + nums[1] = 2 + 2 = 4.\\nnums[3] + nums[0] = 3 + 1 = 4.\\n对于每个 i ，nums[i] + nums[n-1-i] = 4 ，所以 nums 是互补的。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [1,2,2,1], limit = 2\\n<strong>输出：</strong>2\\n<strong>解释：</strong>经过 2 次操作，你可以将数组 nums 变成 [<strong>2</strong>,2,2,<strong>2</strong>] 。你不能将任何数字变更为 3 ，因为 3 > limit 。\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [1,2,1,2], limit = 2\\n<strong>输出：</strong>0\\n<strong>解释：</strong>nums 已经是互补的。\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>n == nums.length</code></li>\\n\\t<li><code>2 <= n <= 10<sup>5</sup></code></li>\\n\\t<li><code>1 <= nums[i] <= limit <= 10<sup>5</sup></code></li>\\n\\t<li><code>n</code> 是偶数。</li>\\n</ul>\\n","title":"1674. 使数组互补的最少操作次数","relatedTags":["数组","哈希表","前缀和"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1674","slug":"1674-Minimum-Moves-to-Make-Array-Complementary"}')}}]);