(window.webpackJsonp=window.webpackJsonp||[]).push([[535],{1333:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">positions</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> getMinDistSum = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">positions</span>) </span>{\\n    <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-literal\\">Infinity</span>\\n    <span class=\\"hljs-keyword\\">let</span> center=<span class=\\"hljs-literal\\">null</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;=<span class=\\"hljs-number\\">100</span>;i++){\\n        <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;=<span class=\\"hljs-number\\">100</span>;j++){\\n            <span class=\\"hljs-keyword\\">let</span> sum=<span class=\\"hljs-number\\">0</span>\\n            <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> k=<span class=\\"hljs-number\\">0</span>;k&lt;positions.length;k++){\\n                <span class=\\"hljs-keyword\\">let</span> [x,y]=positions[k]\\n                sum+=<span class=\\"hljs-built_in\\">Math</span>.sqrt((x-i)*(x-i)+(y-j)*(y-j))\\n            }\\n            <span class=\\"hljs-keyword\\">if</span>(res&gt;sum){\\n                res=sum\\n                center=[i,j]\\n            }\\n        }\\n    }\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0.01</span>;i&lt;<span class=\\"hljs-number\\">1</span>;i+=<span class=\\"hljs-number\\">0.01</span>){\\n        <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0.01</span>;j&lt;<span class=\\"hljs-number\\">1</span>;j+=<span class=\\"hljs-number\\">0.01</span>){\\n            <span class=\\"hljs-keyword\\">let</span> [nx1,ny1]=[center[<span class=\\"hljs-number\\">0</span>]+i,center[<span class=\\"hljs-number\\">1</span>]+j]\\n            <span class=\\"hljs-keyword\\">let</span> [nx2,ny2]=[center[<span class=\\"hljs-number\\">0</span>]-i,center[<span class=\\"hljs-number\\">1</span>]+j]\\n            <span class=\\"hljs-keyword\\">let</span> [nx3,ny3]=[center[<span class=\\"hljs-number\\">0</span>]+i,center[<span class=\\"hljs-number\\">1</span>]-j]\\n            <span class=\\"hljs-keyword\\">let</span> [nx4,ny4]=[center[<span class=\\"hljs-number\\">0</span>]-i,center[<span class=\\"hljs-number\\">1</span>]-j]\\n            <span class=\\"hljs-keyword\\">let</span> sum1=<span class=\\"hljs-number\\">0</span>,sum2=<span class=\\"hljs-number\\">0</span>,sum3=<span class=\\"hljs-number\\">0</span>,sum4=<span class=\\"hljs-number\\">0</span>\\n            <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> k=<span class=\\"hljs-number\\">0</span>;k&lt;positions.length;k++){\\n                <span class=\\"hljs-keyword\\">let</span> [x,y]=positions[k]\\n                sum1+=<span class=\\"hljs-built_in\\">Math</span>.sqrt((x-nx1)*(x-nx1)+(y-ny1)*(y-ny1))\\n                sum2+=<span class=\\"hljs-built_in\\">Math</span>.sqrt((x-nx2)*(x-nx2)+(y-ny2)*(y-ny2))\\n                sum3+=<span class=\\"hljs-built_in\\">Math</span>.sqrt((x-nx3)*(x-nx3)+(y-ny3)*(y-ny3))\\n                sum4+=<span class=\\"hljs-built_in\\">Math</span>.sqrt((x-nx4)*(x-nx4)+(y-ny4)*(y-ny4))\\n            }\\n            <span class=\\"hljs-keyword\\">if</span>(res&gt;sum1){\\n                res=sum1\\n                center=[nx1,ny1]\\n            }\\n            <span class=\\"hljs-keyword\\">if</span>(res&gt;sum2){\\n                res=sum2\\n                center=[nx2,ny2]\\n            }\\n            <span class=\\"hljs-keyword\\">if</span>(res&gt;sum3){\\n                res=sum3\\n                center=[nx3,ny3]\\n            }\\n            <span class=\\"hljs-keyword\\">if</span>(res&gt;sum4){\\n                res=sum4\\n                center=[nx4,ny4]\\n            }\\n        }\\n    }\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0.0001</span>;i&lt;<span class=\\"hljs-number\\">0.01</span>;i+=<span class=\\"hljs-number\\">0.0001</span>){\\n        <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0.0001</span>;j&lt;<span class=\\"hljs-number\\">0.01</span>;j+=<span class=\\"hljs-number\\">0.0001</span>){\\n            <span class=\\"hljs-keyword\\">let</span> [nx1,ny1]=[center[<span class=\\"hljs-number\\">0</span>]+i,center[<span class=\\"hljs-number\\">1</span>]+j]\\n            <span class=\\"hljs-keyword\\">let</span> [nx2,ny2]=[center[<span class=\\"hljs-number\\">0</span>]-i,center[<span class=\\"hljs-number\\">1</span>]+j]\\n            <span class=\\"hljs-keyword\\">let</span> [nx3,ny3]=[center[<span class=\\"hljs-number\\">0</span>]+i,center[<span class=\\"hljs-number\\">1</span>]-j]\\n            <span class=\\"hljs-keyword\\">let</span> [nx4,ny4]=[center[<span class=\\"hljs-number\\">0</span>]-i,center[<span class=\\"hljs-number\\">1</span>]-j]\\n            <span class=\\"hljs-keyword\\">let</span> sum1=<span class=\\"hljs-number\\">0</span>,sum2=<span class=\\"hljs-number\\">0</span>,sum3=<span class=\\"hljs-number\\">0</span>,sum4=<span class=\\"hljs-number\\">0</span>\\n            <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> k=<span class=\\"hljs-number\\">0</span>;k&lt;positions.length;k++){\\n                <span class=\\"hljs-keyword\\">let</span> [x,y]=positions[k]\\n                sum1+=<span class=\\"hljs-built_in\\">Math</span>.sqrt((x-nx1)*(x-nx1)+(y-ny1)*(y-ny1))\\n                sum2+=<span class=\\"hljs-built_in\\">Math</span>.sqrt((x-nx2)*(x-nx2)+(y-ny2)*(y-ny2))\\n                sum3+=<span class=\\"hljs-built_in\\">Math</span>.sqrt((x-nx3)*(x-nx3)+(y-ny3)*(y-ny3))\\n                sum4+=<span class=\\"hljs-built_in\\">Math</span>.sqrt((x-nx4)*(x-nx4)+(y-ny4)*(y-ny4))\\n            }\\n            <span class=\\"hljs-keyword\\">if</span>(res&gt;sum1){\\n                res=sum1\\n                center=[nx1,ny1]\\n            }\\n            <span class=\\"hljs-keyword\\">if</span>(res&gt;sum2){\\n                res=sum2\\n                center=[nx2,ny2]\\n            }\\n            <span class=\\"hljs-keyword\\">if</span>(res&gt;sum3){\\n                res=sum3\\n                center=[nx3,ny3]\\n            }\\n            <span class=\\"hljs-keyword\\">if</span>(res&gt;sum4){\\n                res=sum4\\n                center=[nx4,ny4]\\n            }\\n        }\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"best-position-for-a-service-centre","created_at":"2020-07-12","timeArr":[2020,6,12,11,30,58,0],"hasThinking":false,"content":"<p>一家快递公司希望在新城市建立新的服务中心。公司统计了该城市所有客户在二维地图上的坐标，并希望能够以此为依据为新的服务中心选址：使服务中心 <strong>到所有客户的欧几里得距离的总和最小</strong> 。</p>\\n\\n<p>给你一个数组 <code>positions</code> ，其中 <code>positions[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> 表示第 <code>i</code> 个客户在二维地图上的位置，返回到所有客户的 <strong>欧几里得距离的最小总和 。</strong></p>\\n\\n<p>换句话说，请你为服务中心选址，该位置的坐标 <code>[x<sub>centre</sub>, y<sub>centre</sub>]</code> 需要使下面的公式取到最小值：</p>\\n\\n<p><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/07/12/q4_edited.jpg\\"></p>\\n\\n<p>与真实值误差在 <code>10^-5</code> 之内的答案将被视作正确答案。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<p><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/07/12/q4_e1.jpg\\" style=\\"height: 362px; width: 377px;\\"></p>\\n\\n<pre><strong>输入：</strong>positions = [[0,1],[1,0],[1,2],[2,1]]\\n<strong>输出：</strong>4.00000\\n<strong>解释：</strong>如图所示，你可以选 [x<sub>centre</sub>, y<sub>centre</sub>] = [1, 1] 作为新中心的位置，这样一来到每个客户的距离就都是 1，所有距离之和为 4 ，这也是可以找到的最小值。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<p><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/07/12/q4_e3.jpg\\" style=\\"height: 419px; width: 419px;\\"></p>\\n\\n<pre><strong>输入：</strong>positions = [[1,1],[3,3]]\\n<strong>输出：</strong>2.82843\\n<strong>解释：</strong>欧几里得距离可能的最小总和为 sqrt(2) + sqrt(2) = 2.82843\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>positions = [[1,1]]\\n<strong>输出：</strong>0.00000\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre><strong>输入：</strong>positions = [[1,1],[0,0],[2,0]]\\n<strong>输出：</strong>2.73205\\n<strong>解释：</strong>乍一看，你可能会将中心定在 [1, 0] 并期待能够得到最小总和，但是如果选址在 [1, 0] 距离总和为 3\\n如果将位置选在 [1.0, 0.5773502711] ，距离总和将会变为 2.73205\\n当心精度问题！\\n</pre>\\n\\n<p><strong>示例 5：</strong></p>\\n\\n<pre><strong>输入：</strong>positions = [[0,1],[3,2],[4,5],[7,6],[8,9],[11,1],[2,12]]\\n<strong>输出：</strong>32.94036\\n<strong>解释：</strong>你可以用 [4.3460852395, 4.9813795505] 作为新中心的位置\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;=&nbsp;positions.length &lt;= 50</code></li>\\n\\t<li><code>positions[i].length == 2</code></li>\\n\\t<li><code>0 &lt;=&nbsp;positions[i][0],&nbsp;positions[i][1] &lt;= 100</code></li>\\n</ul>\\n","title":"1515. 服务中心的最佳位置","relatedTags":["几何","数学","随机化"],"difficult":"Hard","lang":["javascript"],"uniqueID":"1515","slug":"1515-Best-Position-for-a-Service-Centre"}')}}]);