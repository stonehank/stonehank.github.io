(window.webpackJsonp=window.webpackJsonp||[]).push([[823],{1621:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">nums</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> firstMissingPositive = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">nums</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> n=nums.length\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;nums.length;i++){\\n    <span class=\\"hljs-keyword\\">while</span>(nums[i]&gt;<span class=\\"hljs-number\\">0</span> &amp;&amp; nums[i]&lt;=n &amp;&amp; nums[nums[i]<span class=\\"hljs-number\\">-1</span>]!==nums[i]){\\n      swap(i,nums[i]<span class=\\"hljs-number\\">-1</span>)\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;nums.length;i++){\\n    <span class=\\"hljs-keyword\\">if</span>(nums[i]!==i+<span class=\\"hljs-number\\">1</span>)<span class=\\"hljs-keyword\\">return</span> i+<span class=\\"hljs-number\\">1</span>\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> n+<span class=\\"hljs-number\\">1</span>\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">swap</span>(<span class=\\"hljs-params\\">i,j</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> t=nums[i]\\n    nums[i]=nums[j]\\n    nums[j]=t\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"first-missing-positive","created_at":"2019-03-11","timeArr":[2019,2,11,17,51,27,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>将每一个数字放到它应该存在的位置，如果<code>nums[i]&lt;=0</code>或者<code>nums[i]&gt;n</code>(<code>n</code>为当前数组的长度)，不处理，因此如果存在以上的数字，那么最最终结果一定在<code>[1,n]</code>之间。</p>\\n<p>因此，只需要对<code>[1,n]</code>内部的数字放到对应的<code>num-1</code>索引上，例如<code>1</code>就应该放到索引<code>0</code>上。</p>\\n<p>通过交换将数字都放好后，对数字遍历查询，如果找到中间某个数字不连续<code>A[i]!==i+1</code>，那么就是结果，如果不能存在不连续的数字，返回<code>n</code>。</p>\\n","content":"<p>给你一个未排序的整数数组 <code>nums</code> ，请你找出其中没有出现的最小的正整数。</p>\\n请你实现时间复杂度为 <code>O(n)</code> 并且只使用常数级别额外空间的解决方案。\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [1,2,0]\\n<strong>输出：</strong>3\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [3,4,-1,1]\\n<strong>输出：</strong>2\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [7,8,9,11,12]\\n<strong>输出：</strong>1\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= nums.length <= 5 * 10<sup>5</sup></code></li>\\n\\t<li><code>-2<sup>31</sup> <= nums[i] <= 2<sup>31</sup> - 1</code></li>\\n</ul>\\n","title":"41. 缺失的第一个正数","relatedTags":["数组","哈希表"],"difficult":"Hard","lang":["javascript"],"uniqueID":"41","slug":"41-First-Missing-Positive"}')}}]);