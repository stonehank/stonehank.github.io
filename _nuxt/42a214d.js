(window.webpackJsonp=window.webpackJsonp||[]).push([[858],{1656:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">nums</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> jump = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">nums</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> dp=<span class=\\"hljs-built_in\\">Array</span>(nums.length).fill(<span class=\\"hljs-literal\\">Infinity</span>)\\n  dp[<span class=\\"hljs-number\\">0</span>]=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;dp.length;i++){\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;i;j++){\\n      <span class=\\"hljs-keyword\\">if</span>(i-j &lt;= nums[j])dp[i]=<span class=\\"hljs-built_in\\">Math</span>.min(dp[i],dp[j]+<span class=\\"hljs-number\\">1</span>)\\n    }\\n  }\\n  <span class=\\"hljs-comment\\">// console.log(dp)</span>\\n  <span class=\\"hljs-keyword\\">return</span> dp[dp.length<span class=\\"hljs-number\\">-1</span>]\\n};\\n</code></pre>\\n"],"querySlug":"jump-game-ii","created_at":"2019-01-23","timeArr":[2019,0,23,20,29,59,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>贪心算法，定义一个变量<code>maxRange</code>表示每一个位置能跳到的最大位置，定义变量<code>rangeEnd</code>表示当前能跳到最大的位置，遍历<code>nums</code>不断更新<code>maxRange</code>，\\n当<code>i===rangeEnd</code>，更新<code>rangeEnd</code>为最新的<code>maxRange</code>，表示当前这一段能跳的最远距离。</p>\\n","content":"<p>给你一个非负整数数组 <code>nums</code> ，你最初位于数组的第一个位置。</p>\\n\\n<p>数组中的每个元素代表你在该位置可以跳跃的最大长度。</p>\\n\\n<p>你的目标是使用最少的跳跃次数到达数组的最后一个位置。</p>\\n\\n<p>假设你总是可以到达数组的最后一个位置。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1:</strong></p>\\n\\n<pre>\\n<strong>输入:</strong> nums = [2,3,1,1,4]\\n<strong>输出:</strong> 2\\n<strong>解释:</strong> 跳到最后一个位置的最小跳跃数是 <code>2</code>。\\n     从下标为 0 跳到下标为 1 的位置，跳 <code>1</code> 步，然后跳 <code>3</code> 步到达数组的最后一个位置。\\n</pre>\\n\\n<p><strong>示例 2:</strong></p>\\n\\n<pre>\\n<strong>输入:</strong> nums = [2,3,0,1,4]\\n<strong>输出:</strong> 2\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示:</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= nums.length <= 10<sup>4</sup></code></li>\\n\\t<li><code>0 <= nums[i] <= 1000</code></li>\\n</ul>\\n","title":"45. 跳跃游戏 II","relatedTags":["贪心","数组","动态规划"],"difficult":"Middle","lang":["javascript"],"uniqueID":"45","slug":"45-Jump-Game-II"}')}}]);