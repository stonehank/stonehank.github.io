(window.webpackJsonp=window.webpackJsonp||[]).push([[427],{1225:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">mat</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">k</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> kWeakestRows = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">mat, k</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> count=[]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;mat.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> c=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;mat[i].length;j++){\\n      <span class=\\"hljs-keyword\\">if</span>(mat[i][j]===<span class=\\"hljs-number\\">1</span>)c++\\n      <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">break</span>\\n    }\\n    count[i]=[i,c]\\n  }\\n  <span class=\\"hljs-comment\\">// console.log(count)</span>\\n  count.sort(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">a,b</span>)=&gt;</span>a[<span class=\\"hljs-number\\">1</span>]===b[<span class=\\"hljs-number\\">1</span>] ? a[<span class=\\"hljs-number\\">0</span>]-b[<span class=\\"hljs-number\\">0</span>] : a[<span class=\\"hljs-number\\">1</span>]-b[<span class=\\"hljs-number\\">1</span>])\\n  <span class=\\"hljs-keyword\\">return</span> count.slice(<span class=\\"hljs-number\\">0</span>,k).map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">o</span>=&gt;</span>o[<span class=\\"hljs-number\\">0</span>])\\n};\\n</code></pre>\\n"],"querySlug":"the-k-weakest-rows-in-a-matrix","created_at":"2020-02-02","timeArr":[2020,1,2,10,34,14,0],"hasThinking":false,"content":"<p>给你一个大小为 <code>m * n</code> 的矩阵 <code>mat</code>，矩阵由若干军人和平民组成，分别用 1 和 0 表示。</p>\\n\\n<p>请你返回矩阵中战斗力最弱的 <code>k</code> 行的索引，按从最弱到最强排序。</p>\\n\\n<p>如果第 <em><strong>i</strong></em> 行的军人数量少于第 <em><strong>j</strong></em> 行，或者两行军人数量相同但<em><strong> i</strong></em> 小于 <em><strong>j</strong></em>，那么我们认为第<em><strong> i </strong></em>行的战斗力比第<em><strong> j </strong></em>行弱。</p>\\n\\n<p>军人 <strong>总是</strong> 排在一行中的靠前位置，也就是说 1 总是出现在 0 之前。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>mat = \\n[[1,1,0,0,0],\\n [1,1,1,1,0],\\n [1,0,0,0,0],\\n [1,1,0,0,0],\\n [1,1,1,1,1]], \\nk = 3\\n<strong>输出：</strong>[2,0,3]\\n<strong>解释：</strong>\\n每行中的军人数目：\\n行 0 -> 2 \\n行 1 -> 4 \\n行 2 -> 1 \\n行 3 -> 2 \\n行 4 -> 5 \\n从最弱到最强对这些行排序后得到 [2,0,3,1,4]\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>mat = \\n[[1,0,0,0],\\n [1,1,1,1],\\n [1,0,0,0],\\n [1,0,0,0]], \\nk = 2\\n<strong>输出：</strong>[0,2]\\n<strong>解释：</strong> \\n每行中的军人数目：\\n行 0 -> 1 \\n行 1 -> 4 \\n行 2 -> 1 \\n行 3 -> 1 \\n从最弱到最强对这些行排序后得到 [0,2,3,1]\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>m == mat.length</code></li>\\n\\t<li><code>n == mat[i].length</code></li>\\n\\t<li><code>2 <= n, m <= 100</code></li>\\n\\t<li><code>1 <= k <= m</code></li>\\n\\t<li><code>matrix[i][j]</code> 不是 0 就是 1</li>\\n</ul>\\n","title":"1337. 矩阵中战斗力最弱的 K 行","relatedTags":["数组","二分查找","矩阵","排序","堆（优先队列）"],"difficult":"Easy","lang":["javascript"],"uniqueID":"1337","slug":"1337-The-K-Weakest-Rows-in-a-Matrix"}')}}]);