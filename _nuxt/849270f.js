(window.webpackJsonp=window.webpackJsonp||[]).push([[188],{670:function(n){n.exports=JSON.parse('{"content":"<h2 id=\\"popstate\\">popstate</h2>\\n<p>只在浏览器下前进后退和改变hash触发，<code>pushState</code>和<code>replaceState</code>并不会触发</p>\\n<p>源码中给<code>popstate</code>和<code>navigate</code>事件绑定了一旦执行就更新当前location(传递到context中的)</p>\\n<h2 id=\\"ti-dai-pushstate-he-replacestate\\">替代pushState和replaceState</h2>\\n<p>源码中对<code>pushState</code>和<code>replaceState</code>操作用<code>try...catch</code>包裹，因为有一个bug，<a href=\\"https://forums.developer.apple.com/thread/36650\\">iOS Safari limits to 100 pushState calls</a></p>\\n<p>因此当出现catch，会执行<code>location.replace</code>或者<code>location.assign</code></p>\\n<ul>\\n<li><code>location.replace</code> 跳转url，替代当前，不增加历史记录</li>\\n<li><code>location.assign</code> 跳转url，增加历史记录</li>\\n</ul>\\n<h2 id=\\"createcontextdefaultvalue\\">createContext(defaultValue)</h2>\\n<p>官方(英文)：</p>\\n<blockquote>\\n<p>If there is no Provider for this context above, the value argument will be equal to the defaultValue that was passed to createContext().</p>\\n</blockquote>\\n<p>中文文档：</p>\\n<blockquote>\\n<p>如果上层的组件树没有一个匹配的 Provider，而此时你需要渲染一个 Consumer 组件，那么你可以用到 defaultValue 。这有助于在不封装它们的情况下对组件进行测试。</p>\\n</blockquote>\\n<p>源码中这么用的</p>\\n<pre><code class=\\"language-jsx\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-keyword\\">const</span> createNamedContext = <span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">name, defaultValue</span>) =&gt;</span> {\\n  <span class=\\"hljs-keyword\\">const</span> Ctx = createContext(defaultValue);\\n  Ctx.Consumer.displayName = <span class=\\"hljs-string\\">`<span class=\\"hljs-subst\\">${name}</span>.Consumer`</span>;\\n  Ctx.Provider.displayName = <span class=\\"hljs-string\\">`<span class=\\"hljs-subst\\">${name}</span>.Provider`</span>;\\n  <span class=\\"hljs-keyword\\">return</span> Ctx;\\n};\\n\\n<span class=\\"hljs-keyword\\">let</span> BaseContext = createNamedContext(<span class=\\"hljs-string\\">\\"Base\\"</span>, { <span class=\\"hljs-attr\\">baseuri</span>: <span class=\\"hljs-string\\">\\"/\\"</span>, <span class=\\"hljs-attr\\">basepath</span>: <span class=\\"hljs-string\\">\\"/\\"</span> });\\n\\n<span class=\\"hljs-keyword\\">let</span> Router = <span class=\\"hljs-function\\"><span class=\\"hljs-params\\">props</span> =&gt;</span> (\\n  &lt;BaseContext.Consumer&gt;\\n    {/* 此处baseContext是 { baseuri: \\"/\\", basepath: \\"/\\" } */}\\n    {baseContext =&gt; (\\n      &lt;Location&gt;\\n        {locationContext =&gt; (\\n          &lt;RouterImpl {...baseContext} {...locationContext} {...props} /&gt;\\n        )}\\n      &lt;/Location&gt;\\n    )}\\n  &lt;/BaseContext.Consumer&gt;</code></pre></code></pre>\\n<h2 id=\\"gong-ju-jie-shao--invariant\\">工具介绍 invariant</h2>\\n<p><code>invariant(boolean,something)</code> 参数1为false就<code>throw 参数2(something)</code></p>\\n<h2 id=\\"react-zhong-elementtype\\">react中element.type</h2>\\n<p>用来判断组件的类型</p>\\n<p>例如：</p>\\n<pre><code class=\\"language-jsx\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">// 1、高阶组件</span>\\n<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">HOC</span>(<span class=\\"hljs-params\\">com</span>)</span>{\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-keyword\\">extends</span> <span class=\\"hljs-title\\">React</span>.<span class=\\"hljs-title\\">Component</span></span>{\\n    render(){\\n      <span class=\\"hljs-keyword\\">return</span> &lt;com /&gt;\\n    }\\n  }\\n}\\n<span class=\\"hljs-comment\\">// 2、自定义组件</span>\\n<span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">MyComponent</span> <span class=\\"hljs-keyword\\">extends</span> <span class=\\"hljs-title\\">React</span>.<span class=\\"hljs-title\\">Component</span></span>{\\n    render(){\\n        <span class=\\"hljs-keyword\\">return</span> &lt;div&gt;...&lt;/div&gt;\\n    }\\n}\\n<span class=\\"hljs-comment\\">// 3、无状态组件</span>\\n<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">DumbComponent</span>(<span class=\\"hljs-params\\">props</span>)</span>{\\n    <span class=\\"hljs-keyword\\">return</span> &lt;button&gt;show&lt;/button&gt;\\n}\\n<span class=\\"hljs-comment\\">// 4、原生标签（直接写到children里）</span>\\n\\n<span class=\\"hljs-comment\\">// 判断</span>\\n<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">checkType</span>(<span class=\\"hljs-params\\">element</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> type=element.type\\n    <span class=\\"hljs-keyword\\">if</span>(type.prototype &amp;&amp; type.prototype.isReactComponent){\\n        <span class=\\"hljs-built_in\\">console</span>.log(<span class=\\"hljs-string\\">\'自定义React组件\'</span>)\\n    }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-keyword\\">typeof</span> type === <span class=\\"hljs-string\\">\'function\'</span>){\\n        <span class=\\"hljs-built_in\\">console</span>.log(<span class=\\"hljs-string\\">\'是一个函数（高阶函数），继续调用\'</span>)\\n    }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-keyword\\">typeof</span> type === <span class=\\"hljs-string\\">\'string\'</span>){\\n        <span class=\\"hljs-built_in\\">console</span>.log(<span class=\\"hljs-string\\">\'是一个原生标签\'</span>)\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n        <span class=\\"hljs-built_in\\">console</span>.log(<span class=\\"hljs-string\\">\'其他\'</span>)\\n    }\\n}\\n<span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Check</span> <span class=\\"hljs-keyword\\">extends</span> <span class=\\"hljs-title\\">React</span>.<span class=\\"hljs-title\\">Component</span></span>{\\n  render(){\\n    React.Children.map(<span class=\\"hljs-keyword\\">this</span>.props.children,element=&gt;{\\n      checkType(element)\\n    })\\n    <span class=\\"hljs-keyword\\">return</span> &lt;div /&gt;\\n  }\\n}\\nReactDOM.render(\\n  &lt;Check&gt;\\n    &lt;HOC /&gt;      \\n    &lt;MyComponent /&gt;\\n    &lt;DumbComponent /&gt;\\n    &lt;div /&gt;\\n  &lt;/Check&gt;,\\n  <span class=\\"hljs-built_in\\">document</span>.getElementById(<span class=\\"hljs-string\\">\'container\'</span>)\\n);\\n<span class=\\"hljs-comment\\">/*\\n\\"是一个函数（高阶函数），继续调用\\"\\n\\"自定义React组件\\"\\n\\"是一个函数（高阶函数），继续调用\\"（此处无状态函数组件会被认为函数）\\n\\"是一个原生标签\\"\\n*/</span></code></pre></code></pre>\\n<p>源码中用来检测是否重定向组件：</p>\\n<pre><code class=\\"language-jsx\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">RouterImpl</span> <span class=\\"hljs-keyword\\">extends</span> <span class=\\"hljs-title\\">React</span>.<span class=\\"hljs-title\\">PureComponent</span> </span>{\\n    render(){\\n        <span class=\\"hljs-comment\\">/* 其他代码 */</span>\\n        <span class=\\"hljs-keyword\\">let</span> routes = React.Children.map(children, createRoute(basepath));\\n        <span class=\\"hljs-comment\\">/* 其他代码 */</span>\\n    }        \\n}\\n\\n<span class=\\"hljs-keyword\\">let</span> createRoute = <span class=\\"hljs-function\\"><span class=\\"hljs-params\\">basepath</span> =&gt;</span> <span class=\\"hljs-function\\"><span class=\\"hljs-params\\">element</span> =&gt;</span> {\\n    <span class=\\"hljs-comment\\">// element.type === Redirect 用于检测是否某个组件</span>\\n    invariant(\\n        element.props.path || element.props.default || element.type === Redirect,\\n        <span class=\\"hljs-string\\">`&lt;Router&gt;: Children of &lt;Router&gt; must have a \\\\`path\\\\` or \\\\`default\\\\` prop, or be a \\\\`&lt;Redirect&gt;\\\\`. None found on element type \\\\`<span class=\\"hljs-subst\\">${\\n         element.type\\n        }</span>\\\\``</span>\\n     );\\n  <span class=\\"hljs-comment\\">/* 其他代码 */</span>\\n}\\n\\n<span class=\\"hljs-comment\\">// 这里Redirect是个无状态组件  </span>\\n<span class=\\"hljs-keyword\\">let</span> Redirect = <span class=\\"hljs-function\\"><span class=\\"hljs-params\\">props</span> =&gt;</span> (\\n  &lt;Location&gt;\\n    {locationContext =&gt; &lt;RedirectImpl {...locationContext} {...props} /&gt;}\\n  &lt;/Location&gt;\\n);</code></pre></code></pre>\\n","toc":[{"anchor":"popstate","level":2,"text":"popstate"},{"anchor":"ti-dai-pushstate-he-replacestate","level":2,"text":"替代pushState和replaceState"},{"anchor":"createcontextdefaultvalue","level":2,"text":"createContext(defaultValue)"},{"anchor":"gong-ju-jie-shao--invariant","level":2,"text":"工具介绍 invariant"},{"anchor":"react-zhong-elementtype","level":2,"text":"react中element.type"}],"relatedTags":null,"created_at":"2018-07-05","timeArr":[2018,6,5,0,0,0,0],"title":"源码阅读-reach-router源码学习到的1","uuid":"7b0adb17281c68e7822dafdd8044bb001e43c5ee","summary":"<h4>popstate</h4>\\n<p>只在浏览器下前进后退和改变hash触发，<code>pushState</code>和<code>replaceState</code>并不会触发</p>\\n<p>源码中给<code>popstate</code>和<code>navigate</code>事件绑定了一旦执行就更新当前location(传递到context中的)</p>\\n<h4>替代pushState和replaceState</h4>\\n<p>源码...</p>","slug":"yuan-ma-yue-du-reach-router-yuan-ma-xue-xi-dao-de-1","sha":"7e151f2405bca2a2f40f41defe20c8dc037ac39e"}')}}]);