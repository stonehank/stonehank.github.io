(window.webpackJsonp=window.webpackJsonp||[]).push([[642],{1440:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">dungeon</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> calculateMinimumHP = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">dungeon</span>) </span>{\\n    <span class=\\"hljs-keyword\\">let</span> row=dungeon.length,\\n        col=dungeon[<span class=\\"hljs-number\\">0</span>].length\\n    <span class=\\"hljs-comment\\">// let dp=Array(row).fill(0).map(Array(col).fill(0))</span>\\n    <span class=\\"hljs-comment\\">// dp[0][0]=[Math.min(0-dungeon[0][0],0)+1,1]</span>\\n    <span class=\\"hljs-comment\\">// for(let i=0;i&lt;row;i++){</span>\\n    <span class=\\"hljs-comment\\">//     for(let j=0;j&lt;col;j++){</span>\\n    <span class=\\"hljs-comment\\">//         let curNeed=Math.min(0,0-dungeon[i][j])+1</span>\\n    <span class=\\"hljs-comment\\">//         let leftNeed=Math.max(0,curNeed-dp[i][j-1][1])</span>\\n    <span class=\\"hljs-comment\\">//         dp[i][j]=[]</span>\\n    <span class=\\"hljs-comment\\">//     }</span>\\n    <span class=\\"hljs-comment\\">// }</span>\\n    <span class=\\"hljs-keyword\\">let</span> moves=[[<span class=\\"hljs-number\\">1</span>,<span class=\\"hljs-number\\">0</span>],[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">1</span>]]\\n    <span class=\\"hljs-keyword\\">let</span> firstNeed=<span class=\\"hljs-built_in\\">Math</span>.max(<span class=\\"hljs-number\\">0</span>-dungeon[<span class=\\"hljs-number\\">0</span>][<span class=\\"hljs-number\\">0</span>],<span class=\\"hljs-number\\">0</span>)+<span class=\\"hljs-number\\">1</span>\\n    <span class=\\"hljs-keyword\\">let</span> arr=[[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">0</span>,firstNeed,firstNeed+dungeon[<span class=\\"hljs-number\\">0</span>][<span class=\\"hljs-number\\">0</span>]]]\\n    <span class=\\"hljs-keyword\\">let</span> minNeed=<span class=\\"hljs-literal\\">Infinity</span>\\n    <span class=\\"hljs-keyword\\">while</span>(arr.length&gt;<span class=\\"hljs-number\\">0</span>){\\n        <span class=\\"hljs-comment\\">// console.log(arr)</span>\\n        <span class=\\"hljs-keyword\\">let</span> len=arr.length\\n        <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;len;i++){\\n            <span class=\\"hljs-keyword\\">let</span> [x,y,preNeed,preRest]=arr.shift()\\n            <span class=\\"hljs-keyword\\">if</span>(x===row<span class=\\"hljs-number\\">-1</span> &amp;&amp; y===col<span class=\\"hljs-number\\">-1</span>)minNeed=<span class=\\"hljs-built_in\\">Math</span>.min(minNeed,preNeed)\\n            <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> [dx,dy] <span class=\\"hljs-keyword\\">of</span> moves){\\n                <span class=\\"hljs-keyword\\">let</span> newx=x+dx,newy=y+dy\\n                <span class=\\"hljs-keyword\\">if</span>(newx&lt;<span class=\\"hljs-number\\">0</span> || newy&lt;<span class=\\"hljs-number\\">0</span> || newx&gt;=row || newy&gt;=col)<span class=\\"hljs-keyword\\">continue</span>\\n                <span class=\\"hljs-keyword\\">let</span> cur=dungeon[newx][newy]\\n                <span class=\\"hljs-comment\\">// let [preNeed,preRest]=dp[x][y]</span>\\n                <span class=\\"hljs-keyword\\">let</span> curNeed,curRest\\n                <span class=\\"hljs-keyword\\">if</span>(cur&lt;<span class=\\"hljs-number\\">0</span>){\\n                    curNeed=preNeed+<span class=\\"hljs-built_in\\">Math</span>.max(<span class=\\"hljs-number\\">0</span>,-cur+<span class=\\"hljs-number\\">1</span>-preRest)\\n                    curRest=preRest+curNeed+cur-preNeed\\n                }<span class=\\"hljs-keyword\\">else</span>{\\n                    curNeed=<span class=\\"hljs-number\\">0</span>+preNeed\\n                    curRest=preRest+curNeed+cur-preNeed\\n                }\\n                arr.push([newx,newy,curNeed,curRest])\\n            }\\n        }\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> minNeed\\n};\\n</code></pre>\\n","<pre class=\\"hljs\\"><code><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Solution</span><span class=\\"hljs-params\\">(object)</span>:</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">calculateMinimumHP</span><span class=\\"hljs-params\\">(self, dungeon)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type dungeon: List[List[int]]\\n        :rtype: int\\n        \\"\\"\\"</span>\\n        m=len(dungeon)\\n        n=len(dungeon[<span class=\\"hljs-number\\">0</span>])\\n        dp=[[float(<span class=\\"hljs-string\\">\'inf\'</span>)]*(n+<span class=\\"hljs-number\\">1</span>) <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(m+<span class=\\"hljs-number\\">1</span>)]\\n        dp[m][n<span class=\\"hljs-number\\">-1</span>]=<span class=\\"hljs-number\\">1</span>\\n        dp[m<span class=\\"hljs-number\\">-1</span>][n]=<span class=\\"hljs-number\\">1</span>\\n        <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(m<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">-1</span>):\\n          <span class=\\"hljs-keyword\\">for</span> j <span class=\\"hljs-keyword\\">in</span> range(n<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">-1</span>):\\n            dp[i][j]=min(dp[i+<span class=\\"hljs-number\\">1</span>][j]-dungeon[i][j],dp[i][j+<span class=\\"hljs-number\\">1</span>]-dungeon[i][j])\\n            <span class=\\"hljs-keyword\\">if</span> dp[i][j]&lt;<span class=\\"hljs-number\\">1</span>:\\n              dp[i][j]=<span class=\\"hljs-number\\">1</span>\\n              \\n        <span class=\\"hljs-keyword\\">return</span> dp[<span class=\\"hljs-number\\">0</span>][<span class=\\"hljs-number\\">0</span>]\\n</code></pre>\\n"],"querySlug":"dungeon-game","hasThinking":false,"content":"<style>\\r\\ntable.dungeon, .dungeon th, .dungeon td {\\r\\n  border:3px solid black;\\r\\n}\\r\\n\\r\\n .dungeon th, .dungeon td {\\r\\n    text-align: center;\\r\\n    height: 70px;\\r\\n    width: 70px;\\r\\n}\\r\\n</style>\\r\\n\\r\\n<p>一些恶魔抓住了公主（<strong>P</strong>）并将她关在了地下城的右下角。地下城是由&nbsp;M x N 个房间组成的二维网格。我们英勇的骑士（<strong>K</strong>）最初被安置在左上角的房间里，他必须穿过地下城并通过对抗恶魔来拯救公主。</p>\\r\\n\\r\\n<p>骑士的初始健康点数为一个正整数。如果他的健康点数在某一时刻降至 0 或以下，他会立即死亡。</p>\\r\\n\\r\\n<p>有些房间由恶魔守卫，因此骑士在进入这些房间时会失去健康点数（若房间里的值为<em>负整数</em>，则表示骑士将损失健康点数）；其他房间要么是空的（房间里的值为 <em>0</em>），要么包含增加骑士健康点数的魔法球（若房间里的值为<em>正整数</em>，则表示骑士将增加健康点数）。</p>\\r\\n\\r\\n<p>为了尽快到达公主，骑士决定每次只向右或向下移动一步。</p>\\r\\n\\r\\n<p>&nbsp;</p>\\r\\n\\r\\n<p><strong>编写一个函数来计算确保骑士能够拯救到公主所需的最低初始健康点数。</strong></p>\\r\\n\\r\\n<p>例如，考虑到如下布局的地下城，如果骑士遵循最佳路径 <code>右 -&gt; 右 -&gt; 下 -&gt; 下</code>，则骑士的初始健康点数至少为 <strong>7</strong>。</p>\\r\\n\\r\\n<table class=\\"dungeon\\">\\r\\n<tr> \\r\\n<td>-2 (K)</td> \\r\\n<td>-3</td> \\r\\n<td>3</td> \\r\\n</tr> \\r\\n<tr> \\r\\n<td>-5</td> \\r\\n<td>-10</td> \\r\\n<td>1</td> \\r\\n</tr> \\r\\n<tr> \\r\\n<td>10</td> \\r\\n<td>30</td> \\r\\n<td>-5 (P)</td> \\r\\n</tr> \\r\\n</table>\\r\\n\x3c!---2K   -3  3\\r\\n-5   -10   1\\r\\n10 30   5P--\x3e\\r\\n\\r\\n<p>&nbsp;</p>\\r\\n\\r\\n<p><strong>说明:</strong></p>\\r\\n\\r\\n<ul>\\r\\n\\t<li>\\r\\n\\t<p>骑士的健康点数没有上限。</p>\\r\\n\\t</li>\\r\\n\\t<li>任何房间都可能对骑士的健康点数造成威胁，也可能增加骑士的健康点数，包括骑士进入的左上角房间以及公主被监禁的右下角房间。</li>\\r\\n</ul>","title":"174. 地下城游戏","relatedTags":["数组","动态规划","矩阵"],"difficult":"Hard","lang":["javascript","python"],"uniqueID":"174","slug":"174-Dungeon-Game"}')}}]);