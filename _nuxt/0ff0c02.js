(window.webpackJsonp=window.webpackJsonp||[]).push([[1256],{2054:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">grid</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> surfaceArea = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">grid</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">let</span> N=grid.length\\n  <span class=\\"hljs-keyword\\">let</span> adj=[[<span class=\\"hljs-number\\">1</span>,<span class=\\"hljs-number\\">0</span>],[<span class=\\"hljs-number\\">1</span>,<span class=\\"hljs-number\\">0</span>],[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">-1</span>],[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">1</span>]]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;N;i++){\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;N;j++){\\n      <span class=\\"hljs-keyword\\">if</span>(grid[i][j]===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">continue</span>\\n      <span class=\\"hljs-keyword\\">let</span> area=<span class=\\"hljs-number\\">2</span>\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> [dx,dy] <span class=\\"hljs-keyword\\">of</span> adj){\\n        <span class=\\"hljs-keyword\\">let</span> nx=dx+i,ny=dy+j\\n        <span class=\\"hljs-keyword\\">if</span>(nx&lt;<span class=\\"hljs-number\\">0</span> || ny&lt;<span class=\\"hljs-number\\">0</span> || nx&gt;=N || ny&gt;=N)area+=grid[i][j]\\n        <span class=\\"hljs-keyword\\">else</span> area+=<span class=\\"hljs-built_in\\">Math</span>.max(<span class=\\"hljs-number\\">0</span>,grid[i][j]-grid[nx][ny])\\n      }\\n      res+=area\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"surface-area-of-3d-shapes","created_at":"2019-04-03","timeArr":[2019,3,3,16,7,56,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>常规办法就是对每一个位置的<code>上下左右</code>4个方向进行分析，分别求出当前位置的4个边还能剩多少未被覆盖的，再加上<code>顶上的面</code>和<code>底下的面</code>。</p>\\n<p>比较更好的办法对每一个位置，只需要求<code>上左</code>2个方向即可，即使当前的位置可能多了或者少了，但整个连续体的结果是正确的。</p>\\n<p>你可以想象前面有一个楼梯，假设这个楼梯就是三维方格摆放图，你能看到暴露的面，就是<code>最高一层楼梯的高度*楼梯的宽度</code>。</p>\\n","content":"<p>给你一个 <code>n * n</code> 的网格 <code>grid</code> ，上面放置着一些 <code>1 x 1 x 1</code> 的正方体。</p>\\n\\n<p>每个值 <code>v = grid[i][j]</code> 表示 <code>v</code> 个正方体叠放在对应单元格 <code>(i, j)</code> 上。</p>\\n\\n<p>放置好正方体后，任何直接相邻的正方体都会互相粘在一起，形成一些不规则的三维形体。</p>\\n\\n<p>请你返回最终这些形体的总表面积。</p>\\n\\n<p><strong>注意：</strong>每个形体的底面也需要计入表面积中。</p>\\n\\n<p> </p>\\n\\n<ul>\\n</ul>\\n\\n<p><strong>示例 1：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2021/01/08/tmp-grid1.jpg\\" style=\\"width: 82px; height: 82px;\\" />\\n<pre>\\n<strong>输入：</strong>grid = [[2]]\\n<strong>输出：</strong>10\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2021/01/08/tmp-grid2.jpg\\" style=\\"width: 162px; height: 162px;\\" />\\n<pre>\\n<strong>输入：</strong>grid = [[1,2],[3,4]]\\n<strong>输出：</strong>34\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2021/01/08/tmp-grid3.jpg\\" style=\\"width: 162px; height: 162px;\\" />\\n<pre>\\n<strong>输入：</strong>grid = [[1,0],[0,2]]\\n<strong>输出：</strong>16\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2021/01/08/tmp-grid4.jpg\\" style=\\"width: 242px; height: 242px;\\" />\\n<pre>\\n<strong>输入：</strong>grid = [[1,1,1],[1,0,1],[1,1,1]]\\n<strong>输出：</strong>32\\n</pre>\\n\\n<p><strong>示例 5：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2021/01/08/tmp-grid5.jpg\\" style=\\"width: 242px; height: 242px;\\" />\\n<pre>\\n<strong>输入：</strong>grid = [[2,2,2],[2,1,2],[2,2,2]]\\n<strong>输出：</strong>46\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>n == grid.length</code></li>\\n\\t<li><code>n == grid[i].length</code></li>\\n\\t<li><code>1 <= n <= 50</code></li>\\n\\t<li><code>0 <= grid[i][j] <= 50</code></li>\\n</ul>\\n","title":"892. 三维形体的表面积","relatedTags":["几何","数组","数学","矩阵"],"difficult":"Easy","lang":["javascript"],"uniqueID":"892","slug":"892-Surface-Area-of-3D-Shapes"}')}}]);