(window.webpackJsonp=window.webpackJsonp||[]).push([[946],{1744:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">boxes</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> removeBoxes = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">boxes</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> mem={}\\n  <span class=\\"hljs-keyword\\">return</span> remove(<span class=\\"hljs-number\\">0</span>,boxes.length<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">0</span>)\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">remove</span>(<span class=\\"hljs-params\\">i,j,k</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(i&gt;j)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">if</span>(mem[i+<span class=\\"hljs-string\\">\'\'</span>+j+<span class=\\"hljs-string\\">\'\'</span>+k]!=<span class=\\"hljs-literal\\">null</span>)<span class=\\"hljs-keyword\\">return</span> mem[i+<span class=\\"hljs-string\\">\'\'</span>+j+<span class=\\"hljs-string\\">\'\'</span>+k]\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> x=i+<span class=\\"hljs-number\\">1</span>;x&lt;=j &amp;&amp; boxes[x]===boxes[x<span class=\\"hljs-number\\">-1</span>];i++,k++,x++){}\\n    <span class=\\"hljs-keyword\\">let</span> res=(k+<span class=\\"hljs-number\\">1</span>)*(k+<span class=\\"hljs-number\\">1</span>)+remove(i+<span class=\\"hljs-number\\">1</span>,j,<span class=\\"hljs-number\\">0</span>)\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> m=i+<span class=\\"hljs-number\\">1</span>;m&lt;=j;m++){\\n      <span class=\\"hljs-keyword\\">if</span>(boxes[i]===boxes[m])\\n        res=<span class=\\"hljs-built_in\\">Math</span>.max(res,remove(i+<span class=\\"hljs-number\\">1</span>,m<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">0</span>)+remove(m,j,k+<span class=\\"hljs-number\\">1</span>))\\n    }\\n    mem[i+<span class=\\"hljs-string\\">\'\'</span>+j+<span class=\\"hljs-string\\">\'\'</span>+k]=res\\n    <span class=\\"hljs-keyword\\">return</span> res\\n  }\\n\\n};\\n</code></pre>\\n","<pre class=\\"hljs\\"><code><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Solution</span><span class=\\"hljs-params\\">(object)</span>:</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">removeBoxes</span><span class=\\"hljs-params\\">(self, boxes)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type boxes: List[int]\\n        :rtype: int\\n        \\"\\"\\"</span>\\n        mem={}\\n        <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">remove</span><span class=\\"hljs-params\\">(i,j,k)</span>:</span>\\n          <span class=\\"hljs-keyword\\">if</span> i&gt;j:<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>\\n          <span class=\\"hljs-keyword\\">if</span> (i,j,k) <span class=\\"hljs-keyword\\">in</span> mem:\\n            <span class=\\"hljs-keyword\\">return</span> mem[i,j,k]\\n          <span class=\\"hljs-keyword\\">while</span> i&lt;j <span class=\\"hljs-keyword\\">and</span> boxes[i]==boxes[i+<span class=\\"hljs-number\\">1</span>]:\\n            i+=<span class=\\"hljs-number\\">1</span>\\n            k+=<span class=\\"hljs-number\\">1</span>\\n          res=(k+<span class=\\"hljs-number\\">1</span>)**<span class=\\"hljs-number\\">2</span>+remove(i+<span class=\\"hljs-number\\">1</span>,j,<span class=\\"hljs-number\\">0</span>)\\n          <span class=\\"hljs-keyword\\">for</span> m <span class=\\"hljs-keyword\\">in</span> range(i+<span class=\\"hljs-number\\">1</span>,j+<span class=\\"hljs-number\\">1</span>):\\n            <span class=\\"hljs-keyword\\">if</span> boxes[m]==boxes[i]:\\n              res=max(res,remove(i+<span class=\\"hljs-number\\">1</span>,m<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">0</span>)+remove(m,j,k+<span class=\\"hljs-number\\">1</span>))\\n          mem[i,j,k]=res\\n          <span class=\\"hljs-keyword\\">return</span> res\\n      \\n        <span class=\\"hljs-keyword\\">return</span> remove(<span class=\\"hljs-number\\">0</span>,len(boxes)<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">0</span>)\\n              \\n            \\n              \\n</code></pre>\\n"],"querySlug":"remove-boxes","hasThinking":false,"content":"<p>给出一些不同颜色的盒子，盒子的颜色由数字表示，即不同的数字表示不同的颜色。</p>\\n\\n<p>你将经过若干轮操作去去掉盒子，直到所有的盒子都去掉为止。每一轮你可以移除具有相同颜色的连续 <code>k</code> 个盒子（<code>k >= 1</code>），这样一轮之后你将得到 <code>k * k</code> 个积分。</p>\\n\\n<p>当你将所有盒子都去掉之后，求你能获得的最大积分和。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>boxes = [1,3,2,2,2,3,4,3,1]\\n<strong>输出：</strong>23\\n<strong>解释：</strong>\\n[1, 3, 2, 2, 2, 3, 4, 3, 1] \\n----\x3e [1, 3, 3, 4, 3, 1] (3*3=9 分) \\n----\x3e [1, 3, 3, 3, 1] (1*1=1 分) \\n----\x3e [1, 1] (3*3=9 分) \\n----\x3e [] (2*2=4 分)\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>boxes = [1,1,1]\\n<strong>输出：</strong>9\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>boxes = [1]\\n<strong>输出：</strong>1\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= boxes.length <= 100</code></li>\\n\\t<li><code>1 <= boxes[i] <= 100</code></li>\\n</ul>\\n","title":"546. 移除盒子","relatedTags":["记忆化搜索","数组","动态规划"],"difficult":"Hard","lang":["javascript","python"],"uniqueID":"546","slug":"546-Remove-Boxes"}')}}]);