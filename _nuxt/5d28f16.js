(window.webpackJsonp=window.webpackJsonp||[]).push([[1303],{2101:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">A</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> shortestBridge = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">A</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> m=A.length\\n  <span class=\\"hljs-keyword\\">let</span> moves=[[<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">0</span>],[<span class=\\"hljs-number\\">1</span>,<span class=\\"hljs-number\\">0</span>],[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">-1</span>],[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">1</span>]]\\n  <span class=\\"hljs-keyword\\">let</span> island1=[],find=<span class=\\"hljs-literal\\">false</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;m;i++){\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;m;j++){\\n      <span class=\\"hljs-keyword\\">if</span>(A[i][j]===<span class=\\"hljs-number\\">1</span>){\\n        island1.push([i,j])\\n        dfs([i,j])\\n        find=<span class=\\"hljs-literal\\">true</span>\\n        <span class=\\"hljs-keyword\\">break</span>\\n      }\\n    }\\n    <span class=\\"hljs-keyword\\">if</span>(find)<span class=\\"hljs-keyword\\">break</span>\\n  }\\n  \\n  <span class=\\"hljs-keyword\\">let</span> steps=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">while</span>(island1.length&gt;<span class=\\"hljs-number\\">0</span>){\\n    <span class=\\"hljs-keyword\\">let</span> len=island1.length\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;len;i++){\\n      <span class=\\"hljs-keyword\\">let</span> [x,y]=island1.shift()\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> [dx,dy] <span class=\\"hljs-keyword\\">of</span> moves){\\n        <span class=\\"hljs-keyword\\">let</span> nx=x+dx,ny=y+dy\\n        <span class=\\"hljs-keyword\\">if</span>(nx&lt;<span class=\\"hljs-number\\">0</span> || ny&lt;<span class=\\"hljs-number\\">0</span> || nx&gt;=m || ny&gt;=m)<span class=\\"hljs-keyword\\">continue</span>\\n        <span class=\\"hljs-keyword\\">if</span>(A[nx][ny]===<span class=\\"hljs-number\\">0</span>){\\n          A[nx][ny]=<span class=\\"hljs-number\\">2</span>\\n          island1.push([nx,ny])\\n        }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(A[nx][ny]===<span class=\\"hljs-number\\">1</span>){\\n          <span class=\\"hljs-keyword\\">return</span> steps\\n        }\\n      }      \\n    }\\n    steps++\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> steps\\n  \\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">dfs</span>(<span class=\\"hljs-params\\">[x,y]</span>)</span>{\\n    A[x][y]=<span class=\\"hljs-number\\">2</span>\\n    <span class=\\"hljs-keyword\\">let</span> isAdjOfZero=<span class=\\"hljs-literal\\">false</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> [dx,dy] <span class=\\"hljs-keyword\\">of</span> moves){\\n      <span class=\\"hljs-keyword\\">let</span> nx=x+dx,ny=y+dy\\n      <span class=\\"hljs-keyword\\">if</span>(nx&lt;<span class=\\"hljs-number\\">0</span> || ny&lt;<span class=\\"hljs-number\\">0</span> || nx&gt;=m || ny&gt;=m)<span class=\\"hljs-keyword\\">continue</span>\\n      <span class=\\"hljs-keyword\\">if</span>(A[nx][ny]===<span class=\\"hljs-number\\">1</span>){\\n        dfs([nx,ny])\\n      }<span class=\\"hljs-keyword\\">else</span>{\\n        isAdjOfZero=<span class=\\"hljs-literal\\">true</span>\\n      }\\n    }\\n    <span class=\\"hljs-keyword\\">if</span>(isAdjOfZero)island1.push([x,y])\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"shortest-bridge","created_at":"2019-04-11","timeArr":[2019,3,11,12,14,50,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>首先找到其中1个岛，用<code>dfs</code>，周边是<code>1</code>的递归执行，在这途中，将周边有<code>0</code>的点添加到<code>island1&lt;Array&gt;</code>数组中，\\n并且将这个岛的<code>1</code>改为<code>2</code>。</p>\\n<p>接着用<code>bfs</code>不断遍历<code>island1</code>中的点，直到找到为<code>1</code>的点(另一个岛)。</p>\\n<p>注意：<code>bfs</code>的时候，要避免重复添加相同的点，可以使用<code>hash</code>，也可以将沿路找到的<code>0</code>都改为<code>2</code>。</p>\\n","content":"<p>在给定的二维二进制数组 <code>A</code> 中，存在两座岛。（岛是由四面相连的 <code>1</code> 形成的一个最大组。）</p>\\n\\n<p>现在，我们可以将 <code>0</code> 变为 <code>1</code>，以使两座岛连接起来，变成一座岛。</p>\\n\\n<p>返回必须翻转的 <code>0</code> 的最小数目。（可以保证答案至少是 <code>1</code> 。）</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>A = [[0,1],[1,0]]\\n<strong>输出：</strong>1\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>A = [[0,1,0],[0,0,0],[0,0,1]]\\n<strong>输出：</strong>2\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>A = [[1,1,1,1,1],[1,0,0,0,1],[1,0,1,0,1],[1,0,0,0,1],[1,1,1,1,1]]\\n<strong>输出：</strong>1</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>2 <= A.length == A[0].length <= 100</code></li>\\n\\t<li><code>A[i][j] == 0</code> 或 <code>A[i][j] == 1</code></li>\\n</ul>\\n","title":"934. 最短的桥","relatedTags":["深度优先搜索","广度优先搜索","数组","矩阵"],"difficult":"Middle","lang":["javascript"],"uniqueID":"934","slug":"934-Shortest-Bridge"}')}}]);