(window.webpackJsonp=window.webpackJsonp||[]).push([[1053],{1851:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string[]}</span> <span class=\\"hljs-variable\\">stickers</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">target</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> minStickers = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">stickers, target</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> m=stickers.length,n=target.length\\n  <span class=\\"hljs-keyword\\">let</span> acode=<span class=\\"hljs-number\\">97</span>\\n  <span class=\\"hljs-keyword\\">let</span> stickerLetter=<span class=\\"hljs-built_in\\">Array</span>(m).fill().map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span>=&gt;</span><span class=\\"hljs-built_in\\">Array</span>(<span class=\\"hljs-number\\">26</span>).fill(<span class=\\"hljs-number\\">0</span>))\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;m;i++){\\n    <span class=\\"hljs-keyword\\">let</span> str=stickers[i]\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;str.length;j++){\\n      <span class=\\"hljs-keyword\\">let</span> code=str.charCodeAt(j)-acode\\n      stickerLetter[i][code]++\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> mem={}\\n  <span class=\\"hljs-keyword\\">let</span> res=dfs(target)\\n  <span class=\\"hljs-keyword\\">return</span> res==<span class=\\"hljs-literal\\">Infinity</span>?<span class=\\"hljs-number\\">-1</span>:res\\n  \\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">dfs</span>(<span class=\\"hljs-params\\">target</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(target===<span class=\\"hljs-string\\">\\"\\"</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">if</span>(mem[target]!=<span class=\\"hljs-literal\\">null</span>)<span class=\\"hljs-keyword\\">return</span> mem[target]\\n    <span class=\\"hljs-keyword\\">let</span> targetLetter=<span class=\\"hljs-built_in\\">Array</span>(<span class=\\"hljs-number\\">26</span>).fill(<span class=\\"hljs-number\\">0</span>)\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;n;i++){\\n      <span class=\\"hljs-keyword\\">let</span> code=target.charCodeAt(i)-acode\\n      targetLetter[code]++\\n    }\\n    <span class=\\"hljs-keyword\\">let</span> result=<span class=\\"hljs-literal\\">Infinity</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;m;i++){\\n      <span class=\\"hljs-keyword\\">let</span> newTarget=<span class=\\"hljs-string\\">\'\'</span>\\n      <span class=\\"hljs-keyword\\">let</span> searchLetter=target.charCodeAt(<span class=\\"hljs-number\\">0</span>)-acode\\n      <span class=\\"hljs-keyword\\">if</span>(stickerLetter[i][searchLetter]===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">continue</span>\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;<span class=\\"hljs-number\\">26</span>;j++){\\n        <span class=\\"hljs-keyword\\">let</span> gap=targetLetter[j]-stickerLetter[i][j]\\n        <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> k=<span class=\\"hljs-number\\">0</span>;k&lt;gap;k++){\\n          newTarget+=<span class=\\"hljs-built_in\\">String</span>.fromCharCode(j+acode)\\n        }\\n      }\\n      result=<span class=\\"hljs-built_in\\">Math</span>.min(result,dfs(newTarget)+<span class=\\"hljs-number\\">1</span>)\\n    }\\n    mem[target]=result\\n    <span class=\\"hljs-keyword\\">return</span> result\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"stickers-to-spell-word","created_at":"2019-03-06","timeArr":[2019,2,6,23,49,26,0],"hasThinking":false,"content":"<p>我们给出了 N 种不同类型的贴纸。每个贴纸上都有一个小写的英文单词。</p>\\n\\n<p>你希望从自己的贴纸集合中裁剪单个字母并重新排列它们，从而拼写出给定的目标字符串 <code>target</code>。</p>\\n\\n<p>如果你愿意的话，你可以不止一次地使用每一张贴纸，而且每一张贴纸的数量都是无限的。</p>\\n\\n<p>拼出目标&nbsp;<code>target</code> 所需的最小贴纸数量是多少？如果任务不可能，则返回 -1。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<p>输入：</p>\\n\\n<pre>[&quot;with&quot;, &quot;example&quot;, &quot;science&quot;], &quot;thehat&quot;\\n</pre>\\n\\n<p>输出：</p>\\n\\n<pre>3\\n</pre>\\n\\n<p>解释：</p>\\n\\n<pre>我们可以使用 2 个 &quot;with&quot; 贴纸，和 1 个 &quot;example&quot; 贴纸。\\n把贴纸上的字母剪下来并重新排列后，就可以形成目标 &ldquo;thehat&ldquo; 了。\\n此外，这是形成目标字符串所需的最小贴纸数量。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<p>输入：</p>\\n\\n<pre>[&quot;notice&quot;, &quot;possible&quot;], &quot;basicbasic&quot;\\n</pre>\\n\\n<p>输出：</p>\\n\\n<pre>-1\\n</pre>\\n\\n<p>解释：</p>\\n\\n<pre>我们不能通过剪切给定贴纸的字母来形成目标&ldquo;basicbasic&rdquo;。\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>stickers</code> 长度范围是&nbsp;<code>[1, 50]</code>。</li>\\n\\t<li><code>stickers</code> 由小写英文单词组成（不带撇号）。</li>\\n\\t<li><code>target</code> 的长度在&nbsp;<code>[1, 15]</code>&nbsp;范围内，由小写字母组成。</li>\\n\\t<li>在所有的测试案例中，所有的单词都是从 1000 个最常见的美国英语单词中随机选取的，目标是两个随机单词的串联。</li>\\n\\t<li>时间限制可能比平时更具挑战性。预计 50 个贴纸的测试案例平均可在35ms内解决。</li>\\n</ul>\\n\\n<p>&nbsp;</p>\\n","title":"691. 贴纸拼词","relatedTags":["位运算","动态规划","回溯","状态压缩"],"difficult":"Hard","lang":["javascript"],"uniqueID":"691","slug":"691-Stickers-to-Spell-Word"}')}}]);