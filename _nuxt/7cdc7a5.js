(window.webpackJsonp=window.webpackJsonp||[]).push([[282],{1080:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">trips</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">capacity</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{boolean}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> carPooling = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">trips, capacity</span>) </span>{\\n  trips.sort(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">a,b</span>)=&gt;</span>a[<span class=\\"hljs-number\\">1</span>]===b[<span class=\\"hljs-number\\">1</span>]?b[<span class=\\"hljs-number\\">2</span>]-a[<span class=\\"hljs-number\\">2</span>]:a[<span class=\\"hljs-number\\">1</span>]-b[<span class=\\"hljs-number\\">1</span>])\\n  <span class=\\"hljs-keyword\\">let</span> peopleCount=<span class=\\"hljs-built_in\\">Array</span>(<span class=\\"hljs-number\\">1001</span>).fill(<span class=\\"hljs-number\\">0</span>)\\n  <span class=\\"hljs-keyword\\">let</span> max=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;trips.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> [people,start,end]=trips[i]\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=start;j&lt;end;j++){\\n      peopleCount[j]+=people\\n      <span class=\\"hljs-keyword\\">if</span>(peopleCount[j]&gt;capacity)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n};\\n</code></pre>\\n"],"querySlug":"car-pooling","created_at":"2019-06-23","timeArr":[2019,5,23,11,2,35,0],"hasThinking":false,"content":"<p>假设你是一位顺风车司机，车上最初有&nbsp;<code>capacity</code>&nbsp;个空座位可以用来载客。由于道路的限制，车&nbsp;<strong>只能&nbsp;</strong>向一个方向行驶（也就是说，<strong>不允许掉头或改变方向</strong>，你可以将其想象为一个向量）。</p>\\n\\n<p>这儿有一份乘客行程计划表&nbsp;<code>trips[][]</code>，其中&nbsp;<code>trips[i] = [num_passengers, start_location, end_location]</code>&nbsp;包含了第 <code>i</code> 组乘客的行程信息：</p>\\n\\n<ul>\\n\\t<li>必须接送的乘客数量；</li>\\n\\t<li>乘客的上车地点；</li>\\n\\t<li>以及乘客的下车地点。</li>\\n</ul>\\n\\n<p>这些给出的地点位置是从你的&nbsp;<strong>初始&nbsp;</strong>出发位置向前行驶到这些地点所需的距离（它们一定在你的行驶方向上）。</p>\\n\\n<p>请你根据给出的行程计划表和车子的座位数，来判断你的车是否可以顺利完成接送所有乘客的任务（当且仅当你可以在所有给定的行程中接送所有乘客时，返回&nbsp;<code>true</code>，否则请返回 <code>false</code>）。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>trips = [[2,1,5],[3,3,7]], capacity = 4\\n<strong>输出：</strong>false\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>trips = [[2,1,5],[3,3,7]], capacity = 5\\n<strong>输出：</strong>true\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>trips = [[2,1,5],[3,5,7]], capacity = 3\\n<strong>输出：</strong>true\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre><strong>输入：</strong>trips = [[3,2,7],[3,7,9],[8,3,9]], capacity = 11\\n<strong>输出：</strong>true\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li>你可以假设乘客会自觉遵守 &ldquo;<strong>先下后上</strong>&rdquo; 的良好素质</li>\\n\\t<li><code>trips.length &lt;= 1000</code></li>\\n\\t<li><code>trips[i].length == 3</code></li>\\n\\t<li><code>1 &lt;= trips[i][0] &lt;= 100</code></li>\\n\\t<li><code>0 &lt;= trips[i][1] &lt; trips[i][2] &lt;= 1000</code></li>\\n\\t<li><code>1 &lt;=&nbsp;capacity &lt;= 100000</code></li>\\n</ul>\\n","title":"1094. 拼车","relatedTags":["数组","前缀和","排序","模拟","堆（优先队列）"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1094","slug":"1094-Car-Pooling"}')}}]);