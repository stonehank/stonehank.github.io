(window.webpackJsonp=window.webpackJsonp||[]).push([[208],{1006:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">N</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">lamps</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">queries</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> gridIllumination = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">N, lamps, queries</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> row={},col={},rdSlash={},ltSlash={}\\n  <span class=\\"hljs-keyword\\">let</span> lampHash=<span class=\\"hljs-keyword\\">new</span> <span class=\\"hljs-built_in\\">Map</span>()\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;lamps.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> [x,y]=lamps[i]\\n    lampHash.set(x+<span class=\\"hljs-string\\">\'-\'</span>+y,<span class=\\"hljs-literal\\">true</span>)\\n    <span class=\\"hljs-keyword\\">let</span> ltSy=y-x\\n    <span class=\\"hljs-keyword\\">let</span> rdSx=x+y\\n    <span class=\\"hljs-keyword\\">if</span>(row[x]==<span class=\\"hljs-literal\\">null</span>)row[x]=<span class=\\"hljs-number\\">1</span>\\n    <span class=\\"hljs-keyword\\">else</span> row[x]++\\n    <span class=\\"hljs-keyword\\">if</span>(col[y]==<span class=\\"hljs-literal\\">null</span>)col[y]=<span class=\\"hljs-number\\">1</span>\\n    <span class=\\"hljs-keyword\\">else</span> col[y]++\\n    <span class=\\"hljs-keyword\\">if</span>(rdSlash[rdSx]==<span class=\\"hljs-literal\\">null</span>)rdSlash[rdSx]=<span class=\\"hljs-number\\">1</span>\\n    <span class=\\"hljs-keyword\\">else</span> rdSlash[rdSx]++\\n    <span class=\\"hljs-keyword\\">if</span>(ltSlash[ltSy]==<span class=\\"hljs-literal\\">null</span>)ltSlash[ltSy]=<span class=\\"hljs-number\\">1</span>\\n    <span class=\\"hljs-keyword\\">else</span> ltSlash[ltSy]++\\n  }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">checkSurr</span>(<span class=\\"hljs-params\\">[x,y]</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> d=[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">1</span>,<span class=\\"hljs-number\\">-1</span>]\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> dx <span class=\\"hljs-keyword\\">of</span> d){\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> dy <span class=\\"hljs-keyword\\">of</span> d){\\n        <span class=\\"hljs-keyword\\">let</span> newx=x+dx,newy=y+dy\\n        <span class=\\"hljs-keyword\\">if</span>(newx&lt;<span class=\\"hljs-number\\">0</span> || newy&lt;<span class=\\"hljs-number\\">0</span> || newx&gt;=N || newy&gt;=N)<span class=\\"hljs-keyword\\">continue</span>\\n        <span class=\\"hljs-keyword\\">if</span>(lampHash.has(newx+<span class=\\"hljs-string\\">\'-\'</span>+newy)){\\n          lampHash.delete(newx+<span class=\\"hljs-string\\">\'-\'</span>+newy)\\n          <span class=\\"hljs-keyword\\">let</span> r=newx,c=newy,lt=newy-newx,rd=newx+newy\\n          row[r]--\\n          col[c]--\\n          rdSlash[rd]--\\n          ltSlash[lt]--\\n        }\\n      }\\n    }\\n  }\\n  <span class=\\"hljs-comment\\">// console.log()</span>\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">checkIsLight</span>(<span class=\\"hljs-params\\">[x,y]</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> r=x,c=y,lt=y-x,rd=x+y\\n    <span class=\\"hljs-keyword\\">let</span> isLight=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">if</span>(row[r]&gt;<span class=\\"hljs-number\\">0</span>||col[c]&gt;<span class=\\"hljs-number\\">0</span>||rdSlash[rd]&gt;<span class=\\"hljs-number\\">0</span>||ltSlash[lt]&gt;<span class=\\"hljs-number\\">0</span>)isLight=<span class=\\"hljs-number\\">1</span>\\n    checkSurr([x,y])\\n    <span class=\\"hljs-comment\\">// console.log(isLight)</span>\\n    <span class=\\"hljs-keyword\\">return</span> isLight\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> result=[]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;queries.length;i++){\\n    result.push(checkIsLight(queries[i]))\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> result\\n};\\n</code></pre>\\n"],"querySlug":"grid-illumination","created_at":"2019-04-04","timeArr":[2019,3,4,20,31,29,0],"hasThinking":false,"content":"<p>在 <code>N x N</code> 的网格 <code>grid</code> 上，每个单元格都有一盏灯，最初灯都处于 <strong>关闭</strong> 状态。</p>\\n\\n<p>数组 <code>lamps</code> 表示打开的灯的位置。<code>lamps[i] = [row<sub>i</sub>, col<sub>i</sub>]</code> 表示 <strong>打开</strong> 位于 <code>grid[row<sub>i</sub>][col<sub>i</sub>]</code> 的第 <code>i</code> 盏灯 。每盏灯都照亮自身单元格以及同一行、同一列和两条对角线上的所有其他单元格。</p>\\n\\n<p>查询数组 <code>queries</code> 中，第 <code>i</code> 次查询 <code>queries[i] = [row<sub>i</sub>, col<sub>i</sub>]</code>，如果单元格 <code>[row<sub>i</sub>, col<sub>i</sub>]</code> 是被照亮的，则查询结果为 <code>1</code> ，否则为 <code>0</code> 。在第 <code>i</code> 次查询之后 [按照查询的顺序] ，<strong>关闭</strong> 位于单元格 <code>grid[row<sub>i</sub>][col<sub>i</sub>]</code> 上或其相邻 8 个方向上（与单元格 <code>grid[row<sub>i</sub>][col<sub>i</sub>]</code> 共享角或边）的任何灯。</p>\\n\\n<p>返回答案数组 <code>ans</code> ， <code>answer[i]</code> 应等于第 <code>i</code> 次查询 <code>queries[i]</code> 的结果，<code>1</code> 表示照亮，<code>0</code> 表示未照亮。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2020/08/19/illu_1.jpg\\" style=\\"width: 750px; height: 209px;\\" />\\n<pre>\\n<strong>输入：</strong>N = 5, lamps = [[0,0],[4,4]], queries = [[1,1],[1,0]]\\n<strong>输出：</strong>[1,0]\\n<strong>解释：</strong>最初所有灯都是关闭的。在执行查询之前，打开位于 [0, 0] 和 [4, 4] 的灯。第 0 次查询检查 grid[1][1] 是否被照亮（蓝色方框）。该单元格被照亮，所以 ans[0] = 1 。然后，关闭红色方框中的所有灯。\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2020/08/19/illu_step1.jpg\\" style=\\"width: 500px; height: 218px;\\" />\\n第 1 次查询检查 grid[1][0] 是否被照亮（蓝色方框）。该单元格没有被照亮，所以 ans[1] = 0 。然后，关闭红色矩形中的所有灯。\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2020/08/19/illu_step2.jpg\\" style=\\"width: 500px; height: 219px;\\" />\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>N = 5, lamps = [[0,0],[4,4]], queries = [[1,1],[1,1]]\\n<strong>输出：</strong>[1,1]\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>N = 5, lamps = [[0,0],[0,4]], queries = [[0,4],[0,1],[1,4]]\\n<strong>输出：</strong>[1,1,0]\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= N <= 10<sup>9</sup></code></li>\\n\\t<li><code>0 <= lamps.length <= 20000</code></li>\\n\\t<li><code>lamps[i].length == 2</code></li>\\n\\t<li><code>0 <= lamps[i][j] < N</code></li>\\n\\t<li><code>0 <= queries.length <= 20000</code></li>\\n\\t<li><code>queries[i].length == 2</code></li>\\n\\t<li><code>0 <= queries[i][j] < N</code></li>\\n</ul>\\n","title":"1001. 网格照明","relatedTags":["数组","哈希表"],"difficult":"Hard","lang":["javascript"],"uniqueID":"1001","slug":"1001-Grid-Illumination"}')}}]);