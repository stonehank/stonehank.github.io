(window.webpackJsonp=window.webpackJsonp||[]).push([[164],{646:function(n){n.exports=JSON.parse('{"content":"<ul>\\n<li>TCP/IP分为4个层</li>\\n</ul>\\n<table>\\n<thead>\\n<tr>\\n<th align=\\"center\\">名称</th>\\n<th align=\\"center\\">代表</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td align=\\"center\\">应用层</td>\\n<td align=\\"center\\">HTTP</td>\\n</tr>\\n<tr>\\n<td align=\\"center\\">传输层</td>\\n<td align=\\"center\\">TCP</td>\\n</tr>\\n<tr>\\n<td align=\\"center\\">网络层</td>\\n<td align=\\"center\\">IP</td>\\n</tr>\\n<tr>\\n<td align=\\"center\\">链路层</td>\\n<td align=\\"center\\"></td>\\n</tr>\\n</tbody></table>\\n<ul>\\n<li><p>HTTP协议</p>\\n<ul>\\n<li>生成请求提交(客户端)</li>\\n<li>处理请求(服务端)</li>\\n</ul>\\n</li>\\n<li><p>DNS协议</p>\\n<ul>\\n<li>根据域名查找IP</li>\\n</ul>\\n</li>\\n<li><p>TCP协议</p>\\n<ul>\\n<li><p>分割数据</p>\\n</li>\\n<li><p>确保传输成功(客户端)</p>\\n<p>  <code>使用3次握手</code></p>\\n</li>\\n<li><p>确保接受成功(服务端)</p>\\n</li>\\n<li><p>合并数据</p>\\n</li>\\n</ul>\\n</li>\\n<li><p>IP协议</p>\\n<p>  中转+传送</p>\\n<ul>\\n<li>IP地址</li>\\n<li>Mac地址</li>\\n<li>ARP(通过IP地址反查Mac地址)</li>\\n</ul>\\n</li>\\n<li><p>URI：资源的标识(http,ft,file...)</p>\\n</li>\\n<li><p>URL：资源地址(http)</p>\\n</li>\\n</ul>\\n<hr>\\n<p>Http请求方法：</p>\\n<ul>\\n<li>GET：获取资源</li>\\n<li>POST：传输实体主体</li>\\n<li>PUT：传输文件(无验证机制)</li>\\n<li>HEAD：获得报文首部</li>\\n<li>DELETE：删除文件</li>\\n<li>OPTIONS：询问支持的方法</li>\\n<li>TRACE：追踪路径</li>\\n<li>CONNECT：要求用隧道协议连接代理</li>\\n</ul>\\n<hr>\\n<blockquote>\\n<p>单次连接：每个请求一次连接</p>\\n</blockquote>\\n<blockquote>\\n<p>持久连接：多个请求一次连接</p>\\n<blockquote>\\n<p>管线化：多个内容一次请求</p>\\n</blockquote>\\n</blockquote>\\n<hr>\\n<p>状态码：</p>\\n<ul>\\n<li><p>206：部分请求，搭配<code>Content-Range</code>使用</p>\\n</li>\\n<li><p>302：临时重定向，规则上定义不能改变<code>method</code></p>\\n</li>\\n<li><p>303：临时重定向，规则上定义重定向使用<code>GET</code></p>\\n</li>\\n<li><p>304：允许访问资源，但不符合条件</p>\\n<p>  例如<code>If-Modified-Since</code>，服务端发现请求提供的<code>最后修改日期</code>和服务端的<code>最后修改日期</code>一致，则返回304.</p>\\n</li>\\n<li><p>307：与302的区别在于，确保请求方法和消息主体不会发生变化</p>\\n</li>\\n</ul>\\n<hr>\\n<p>代理、网关、隧道</p>\\n<ul>\\n<li><p>代理：处理双边的信息交互，每次通过代理服务器转发请求或响应时，会追加写入 Via 首部信息</p>\\n</li>\\n<li><p>网关：网关的工作机制和代理十分相似。而网关能使通信线路上的服务器提供<code>非 HTTP 协议</code>服务。</p>\\n</li>\\n<li><p>隧道：隧道可按要求建立起一条与其他服务器的通信线路，届时使用 SSL 等加密手段进行通信。</p>\\n</li>\\n</ul>\\n<hr>\\n<p>HTTP 通用首部字段</p>\\n<ul>\\n<li>Cache-Control</li>\\n</ul>\\n<ol>\\n<li><p>缓存请求指令</p>\\n<table>\\n<thead>\\n<tr>\\n<th>指令</th>\\n<th>参数</th>\\n<th>说明</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td><strong>no-cache</strong></td>\\n<td>无</td>\\n<td>不使用缓存的内容，强制向源服务器再次验证</td>\\n</tr>\\n<tr>\\n<td><strong>no-store</strong></td>\\n<td>无</td>\\n<td>不缓存请求或响应的任何内容</td>\\n</tr>\\n<tr>\\n<td>max-age = [ 秒]</td>\\n<td>必需</td>\\n<td>响应的最大Age值</td>\\n</tr>\\n<tr>\\n<td>max-stale( = [ 秒])</td>\\n<td>可省略</td>\\n<td>接收已过期的响应</td>\\n</tr>\\n<tr>\\n<td>min-fresh = [ 秒]</td>\\n<td>必需</td>\\n<td>期望在指定时间内的响应仍有效</td>\\n</tr>\\n<tr>\\n<td>no-transform</td>\\n<td>无</td>\\n<td>代理不可更改媒体类型</td>\\n</tr>\\n<tr>\\n<td>only-if-cached</td>\\n<td>无</td>\\n<td>从缓存获取资源</td>\\n</tr>\\n<tr>\\n<td>cache-extension</td>\\n<td>-</td>\\n<td>新指令标记（token）</td>\\n</tr>\\n</tbody></table>\\n</li>\\n<li><p>缓存响应指令</p>\\n<table>\\n<thead>\\n<tr>\\n<th>指令</th>\\n<th>参数</th>\\n<th>说明</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td>public</td>\\n<td>无</td>\\n<td>可向任意方提供响应的缓存</td>\\n</tr>\\n<tr>\\n<td>private</td>\\n<td>可省略</td>\\n<td>仅向特定用户返回响应</td>\\n</tr>\\n<tr>\\n<td>no-cache</td>\\n<td>可省略</td>\\n<td>允许缓存，缓存前必须先确认其有效性</td>\\n</tr>\\n<tr>\\n<td>no-store</td>\\n<td>无</td>\\n<td>不缓存请求或响应的任何内容</td>\\n</tr>\\n<tr>\\n<td>no-transform</td>\\n<td>无</td>\\n<td>代理不可更改媒体类型</td>\\n</tr>\\n<tr>\\n<td>must-revalidate</td>\\n<td>无</td>\\n<td>必须再向源服务器进行确认当前缓存是否有效，再确定是否使用</td>\\n</tr>\\n<tr>\\n<td>proxy-revalidate</td>\\n<td>无</td>\\n<td>要求中间缓存服务器对缓存的响应有效性再进行确认</td>\\n</tr>\\n<tr>\\n<td>max-age = [ 秒]</td>\\n<td>必需</td>\\n<td>响应的最大Age值，1.1<code>max-age</code>优先，1.0<code>Expires</code>优先</td>\\n</tr>\\n<tr>\\n<td>s-maxage = [ 秒]</td>\\n<td>必需</td>\\n<td>公共缓存服务器响应的最大Age值</td>\\n</tr>\\n<tr>\\n<td>cache-extension</td>\\n<td>-</td>\\n<td>新指令标记（token）</td>\\n</tr>\\n</tbody></table>\\n</li>\\n</ol>\\n<ul>\\n<li><p>Transfer-Encoding</p>\\n<p>  规定了传输报文主体时采用的编码方式</p>\\n</li>\\n</ul>\\n<hr>\\n<p>HTTP 请求首部字段</p>\\n<ul>\\n<li><p>Accept：允许接受的格式</p>\\n<p>  可使用<code>q=</code>定义权重(范围0~1，3位小数)，默认1.0。</p>\\n<p>  首先返回权重值最高的媒体类型</p>\\n</li>\\n<li><p>Accept-Encoding：支持的内容编码</p>\\n<ul>\\n<li>gzip</li>\\n<li>compress</li>\\n<li>deflate</li>\\n<li>identity：不执行压缩或不会变化的默认编码格式</li>\\n</ul>\\n</li>\\n<li><p>Expect：告知服务器，期望出现的某种特定行为，1.1只定义了<code>100-continue</code></p>\\n</li>\\n<li><p>If-Modified-Since：请求字段的日期后如果有更新，执行请求，否则返回状态码 304 Not Modified 的响应</p>\\n</li>\\n<li><p>If-Match和If-Range(搭配字段Range)：</p>\\n<p>  如果<code>If-Match</code>对应的<code>ETag</code>不符合，返回状态码<code>412 Precondition Failed</code>，需要再次请求</p>\\n<p>  如果<code>If-Range</code>对应的<code>Etag</code>不符合，会返回所有内容<code>200</code>，否则返回<code>Range</code>请求的部分内容<code>206</code></p>\\n</li>\\n<li><p>Max-Forwards：定义最多转发的次数</p>\\n</li>\\n</ul>\\n","toc":[],"relatedTags":null,"created_at":"2018-11-14","timeArr":[2018,10,14,0,0,0,0],"title":"图解Http大纲笔记(1)","uuid":"cd67e255a685952b6e3ba3efb90befd0197d1fe4","summary":"<ul>\\n<li>TCP/IP分为4个层</li>\\n</ul>\\n<table>\\n<thead>\\n<tr>\\n<th style=\\"text-align:center\\">名称</th>\\n<th style=\\"text-align:center\\">代表</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td style=\\"text-align:center\\">应用层</td>\\n<td style=\\"text-align:center\\">HTTP</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">传输层</td>\\n<td style=\\"text-align:center\\">TCP</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">网络层</td>\\n<td style=\\"text-align:center\\">IP</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">链路层</td>\\n<td style=\\"text-align:center\\"></td>\\n</tr>\\n</tbody>\\n</table>\\n<ul>\\n<li>\\n<p>HTTP协议</p>\\n<ul>\\n<li>生成请求提交(客户端)</li>\\n<li>处理请求(服务端)</li>\\n</ul>\\n</li>\\n<li>\\n<p>DNS协议</p>\\n<ul>\\n<li>根据域名查找IP</li>\\n</ul>\\n</li>\\n<li>\\n<p>TCP...</p>\\n</li>\\n</ul>","slug":"tu-jie-Http-da-gang-bi-ji-(1)","sha":"a606cff58ed32d4564139956743675e9c438e11a"}')}}]);