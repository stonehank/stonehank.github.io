(window.webpackJsonp=window.webpackJsonp||[]).push([[1068],{1866:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Initialize your data structure here.\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> MyHashMap = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{\\n  <span class=\\"hljs-keyword\\">this</span>.hash={}\\n};\\n\\n<span class=\\"hljs-comment\\">/**\\n * value will always be non-negative. \\n * @param {number} key \\n * @param {number} value\\n * @return {void}\\n */</span>\\nMyHashMap.prototype.put = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">key, value</span>) </span>{\\n    <span class=\\"hljs-keyword\\">this</span>.hash[key]=value\\n};\\n\\n<span class=\\"hljs-comment\\">/**\\n * Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key \\n * @param {number} key\\n * @return {number}\\n */</span>\\nMyHashMap.prototype.get = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">key</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-keyword\\">this</span>.hash[key]==<span class=\\"hljs-literal\\">null</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">-1</span>\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-keyword\\">this</span>.hash[key]\\n};\\n\\n<span class=\\"hljs-comment\\">/**\\n * Removes the mapping of the specified value key if this map contains a mapping for the key \\n * @param {number} key\\n * @return {void}\\n */</span>\\nMyHashMap.prototype.remove = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">key</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-keyword\\">this</span>.hash[key]!=<span class=\\"hljs-literal\\">null</span>){\\n    <span class=\\"hljs-keyword\\">delete</span>(<span class=\\"hljs-keyword\\">this</span>.hash[key])\\n  }\\n};\\n\\n<span class=\\"hljs-comment\\">/** \\n * Your MyHashMap object will be instantiated and called as such:\\n * var obj = Object.create(MyHashMap).createNew()\\n * obj.put(key,value)\\n * var param_2 = obj.get(key)\\n * obj.remove(key)\\n */</span>\\n</code></pre>\\n"],"querySlug":"design-hashmap","created_at":"2021-03-14","timeArr":[2021,2,14,11,52,53,0],"hasThinking":false,"content":"<p>不使用任何内建的哈希表库设计一个哈希映射（HashMap）。</p>\\n\\n<p>实现 <code>MyHashMap</code> 类：</p>\\n\\n<ul>\\n\\t<li><code>MyHashMap()</code> 用空映射初始化对象</li>\\n\\t<li><code>void put(int key, int value)</code> 向 HashMap 插入一个键值对 <code>(key, value)</code> 。如果 <code>key</code> 已经存在于映射中，则更新其对应的值 <code>value</code> 。</li>\\n\\t<li><code>int get(int key)</code> 返回特定的 <code>key</code> 所映射的 <code>value</code> ；如果映射中不包含 <code>key</code> 的映射，返回 <code>-1</code> 。</li>\\n\\t<li><code>void remove(key)</code> 如果映射中存在 <code>key</code> 的映射，则移除 <code>key</code> 和它所对应的 <code>value</code> 。</li>\\n</ul>\\n\\n<p> </p>\\n\\n<p><strong>示例：</strong></p>\\n\\n<pre>\\n<strong>输入</strong>：\\n[\\"MyHashMap\\", \\"put\\", \\"put\\", \\"get\\", \\"get\\", \\"put\\", \\"get\\", \\"remove\\", \\"get\\"]\\n[[], [1, 1], [2, 2], [1], [3], [2, 1], [2], [2], [2]]\\n<strong>输出</strong>：\\n[null, null, null, 1, -1, null, 1, null, -1]\\n\\n<strong>解释</strong>：\\nMyHashMap myHashMap = new MyHashMap();\\nmyHashMap.put(1, 1); // myHashMap 现在为 [[1,1]]\\nmyHashMap.put(2, 2); // myHashMap 现在为 [[1,1], [2,2]]\\nmyHashMap.get(1);    // 返回 1 ，myHashMap 现在为 [[1,1], [2,2]]\\nmyHashMap.get(3);    // 返回 -1（未找到），myHashMap 现在为 [[1,1], [2,2]]\\nmyHashMap.put(2, 1); // myHashMap 现在为 [[1,1], [2,1]]（更新已有的值）\\nmyHashMap.get(2);    // 返回 1 ，myHashMap 现在为 [[1,1], [2,1]]\\nmyHashMap.remove(2); // 删除键为 2 的数据，myHashMap 现在为 [[1,1]]\\nmyHashMap.get(2);    // 返回 -1（未找到），myHashMap 现在为 [[1,1]]\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>0 <= key, value <= 10<sup>6</sup></code></li>\\n\\t<li>最多调用 <code>10<sup>4</sup></code> 次 <code>put</code>、<code>get</code> 和 <code>remove</code> 方法</li>\\n</ul>\\n\\n<p> </p>\\n\\n<p><strong>进阶：</strong>你能否不使用内置的 HashMap 库解决此问题？</p>\\n","title":"706. 设计哈希映射","relatedTags":["设计","数组","哈希表","链表","哈希函数"],"difficult":"Easy","lang":["javascript"],"uniqueID":"706","slug":"706-Design-HashMap"}')}}]);