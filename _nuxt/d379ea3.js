(window.webpackJsonp=window.webpackJsonp||[]).push([[956],{1754:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * // Definition for a Node.\\n * function Node(val,children) {\\n *    this.val = val;\\n *    this.children = children;\\n * };\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{Node}</span> <span class=\\"hljs-variable\\">root</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> maxDepth = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">root</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(!root)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">let</span> subh=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;root.children.length;i++){\\n    subh=<span class=\\"hljs-built_in\\">Math</span>.max(subh,maxDepth(root.children[i]))\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> subh+<span class=\\"hljs-number\\">1</span>\\n};\\n</code></pre>\\n"],"querySlug":"maximum-depth-of-n-ary-tree","created_at":"2019-03-20","timeArr":[2019,2,20,10,31,27,0],"hasThinking":false,"content":"<p>给定一个 N 叉树，找到其最大深度。</p>\\n\\n<p class=\\"MachineTrans-lang-zh-CN\\">最大深度是指从根节点到最远叶子节点的最长路径上的节点总数。</p>\\n\\n<p class=\\"MachineTrans-lang-zh-CN\\">N 叉树输入按层序遍历序列化表示，每组子节点由空值分隔（请参见示例）。</p>\\n\\n<p class=\\"MachineTrans-lang-zh-CN\\"> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<p><img src=\\"https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png\\" style=\\"width: 100%; max-width: 300px;\\" /></p>\\n\\n<pre>\\n<strong>输入：</strong>root = [1,null,3,2,4,null,5,6]\\n<strong>输出：</strong>3\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<p><img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png\\" style=\\"width: 296px; height: 241px;\\" /></p>\\n\\n<pre>\\n<strong>输入：</strong>root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\\n<strong>输出：</strong>5\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li>树的深度不会超过 <code>1000</code> 。</li>\\n\\t<li>树的节点数目位于 <code>[0, 10<sup>4</sup>]</code> 之间。</li>\\n</ul>\\n","title":"559. N 叉树的最大深度","relatedTags":["树","深度优先搜索","广度优先搜索"],"difficult":"Easy","lang":["javascript"],"uniqueID":"559","slug":"559-Maximum-Depth-of-N-ary-Tree"}')}}]);