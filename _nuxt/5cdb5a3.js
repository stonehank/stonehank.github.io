(window.webpackJsonp=window.webpackJsonp||[]).push([[699],{1497:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Solution</span><span class=\\"hljs-params\\">(object)</span>:</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">searchMatrix</span><span class=\\"hljs-params\\">(self, matrix, target)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type matrix: List[List[int]]\\n        :type target: int\\n        :rtype: bool\\n        \\"\\"\\"</span>\\n        <span class=\\"hljs-keyword\\">if</span> <span class=\\"hljs-keyword\\">not</span> matrix:<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">False</span>\\n        m=len(matrix)\\n        n=len(matrix[<span class=\\"hljs-number\\">0</span>])\\n        c=<span class=\\"hljs-number\\">0</span>\\n        r=m<span class=\\"hljs-number\\">-1</span>\\n        <span class=\\"hljs-keyword\\">while</span> c&lt;n <span class=\\"hljs-keyword\\">and</span> r&gt;=<span class=\\"hljs-number\\">0</span>:\\n          cur=matrix[r][c]\\n          <span class=\\"hljs-keyword\\">if</span> cur&gt;target:\\n            r-=<span class=\\"hljs-number\\">1</span>\\n          <span class=\\"hljs-keyword\\">elif</span> cur&lt;target:\\n            c+=<span class=\\"hljs-number\\">1</span>\\n          <span class=\\"hljs-keyword\\">else</span>:\\n            <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">True</span>\\n        <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">False</span>\\n          \\n</code></pre>\\n"],"querySlug":"search-a-2d-matrix-ii","created_at":"2019-02-25","timeArr":[2019,1,25,10,24,0,0],"hasThinking":false,"content":"<p>编写一个高效的算法来搜索&nbsp;<code><em>m</em>&nbsp;x&nbsp;<em>n</em></code>&nbsp;矩阵 <code>matrix</code> 中的一个目标值 <code>target</code> 。该矩阵具有以下特性：</p>\\n\\n<ul>\\n\\t<li>每行的元素从左到右升序排列。</li>\\n\\t<li>每列的元素从上到下升序排列。</li>\\n</ul>\\n\\n<p>&nbsp;</p>\\n\\n<p><b>示例 1：</b></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/11/25/searchgrid2.jpg\\" />\\n<pre>\\n<b>输入：</b>matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5\\n<b>输出：</b>true\\n</pre>\\n\\n<p><b>示例 2：</b></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/11/25/searchgrid.jpg\\" />\\n<pre>\\n<b>输入：</b>matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20\\n<b>输出：</b>false\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>m == matrix.length</code></li>\\n\\t<li><code>n == matrix[i].length</code></li>\\n\\t<li><code>1 &lt;= n, m &lt;= 300</code></li>\\n\\t<li><code>-10<sup>9</sup>&nbsp;&lt;= matrix[i][j] &lt;= 10<sup>9</sup></code></li>\\n\\t<li>每行的所有元素从左到右升序排列</li>\\n\\t<li>每列的所有元素从上到下升序排列</li>\\n\\t<li><code>-10<sup>9</sup>&nbsp;&lt;= target &lt;= 10<sup>9</sup></code></li>\\n</ul>\\n","title":"240. 搜索二维矩阵 II","relatedTags":["数组","二分查找","分治","矩阵"],"difficult":"Middle","lang":["python"],"uniqueID":"240","slug":"240-Search-a-2D-Matrix-II"}')}}]);