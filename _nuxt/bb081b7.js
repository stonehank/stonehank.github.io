(window.webpackJsonp=window.webpackJsonp||[]).push([[1272],{2070:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">L</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">R</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> superpalindromesInRange = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">L, R</span>) </span>{\\n  \\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">next</span>(<span class=\\"hljs-params\\">s</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> m1=<span class=\\"hljs-built_in\\">Math</span>.floor(s.length/<span class=\\"hljs-number\\">2</span>),m2=<span class=\\"hljs-built_in\\">Math</span>.ceil(s.length/<span class=\\"hljs-number\\">2</span>)\\n    <span class=\\"hljs-keyword\\">let</span> left=s.substring(<span class=\\"hljs-number\\">0</span>,m1),mid=s.substring(m1,m2),right=s.substring(m2)\\n    <span class=\\"hljs-keyword\\">let</span> nxtL,nxtR\\n    <span class=\\"hljs-keyword\\">if</span>(+reverse(left)&lt;=+right) nxtL=+(left+mid)+<span class=\\"hljs-number\\">1</span> + <span class=\\"hljs-string\\">\'\'</span>\\n    <span class=\\"hljs-keyword\\">else</span> nxtL=left+mid\\n    nxtR=reverse(nxtL.substring(<span class=\\"hljs-number\\">0</span>,m1))\\n    <span class=\\"hljs-keyword\\">return</span> nxtL+nxtR\\n  }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">reverse</span>(<span class=\\"hljs-params\\">s</span>)</span>{\\n    <span class=\\"hljs-keyword\\">return</span> s.split(<span class=\\"hljs-string\\">\'\'</span>).reverse().join(<span class=\\"hljs-string\\">\'\'</span>)\\n  }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">multiString</span>(<span class=\\"hljs-params\\">num1, num2</span>) </span>{\\n    <span class=\\"hljs-keyword\\">if</span>(num1 === <span class=\\"hljs-string\\">\'0\'</span> || num2 === <span class=\\"hljs-string\\">\'0\'</span>) <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-string\\">\'0\'</span>;\\n    <span class=\\"hljs-keyword\\">let</span> pos = <span class=\\"hljs-keyword\\">new</span> <span class=\\"hljs-built_in\\">Array</span>(num1.length + num2.length).fill(<span class=\\"hljs-number\\">0</span>);\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i = num1.length - <span class=\\"hljs-number\\">1</span>; i &gt;= <span class=\\"hljs-number\\">0</span>; i --) {\\n      <span class=\\"hljs-keyword\\">let</span> n = +(num1[i]);\\n      <span class=\\"hljs-keyword\\">for</span> (<span class=\\"hljs-keyword\\">let</span> j = num2.length - <span class=\\"hljs-number\\">1</span>; j &gt;= <span class=\\"hljs-number\\">0</span>; j --) {\\n        <span class=\\"hljs-keyword\\">let</span> m = +(num2[j]);\\n        <span class=\\"hljs-keyword\\">let</span> mul = m * n;\\n        <span class=\\"hljs-keyword\\">let</span> p1 = i + j;\\n        <span class=\\"hljs-keyword\\">let</span> p2 = i + j + <span class=\\"hljs-number\\">1</span>;\\n        <span class=\\"hljs-keyword\\">let</span> sum = mul + pos[p2];\\n        pos[p1] += <span class=\\"hljs-built_in\\">Math</span>.floor(sum / <span class=\\"hljs-number\\">10</span>);\\n        pos[p2] = (sum) % <span class=\\"hljs-number\\">10</span>;\\n      }\\n    }\\n    <span class=\\"hljs-keyword\\">let</span> res = pos.join(<span class=\\"hljs-string\\">\'\'</span>);\\n    <span class=\\"hljs-keyword\\">return</span> res[<span class=\\"hljs-number\\">0</span>] === <span class=\\"hljs-string\\">\'0\'</span> ? res.slice(<span class=\\"hljs-number\\">1</span>) : res\\n  }\\n\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">isP</span>(<span class=\\"hljs-params\\">s</span>)</span>{\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;s.length/<span class=\\"hljs-number\\">2</span>;i++){\\n      <span class=\\"hljs-keyword\\">if</span>(s[i]!==s[s.length<span class=\\"hljs-number\\">-1</span>-i])<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n  }\\n\\n  <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">let</span> start=<span class=\\"hljs-built_in\\">Math</span>.ceil(<span class=\\"hljs-built_in\\">Math</span>.sqrt(L))\\n  <span class=\\"hljs-keyword\\">let</span> end=<span class=\\"hljs-built_in\\">Math</span>.floor(<span class=\\"hljs-built_in\\">Math</span>.sqrt(R))\\n  <span class=\\"hljs-keyword\\">let</span> str=next(start<span class=\\"hljs-number\\">-1</span>+<span class=\\"hljs-string\\">\'\'</span>)\\n  \\n  <span class=\\"hljs-keyword\\">while</span>(+str&lt;=end){\\n    <span class=\\"hljs-keyword\\">let</span> pow=multiString(str,str)\\n    <span class=\\"hljs-keyword\\">if</span>(isP(pow))res++   \\n    str=next(str)\\n  }\\n  \\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"super-palindromes","created_at":"2019-04-03","timeArr":[2019,3,3,18,6,27,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>这道题用<code>js</code>解遇到的一个问题就是<code>js</code>没有<code>long</code>类型数字，当超过一定位数，<code>number</code>会出现问题。</p>\\n<p>例如：\\n<code>console.log(123456789123456789===123456789123456781) // true</code></p>\\n<p>不过我们可以自己编写一个字符串乘法即可，参考<code>Leetcode NO.43</code>。</p>\\n<p>这道题的思路就是，在<code>sqrt(L)</code>和<code>sqrt(R)</code>范围内查找所有的回文字符串(<code>next</code>函数)，再检查它的<code>pow(2)</code>是否也是回文字符串。</p>\\n","content":"<p>如果一个正整数自身是回文数，而且它也是一个回文数的平方，那么我们称这个数为超级回文数。</p>\\n\\n<p>现在，给定两个正整数&nbsp;<code>L</code> 和&nbsp;<code>R</code> （以字符串形式表示），返回包含在范围 <code>[L, R]</code> 中的超级回文数的数目。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例：</strong></p>\\n\\n<pre><strong>输入：</strong>L = &quot;4&quot;, R = &quot;1000&quot;\\n<strong>输出：</strong>4\\n<strong>解释：\\n</strong>4，9，121，以及 484 是超级回文数。\\n注意 676 不是一个超级回文数： 26 * 26 = 676，但是 26 不是回文数。</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ol>\\n\\t<li><code>1 &lt;= len(L) &lt;= 18</code></li>\\n\\t<li><code>1 &lt;= len(R) &lt;= 18</code></li>\\n\\t<li><code>L</code> 和&nbsp;<code>R</code>&nbsp;是表示&nbsp;<code>[1, 10^18)</code>&nbsp;范围的整数的字符串。</li>\\n\\t<li><code>int(L) &lt;= int(R)</code></li>\\n</ol>\\n\\n<p>&nbsp;</p>\\n","title":"906. 超级回文数","relatedTags":["数学","枚举"],"difficult":"Hard","lang":["javascript"],"uniqueID":"906","slug":"906-Super-Palindromes"}')}}]);