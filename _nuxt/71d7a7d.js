(window.webpackJsonp=window.webpackJsonp||[]).push([[1219],{2017:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">A</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">B</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{boolean}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> buddyStrings = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">A, B</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> count=<span class=\\"hljs-number\\">0</span>;\\n  <span class=\\"hljs-keyword\\">let</span> a=[],b=[]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;A.length;i++){\\n    <span class=\\"hljs-keyword\\">if</span>(A[i]!==B[i]){\\n      count++;\\n      a.push(A[i])\\n      b.push(B[i])\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">if</span>(count&gt;<span class=\\"hljs-number\\">2</span>){\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n  }<span class=\\"hljs-keyword\\">else</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(count===<span class=\\"hljs-number\\">2</span>){\\n      <span class=\\"hljs-keyword\\">if</span>(a.sort().join(<span class=\\"hljs-string\\">\'\'</span>)===b.sort().join(<span class=\\"hljs-string\\">\'\'</span>)){\\n        <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n      }\\n      <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n    }\\n    <span class=\\"hljs-keyword\\">if</span>(count&lt;<span class=\\"hljs-number\\">2</span>){\\n      <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-keyword\\">new</span> <span class=\\"hljs-built_in\\">Set</span>(A).size!==A.length\\n    }\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"buddy-strings","created_at":"2019-03-28","timeArr":[2019,2,28,17,24,51,0],"hasThinking":false,"content":"<p>给定两个由小写字母构成的字符串 <code>A</code> 和 <code>B</code> ，只要我们可以通过交换 <code>A</code> 中的两个字母得到与 <code>B</code> 相等的结果，就返回 <code>true</code> ；否则返回 <code>false</code> 。</p>\\n\\n<p>交换字母的定义是取两个下标 <code>i</code> 和 <code>j</code> （下标从 <code>0</code> 开始），只要 <code>i!=j</code> 就交换 <code>A[i]</code> 和 <code>A[j]</code> 处的字符。例如，在 <code>\\"abcd\\"</code> 中交换下标 <code>0</code> 和下标 <code>2</code> 的元素可以生成 <code>\\"cbad\\"</code> 。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入： </strong>A = \\"ab\\", B = \\"ba\\"\\n<strong>输出： </strong>true<strong>\\n解释： </strong>你可以交换 A[0] = \'a\' 和 A[1] = \'b\' 生成 \\"ba\\"，此时 A 和 B 相等。</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入： </strong>A = \\"ab\\", B = \\"ab\\"\\n<strong>输出： </strong>false\\n<strong>解释： </strong>你只能交换 A[0] = \'a\' 和 A[1] = \'b\' 生成 \\"ba\\"，此时 A 和 B 不相等。\\n</pre>\\n\\n<p><strong>示例 3:</strong></p>\\n\\n<pre>\\n<strong>输入： </strong>A = \\"aa\\", B = \\"aa\\"\\n<strong>输出： </strong>true\\n<strong>解释： </strong>你可以交换 A[0] = \'a\' 和 A[1] = \'a\' 生成 \\"aa\\"，此时 A 和 B 相等。</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre>\\n<strong>输入： </strong>A = \\"aaaaaaabc\\", B = \\"aaaaaaacb\\"\\n<strong>输出： </strong>true\\n</pre>\\n\\n<p><strong>示例 5：</strong></p>\\n\\n<pre>\\n<strong>输入： </strong>A = \\"\\", B = \\"aa\\"\\n<strong>输出： </strong>false\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ol>\\n\\t<li><code>0 <= A.length <= 20000</code></li>\\n\\t<li><code>0 <= B.length <= 20000</code></li>\\n\\t<li><code>A</code> 和 <code>B</code> 仅由小写字母构成。</li>\\n</ol>\\n","title":"859. 亲密字符串","relatedTags":["哈希表","字符串"],"difficult":"Easy","lang":["javascript"],"uniqueID":"859","slug":"859-Buddy-Strings"}')}}]);