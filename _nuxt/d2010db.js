(window.webpackJsonp=window.webpackJsonp||[]).push([[1340],{2138:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{TreeNode}</span> <span class=\\"hljs-variable\\">root</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> minCameraCover = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">root</span>) </span>{\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">addParent</span>(<span class=\\"hljs-params\\">root,parent</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(!root)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">null</span>\\n    root.parent=parent\\n    root.hasCam=<span class=\\"hljs-literal\\">false</span>\\n    root.left=addParent(root.left,root)\\n    root.right=addParent(root.right,root)\\n    <span class=\\"hljs-keyword\\">return</span> root\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> rootWithParent=addParent(root,<span class=\\"hljs-literal\\">null</span>)\\n  <span class=\\"hljs-keyword\\">let</span> camCount=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">dfs</span>(<span class=\\"hljs-params\\">root</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(root.left)dfs(root.left)\\n    <span class=\\"hljs-keyword\\">if</span>(root.right)dfs(root.right)\\n    <span class=\\"hljs-keyword\\">if</span>(!root.hasCam){\\n      <span class=\\"hljs-keyword\\">if</span>(root.parent)installCam(root.parent)\\n      <span class=\\"hljs-keyword\\">else</span> installCam(root)\\n      camCount++\\n    }\\n  }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">installCam</span>(<span class=\\"hljs-params\\">root</span>)</span>{\\n    root.hasCam=<span class=\\"hljs-literal\\">true</span>\\n    <span class=\\"hljs-keyword\\">if</span>(root.parent)root.parent.hasCam=<span class=\\"hljs-literal\\">true</span>\\n    <span class=\\"hljs-keyword\\">if</span>(root.left)root.left.hasCam=<span class=\\"hljs-literal\\">true</span>\\n    <span class=\\"hljs-keyword\\">if</span>(root.right)root.right.hasCam=<span class=\\"hljs-literal\\">true</span>\\n  }\\n  dfs(rootWithParent)\\n  <span class=\\"hljs-keyword\\">return</span> camCount\\n};\\n</code></pre>\\n"],"querySlug":"binary-tree-cameras","created_at":"2019-03-10","timeArr":[2019,2,10,22,51,12,0],"hasThinking":false,"content":"<p>给定一个二叉树，我们在树的节点上安装摄像头。</p>\\n\\n<p>节点上的每个摄影头都可以监视<strong>其父对象、自身及其直接子对象。</strong></p>\\n\\n<p>计算监控树的所有节点所需的最小摄像头数量。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<p><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/29/bst_cameras_01.png\\" style=\\"height: 163px; width: 138px;\\"></p>\\n\\n<pre><strong>输入：</strong>[0,0,null,0,0]\\n<strong>输出：</strong>1\\n<strong>解释：</strong>如图所示，一台摄像头足以监控所有节点。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<p><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/29/bst_cameras_02.png\\" style=\\"height: 312px; width: 139px;\\"></p>\\n\\n<pre><strong>输入：</strong>[0,0,null,0,null,0,null,null,0]\\n<strong>输出：</strong>2\\n<strong>解释：</strong>需要至少两个摄像头来监视树的所有节点。 上图显示了摄像头放置的有效位置之一。\\n</pre>\\n\\n<p><br>\\n<strong>提示：</strong></p>\\n\\n<ol>\\n\\t<li>给定树的节点数的范围是&nbsp;<code>[1, 1000]</code>。</li>\\n\\t<li>每个节点的值都是 0。</li>\\n</ol>\\n","title":"968. 监控二叉树","relatedTags":["树","深度优先搜索","动态规划","二叉树"],"difficult":"Hard","lang":["javascript"],"uniqueID":"968","slug":"968-Binary-Tree-Cameras"}')}}]);