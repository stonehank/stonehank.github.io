(window.webpackJsonp=window.webpackJsonp||[]).push([[449],{1247:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for singly-linked list.\\n * function ListNode(val) {\\n *     this.val = val;\\n *     this.next = null;\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{ListNode}</span> <span class=\\"hljs-variable\\">head</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{TreeNode}</span> <span class=\\"hljs-variable\\">root</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{boolean}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> isSubPath = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">head, root</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> headArr=[]\\n  <span class=\\"hljs-keyword\\">while</span>(head){\\n    headArr.push(head.val)\\n    head=head.next\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> found=<span class=\\"hljs-literal\\">false</span>\\n\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">dfs</span>(<span class=\\"hljs-params\\">root,idxSet</span>)</span>{\\n   \\n    <span class=\\"hljs-keyword\\">if</span>(found)<span class=\\"hljs-keyword\\">return</span>\\n    <span class=\\"hljs-keyword\\">if</span>(!root)<span class=\\"hljs-keyword\\">return</span>\\n    <span class=\\"hljs-keyword\\">let</span> val=root.val\\n\\n    <span class=\\"hljs-comment\\">// console.log(idxSet)</span>\\n    <span class=\\"hljs-keyword\\">let</span> add=<span class=\\"hljs-literal\\">false</span>\\n    <span class=\\"hljs-keyword\\">let</span> newSet=<span class=\\"hljs-keyword\\">new</span> <span class=\\"hljs-built_in\\">Set</span>()\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> idx <span class=\\"hljs-keyword\\">of</span> idxSet){\\n      <span class=\\"hljs-keyword\\">if</span>(headArr[idx]===val){\\n        newSet.add(idx+<span class=\\"hljs-number\\">1</span>)\\n      }\\n    }\\n    <span class=\\"hljs-keyword\\">if</span>(headArr[<span class=\\"hljs-number\\">0</span>]===val){\\n      newSet.add(<span class=\\"hljs-number\\">1</span>)\\n    }\\n    newSet.add(<span class=\\"hljs-number\\">0</span>)\\n    <span class=\\"hljs-keyword\\">if</span>(newSet.has(headArr.length))<span class=\\"hljs-keyword\\">return</span> found=<span class=\\"hljs-literal\\">true</span>\\n    <span class=\\"hljs-keyword\\">let</span> renewIdx=val===headArr[<span class=\\"hljs-number\\">0</span>] ? <span class=\\"hljs-number\\">1</span> : <span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">if</span>(root.left)dfs(root.left,newSet)\\n    <span class=\\"hljs-keyword\\">if</span>(root.right)dfs(root.right,newSet)\\n  }\\n  dfs(root,<span class=\\"hljs-keyword\\">new</span> <span class=\\"hljs-built_in\\">Set</span>([<span class=\\"hljs-number\\">0</span>]))\\n  <span class=\\"hljs-keyword\\">return</span> found\\n};\\n</code></pre>\\n"],"querySlug":"linked-list-in-binary-tree","created_at":"2020-03-01","timeArr":[2020,2,1,11,33,50,0],"hasThinking":false,"content":"<p>给你一棵以&nbsp;<code>root</code>&nbsp;为根的二叉树和一个&nbsp;<code>head</code>&nbsp;为第一个节点的链表。</p>\\n\\n<p>如果在二叉树中，存在一条一直向下的路径，且每个点的数值恰好一一对应以&nbsp;<code>head</code>&nbsp;为首的链表中每个节点的值，那么请你返回 <code>True</code> ，否则返回 <code>False</code> 。</p>\\n\\n<p>一直向下的路径的意思是：从树中某个节点开始，一直连续向下的路径。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<p><strong><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/02/29/sample_1_1720.png\\" style=\\"height: 280px; width: 220px;\\"></strong></p>\\n\\n<pre><strong>输入：</strong>head = [4,2,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]\\n<strong>输出：</strong>true\\n<strong>解释：</strong>树中蓝色的节点构成了与链表对应的子路径。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<p><strong><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/02/29/sample_2_1720.png\\" style=\\"height: 280px; width: 220px;\\"></strong></p>\\n\\n<pre><strong>输入：</strong>head = [1,4,2,6], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]\\n<strong>输出：</strong>true\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>head = [1,4,2,6,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]\\n<strong>输出：</strong>false\\n<strong>解释：</strong>二叉树中不存在一一对应链表的路径。\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li>二叉树和链表中的每个节点的值都满足&nbsp;<code>1 &lt;= node.val&nbsp;&lt;= 100</code>&nbsp;。</li>\\n\\t<li>链表包含的节点数目在&nbsp;<code>1</code>&nbsp;到&nbsp;<code>100</code>&nbsp;之间。</li>\\n\\t<li>二叉树包含的节点数目在&nbsp;<code>1</code>&nbsp;到&nbsp;<code>2500</code>&nbsp;之间。</li>\\n</ul>\\n","title":"1367. 二叉树中的列表","relatedTags":["树","深度优先搜索","广度优先搜索","链表","二叉树"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1367","slug":"1367-Linked-List-in-Binary-Tree"}')}}]);