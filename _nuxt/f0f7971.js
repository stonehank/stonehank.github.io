(window.webpackJsonp=window.webpackJsonp||[]).push([[227],{1025:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for singly-linked list.\\n * function ListNode(val) {\\n *     this.val = val;\\n *     this.next = null;\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{ListNode}</span> <span class=\\"hljs-variable\\">head</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> nextLargerNodes = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">head</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> aux=[]\\n  <span class=\\"hljs-keyword\\">let</span> r=head,id=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">while</span>(r){\\n    aux.push(r.val)\\n    r=r.next\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> res=[]\\n  <span class=\\"hljs-keyword\\">let</span> increase=[]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=aux.length<span class=\\"hljs-number\\">-1</span>;i&gt;=<span class=\\"hljs-number\\">0</span>;i--){\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=increase.length<span class=\\"hljs-number\\">-1</span>;j&gt;=<span class=\\"hljs-number\\">0</span>;j--){\\n      <span class=\\"hljs-keyword\\">if</span>(increase[j]&gt;aux[i]){\\n        res[i]=increase[j]\\n        <span class=\\"hljs-keyword\\">break</span>\\n      }\\n    }\\n    <span class=\\"hljs-keyword\\">if</span>(res[i]==<span class=\\"hljs-literal\\">null</span>)res[i]=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-comment\\">// 单调递减</span>\\n    <span class=\\"hljs-keyword\\">while</span>(increase.length&gt;<span class=\\"hljs-number\\">0</span> &amp;&amp; aux[i]&gt;increase[increase.length<span class=\\"hljs-number\\">-1</span>]){\\n      increase.pop()\\n    }\\n    increase.push(aux[i])\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"next-greater-node-in-linked-list","created_at":"2019-04-02","timeArr":[2019,3,2,1,5,23,0],"hasThinking":false,"content":"<p>给出一个以头节点&nbsp;<code>head</code>&nbsp;作为第一个节点的链表。链表中的节点分别编号为：<code>node_1, node_2, node_3, ...</code> 。</p>\\n\\n<p>每个节点都可能有下一个更大值（<em>next larger</em> <strong>value</strong>）：对于&nbsp;<code>node_i</code>，如果其&nbsp;<code>next_larger(node_i)</code>&nbsp;是&nbsp;<code>node_j.val</code>，那么就有&nbsp;<code>j &gt; i</code>&nbsp;且&nbsp;&nbsp;<code>node_j.val &gt; node_i.val</code>，而&nbsp;<code>j</code>&nbsp;是可能的选项中最小的那个。如果不存在这样的&nbsp;<code>j</code>，那么下一个更大值为&nbsp;<code>0</code>&nbsp;。</p>\\n\\n<p>返回整数答案数组&nbsp;<code>answer</code>，其中&nbsp;<code>answer[i] = next_larger(node_{i+1})</code>&nbsp;。</p>\\n\\n<p><strong><em>注意：</em></strong>在下面的示例中，诸如 <code>[2,1,5]</code> 这样的<strong>输入</strong>（不是输出）是链表的序列化表示，其头节点的值为&nbsp;2，第二个节点值为 1，第三个节点值为&nbsp;5 。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>[2,1,5]\\n<strong>输出：</strong>[5,5,0]\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>[2,7,4,3,5]\\n<strong>输出：</strong>[7,0,5,5,0]\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>[1,7,5,1,9,2,5,1]\\n<strong>输出：</strong>[7,9,9,9,0,5,0,0]\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ol>\\n\\t<li>对于链表中的每个节点，<code>1 &lt;= node.val&nbsp;&lt;= 10^9</code></li>\\n\\t<li>给定列表的长度在 <code>[0, 10000]</code>&nbsp;范围内</li>\\n</ol>\\n","title":"1019. 链表中的下一个更大节点","relatedTags":["栈","数组","链表","单调栈"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1019","slug":"1019-Next-Greater-Node-In-Linked-List"}')}}]);