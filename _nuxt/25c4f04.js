(window.webpackJsonp=window.webpackJsonp||[]).push([[703],{1501:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{TreeNode}</span> <span class=\\"hljs-variable\\">root</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{string[]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> binaryTreePaths = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">root</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(!root)<span class=\\"hljs-keyword\\">return</span> []\\n  <span class=\\"hljs-keyword\\">let</span> res=[]\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">dfs</span>(<span class=\\"hljs-params\\">root,str</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(root.left)dfs(root.left,str+<span class=\\"hljs-string\\">\\"-&gt;\\"</span>+root.left.val)\\n    <span class=\\"hljs-keyword\\">if</span>(root.right)dfs(root.right,str+<span class=\\"hljs-string\\">\\"-&gt;\\"</span>+root.right.val)\\n    <span class=\\"hljs-keyword\\">if</span>(!root.left &amp;&amp; !root.right){\\n      res.push(str)\\n    }\\n  }\\n  dfs(root,root.val+<span class=\\"hljs-string\\">\'\'</span>)\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"binary-tree-paths","created_at":"2019-03-18","timeArr":[2019,2,18,21,21,44,0],"hasThinking":false,"content":"<p>给你一个二叉树的根节点 <code>root</code> ，按 <strong>任意顺序</strong> ，返回所有从根节点到叶子节点的路径。</p>\\n\\n<p><strong>叶子节点</strong> 是指没有子节点的节点。</p>\\n&nbsp;\\n\\n<p><strong>示例 1：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2021/03/12/paths-tree.jpg\\" style=\\"width: 207px; height: 293px;\\" />\\n<pre>\\n<strong>输入：</strong>root = [1,2,3,null,5]\\n<strong>输出：</strong>[\\"1-&gt;2-&gt;5\\",\\"1-&gt;3\\"]\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>root = [1]\\n<strong>输出：</strong>[\\"1\\"]\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li>树中节点的数目在范围 <code>[1, 100]</code> 内</li>\\n\\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\\n</ul>\\n","title":"257. 二叉树的所有路径","relatedTags":["树","深度优先搜索","字符串","二叉树"],"difficult":"Easy","lang":["javascript"],"uniqueID":"257","slug":"257-Binary-Tree-Paths"}')}}]);