(window.webpackJsonp=window.webpackJsonp||[]).push([[414],{1212:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">s</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> minCut = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">s</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> N=s.length\\n  <span class=\\"hljs-keyword\\">let</span> dp=<span class=\\"hljs-built_in\\">Array</span>(N+<span class=\\"hljs-number\\">1</span>).fill(<span class=\\"hljs-number\\">0</span>)\\n  <span class=\\"hljs-keyword\\">let</span> palin=<span class=\\"hljs-built_in\\">Array</span>(N).fill().map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">n</span>=&gt;</span><span class=\\"hljs-built_in\\">Array</span>(N).fill(<span class=\\"hljs-literal\\">false</span>))\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;N;i++) palin[i][i]=<span class=\\"hljs-literal\\">true</span>\\n\\n  dp[<span class=\\"hljs-number\\">0</span>]=<span class=\\"hljs-number\\">-1</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">2</span>;i&lt;dp.length;i++){\\n    dp[i]=dp[i<span class=\\"hljs-number\\">-1</span>]+<span class=\\"hljs-number\\">1</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">1</span>;j&lt;i;j++){\\n      <span class=\\"hljs-keyword\\">if</span>(s[i<span class=\\"hljs-number\\">-1</span>]===s[j<span class=\\"hljs-number\\">-1</span>]){\\n        <span class=\\"hljs-keyword\\">if</span>(i-j&lt;=<span class=\\"hljs-number\\">1</span> || palin[j][i<span class=\\"hljs-number\\">-2</span>]){\\n          dp[i]=<span class=\\"hljs-built_in\\">Math</span>.min(dp[i],dp[j<span class=\\"hljs-number\\">-1</span>]+<span class=\\"hljs-number\\">1</span>)\\n          palin[j<span class=\\"hljs-number\\">-1</span>][i<span class=\\"hljs-number\\">-1</span>]=<span class=\\"hljs-literal\\">true</span>\\n        }\\n      }\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> dp[N]\\n};\\n</code></pre>\\n"],"querySlug":"palindrome-partitioning-ii","created_at":"2019-03-01","timeArr":[2019,2,1,0,18,5,0],"hasThinking":false,"content":"<p>给你一个字符串 <code>s</code>，请你将 <code>s</code> 分割成一些子串，使每个子串都是回文。</p>\\n\\n<p>返回符合要求的 <strong>最少分割次数</strong> 。</p>\\n\\n<div class=\\"original__bRMd\\">\\n<div>\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = \\"aab\\"\\n<strong>输出：</strong>1\\n<strong>解释：</strong>只需一次分割就可将 <em>s </em>分割成 [\\"aa\\",\\"b\\"] 这样两个回文子串。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = \\"a\\"\\n<strong>输出：</strong>0\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = \\"ab\\"\\n<strong>输出：</strong>1\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= s.length <= 2000</code></li>\\n\\t<li><code>s</code> 仅由小写英文字母组成</li>\\n</ul>\\n</div>\\n</div>\\n","title":"132. 分割回文串 II","relatedTags":["字符串","动态规划"],"difficult":"Hard","lang":["javascript"],"uniqueID":"132","slug":"132-Palindrome-Partitioning-II"}')}}]);