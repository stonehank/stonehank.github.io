(window.webpackJsonp=window.webpackJsonp||[]).push([[1359],{2157:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">A</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">queries</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> sumEvenAfterQueries = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">A, queries</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> evenSum=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">let</span> result=[]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;A.length;i++){\\n    <span class=\\"hljs-keyword\\">if</span>(A[i]%<span class=\\"hljs-number\\">2</span>===<span class=\\"hljs-number\\">0</span>)evenSum+=A[i]\\n  }\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;queries.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> [add,idx]=queries[i]\\n    <span class=\\"hljs-keyword\\">if</span>(A[idx] % <span class=\\"hljs-number\\">2</span>===<span class=\\"hljs-number\\">0</span>)evenSum-=A[idx]\\n    A[idx]+=add\\n    <span class=\\"hljs-keyword\\">if</span>(A[idx] % <span class=\\"hljs-number\\">2</span>===<span class=\\"hljs-number\\">0</span>)evenSum+=A[idx]\\n    result.push(evenSum)\\n  }\\n  \\n  <span class=\\"hljs-keyword\\">return</span> result\\n};\\n</code></pre>\\n"],"querySlug":"sum-of-even-numbers-after-queries","created_at":"2019-02-03","timeArr":[2019,1,3,10,34,20,0],"hasThinking":false,"content":"<p>给出一个整数数组&nbsp;<code>A</code>&nbsp;和一个查询数组&nbsp;<code>queries</code>。</p>\\n\\n<p>对于第&nbsp;<code>i</code>&nbsp;次查询，有&nbsp;<code>val =&nbsp;queries[i][0], index&nbsp;= queries[i][1]</code>，我们会把&nbsp;<code>val</code>&nbsp;加到&nbsp;<code>A[index]</code>&nbsp;上。然后，第&nbsp;<code>i</code>&nbsp;次查询的答案是 <code>A</code> 中偶数值的和。</p>\\n\\n<p><em>（此处给定的&nbsp;<code>index = queries[i][1]</code>&nbsp;是从 0 开始的索引，每次查询都会永久修改数组&nbsp;<code>A</code>。）</em></p>\\n\\n<p>返回所有查询的答案。你的答案应当以数组&nbsp;<code>answer</code>&nbsp;给出，<code>answer[i]</code>&nbsp;为第&nbsp;<code>i</code>&nbsp;次查询的答案。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例：</strong></p>\\n\\n<pre><strong>输入：</strong>A = [1,2,3,4], queries = [[1,0],[-3,1],[-4,0],[2,3]]\\n<strong>输出：</strong>[8,6,2,4]\\n<strong>解释：</strong>\\n开始时，数组为 [1,2,3,4]。\\n将 1 加到 A[0] 上之后，数组为 [2,2,3,4]，偶数值之和为 2 + 2 + 4 = 8。\\n将 -3 加到 A[1] 上之后，数组为 [2,-1,3,4]，偶数值之和为 2 + 4 = 6。\\n将 -4 加到 A[0] 上之后，数组为 [-2,-1,3,4]，偶数值之和为 -2 + 4 = 2。\\n将 2 加到 A[3] 上之后，数组为 [-2,-1,3,6]，偶数值之和为 -2 + 6 = 4。\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ol>\\n\\t<li><code>1 &lt;= A.length &lt;= 10000</code></li>\\n\\t<li><code>-10000 &lt;= A[i] &lt;= 10000</code></li>\\n\\t<li><code>1 &lt;= queries.length &lt;= 10000</code></li>\\n\\t<li><code>-10000 &lt;= queries[i][0] &lt;= 10000</code></li>\\n\\t<li><code>0 &lt;= queries[i][1] &lt; A.length</code></li>\\n</ol>\\n","title":"985. 查询后的偶数和","relatedTags":["数组","模拟"],"difficult":"Middle","lang":["javascript"],"uniqueID":"985","slug":"985-Sum-of-Even-Numbers-After-Queries"}')}}]);