(window.webpackJsonp=window.webpackJsonp||[]).push([[688],{1486:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\"># Definition for a binary tree node.</span>\\n<span class=\\"hljs-comment\\"># class TreeNode(object):</span>\\n<span class=\\"hljs-comment\\">#     def __init__(self, x):</span>\\n<span class=\\"hljs-comment\\">#         self.val = x</span>\\n<span class=\\"hljs-comment\\">#         self.left = None</span>\\n<span class=\\"hljs-comment\\">#         self.right = None</span>\\n\\n<span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Solution</span><span class=\\"hljs-params\\">(object)</span>:</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">kthSmallest</span><span class=\\"hljs-params\\">(self, root, k)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type root: TreeNode\\n        :type k: int\\n        :rtype: int\\n        \\"\\"\\"</span>\\n        self.count=<span class=\\"hljs-number\\">0</span>\\n        self.res=<span class=\\"hljs-literal\\">None</span>\\n        <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">dfs</span><span class=\\"hljs-params\\">(self,root)</span>:</span>\\n          <span class=\\"hljs-keyword\\">if</span> self.res!=<span class=\\"hljs-literal\\">None</span>:<span class=\\"hljs-keyword\\">return</span>\\n          <span class=\\"hljs-keyword\\">if</span> root.left:dfs(self,root.left)\\n          self.count+=<span class=\\"hljs-number\\">1</span>\\n          <span class=\\"hljs-keyword\\">if</span> self.count==k:\\n            self.res=root.val\\n            <span class=\\"hljs-keyword\\">return</span>\\n          <span class=\\"hljs-keyword\\">if</span> root.right:dfs(self,root.right)\\n          \\n        dfs(self,root)\\n        <span class=\\"hljs-keyword\\">return</span> self.res\\n</code></pre>\\n"],"querySlug":"kth-smallest-element-in-a-bst","created_at":"2019-02-25","timeArr":[2019,1,25,1,9,4,0],"hasThinking":false,"content":"<p>给定一个二叉搜索树的根节点 <code>root</code> ，和一个整数 <code>k</code> ，请你设计一个算法查找其中第 <code>k</code><strong> </strong>个最小元素（从 1 开始计数）。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2021/01/28/kthtree1.jpg\\" style=\\"width: 212px; height: 301px;\\" />\\n<pre>\\n<strong>输入：</strong>root = [3,1,4,null,2], k = 1\\n<strong>输出：</strong>1\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2021/01/28/kthtree2.jpg\\" style=\\"width: 382px; height: 302px;\\" />\\n<pre>\\n<strong>输入：</strong>root = [5,3,6,2,4,null,null,1], k = 3\\n<strong>输出：</strong>3\\n</pre>\\n\\n<p> </p>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li>树中的节点数为 <code>n</code> 。</li>\\n\\t<li><code>1 <= k <= n <= 10<sup>4</sup></code></li>\\n\\t<li><code>0 <= Node.val <= 10<sup>4</sup></code></li>\\n</ul>\\n\\n<p> </p>\\n\\n<p><strong>进阶：</strong>如果二叉搜索树经常被修改（插入/删除操作）并且你需要频繁地查找第 <code>k</code> 小的值，你将如何优化算法？</p>\\n","title":"230. 二叉搜索树中第K小的元素","relatedTags":["树","深度优先搜索","二叉搜索树","二叉树"],"difficult":"Middle","lang":["python"],"uniqueID":"230","slug":"230-Kth-Smallest-Element-in-a-BST"}')}}]);