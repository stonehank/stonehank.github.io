(window.webpackJsonp=window.webpackJsonp||[]).push([[346],{1144:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">num</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{string}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> intToRoman = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">num</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> bit={}\\n  bit[<span class=\\"hljs-number\\">0</span>]=[<span class=\\"hljs-string\\">\'I\'</span>,<span class=\\"hljs-string\\">\'V\'</span>,<span class=\\"hljs-string\\">\'X\'</span>]\\n  bit[<span class=\\"hljs-number\\">1</span>]=[<span class=\\"hljs-string\\">\'X\'</span>,<span class=\\"hljs-string\\">\'L\'</span>,<span class=\\"hljs-string\\">\'C\'</span>]\\n  bit[<span class=\\"hljs-number\\">2</span>]=[<span class=\\"hljs-string\\">\'C\'</span>,<span class=\\"hljs-string\\">\'D\'</span>,<span class=\\"hljs-string\\">\'M\'</span>]\\n  bit[<span class=\\"hljs-number\\">3</span>]=[<span class=\\"hljs-string\\">\'M\'</span>]\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">toRoman</span>(<span class=\\"hljs-params\\">n,cur</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(n===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-string\\">\'\'</span>\\n    <span class=\\"hljs-keyword\\">if</span>(n&lt;<span class=\\"hljs-number\\">4</span>)<span class=\\"hljs-keyword\\">return</span> cur[<span class=\\"hljs-number\\">0</span>].repeat(n)\\n    <span class=\\"hljs-keyword\\">if</span>(n===<span class=\\"hljs-number\\">4</span>)<span class=\\"hljs-keyword\\">return</span> cur[<span class=\\"hljs-number\\">0</span>]+cur[<span class=\\"hljs-number\\">1</span>]\\n    <span class=\\"hljs-keyword\\">if</span>(n&lt;<span class=\\"hljs-number\\">9</span>)<span class=\\"hljs-keyword\\">return</span> cur[<span class=\\"hljs-number\\">1</span>]+cur[<span class=\\"hljs-number\\">0</span>].repeat(n<span class=\\"hljs-number\\">-5</span>)\\n    <span class=\\"hljs-keyword\\">if</span>(n===<span class=\\"hljs-number\\">9</span>)<span class=\\"hljs-keyword\\">return</span> cur[<span class=\\"hljs-number\\">0</span>]+cur[<span class=\\"hljs-number\\">2</span>]\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> str=num+<span class=\\"hljs-string\\">\'\'</span>\\n  <span class=\\"hljs-keyword\\">let</span> len=str.length\\n  <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-string\\">\'\'</span>\\n  <span class=\\"hljs-keyword\\">let</span> N=num\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=len;i&gt;=<span class=\\"hljs-number\\">1</span>;i--){\\n    <span class=\\"hljs-keyword\\">let</span> curMod=<span class=\\"hljs-built_in\\">Math</span>.pow(<span class=\\"hljs-number\\">10</span>,i<span class=\\"hljs-number\\">-1</span>)\\n    <span class=\\"hljs-keyword\\">let</span> n=<span class=\\"hljs-built_in\\">Math</span>.floor(N/curMod)\\n    N %=curMod\\n    res+=toRoman(n,bit[i<span class=\\"hljs-number\\">-1</span>])\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"integer-to-roman","created_at":"2019-03-21","timeArr":[2019,2,21,18,33,25,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>注意<code>4</code>和<code>9</code>的处理方式，由于<code>9</code>的罗马文需要用到<code>10</code>，</p>\\n<p><code>I(1),V(5),X(10)</code>处理范围<code>[1,9]</code>；\\n<code>X(10),L(50),C(100)</code>处理范围<code>[10,90]</code>；\\n<code>C(100),D(500),M(1000)</code>处理范围<code>[100,900]</code>；</p>\\n<p>确定好处理范围后，对数字的每一位进行处理，再叠加字符串就是结果。</p>\\n","content":"<p>罗马数字包含以下七种字符： <code>I</code>， <code>V</code>， <code>X</code>， <code>L</code>，<code>C</code>，<code>D</code> 和 <code>M</code>。</p>\\n\\n<pre>\\n<strong>字符</strong>          <strong>数值</strong>\\nI             1\\nV             5\\nX             10\\nL             50\\nC             100\\nD             500\\nM             1000</pre>\\n\\n<p>例如， 罗马数字 2 写做 <code>II</code> ，即为两个并列的 1。12 写做 <code>XII</code> ，即为 <code>X</code> + <code>II</code> 。 27 写做  <code>XXVII</code>, 即为 <code>XX</code> + <code>V</code> + <code>II</code> 。</p>\\n\\n<p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 <code>IIII</code>，而是 <code>IV</code>。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 <code>IX</code>。这个特殊的规则只适用于以下六种情况：</p>\\n\\n<ul>\\n\\t<li><code>I</code> 可以放在 <code>V</code> (5) 和 <code>X</code> (10) 的左边，来表示 4 和 9。</li>\\n\\t<li><code>X</code> 可以放在 <code>L</code> (50) 和 <code>C</code> (100) 的左边，来表示 40 和 90。 </li>\\n\\t<li><code>C</code> 可以放在 <code>D</code> (500) 和 <code>M</code> (1000) 的左边，来表示 400 和 900。</li>\\n</ul>\\n\\n<p>给你一个整数，将其转为罗马数字。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1:</strong></p>\\n\\n<pre>\\n<strong>输入:</strong> num = 3\\n<strong>输出:</strong> \\"III\\"</pre>\\n\\n<p><strong>示例 2:</strong></p>\\n\\n<pre>\\n<strong>输入:</strong> num = 4\\n<strong>输出:</strong> \\"IV\\"</pre>\\n\\n<p><strong>示例 3:</strong></p>\\n\\n<pre>\\n<strong>输入:</strong> num = 9\\n<strong>输出:</strong> \\"IX\\"</pre>\\n\\n<p><strong>示例 4:</strong></p>\\n\\n<pre>\\n<strong>输入:</strong> num = 58\\n<strong>输出:</strong> \\"LVIII\\"\\n<strong>解释:</strong> L = 50, V = 5, III = 3.\\n</pre>\\n\\n<p><strong>示例 5:</strong></p>\\n\\n<pre>\\n<strong>输入:</strong> num = 1994\\n<strong>输出:</strong> \\"MCMXCIV\\"\\n<strong>解释:</strong> M = 1000, CM = 900, XC = 90, IV = 4.</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= num <= 3999</code></li>\\n</ul>\\n","title":"12. 整数转罗马数字","relatedTags":["哈希表","数学","字符串"],"difficult":"Middle","lang":["javascript"],"uniqueID":"12","slug":"12-Integer-to-Roman"}')}}]);