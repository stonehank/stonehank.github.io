(window.webpackJsonp=window.webpackJsonp||[]).push([[1045],{1843:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">edges</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> findRedundantConnection = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">edges</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> n=edges.length\\n  <span class=\\"hljs-keyword\\">let</span> uf=<span class=\\"hljs-built_in\\">Array</span>(n).fill().map(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">n,i</span>)=&gt;</span>i)\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">find</span>(<span class=\\"hljs-params\\">i</span>)</span>{\\n    <span class=\\"hljs-keyword\\">while</span>(i!=uf[i]){\\n      i=uf[i]\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> i\\n  }\\n\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> [<span class=\\"hljs-keyword\\">from</span>,to] <span class=\\"hljs-keyword\\">of</span> edges){\\n    <span class=\\"hljs-keyword\\">let</span> i=find(<span class=\\"hljs-keyword\\">from</span>),\\n        j=find(to)\\n    <span class=\\"hljs-keyword\\">if</span>(i!==j)uf[i]=j\\n    <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">return</span> [<span class=\\"hljs-keyword\\">from</span>,to]\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"redundant-connection","created_at":"2019-03-19","timeArr":[2019,2,19,17,29,34,0],"hasThinking":false,"content":"<p>树可以看成是一个连通且 <strong>无环 </strong>的 <strong>无向 </strong>图。</p>\\n\\n<p>给定往一棵 <code>n</code> 个节点 (节点值 <code>1～n</code>) 的树中添加一条边后的图。添加的边的两个顶点包含在 <code>1</code> 到 <code>n</code> 中间，且这条附加的边不属于树中已存在的边。图的信息记录于长度为 <code>n</code> 的二维数组 <code>edges</code> ，<code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> 表示图中在 <code>ai</code> 和 <code>bi</code> 之间存在一条边。</p>\\n\\n<p>请找出一条可以删去的边，删除后可使得剩余部分是一个有着 <code>n</code> 个节点的树。如果有多个答案，则返回数组 <code>edges</code> 中最后出现的边。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<p><img alt=\\"\\" src=\\"https://pic.leetcode-cn.com/1626676174-hOEVUL-image.png\\" style=\\"width: 152px; \\" /></p>\\n\\n<pre>\\n<strong>输入:</strong> edges = [[1,2], [1,3], [2,3]]\\n<strong>输出:</strong> [2,3]\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<p><img alt=\\"\\" src=\\"https://pic.leetcode-cn.com/1626676179-kGxcmu-image.png\\" style=\\"width: 250px; \\" /></p>\\n\\n<pre>\\n<strong>输入:</strong> edges = [[1,2], [2,3], [3,4], [1,4], [1,5]]\\n<strong>输出:</strong> [1,4]\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示:</strong></p>\\n\\n<ul>\\n\\t<li><code>n == edges.length</code></li>\\n\\t<li><code>3 <= n <= 1000</code></li>\\n\\t<li><code>edges[i].length == 2</code></li>\\n\\t<li><code>1 <= ai < bi <= edges.length</code></li>\\n\\t<li><code>ai != bi</code></li>\\n\\t<li><code>edges</code> 中无重复元素</li>\\n\\t<li>给定的图是连通的 </li>\\n</ul>\\n","title":"684. 冗余连接","relatedTags":["深度优先搜索","广度优先搜索","并查集","图"],"difficult":"Middle","lang":["javascript"],"uniqueID":"684","slug":"684-Redundant-Connection"}')}}]);