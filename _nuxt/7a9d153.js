(window.webpackJsonp=window.webpackJsonp||[]).push([[780],{1578:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Solution</span><span class=\\"hljs-params\\">(object)</span>:</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">largestDivisibleSubset</span><span class=\\"hljs-params\\">(self, nums)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        \\"\\"\\"</span>\\n        nums.insert(<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">1</span>)\\n        nums.sort()\\n        n=len(nums)\\n        mem={}\\n        dp=[<span class=\\"hljs-number\\">0</span>]*n\\n        dp[<span class=\\"hljs-number\\">0</span>]=<span class=\\"hljs-number\\">0</span>\\n        mem.setdefault(<span class=\\"hljs-number\\">0</span>,[])\\n        <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(<span class=\\"hljs-number\\">1</span>,n):\\n            <span class=\\"hljs-keyword\\">for</span> j <span class=\\"hljs-keyword\\">in</span> range(i<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">-1</span>,<span class=\\"hljs-number\\">-1</span>):\\n                <span class=\\"hljs-keyword\\">if</span> nums[i]%nums[j]==<span class=\\"hljs-number\\">0</span>:\\n                    <span class=\\"hljs-keyword\\">if</span> dp[j]+<span class=\\"hljs-number\\">1</span>&gt;dp[i]:\\n                        dp[i]=dp[j]+<span class=\\"hljs-number\\">1</span>\\n                        preMem=mem[j][:]\\n                        preMem.append(nums[i])\\n                        <span class=\\"hljs-keyword\\">if</span> <span class=\\"hljs-keyword\\">not</span> mem.has_key(i):\\n                            mem.setdefault(i,preMem)\\n                        <span class=\\"hljs-keyword\\">else</span>:\\n                            mem[i]=preMem\\n\\n        maxV=max(dp)\\n        <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(n):\\n            <span class=\\"hljs-keyword\\">if</span> dp[i]==maxV:\\n                <span class=\\"hljs-keyword\\">return</span> mem[i]\\n\\n            \\n</code></pre>\\n"],"querySlug":"largest-divisible-subset","created_at":"2019-03-02","timeArr":[2019,2,2,16,57,52,0],"hasThinking":false,"content":"给你一个由 <strong>无重复</strong> 正整数组成的集合 <code>nums</code> ，请你找出并返回其中最大的整除子集 <code>answer</code> ，子集中每一元素对 <code>(answer[i], answer[j])</code> 都应当满足：\\n<ul>\\n\\t<li><code>answer[i] % answer[j] == 0</code> ，或</li>\\n\\t<li><code>answer[j] % answer[i] == 0</code></li>\\n</ul>\\n\\n<p>如果存在多个有效解子集，返回其中任何一个均可。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [1,2,3]\\n<strong>输出：</strong>[1,2]\\n<strong>解释：</strong>[1,3] 也会被视为正确答案。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [1,2,4,8]\\n<strong>输出：</strong>[1,2,4,8]\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= nums.length <= 1000</code></li>\\n\\t<li><code>1 <= nums[i] <= 2 * 10<sup>9</sup></code></li>\\n\\t<li><code>nums</code> 中的所有整数 <strong>互不相同</strong></li>\\n</ul>\\n","title":"368. 最大整除子集","relatedTags":["数组","数学","动态规划","排序"],"difficult":"Middle","lang":["python"],"uniqueID":"368","slug":"368-Largest-Divisible-Subset"}')}}]);