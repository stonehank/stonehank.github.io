(window.webpackJsonp=window.webpackJsonp||[]).push([[789],{1587:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">Solution</span><span class=\\"hljs-params\\">(object)</span>:</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title\\">kthSmallest</span><span class=\\"hljs-params\\">(self, matrix, k)</span>:</span>\\n        <span class=\\"hljs-string\\">\\"\\"\\"\\n        :type matrix: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        \\"\\"\\"</span>\\n        m=len(matrix)\\n        n=len(matrix[<span class=\\"hljs-number\\">0</span>])\\n        lo,hi=matrix[<span class=\\"hljs-number\\">0</span>][<span class=\\"hljs-number\\">0</span>],matrix[<span class=\\"hljs-number\\">-1</span>][<span class=\\"hljs-number\\">-1</span>]\\n        <span class=\\"hljs-keyword\\">while</span> lo&lt;hi:\\n          mid=(lo+hi)//<span class=\\"hljs-number\\">2</span>\\n          count=<span class=\\"hljs-number\\">0</span>\\n          j=m<span class=\\"hljs-number\\">-1</span>\\n          <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> range(m):\\n            <span class=\\"hljs-keyword\\">while</span> j&gt;=<span class=\\"hljs-number\\">0</span> <span class=\\"hljs-keyword\\">and</span> matrix[i][j]&gt;mid:\\n              j-=<span class=\\"hljs-number\\">1</span>\\n            count+=(j+<span class=\\"hljs-number\\">1</span>)\\n          <span class=\\"hljs-keyword\\">if</span> count&lt;k:\\n            lo=mid+<span class=\\"hljs-number\\">1</span>\\n          <span class=\\"hljs-keyword\\">else</span>:\\n            hi=mid\\n        <span class=\\"hljs-keyword\\">return</span> lo\\n            \\n</code></pre>\\n"],"querySlug":"kth-smallest-element-in-a-sorted-matrix","created_at":"2019-02-25","timeArr":[2019,1,25,19,10,2,0],"hasThinking":false,"content":"<p>给你一个 <code>n x n</code><em> </em>矩阵 <code>matrix</code> ，其中每行和每列元素均按升序排序，找到矩阵中第 <code>k</code> 小的元素。<br />\\n请注意，它是 <strong>排序后</strong> 的第 <code>k</code> 小元素，而不是第 <code>k</code> 个 <strong>不同</strong> 的元素。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>matrix = [[1,5,9],[10,11,13],[12,13,15]], k = 8\\n<strong>输出：</strong>13\\n<strong>解释：</strong>矩阵中的元素为 [1,5,9,10,11,12,13,<strong>13</strong>,15]，第 8 小元素是 13\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>matrix = [[-5]], k = 1\\n<strong>输出：</strong>-5\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>n == matrix.length</code></li>\\n\\t<li><code>n == matrix[i].length</code></li>\\n\\t<li><code>1 <= n <= 300</code></li>\\n\\t<li><code>-10<sup>9</sup> <= matrix[i][j] <= 10<sup>9</sup></code></li>\\n\\t<li>题目数据 <strong>保证</strong> <code>matrix</code> 中的所有行和列都按 <strong>非递减顺序</strong> 排列</li>\\n\\t<li><code>1 <= k <= n<sup>2</sup></code></li>\\n</ul>\\n","title":"378. 有序矩阵中第 K 小的元素","relatedTags":["数组","二分查找","矩阵","排序","堆（优先队列）"],"difficult":"Middle","lang":["python"],"uniqueID":"378","slug":"378-Kth-Smallest-Element-in-a-Sorted-Matrix"}')}}]);