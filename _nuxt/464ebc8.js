(window.webpackJsonp=window.webpackJsonp||[]).push([[342],{1140:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">rowIndex</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> getRow = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">rowIndex</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> result=<span class=\\"hljs-built_in\\">Array</span>(rowIndex+<span class=\\"hljs-number\\">1</span>).fill(<span class=\\"hljs-number\\">1</span>)\\n  <span class=\\"hljs-keyword\\">let</span> temp=<span class=\\"hljs-built_in\\">Array</span>(rowIndex+<span class=\\"hljs-number\\">1</span>).fill(<span class=\\"hljs-number\\">1</span>)\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;rowIndex+<span class=\\"hljs-number\\">1</span>;i++){\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">1</span>;j&lt;i;j++){\\n      temp[j]=result[j<span class=\\"hljs-number\\">-1</span>]+result[j]\\n    }\\n    result=temp.slice()\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> result\\n};\\n</code></pre>\\n"],"querySlug":"pascals-triangle-ii","created_at":"2019-03-12","timeArr":[2019,2,12,21,37,28,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>空间<code>O(N)</code>，对于上一层<code>A</code>，倒序计算出当前层的值。</p>\\n","content":"<p>给定一个非负索引 <code>rowIndex</code>，返回「杨辉三角」的第 <code>rowIndex</code><em> </em>行。</p>\\n\\n<p><small>在「杨辉三角」中，每个数是它左上方和右上方的数的和。</small></p>\\n\\n<p><img alt=\\"\\" src=\\"https://pic.leetcode-cn.com/1626927345-DZmfxB-PascalTriangleAnimated2.gif\\" /></p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1:</strong></p>\\n\\n<pre>\\n<strong>输入:</strong> rowIndex = 3\\n<strong>输出:</strong> [1,3,3,1]\\n</pre>\\n\\n<p><strong>示例 2:</strong></p>\\n\\n<pre>\\n<strong>输入:</strong> rowIndex = 0\\n<strong>输出:</strong> [1]\\n</pre>\\n\\n<p><strong>示例 3:</strong></p>\\n\\n<pre>\\n<strong>输入:</strong> rowIndex = 1\\n<strong>输出:</strong> [1,1]\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示:</strong></p>\\n\\n<ul>\\n\\t<li><code>0 <= rowIndex <= 33</code></li>\\n</ul>\\n\\n<p> </p>\\n\\n<p><strong>进阶：</strong></p>\\n\\n<p>你可以优化你的算法到 <code><em>O</em>(<i>rowIndex</i>)</code> 空间复杂度吗？</p>\\n","title":"119. 杨辉三角 II","relatedTags":["数组","动态规划"],"difficult":"Easy","lang":["javascript"],"uniqueID":"119","slug":"119-Pascals-Triangle-II"}')}}]);