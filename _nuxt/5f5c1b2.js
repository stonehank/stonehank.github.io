(window.webpackJsonp=window.webpackJsonp||[]).push([[1200],{1998:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">rooms</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{boolean}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> canVisitAllRooms = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">rooms</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> cache={}\\n  cache[<span class=\\"hljs-number\\">0</span>]=<span class=\\"hljs-literal\\">true</span>\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">checkKeys</span>(<span class=\\"hljs-params\\">n</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> room=rooms[n]\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;room.length;i++){\\n      <span class=\\"hljs-keyword\\">if</span>(!cache[room[i]]){\\n          cache[room[i]]=<span class=\\"hljs-literal\\">true</span>\\n          checkKeys(room[i])\\n      }\\n    }\\n  }\\n  checkKeys(<span class=\\"hljs-number\\">0</span>)\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-built_in\\">Object</span>.keys(cache).length===rooms.length\\n    \\n};\\n</code></pre>\\n"],"querySlug":"keys-and-rooms","created_at":"2019-04-11","timeArr":[2019,3,11,0,51,30,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>使用<code>cache</code>来保存能进入的房间，<code>dfs</code>遍历，每次进入一个未进过的房间，将房间中的钥匙(也就是能进入的房间id)，添加到<code>cache</code>中，\\n并且递归遍历。</p>\\n<p>最后返回<code>cache</code>的长度和<code>rooms</code>的长度是否相等。</p>\\n","content":"<p>有 <code>N</code> 个房间，开始时你位于 <code>0</code> 号房间。每个房间有不同的号码：<code>0，1，2，...，N-1</code>，并且房间里可能有一些钥匙能使你进入下一个房间。</p>\\n\\n<p>在形式上，对于每个房间 <code>i</code> 都有一个钥匙列表 <code>rooms[i]</code>，每个钥匙 <code>rooms[i][j]</code> 由 <code>[0,1，...，N-1]</code> 中的一个整数表示，其中 <code>N = rooms.length</code>。 钥匙 <code>rooms[i][j] = v</code> 可以打开编号为 <code>v</code> 的房间。</p>\\n\\n<p>最初，除 <code>0</code> 号房间外的其余所有房间都被锁住。</p>\\n\\n<p>你可以自由地在房间之间来回走动。</p>\\n\\n<p>如果能进入每个房间返回 <code>true</code>，否则返回 <code>false</code>。</p>\\n\\n<ol>\\n</ol>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入: </strong>[[1],[2],[3],[]]\\n<strong>输出: </strong>true\\n<strong>解释:  </strong>\\n我们从 0 号房间开始，拿到钥匙 1。\\n之后我们去 1 号房间，拿到钥匙 2。\\n然后我们去 2 号房间，拿到钥匙 3。\\n最后我们去了 3 号房间。\\n由于我们能够进入每个房间，我们返回 true。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>[[1,3],[3,0,1],[2],[0]]\\n<strong>输出：</strong>false\\n<strong>解释：</strong>我们不能进入 2 号房间。\\n</pre>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ol>\\n\\t<li><code>1 &lt;= rooms.length &lt;=&nbsp;1000</code></li>\\n\\t<li><code>0 &lt;= rooms[i].length &lt;= 1000</code></li>\\n\\t<li>所有房间中的钥匙数量总计不超过&nbsp;<code>3000</code>。</li>\\n</ol>\\n","title":"841. 钥匙和房间","relatedTags":["深度优先搜索","广度优先搜索","图"],"difficult":"Middle","lang":["javascript"],"uniqueID":"841","slug":"841-Keys-and-Rooms"}')}}]);