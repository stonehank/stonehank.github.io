(window.webpackJsonp=window.webpackJsonp||[]).push([[986],{1784:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{TreeNode}</span> <span class=\\"hljs-variable\\">t</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{string}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> tree2str = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">t</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(!t)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-string\\">\'\'</span>\\n  <span class=\\"hljs-keyword\\">let</span> str=t.val+<span class=\\"hljs-string\\">\'\'</span>\\n  <span class=\\"hljs-keyword\\">if</span>(!t.left &amp;&amp; !t.right)<span class=\\"hljs-keyword\\">return</span> str\\n  <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(!t.left &amp;&amp; t.right)str+=<span class=\\"hljs-string\\">\\"()\\"</span>+<span class=\\"hljs-string\\">\\"(\\"</span>+tree2str(t.right)+<span class=\\"hljs-string\\">\\")\\"</span>\\n  <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(!t.right &amp;&amp; t.left)str+=<span class=\\"hljs-string\\">\\"(\\"</span>+tree2str(t.left)+<span class=\\"hljs-string\\">\\")\\"</span>\\n  <span class=\\"hljs-keyword\\">else</span> str+=<span class=\\"hljs-string\\">\\"(\\"</span>+tree2str(t.left)+<span class=\\"hljs-string\\">\\")\\"</span>+<span class=\\"hljs-string\\">\\"(\\"</span>+tree2str(t.right)+<span class=\\"hljs-string\\">\\")\\"</span>\\n  <span class=\\"hljs-keyword\\">return</span> str\\n};\\n</code></pre>\\n"],"querySlug":"construct-string-from-binary-tree","created_at":"2019-03-19","timeArr":[2019,2,19,13,4,1,0],"hasThinking":false,"content":"<p>你需要采用前序遍历的方式，将一个二叉树转换成一个由括号和整数组成的字符串。</p>\\n\\n<p>空节点则用一对空括号 &quot;()&quot; 表示。而且你需要省略所有不影响字符串与原始二叉树之间的一对一映射关系的空括号对。</p>\\n\\n<p><strong>示例 1:</strong></p>\\n\\n<pre>\\n<strong>输入:</strong> 二叉树: [1,2,3,4]\\n       1\\n     /   \\\\\\n    2     3\\n   /    \\n  4     \\n\\n<strong>输出:</strong> &quot;1(2(4))(3)&quot;\\n\\n<strong>解释:</strong> 原本将是&ldquo;1(2(4)())(3())&rdquo;，\\n在你省略所有不必要的空括号对之后，\\n它将是&ldquo;1(2(4))(3)&rdquo;。\\n</pre>\\n\\n<p><strong>示例 2:</strong></p>\\n\\n<pre>\\n<strong>输入:</strong> 二叉树: [1,2,3,null,4]\\n       1\\n     /   \\\\\\n    2     3\\n     \\\\  \\n      4 \\n\\n<strong>输出:</strong> &quot;1(2()(4))(3)&quot;\\n\\n<strong>解释:</strong> 和第一个示例相似，\\n除了我们不能省略第一个对括号来中断输入和输出之间的一对一映射关系。\\n</pre>\\n","title":"606. 根据二叉树创建字符串","relatedTags":["树","深度优先搜索","字符串","二叉树"],"difficult":"Easy","lang":["javascript"],"uniqueID":"606","slug":"606-Construct-String-from-Binary-Tree"}')}}]);