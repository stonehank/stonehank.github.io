(window.webpackJsonp=window.webpackJsonp||[]).push([[588],{1386:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">s</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> minDeletions = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">s</span>) </span>{\\n    <span class=\\"hljs-keyword\\">let</span> freq=<span class=\\"hljs-built_in\\">Array</span>(<span class=\\"hljs-number\\">26</span>).fill(<span class=\\"hljs-literal\\">null</span>)\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> l <span class=\\"hljs-keyword\\">of</span> s){\\n        <span class=\\"hljs-keyword\\">let</span> code=l.charCodeAt(<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-number\\">-97</span>\\n        <span class=\\"hljs-keyword\\">if</span>(freq[code]==<span class=\\"hljs-literal\\">null</span>){\\n            freq[code]=<span class=\\"hljs-number\\">1</span>\\n        }<span class=\\"hljs-keyword\\">else</span>{\\n            freq[code]++\\n        }\\n    }\\n    freq=freq.filter(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">obj</span>=&gt;</span>obj)\\n    freq.sort(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">a,b</span>)=&gt;</span>a-b)\\n    <span class=\\"hljs-keyword\\">let</span> arr=<span class=\\"hljs-built_in\\">Array</span>(<span class=\\"hljs-number\\">10005</span>).fill(<span class=\\"hljs-literal\\">null</span>)\\n    <span class=\\"hljs-keyword\\">let</span> fullNum=<span class=\\"hljs-number\\">1</span>\\n    <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-comment\\">// console.log(freq)</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;freq.length;i++){\\n        <span class=\\"hljs-keyword\\">let</span> count=freq[i]\\n        <span class=\\"hljs-keyword\\">if</span>(arr[count]==<span class=\\"hljs-literal\\">null</span>){\\n            arr[count]=<span class=\\"hljs-literal\\">true</span>\\n        }<span class=\\"hljs-keyword\\">else</span>{\\n            count--\\n            res++\\n            <span class=\\"hljs-keyword\\">while</span>(arr[count] &amp;&amp; count&gt;<span class=\\"hljs-number\\">0</span>){\\n                count--\\n                res++\\n            }\\n            arr[count]=<span class=\\"hljs-literal\\">true</span>\\n        }\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> res\\n};\\n</code></pre>\\n"],"querySlug":"minimum-deletions-to-make-character-frequencies-unique","created_at":"2020-12-26","timeArr":[2020,11,26,20,58,29,0],"hasThinking":false,"content":"<p>如果字符串 <code>s</code> 中 <strong>不存在</strong> 两个不同字符 <strong>频次</strong> 相同的情况，就称 <code>s</code> 是 <strong>优质字符串</strong> 。</p>\\n\\n<p>给你一个字符串 <code>s</code>，返回使 <code>s</code> 成为 <strong>优质字符串</strong> 需要删除的 <strong>最小</strong> 字符数。</p>\\n\\n<p>字符串中字符的 <strong>频次</strong> 是该字符在字符串中的出现次数。例如，在字符串 <code>\\"aab\\"</code> 中，<code>\'a\'</code> 的频次是 <code>2</code>，而 <code>\'b\'</code> 的频次是 <code>1</code> 。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = \\"aab\\"\\n<strong>输出：</strong>0\\n<strong>解释：</strong><code>s</code> 已经是优质字符串。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = \\"aaabbbcc\\"\\n<strong>输出：</strong>2\\n<strong>解释：</strong>可以删除两个 \'b\' , 得到优质字符串 \\"aaabcc\\" 。\\n另一种方式是删除一个 \'b\' 和一个 \'c\' ，得到优质字符串 \\"aaabbc\\" 。</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>s = \\"ceabaacb\\"\\n<strong>输出：</strong>2\\n<strong>解释：</strong>可以删除两个 \'c\' 得到优质字符串 \\"eabaab\\" 。\\n注意，只需要关注结果字符串中仍然存在的字符。（即，频次为 0 的字符会忽略不计。）\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= s.length <= 10<sup>5</sup></code></li>\\n\\t<li><code>s</code> 仅含小写英文字母</li>\\n</ul>\\n","title":"1647. 字符频次唯一的最小删除次数","relatedTags":["贪心","字符串","排序"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1647","slug":"1647-Minimum-Deletions-to-Make-Character-Frequencies-Unique"}')}}]);