(window.webpackJsonp=window.webpackJsonp||[]).push([[1294],{2092:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">S</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> minFlipsMonoIncr = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">S</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> n=S.length\\n  <span class=\\"hljs-keyword\\">let</span> beZero=<span class=\\"hljs-built_in\\">Array</span>(n+<span class=\\"hljs-number\\">1</span>).fill(<span class=\\"hljs-number\\">0</span>),\\n      beOne=<span class=\\"hljs-built_in\\">Array</span>(n+<span class=\\"hljs-number\\">1</span>).fill(<span class=\\"hljs-number\\">0</span>)\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;n;i++){\\n    <span class=\\"hljs-keyword\\">if</span>(S[i]===<span class=\\"hljs-string\\">\'0\'</span>){\\n      beZero[i+<span class=\\"hljs-number\\">1</span>]=beZero[i]\\n      beOne[i+<span class=\\"hljs-number\\">1</span>]=<span class=\\"hljs-built_in\\">Math</span>.min(beZero[i],beOne[i])+<span class=\\"hljs-number\\">1</span>\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      beZero[i+<span class=\\"hljs-number\\">1</span>]=beZero[i]+<span class=\\"hljs-number\\">1</span>\\n      beOne[i+<span class=\\"hljs-number\\">1</span>]=<span class=\\"hljs-built_in\\">Math</span>.min(beZero[i],beOne[i])\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-built_in\\">Math</span>.min(beZero[n],beOne[n])\\n};\\n</code></pre>\\n"],"querySlug":"flip-string-to-monotone-increasing","created_at":"2019-03-16","timeArr":[2019,2,16,23,30,27,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>这道题要求3种格式，分别是<code>00</code>,<code>01</code>,<code>11</code></p>\\n<p>因此，数字<code>0</code>前面必须是<code>0</code>，数字<code>1</code>前面可以是<code>0</code>或者<code>1</code>。</p>\\n<p>我们定义2个数组<code>beZero</code>和<code>beOne</code>，分别用来保存如果当前值要反转成<code>0</code>或者<code>1</code>需要的次数。</p>\\n<p>通过上面分析，可以得到以下公式：</p>\\n<pre class=\\"hljs\\"><code>if S[i]==&quot;0&quot;:\\nbeZero[i]=beZero[i-1]\\nbeOne[i]=Math.min(beZero[i-1],beOne[i-1]) + 1\\n\\nif S[i]==&quot;1&quot;:\\nbeZero[i]=beZero[i-1] + 1\\nbeOne[i]=Math.min(beZero[i-1],beOne[i-1])\\n</code></pre>\\n","content":"<p>如果一个由 <code>\'0\'</code> 和 <code>\'1\'</code> 组成的字符串，是以一些 <code>\'0\'</code>（可能没有 <code>\'0\'</code>）后面跟着一些 <code>\'1\'</code>（也可能没有 <code>\'1\'</code>）的形式组成的，那么该字符串是<em>单调递增</em>的。</p>\\n\\n<p>我们给出一个由字符 <code>\'0\'</code> 和 <code>\'1\'</code> 组成的字符串 <code>S</code>，我们可以将任何 <code>\'0\'</code> 翻转为 <code>\'1\'</code> 或者将 <code>\'1\'</code> 翻转为 <code>\'0\'</code>。</p>\\n\\n<p>返回使 <code>S</code> 单调递增的最小翻转次数。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>\\"00110\\"\\n<strong>输出：</strong>1\\n<strong>解释：</strong>我们翻转最后一位得到 00111.\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>\\"010110\\"\\n<strong>输出：</strong>2\\n<strong>解释：</strong>我们翻转得到 011111，或者是 000111。\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>\\"00011000\\"\\n<strong>输出：</strong>2\\n<strong>解释：</strong>我们翻转得到 00000000。\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= S.length <= 20000</code></li>\\n\\t<li><code>S</code> 中只包含字符 <code>\'0\'</code> 和 <code>\'1\'</code></li>\\n</ul>\\n","title":"926. 将字符串翻转到单调递增","relatedTags":["字符串","动态规划"],"difficult":"Middle","lang":["javascript"],"uniqueID":"926","slug":"926-Flip-String-to-Monotone-Increasing"}')}}]);