(window.webpackJsonp=window.webpackJsonp||[]).push([[111],{593:function(n){n.exports=JSON.parse('{"content":"<p>react的<code>getDerivedStateFromProps</code>内部不可以有副作用，因为现在是无论是state改变还是props改变，\\n都会执行它。</p>\\n<p>例如：</p>\\n<p>这种写法会导致多次循环渲染直到报错</p>\\n<pre><code class=\\"language-jsx\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">App</span> <span class=\\"hljs-keyword\\">extends</span> <span class=\\"hljs-title\\">Component</span> </span>{\\n  <span class=\\"hljs-keyword\\">constructor</span>(props){\\n    <span class=\\"hljs-keyword\\">super</span>(props)\\n    <span class=\\"hljs-keyword\\">this</span>.myFetch=<span class=\\"hljs-keyword\\">this</span>.myFetch.bind(<span class=\\"hljs-keyword\\">this</span>)\\n    <span class=\\"hljs-keyword\\">this</span>.state = {\\n      <span class=\\"hljs-attr\\">name</span>: <span class=\\"hljs-string\\">\\"\\"</span>,\\n      <span class=\\"hljs-attr\\">list</span>: <span class=\\"hljs-literal\\">null</span>,\\n      <span class=\\"hljs-attr\\">myFetch</span>:<span class=\\"hljs-keyword\\">this</span>.myFetch\\n    };\\n  }\\n\\n\\n  <span class=\\"hljs-keyword\\">static</span> getDerivedStateFromProps(props, state) {\\n    <span class=\\"hljs-keyword\\">if</span> ( props.name !== state.name ) {\\n      <span class=\\"hljs-comment\\">// 这一句是有副作用的，它会改变state状态，</span>\\n      <span class=\\"hljs-comment\\">// 然后再次调用getDerivedStateFromProps，再次改变state状态...</span>\\n      state.myFetch(props.name)\\n      <span class=\\"hljs-keyword\\">return</span> {\\n        <span class=\\"hljs-attr\\">name</span>: props.name\\n      };\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">null</span>;\\n  }\\n  myFetch(){\\n      <span class=\\"hljs-keyword\\">this</span>.setState({\\n        <span class=\\"hljs-attr\\">list</span>: <span class=\\"hljs-string\\">\\"newList\\"</span>\\n      })\\n  }\\n  render() {\\n    <span class=\\"hljs-keyword\\">return</span> (\\n      &lt;div&gt;{this.state.list}&lt;/div&gt;\\n    );\\n  }\\n}</code></pre></code></pre>\\n<p>以上正确写法应为：</p>\\n<pre><code class=\\"language-jsx\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">App</span> <span class=\\"hljs-keyword\\">extends</span> <span class=\\"hljs-title\\">Component</span> </span>{\\n  <span class=\\"hljs-keyword\\">constructor</span>(props){\\n    <span class=\\"hljs-keyword\\">super</span>(props)\\n    <span class=\\"hljs-keyword\\">this</span>.myFetch=<span class=\\"hljs-keyword\\">this</span>.myFetch.bind(<span class=\\"hljs-keyword\\">this</span>)\\n    <span class=\\"hljs-keyword\\">this</span>.state = {\\n      <span class=\\"hljs-attr\\">name</span>: <span class=\\"hljs-string\\">\\"\\"</span>,\\n      <span class=\\"hljs-attr\\">list</span>: <span class=\\"hljs-literal\\">null</span>,\\n      <span class=\\"hljs-comment\\">//myFetch:this.myFetch</span>\\n    };\\n  }\\n\\n  <span class=\\"hljs-comment\\">// 纯函数，无副作用</span>\\n  <span class=\\"hljs-keyword\\">static</span> getDerivedStateFromProps(props, state) {\\n    <span class=\\"hljs-keyword\\">if</span> ( props.name !== state.name ) {\\n      <span class=\\"hljs-keyword\\">return</span> {\\n        <span class=\\"hljs-attr\\">name</span>: props.name,\\n        <span class=\\"hljs-attr\\">list</span>: <span class=\\"hljs-literal\\">null</span>\\n      };\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">null</span>;\\n  }\\n  componentDidUpdate(){\\n    <span class=\\"hljs-keyword\\">if</span>(!<span class=\\"hljs-keyword\\">this</span>.state.list){\\n      <span class=\\"hljs-keyword\\">this</span>.myFetch(<span class=\\"hljs-keyword\\">this</span>.props.name)\\n    }\\n  }\\n\\n  <span class=\\"hljs-comment\\">// 看是否需要初始化的时候调用</span>\\n  componentDidMount(){\\n    <span class=\\"hljs-keyword\\">this</span>.myFetch(<span class=\\"hljs-keyword\\">this</span>.props.name)\\n  }\\n\\n  myFetch(){\\n    <span class=\\"hljs-keyword\\">this</span>.setState({\\n      <span class=\\"hljs-attr\\">list</span>: <span class=\\"hljs-string\\">\\"newList\\"</span>\\n    })\\n  }\\n  render() {\\n    <span class=\\"hljs-keyword\\">return</span> (\\n      &lt;div&gt;{this.state.list}&lt;/div&gt;\\n    );\\n  }\\n}</code></pre></code></pre>\\n","toc":[],"relatedTags":null,"created_at":"2018-06-07","timeArr":[2018,5,7,0,0,0,0],"title":"getDerivedStateFromProps","uuid":"5a309baed59601de7885e379ac2562b045fb413d","summary":"<p>react的<code>getDerivedStateFromProps</code>内部不可以有副作用，因为现在是无论是state改变还是props改变，\\n都会执行它。</p>\\n<p>例如：</p>\\n<p>这种写法会导致多次循环渲染直到报错</p>\\n<pre class=\\"hljs\\"><code><span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title\\">App</span> <span class=\\"hljs-keyword\\">extends</span> <span class=\\"hljs-title\\">Component</span> </span>{\\n  <span class=\\"hljs-keyword\\">constructor</span>(props){\\n  ...</code></pre>","slug":"getDerivedStateFromProps","sha":"b0683499799fb64f81d0d942134c7304c29cc5f0"}')}}]);