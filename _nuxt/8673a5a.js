(window.webpackJsonp=window.webpackJsonp||[]).push([[250],{1048:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{TreeNode}</span> <span class=\\"hljs-variable\\">root</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> maxDepth = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">root</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(!root)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-built_in\\">Math</span>.max(maxDepth(root.left),maxDepth(root.right))+<span class=\\"hljs-number\\">1</span>\\n    \\n};\\n</code></pre>\\n"],"querySlug":"maximum-depth-of-binary-tree","created_at":"2019-03-18","timeArr":[2019,2,18,13,44,55,0],"hasThinking":false,"content":"<p>给定一个二叉树，找出其最大深度。</p>\\n\\n<p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</p>\\n\\n<p><strong>说明:</strong>&nbsp;叶子节点是指没有子节点的节点。</p>\\n\\n<p><strong>示例：</strong><br>\\n给定二叉树 <code>[3,9,20,null,null,15,7]</code>，</p>\\n\\n<pre>    3\\n   / \\\\\\n  9  20\\n    /  \\\\\\n   15   7</pre>\\n\\n<p>返回它的最大深度&nbsp;3 。</p>\\n","title":"104. 二叉树的最大深度","relatedTags":["树","深度优先搜索","广度优先搜索","二叉树"],"difficult":"Easy","lang":["javascript"],"uniqueID":"104","slug":"104-Maximum-Depth-of-Binary-Tree"}')}}]);