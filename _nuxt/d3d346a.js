(window.webpackJsonp=window.webpackJsonp||[]).push([[350],{1148:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">s</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">pairs</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{string}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> smallestStringWithSwaps = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">s, pairs</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(pairs.length===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span> s\\n  <span class=\\"hljs-keyword\\">let</span> used=<span class=\\"hljs-built_in\\">Array</span>(s.length).fill(<span class=\\"hljs-literal\\">false</span>)\\n  <span class=\\"hljs-keyword\\">let</span> uf=<span class=\\"hljs-built_in\\">Array</span>(s.length).fill().map(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">n,i</span>)=&gt;</span>i)\\n  <span class=\\"hljs-keyword\\">let</span> group=<span class=\\"hljs-built_in\\">Array</span>(s.length).fill().map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span>=&gt;</span><span class=\\"hljs-keyword\\">new</span> <span class=\\"hljs-built_in\\">Set</span>())\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">find</span>(<span class=\\"hljs-params\\">i</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(i!==uf[i]){\\n      uf[i]=find(uf[i])\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> uf[i]\\n  }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">union</span>(<span class=\\"hljs-params\\">a,b</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> i=find(a),\\n        j=find(b)\\n    <span class=\\"hljs-keyword\\">if</span>(i===j)<span class=\\"hljs-keyword\\">return</span>\\n    <span class=\\"hljs-keyword\\">if</span>(group[i].size&lt;group[j].size){\\n      uf[i]=j\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> n <span class=\\"hljs-keyword\\">of</span> group[i]){\\n        group[j].add(n)\\n      }\\n      group[j].add(a)\\n      group[j].add(b)\\n      <span class=\\"hljs-comment\\">// group[j]=group[j].concat(group[i])</span>\\n      <span class=\\"hljs-comment\\">// if(!group[j].includes(a))group[j].push(a)</span>\\n      <span class=\\"hljs-comment\\">// if(!group[j].includes(b))group[j].push(b)  </span>\\n      group[i]=<span class=\\"hljs-keyword\\">new</span> <span class=\\"hljs-built_in\\">Set</span>()\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      \\n      uf[j]=i\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> n <span class=\\"hljs-keyword\\">of</span> group[j]){\\n        group[i].add(n)\\n      }\\n      group[i].add(a)\\n      group[i].add(b)\\n      <span class=\\"hljs-comment\\">// group[i]=group[i].concat(group[j])</span>\\n      <span class=\\"hljs-comment\\">// if(!group[i].includes(a))group[i].push(a)</span>\\n      <span class=\\"hljs-comment\\">// if(!group[i].includes(b))group[i].push(b)  </span>\\n      group[j]=<span class=\\"hljs-keyword\\">new</span> <span class=\\"hljs-built_in\\">Set</span>()\\n    }\\n  }\\n  \\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> [v,w] <span class=\\"hljs-keyword\\">of</span> pairs){\\n    union(v,w)\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> res=[]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;group.length;i++){\\n    res.push(group[i])\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> ans=[]\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;res.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> str=[]\\n    <span class=\\"hljs-keyword\\">let</span> idArr=[]\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> id <span class=\\"hljs-keyword\\">of</span> res[i]){\\n      str.push(s[id])\\n      idArr.push(id)\\n    }\\n    idArr.sort(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">a,b</span>)=&gt;</span>a-b)\\n    str.sort()\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;str.length;j++){\\n      used[idArr[j]]=<span class=\\"hljs-literal\\">true</span>\\n      ans[idArr[j]]=str[j]\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;used.length;i++){\\n    <span class=\\"hljs-keyword\\">if</span>(!used[i]){\\n      ans[i]=s[i]\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> ans.join(<span class=\\"hljs-string\\">\'\'</span>)\\n};\\n</code></pre>\\n"],"querySlug":"smallest-string-with-swaps","created_at":"2019-09-22","timeArr":[2019,8,22,11,57,16,0],"hasThinking":false,"content":"<p>给你一个字符串&nbsp;<code>s</code>，以及该字符串中的一些「索引对」数组&nbsp;<code>pairs</code>，其中&nbsp;<code>pairs[i] =&nbsp;[a, b]</code>&nbsp;表示字符串中的两个索引（编号从 0 开始）。</p>\\n\\n<p>你可以 <strong>任意多次交换</strong> 在&nbsp;<code>pairs</code>&nbsp;中任意一对索引处的字符。</p>\\n\\n<p>返回在经过若干次交换后，<code>s</code>&nbsp;可以变成的按字典序最小的字符串。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1:</strong></p>\\n\\n<pre><strong>输入：</strong>s = &quot;dcab&quot;, pairs = [[0,3],[1,2]]\\n<strong>输出：</strong>&quot;bacd&quot;\\n<strong>解释：</strong> \\n交换 s[0] 和 s[3], s = &quot;bcad&quot;\\n交换 s[1] 和 s[2], s = &quot;bacd&quot;\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>s = &quot;dcab&quot;, pairs = [[0,3],[1,2],[0,2]]\\n<strong>输出：</strong>&quot;abcd&quot;\\n<strong>解释：</strong>\\n交换 s[0] 和 s[3], s = &quot;bcad&quot;\\n交换 s[0] 和 s[2], s = &quot;acbd&quot;\\n交换 s[1] 和 s[2], s = &quot;abcd&quot;</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>s = &quot;cba&quot;, pairs = [[0,1],[1,2]]\\n<strong>输出：</strong>&quot;abc&quot;\\n<strong>解释：</strong>\\n交换 s[0] 和 s[1], s = &quot;bca&quot;\\n交换 s[1] 和 s[2], s = &quot;bac&quot;\\n交换 s[0] 和 s[1], s = &quot;abc&quot;\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= s.length &lt;= 10^5</code></li>\\n\\t<li><code>0 &lt;= pairs.length &lt;= 10^5</code></li>\\n\\t<li><code>0 &lt;= pairs[i][0], pairs[i][1] &lt;&nbsp;s.length</code></li>\\n\\t<li><code>s</code>&nbsp;中只含有小写英文字母</li>\\n</ul>\\n","title":"1202. 交换字符串中的元素","relatedTags":["深度优先搜索","广度优先搜索","并查集","哈希表","字符串"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1202","slug":"1202-Smallest-String-With-Swaps"}')}}]);