(window.webpackJsonp=window.webpackJsonp||[]).push([[900],{1698:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">nums</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">S</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> findTargetSumWays = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">nums, S</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> sum=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> s <span class=\\"hljs-keyword\\">of</span> nums)sum+=s\\n  <span class=\\"hljs-keyword\\">let</span> mem=<span class=\\"hljs-built_in\\">Array</span>(nums.length).fill().map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span>=&gt;</span><span class=\\"hljs-built_in\\">Array</span>(sum+<span class=\\"hljs-number\\">1000</span>).fill(<span class=\\"hljs-literal\\">null</span>))\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">calc</span>(<span class=\\"hljs-params\\">id,t</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(id===nums.length){\\n      <span class=\\"hljs-keyword\\">if</span>(t===S)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">1</span>\\n      <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>\\n    }\\n    <span class=\\"hljs-keyword\\">if</span>(mem[id][t+<span class=\\"hljs-number\\">1000</span>]!=<span class=\\"hljs-literal\\">null</span>)<span class=\\"hljs-keyword\\">return</span> mem[id][t+<span class=\\"hljs-number\\">1000</span>]\\n    <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-number\\">0</span>\\n    res+=calc(id+<span class=\\"hljs-number\\">1</span>,t+nums[id])\\n    res+=calc(id+<span class=\\"hljs-number\\">1</span>,t-nums[id])\\n    mem[id][t+<span class=\\"hljs-number\\">1000</span>]=res\\n    <span class=\\"hljs-keyword\\">return</span> res\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> calc(<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">0</span>)\\n};\\n</code></pre>\\n"],"querySlug":"target-sum","created_at":"2019-03-04","timeArr":[2019,2,4,17,1,30,0],"hasThinking":false,"content":"<p>给你一个整数数组 <code>nums</code> 和一个整数 <code>target</code> 。</p>\\n\\n<p>向数组中的每个整数前添加 <code>\'+\'</code> 或 <code>\'-\'</code> ，然后串联起所有整数，可以构造一个 <strong>表达式</strong> ：</p>\\n\\n<ul>\\n\\t<li>例如，<code>nums = [2, 1]</code> ，可以在 <code>2</code> 之前添加 <code>\'+\'</code> ，在 <code>1</code> 之前添加 <code>\'-\'</code> ，然后串联起来得到表达式 <code>\\"+2-1\\"</code> 。</li>\\n</ul>\\n\\n<p>返回可以通过上述方法构造的、运算结果等于 <code>target</code> 的不同 <strong>表达式</strong> 的数目。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [1,1,1,1,1], target = 3\\n<strong>输出：</strong>5\\n<strong>解释：</strong>一共有 5 种方法让最终目标和为 3 。\\n-1 + 1 + 1 + 1 + 1 = 3\\n+1 - 1 + 1 + 1 + 1 = 3\\n+1 + 1 - 1 + 1 + 1 = 3\\n+1 + 1 + 1 - 1 + 1 = 3\\n+1 + 1 + 1 + 1 - 1 = 3\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [1], target = 1\\n<strong>输出：</strong>1\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= nums.length <= 20</code></li>\\n\\t<li><code>0 <= nums[i] <= 1000</code></li>\\n\\t<li><code>0 <= sum(nums[i]) <= 1000</code></li>\\n\\t<li><code>-1000 <= target <= 1000</code></li>\\n</ul>\\n","title":"494. 目标和","relatedTags":["数组","动态规划","回溯"],"difficult":"Middle","lang":["javascript"],"uniqueID":"494","slug":"494-Target-Sum"}')}}]);