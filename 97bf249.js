(window.webpackJsonp=window.webpackJsonp||[]).push([[360],{1158:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">n</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> countVowelPermutation = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">n</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> MOD=<span class=\\"hljs-number\\">1e9</span>+<span class=\\"hljs-number\\">7</span>\\n  <span class=\\"hljs-keyword\\">let</span> cache={}\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">A</span>(<span class=\\"hljs-params\\">num</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(num===<span class=\\"hljs-number\\">1</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">1</span>\\n    <span class=\\"hljs-keyword\\">if</span>(cache[<span class=\\"hljs-string\\">\'a \'</span>+num])<span class=\\"hljs-keyword\\">return</span> cache[<span class=\\"hljs-string\\">\'a \'</span>+num]\\n    <span class=\\"hljs-keyword\\">let</span> a=  E(num<span class=\\"hljs-number\\">-1</span>) % MOD\\n    cache[<span class=\\"hljs-string\\">\'a \'</span>+num]=a\\n    <span class=\\"hljs-keyword\\">return</span> a\\n  }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">E</span>(<span class=\\"hljs-params\\">num</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(num===<span class=\\"hljs-number\\">1</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">1</span>\\n    <span class=\\"hljs-keyword\\">if</span>(cache[<span class=\\"hljs-string\\">\'e \'</span>+num])<span class=\\"hljs-keyword\\">return</span> cache[<span class=\\"hljs-string\\">\'e \'</span>+num]\\n    <span class=\\"hljs-keyword\\">let</span> e=  (A(num<span class=\\"hljs-number\\">-1</span>) + I(num<span class=\\"hljs-number\\">-1</span>)) % MOD\\n    cache[<span class=\\"hljs-string\\">\'e \'</span>+num]=e\\n    <span class=\\"hljs-keyword\\">return</span> e\\n  }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">I</span>(<span class=\\"hljs-params\\">num</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(num===<span class=\\"hljs-number\\">1</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">1</span>\\n    <span class=\\"hljs-keyword\\">if</span>(cache[<span class=\\"hljs-string\\">\'i \'</span>+num])<span class=\\"hljs-keyword\\">return</span> cache[<span class=\\"hljs-string\\">\'i \'</span>+num]\\n    <span class=\\"hljs-keyword\\">let</span> i= (A(num<span class=\\"hljs-number\\">-1</span>) + E(num<span class=\\"hljs-number\\">-1</span>) + O(num<span class=\\"hljs-number\\">-1</span>) + U(num<span class=\\"hljs-number\\">-1</span>)) % MOD\\n    cache[<span class=\\"hljs-string\\">\'i \'</span>+num]=i\\n    <span class=\\"hljs-keyword\\">return</span> i\\n  }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">O</span>(<span class=\\"hljs-params\\">num</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(num===<span class=\\"hljs-number\\">1</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">1</span>\\n    <span class=\\"hljs-keyword\\">if</span>(cache[<span class=\\"hljs-string\\">\'o \'</span>+num])<span class=\\"hljs-keyword\\">return</span> cache[<span class=\\"hljs-string\\">\'o \'</span>+num]\\n    <span class=\\"hljs-keyword\\">let</span> o= (I(num<span class=\\"hljs-number\\">-1</span>) + U(num<span class=\\"hljs-number\\">-1</span>)) % MOD\\n    cache[<span class=\\"hljs-string\\">\'o \'</span>+num]=o\\n    <span class=\\"hljs-keyword\\">return</span> o\\n  }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">U</span>(<span class=\\"hljs-params\\">num</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(num===<span class=\\"hljs-number\\">1</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">1</span>\\n    <span class=\\"hljs-keyword\\">if</span>(cache[<span class=\\"hljs-string\\">\'u \'</span>+num])<span class=\\"hljs-keyword\\">return</span> cache[<span class=\\"hljs-string\\">\'u \'</span>+num]\\n    <span class=\\"hljs-keyword\\">let</span> u= A(num<span class=\\"hljs-number\\">-1</span>) % MOD\\n    cache[<span class=\\"hljs-string\\">\'u \'</span>+num]=u\\n    <span class=\\"hljs-keyword\\">return</span> u\\n  }\\n  \\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">dfs</span>(<span class=\\"hljs-params\\">num</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> a=A(num) % MOD\\n    <span class=\\"hljs-keyword\\">let</span> e=E(num) % MOD\\n    <span class=\\"hljs-keyword\\">let</span> i=I(num) % MOD\\n    <span class=\\"hljs-keyword\\">let</span> o=O(num) % MOD\\n    <span class=\\"hljs-keyword\\">let</span> u=U(num) % MOD\\n    <span class=\\"hljs-keyword\\">return</span> (a+e+i+o+u) % MOD\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> dfs(n)\\n};\\n</code></pre>\\n"],"querySlug":"count-vowels-permutation","created_at":"2019-10-06","timeArr":[2019,9,6,11,31,17,0],"hasThinking":false,"content":"<p>给你一个整数&nbsp;<code>n</code>，请你帮忙统计一下我们可以按下述规则形成多少个长度为&nbsp;<code>n</code>&nbsp;的字符串：</p>\\n\\n<ul>\\n\\t<li>字符串中的每个字符都应当是小写元音字母（<code>&#39;a&#39;</code>, <code>&#39;e&#39;</code>, <code>&#39;i&#39;</code>, <code>&#39;o&#39;</code>, <code>&#39;u&#39;</code>）</li>\\n\\t<li>每个元音&nbsp;<code>&#39;a&#39;</code>&nbsp;后面都只能跟着&nbsp;<code>&#39;e&#39;</code></li>\\n\\t<li>每个元音&nbsp;<code>&#39;e&#39;</code>&nbsp;后面只能跟着&nbsp;<code>&#39;a&#39;</code>&nbsp;或者是&nbsp;<code>&#39;i&#39;</code></li>\\n\\t<li>每个元音&nbsp;<code>&#39;i&#39;</code>&nbsp;后面&nbsp;<strong>不能</strong> 再跟着另一个&nbsp;<code>&#39;i&#39;</code></li>\\n\\t<li>每个元音&nbsp;<code>&#39;o&#39;</code>&nbsp;后面只能跟着&nbsp;<code>&#39;i&#39;</code>&nbsp;或者是&nbsp;<code>&#39;u&#39;</code></li>\\n\\t<li>每个元音&nbsp;<code>&#39;u&#39;</code>&nbsp;后面只能跟着&nbsp;<code>&#39;a&#39;</code></li>\\n</ul>\\n\\n<p>由于答案可能会很大，所以请你返回 模&nbsp;<code>10^9 + 7</code>&nbsp;之后的结果。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>n = 1\\n<strong>输出：</strong>5\\n<strong>解释：</strong>所有可能的字符串分别是：&quot;a&quot;, &quot;e&quot;, &quot;i&quot; , &quot;o&quot; 和 &quot;u&quot;。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>n = 2\\n<strong>输出：</strong>10\\n<strong>解释：</strong>所有可能的字符串分别是：&quot;ae&quot;, &quot;ea&quot;, &quot;ei&quot;, &quot;ia&quot;, &quot;ie&quot;, &quot;io&quot;, &quot;iu&quot;, &quot;oi&quot;, &quot;ou&quot; 和 &quot;ua&quot;。\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>n = 5\\n<strong>输出：</strong>68</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= n &lt;= 2 * 10^4</code></li>\\n</ul>\\n","title":"1220. 统计元音字母序列的数目","relatedTags":["动态规划"],"difficult":"Hard","lang":["javascript"],"uniqueID":"1220","slug":"1220-Count-Vowels-Permutation"}')}}]);