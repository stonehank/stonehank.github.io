(window.webpackJsonp=window.webpackJsonp||[]).push([[904],{1702:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">matrix</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number[]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> findDiagonalOrder = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">matrix</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(matrix.length===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span> []\\n  <span class=\\"hljs-keyword\\">let</span> m=matrix.length,n=matrix[<span class=\\"hljs-number\\">0</span>].length\\n  <span class=\\"hljs-keyword\\">let</span> res=[]\\n  dfs(<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-literal\\">true</span>)\\n  <span class=\\"hljs-keyword\\">return</span> res\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">dfs</span>(<span class=\\"hljs-params\\">x,y,up</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(x&lt;<span class=\\"hljs-number\\">0</span> || y&lt;<span class=\\"hljs-number\\">0</span> || x&gt;=m || y&gt;=n)<span class=\\"hljs-keyword\\">return</span>\\n    res.push(matrix[x][y])\\n    <span class=\\"hljs-keyword\\">let</span> nx,ny\\n    <span class=\\"hljs-keyword\\">if</span>(up){\\n      nx=x<span class=\\"hljs-number\\">-1</span>,ny=y+<span class=\\"hljs-number\\">1</span>\\n      <span class=\\"hljs-keyword\\">if</span>(ny&gt;=n){\\n        nx=x+<span class=\\"hljs-number\\">1</span>\\n        ny=y\\n        up=!up\\n      }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(nx&lt;<span class=\\"hljs-number\\">0</span>){\\n        nx=x\\n        ny=y+<span class=\\"hljs-number\\">1</span>\\n        up=!up\\n      }\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      nx=x+<span class=\\"hljs-number\\">1</span>,ny=y<span class=\\"hljs-number\\">-1</span>\\n      <span class=\\"hljs-keyword\\">if</span>(nx&gt;=m){\\n        nx=x\\n        ny=y+<span class=\\"hljs-number\\">1</span>\\n        up=!up\\n      }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(ny&lt;<span class=\\"hljs-number\\">0</span>){\\n        nx=x+<span class=\\"hljs-number\\">1</span>\\n        ny=y\\n        up=!up\\n      }\\n    }\\n    dfs(nx,ny,up)\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"diagonal-traverse","created_at":"2019-04-27","timeArr":[2019,3,27,16,27,47,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p><code>x</code>为当前行坐标，<code>y</code>为当前列坐标</p>\\n<p>当从左下到右上的情况，新的坐标为<code>nx=x-1</code>，<code>ny=y+1</code>，但存在2种出界的情况，</p>\\n<ol>\\n<li><code>nx&lt;0 &amp;&amp; ny&lt;matrix[0].length</code></li>\\n<li><code>nx&lt;0 &amp;&amp; ny&gt;=matrix[0].length</code></li>\\n</ol>\\n<p>对于第1种情况，由于<code>ny</code>是符合要求的，只需要右移一位即可，也就是<code>nx=x</code>，<code>ny=y+1</code>。\\n对于第2种情况，由于<code>nx</code>和<code>ny</code>都不符合要求，因此需要下移一位，也就是<code>nx=x+1</code>，<code>ny=y</code>。</p>\\n<p>当从右上到左下的情况，新的坐标为<code>nx=x+1</code>，<code>ny=y-1</code>，同样存在2种出界的情况，</p>\\n<ol>\\n<li><code>ny&lt;0 &amp;&amp; nx&lt;matrix.length</code></li>\\n<li><code>ny&lt;0 &amp;&amp; nx&gt;=matrix.length</code></li>\\n</ol>\\n<p>对于第1种情况，由于<code>nx</code>是符合要求的，只需要下移一位即可，也就是<code>nx=x+1</code>，<code>ny=y</code>。\\n对于第2种情况，由于<code>nx</code>和<code>ny</code>都不符合要求，因此需要右移一位，也就是<code>nx=x</code>，<code>ny=y+1</code>。</p>\\n","content":"<p>给定一个含有 M x N 个元素的矩阵（M 行，N 列），请以对角线遍历的顺序返回这个矩阵中的所有元素，对角线遍历如下图所示。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例:</strong></p>\\n\\n<pre><strong>输入:</strong>\\n[\\n [ 1, 2, 3 ],\\n [ 4, 5, 6 ],\\n [ 7, 8, 9 ]\\n]\\n\\n<strong>输出:</strong>  [1,2,4,7,5,3,6,8,9]\\n\\n<strong>解释:</strong>\\n<img src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/diagonal_traverse.png\\" style=\\"width: 220px;\\">\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>说明:</strong></p>\\n\\n<ol>\\n\\t<li>给定矩阵中的元素总数不会超过 100000 。</li>\\n</ol>\\n","title":"498. 对角线遍历","relatedTags":["数组","矩阵","模拟"],"difficult":"Middle","lang":["javascript"],"uniqueID":"498","slug":"498-Diagonal-Traverse"}')}}]);