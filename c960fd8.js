(window.webpackJsonp=window.webpackJsonp||[]).push([[71],{553:function(n){n.exports=JSON.parse('{"content":"<ul>\\n<li><p>为什么要实现一个<code>GraphQL</code>服务器</p>\\n<p>  通过自己实现，更深入了解<code>GraphQL</code>怎么构造，怎么获取，一些术语</p>\\n</li>\\n<li><p>直接入正题，如何实现一个<code>GraphQL</code>服务器</p>\\n<p>  了解4种类型</p>\\n<ul>\\n<li><p>Query</p>\\n<p>  执行内容查询</p>\\n</li>\\n<li><p>Mutation</p>\\n<p>  执行内容变更</p>\\n</li>\\n<li><p>Schema</p>\\n<p>  模式，定义内容结构及类型</p>\\n</li>\\n<li><p>Resolvers</p>\\n<p>  连接<code>Schema</code>和<code>Query</code>，也就是具体内容。</p>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n<ol>\\n<li><p>定义Schema</p>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code> <span class=\\"hljs-keyword\\">import</span> { gql } <span class=\\"hljs-keyword\\">from</span> <span class=\\"hljs-string\\">\'apollo-server-express\'</span>;\\n\\n <span class=\\"hljs-keyword\\">const</span> typeDefs = gql<span class=\\"hljs-string\\">`\\n     type Person {\\n         id: Int\\n         name: String\\n         gender: String\\n         homeworld: String\\n     }\\n     input DataInput {        \\n         id: Int!\\n         name: String\\n         gender: String\\n         homeworld: String\\n     }\\n     type Mutation {\\n         setPerson(input:DataInput!):Person\\n     }\\n     type Query {\\n         allPeople: [Person]\\n         person(id: Int!): Person\\n     }\\n `</span>;\\n\\n <span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">default</span> typeDefs;</code></pre></code></pre>\\n<p> 这里定义了1个自定义查询类<code>Person</code>，1个自定义修改类<code>DataInput</code>，1个<code>Mutation</code>方法，2个<code>Query</code>方法，其中加<code>!</code>表示这个字段不可缺少。</p>\\n</li>\\n<li><p>定义<code>Resolvers</code></p>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code> <span class=\\"hljs-keyword\\">const</span> defaultData = [\\n   {\\n     <span class=\\"hljs-attr\\">id</span>: <span class=\\"hljs-number\\">1</span>,\\n     <span class=\\"hljs-attr\\">name</span>: <span class=\\"hljs-string\\">\'Luke SkyWaler\'</span>,\\n     <span class=\\"hljs-attr\\">gender</span>: <span class=\\"hljs-string\\">\'male\'</span>,\\n     <span class=\\"hljs-attr\\">homeworld</span>: <span class=\\"hljs-string\\">\'Tattoine\'</span>\\n   },\\n   {\\n     <span class=\\"hljs-attr\\">id</span>: <span class=\\"hljs-number\\">2</span>,\\n     <span class=\\"hljs-attr\\">name</span>: <span class=\\"hljs-string\\">\'C-3PO\'</span>,\\n     <span class=\\"hljs-attr\\">gender</span>: <span class=\\"hljs-string\\">\'bot\'</span>,\\n     <span class=\\"hljs-attr\\">homeworld</span>: <span class=\\"hljs-string\\">\'Tattoine\'</span>\\n   }\\n ];\\n\\n <span class=\\"hljs-keyword\\">const</span> resolvers = {\\n   <span class=\\"hljs-attr\\">Mutation</span>: {\\n     <span class=\\"hljs-attr\\">setPerson</span>: <span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">firstParam, {input}</span>) =&gt;</span> {\\n       <span class=\\"hljs-keyword\\">let</span> matchIdx = defaultData.length\\n       <span class=\\"hljs-keyword\\">const</span> {id} = input\\n       <span class=\\"hljs-keyword\\">let</span> matchObj = defaultData.find(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">obj, i</span>) =&gt;</span> {\\n         <span class=\\"hljs-keyword\\">if</span> (obj.id === id) {\\n           matchIdx = i\\n           <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n         }\\n       })\\n       <span class=\\"hljs-keyword\\">let</span> defaultObj\\n       <span class=\\"hljs-keyword\\">if</span> (matchObj) defaultObj = matchObj\\n       <span class=\\"hljs-keyword\\">else</span> defaultObj = {<span class=\\"hljs-attr\\">name</span>: <span class=\\"hljs-string\\">\'\'</span>, <span class=\\"hljs-attr\\">gender</span>: <span class=\\"hljs-string\\">\'\'</span>, <span class=\\"hljs-attr\\">homeworld</span>: <span class=\\"hljs-string\\">\'\'</span>}\\n       <span class=\\"hljs-keyword\\">let</span> newObj = <span class=\\"hljs-built_in\\">Object</span>.assign(defaultObj, input)\\n       defaultData[matchIdx] = newObj\\n       <span class=\\"hljs-keyword\\">return</span> newObj\\n     }\\n   },\\n   <span class=\\"hljs-attr\\">Query</span>: {\\n     <span class=\\"hljs-attr\\">allPeople</span>: <span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span> =&gt;</span> {\\n       <span class=\\"hljs-keyword\\">return</span> defaultData;\\n     },\\n     <span class=\\"hljs-attr\\">person</span>: <span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">root, {id}</span>) =&gt;</span> {\\n       <span class=\\"hljs-keyword\\">return</span> defaultData.filter(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">character</span> =&gt;</span> {\\n         <span class=\\"hljs-keyword\\">return</span> (character.id === id);\\n       })[<span class=\\"hljs-number\\">0</span>];\\n     }\\n   }\\n };\\n\\n <span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">default</span> resolvers;</code></pre></code></pre>\\n<p> 这里定义了对<code>Query</code>和<code>Mutation</code>的具体执行方法，注意，它们的值必须是<code>Object</code>或者<code>Function</code>。</p>\\n<blockquote>\\n<p>PS: 这里我没搞清楚 <code>Mutation</code> 第一个参数<code>firstParam</code>的作用，一直都是<code>undefined</code></p>\\n</blockquote>\\n</li>\\n<li><p>创建服务器</p>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code> <span class=\\"hljs-keyword\\">import</span> express <span class=\\"hljs-keyword\\">from</span> <span class=\\"hljs-string\\">\'express\'</span>;\\n <span class=\\"hljs-keyword\\">import</span> {ApolloServer, gql } <span class=\\"hljs-keyword\\">from</span> <span class=\\"hljs-string\\">\'apollo-server-express\'</span>;\\n <span class=\\"hljs-keyword\\">import</span> typeDefs <span class=\\"hljs-keyword\\">from</span> <span class=\\"hljs-string\\">\'./api/schema\'</span>;\\n <span class=\\"hljs-keyword\\">import</span> resolvers <span class=\\"hljs-keyword\\">from</span> <span class=\\"hljs-string\\">\'./api/resolvers\'</span>;\\n\\n <span class=\\"hljs-keyword\\">const</span> server = <span class=\\"hljs-keyword\\">new</span> ApolloServer({\\n   typeDefs,\\n   resolvers,\\n });\\n\\n <span class=\\"hljs-keyword\\">const</span> app = express();\\n server.applyMiddleware({ app });\\n\\n app.get(<span class=\\"hljs-string\\">\'/\'</span>, (req, res) =&gt; res.send(<span class=\\"hljs-string\\">\'Babel Working!\'</span>));\\n\\n app.listen({ <span class=\\"hljs-attr\\">port</span>: <span class=\\"hljs-number\\">4000</span> }, () =&gt;\\n   <span class=\\"hljs-built_in\\">console</span>.log(<span class=\\"hljs-string\\">`🚀 Server ready at http://localhost:4000<span class=\\"hljs-subst\\">${server.graphqlPath}</span>`</span>)\\n );</code></pre></code></pre>\\n</li>\\n<li><p>package.json</p>\\n<pre><code><pre class=\\"hljs\\"><code> {\\n   &quot;name&quot;: &quot;gh-demo&quot;,\\n   &quot;version&quot;: &quot;1.0.0&quot;,\\n   &quot;description&quot;: &quot;&quot;,\\n   &quot;main&quot;: &quot;index.js&quot;,\\n   &quot;scripts&quot;: {\\n   &quot;dev&quot;: &quot;babel-watch index.js&quot;\\n },\\n   &quot;keywords&quot;: [],\\n   &quot;author&quot;: &quot;&quot;,\\n   &quot;license&quot;: &quot;ISC&quot;,\\n   &quot;dependencies&quot;: {\\n     &quot;apollo-server-express&quot;: &quot;^2.2.1&quot;,\\n     &quot;express&quot;: &quot;^4.16.4&quot;,\\n     &quot;graphql&quot;: &quot;^14.0.2&quot;\\n },\\n   &quot;devDependencies&quot;: {\\n   &quot;babel-cli&quot;: &quot;^6.26.0&quot;,\\n     &quot;babel-preset-env&quot;: &quot;^1.7.0&quot;,\\n     &quot;babel-watch&quot;: &quot;^2.0.7&quot;\\n }\\n }</code></pre></code></pre></li>\\n</ol>\\n<p>参考：<a href=\\"https://medium.com/crowdbotics/creating-a-graphql-server-with-nodejs-ef9814a7e0e6\\">Creating a GraphQL server with NodeJS</a></p>\\n","toc":[],"relatedTags":null,"created_at":"2018-11-13","timeArr":[2018,10,13,0,0,0,0],"title":"GraphQL服务器的简易实现","uuid":"9b5e4a6871e0353c0cbc1f47c9de37eabe73f5da","summary":"<ul>\\n<li>\\n<p>为什么要实现一个<code>GraphQL</code>服务器</p>\\n<p>通过自己实现，更深入了解<code>GraphQL</code>怎么构造，怎么获取，一些术语</p>\\n</li>\\n<li>\\n<p>直接入正题，如何实现一个<code>GraphQL</code>服务器</p>\\n<p>了解4种类型</p>\\n<ul>\\n<li>\\n<p>Query</p>\\n<p>执行内容查询</p>\\n</li>\\n<li>\\n<p>Muta...</p>\\n</li>\\n</ul>\\n</li>\\n</ul>","slug":"GraphQL-fu-wu-qi-de-jian-yi-shi-xian","sha":"2df708b7274da2278a0b10daebf16bf60e8a965f"}')}}]);