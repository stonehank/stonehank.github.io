(window.webpackJsonp=window.webpackJsonp||[]).push([[135],{617:function(n){n.exports=JSON.parse('{"content":"<h4 id=\\"xue-xi-levenshtein-distance-suan-fa\\">学习Levenshtein Distance算法</h4>\\n<p>  任意单个字符变动有3种情况，替换，增加和删除：</p>\\n<p><strong>1. 如果对应的字符相同，则从它的左，斜或者上方选取最小值，直接填写</strong>\\n<strong>2. 如果对应的字符不相同，则从它的左，斜或者上方选取最小值，+1后填写</strong></p>\\n<p>括号内部表示需要进行移动的步数</p>\\n<ul>\\n<li><p>情况一：从ab到ac的变动</p>\\n<p>x位置 字符不相等(b!==c)，但是 i位置变动最小，所以从i位置的数值加1，斜线说明说替换</p>\\n<pre><code><pre class=\\"hljs\\"><code>  a     b\\na i(0) j(1)\\nc l(1)  x\\n// x=1</code></pre></code></pre></li>\\n<li><p>情况二：从acd到ac的变动</p>\\n<p>x位置 字符不相等(b!==c)，但是 m位置变动最小，所以从m位置的数值加1，横向说明增加</p>\\n<pre><code><pre class=\\"hljs\\"><code>  a     c     d\\na i(0)  j(1)  k(2)\\nc l(1)  m(0)  x \\n// x=1</code></pre></code></pre></li>\\n<li><p>情况三：从ab到abc的变动</p>\\n<p>x位置 字符不相等(b!==c)，但是 l位置变动最小，所以从l位置的数值加1，竖向说明减少</p>\\n<pre><code><pre class=\\"hljs\\"><code> a      b\\na i(0)  j(1)\\nb k(1)  l(0)\\nc m(2)  x\\n// x=1</code></pre></code></pre><p>每一次的判断所确定的最小变动数，又是下一次判断变动的基础</p>\\n</li>\\n</ul>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">minED</span>(<span class=\\"hljs-params\\">a,b</span>)</span>{\\n  <span class=\\"hljs-comment\\">// 先创建a和b的二维数组（横竖都额外多一行，作为第一个字符比较的基础）</span>\\n  <span class=\\"hljs-keyword\\">let</span> arr=<span class=\\"hljs-built_in\\">Array</span>(b.length+<span class=\\"hljs-number\\">1</span>).fill(<span class=\\"hljs-literal\\">null</span>);\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;arr.length;i++){\\n    arr[i]=<span class=\\"hljs-built_in\\">Array</span>(a.length+<span class=\\"hljs-number\\">1</span>).fill(<span class=\\"hljs-literal\\">null</span>);\\n    <span class=\\"hljs-keyword\\">if</span>(i===<span class=\\"hljs-number\\">0</span>){\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;arr[<span class=\\"hljs-number\\">0</span>].length;j++){arr[<span class=\\"hljs-number\\">0</span>][j]=j;}\\n    }\\n    arr[i][<span class=\\"hljs-number\\">0</span>]=i;\\n  }\\n  <span class=\\"hljs-comment\\">// 对每一个字符进行比较，利用上一次比较的基础</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">1</span>;i&lt;arr.length;i++){\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">1</span>;j&lt;arr[i].length;j++){\\n      <span class=\\"hljs-keyword\\">let</span> count=<span class=\\"hljs-number\\">0</span>;\\n      <span class=\\"hljs-keyword\\">if</span>(b[i<span class=\\"hljs-number\\">-1</span>]!==a[j<span class=\\"hljs-number\\">-1</span>]){\\n        count++;\\n      }\\n      arr[i][j]=<span class=\\"hljs-built_in\\">Math</span>.min(arr[i<span class=\\"hljs-number\\">-1</span>][j<span class=\\"hljs-number\\">-1</span>],arr[i<span class=\\"hljs-number\\">-1</span>][j],arr[i][j<span class=\\"hljs-number\\">-1</span>])+count;\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> arr[b.length][a.length]\\n}\\n\\n<span class=\\"hljs-keyword\\">let</span> a=<span class=\\"hljs-string\\">\'abcd\'</span>,b=<span class=\\"hljs-string\\">\\"adbc\\"</span>\\nminED(a,b)</code></pre></code></pre>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-keyword\\">let</span> a=<span class=\\"hljs-string\\">\'abcd\'</span>,b=<span class=\\"hljs-string\\">\\"adbc\\"</span>\\nminED(a,b)\\n\\n<span class=\\"hljs-comment\\">// 输出数据：</span>\\n[ [ <span class=\\"hljs-number\\">0</span>, <span class=\\"hljs-number\\">1</span>, <span class=\\"hljs-number\\">2</span>, <span class=\\"hljs-number\\">3</span>, <span class=\\"hljs-number\\">4</span> ],\\n  [ <span class=\\"hljs-number\\">1</span>, <span class=\\"hljs-number\\">0</span>, <span class=\\"hljs-number\\">1</span>, <span class=\\"hljs-number\\">2</span>, <span class=\\"hljs-number\\">3</span> ],\\n  [ <span class=\\"hljs-number\\">2</span>, <span class=\\"hljs-number\\">1</span>, <span class=\\"hljs-number\\">1</span>, <span class=\\"hljs-number\\">2</span>, <span class=\\"hljs-number\\">2</span> ],\\n  [ <span class=\\"hljs-number\\">3</span>, <span class=\\"hljs-number\\">2</span>, <span class=\\"hljs-number\\">1</span>, <span class=\\"hljs-number\\">2</span>, <span class=\\"hljs-number\\">3</span> ],\\n  [ <span class=\\"hljs-number\\">4</span>, <span class=\\"hljs-number\\">3</span>, <span class=\\"hljs-number\\">2</span>, <span class=\\"hljs-number\\">1</span>, <span class=\\"hljs-number\\">2</span> ] ]</code></pre></code></pre>\\n<p>因此从&#39;abcd&#39;变动到&#39;adbc&#39;，最小移动步数是2</p>\\n","toc":[{"anchor":"xue-xi-levenshtein-distance-suan-fa","level":4,"text":"学习Levenshtein Distance算法"}],"relatedTags":null,"created_at":"2018-06-18","timeArr":[2018,5,18,0,0,0,0],"title":"两个字符串最小编辑距离算法","uuid":"77f0065531e454cbcc9fad960f3cdbe37d6e2d25","summary":"<h4>学习Levenshtein Distance算法</h4>\\n<p>任意单个字符变动有3种情况，替换，增加和删除：</p>\\n<p><strong>1. 如果对应的字符相同，则从它的左，斜或者上方选取最小值，直接填写</strong>\\n<strong>2. 如果对应的字符不相同，则从它的左，斜或者上方选取最小值，+1后填写</strong></p>\\n<p>括号内部表示需要进行移动的步数</p>\\n<ul>\\n<li>...</li>\\n</ul>","slug":"liang-ge-zi-fu-chuan-zui-xiao-bian-ji-ju-li-suan-fa","sha":"be3a5d23fd6575a2a323c8daa62b9432f71776ec"}')}}]);