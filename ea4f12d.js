(window.webpackJsonp=window.webpackJsonp||[]).push([[663],{1461:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Initialize your data structure here.\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> Trie = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) </span>{\\n  <span class=\\"hljs-keyword\\">this</span>.tire={}\\n};\\n\\n<span class=\\"hljs-comment\\">/**\\n * Inserts a word into the trie. \\n * @param {string} word\\n * @return {void}\\n */</span>\\nTrie.prototype.insert = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">word</span>) </span>{\\n  _insert(<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-keyword\\">this</span>.tire)\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">_insert</span>(<span class=\\"hljs-params\\">id,t</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(id===word.length)<span class=\\"hljs-keyword\\">return</span>\\n    <span class=\\"hljs-keyword\\">if</span>(t[word[id]]==<span class=\\"hljs-literal\\">null</span>){\\n      t[word[id]]={}\\n    }\\n    <span class=\\"hljs-keyword\\">if</span>(id===word.length<span class=\\"hljs-number\\">-1</span>){\\n      t[word[id]].exact=<span class=\\"hljs-literal\\">true</span>\\n    }\\n    _insert(id+<span class=\\"hljs-number\\">1</span>,t[word[id]])\\n  }\\n};\\n\\n<span class=\\"hljs-comment\\">/**\\n * Returns if the word is in the trie. \\n * @param {string} word\\n * @return {boolean}\\n */</span>\\nTrie.prototype.search = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">word</span>) </span>{\\n  <span class=\\"hljs-keyword\\">return</span> _search(<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-keyword\\">this</span>.tire)\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">_search</span>(<span class=\\"hljs-params\\">id,t</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(id===word.length)<span class=\\"hljs-keyword\\">return</span> !!t.exact\\n    <span class=\\"hljs-keyword\\">if</span>(t[word[id]]==<span class=\\"hljs-literal\\">null</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n    <span class=\\"hljs-keyword\\">return</span> _search(id+<span class=\\"hljs-number\\">1</span>,t[word[id]])\\n  }\\n};\\n\\n<span class=\\"hljs-comment\\">/**\\n * Returns if there is any word in the trie that starts with the given prefix. \\n * @param {string} prefix\\n * @return {boolean}\\n */</span>\\nTrie.prototype.startsWith = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">prefix</span>) </span>{\\n  <span class=\\"hljs-keyword\\">return</span> _startsWith(<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-keyword\\">this</span>.tire)\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">_startsWith</span>(<span class=\\"hljs-params\\">id,t</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(id===prefix.length)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n    <span class=\\"hljs-keyword\\">if</span>(t[prefix[id]]==<span class=\\"hljs-literal\\">null</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n    <span class=\\"hljs-keyword\\">return</span> _startsWith(id+<span class=\\"hljs-number\\">1</span>,t[prefix[id]])\\n  }  \\n};\\n\\n<span class=\\"hljs-comment\\">/** \\n * Your Trie object will be instantiated and called as such:\\n * var obj = Object.create(Trie).createNew()\\n * obj.insert(word)\\n * var param_2 = obj.search(word)\\n * var param_3 = obj.startsWith(prefix)\\n */</span>\\n\\n</code></pre>\\n"],"querySlug":"implement-trie-prefix-tree","created_at":"2021-04-14","timeArr":[2021,3,14,7,11,15,0],"hasThinking":false,"content":"<p><strong><a href=\\"https://baike.baidu.com/item/字典树/9825209?fr=aladdin\\" target=\\"_blank\\">Trie</a></strong>（发音类似 \\"try\\"）或者说 <strong>前缀树</strong> 是一种树形数据结构，用于高效地存储和检索字符串数据集中的键。这一数据结构有相当多的应用情景，例如自动补完和拼写检查。</p>\\n\\n<p>请你实现 Trie 类：</p>\\n\\n<ul>\\n\\t<li><code>Trie()</code> 初始化前缀树对象。</li>\\n\\t<li><code>void insert(String word)</code> 向前缀树中插入字符串 <code>word</code> 。</li>\\n\\t<li><code>boolean search(String word)</code> 如果字符串 <code>word</code> 在前缀树中，返回 <code>true</code>（即，在检索之前已经插入）；否则，返回 <code>false</code> 。</li>\\n\\t<li><code>boolean startsWith(String prefix)</code> 如果之前已经插入的字符串 <code>word</code> 的前缀之一为 <code>prefix</code> ，返回 <code>true</code> ；否则，返回 <code>false</code> 。</li>\\n</ul>\\n\\n<p> </p>\\n\\n<p><strong>示例：</strong></p>\\n\\n<pre>\\n<strong>输入</strong>\\n[\\"Trie\\", \\"insert\\", \\"search\\", \\"search\\", \\"startsWith\\", \\"insert\\", \\"search\\"]\\n[[], [\\"apple\\"], [\\"apple\\"], [\\"app\\"], [\\"app\\"], [\\"app\\"], [\\"app\\"]]\\n<strong>输出</strong>\\n[null, null, true, false, true, null, true]\\n\\n<strong>解释</strong>\\nTrie trie = new Trie();\\ntrie.insert(\\"apple\\");\\ntrie.search(\\"apple\\");   // 返回 True\\ntrie.search(\\"app\\");     // 返回 False\\ntrie.startsWith(\\"app\\"); // 返回 True\\ntrie.insert(\\"app\\");\\ntrie.search(\\"app\\");     // 返回 True\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= word.length, prefix.length <= 2000</code></li>\\n\\t<li><code>word</code> 和 <code>prefix</code> 仅由小写英文字母组成</li>\\n\\t<li><code>insert</code>、<code>search</code> 和 <code>startsWith</code> 调用次数 <strong>总计</strong> 不超过 <code>3 * 10<sup>4</sup></code> 次</li>\\n</ul>\\n","title":"208. 实现 Trie (前缀树)","relatedTags":["设计","字典树","哈希表","字符串"],"difficult":"Middle","lang":["javascript"],"uniqueID":"208","slug":"208-Implement-Trie-(Prefix-Tree)"}')}}]);