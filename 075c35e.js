(window.webpackJsonp=window.webpackJsonp||[]).push([[500],{1298:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">text</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{string}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> arrangeWords = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">text</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> aux=[]\\n  <span class=\\"hljs-keyword\\">let</span> arr=text.split(<span class=\\"hljs-string\\">\' \'</span>)\\n  arr[<span class=\\"hljs-number\\">0</span>]=arr[<span class=\\"hljs-number\\">0</span>].toLowerCase()\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;arr.length;i++){\\n    aux.push([arr[i],i])\\n  }\\n  <span class=\\"hljs-comment\\">// console.log(aux)</span>\\n  aux.sort(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">a,b</span>)=&gt;</span>a[<span class=\\"hljs-number\\">0</span>].length===b[<span class=\\"hljs-number\\">0</span>].length ? a[<span class=\\"hljs-number\\">1</span>] - b[<span class=\\"hljs-number\\">1</span>] : a[<span class=\\"hljs-number\\">0</span>].length - b[<span class=\\"hljs-number\\">0</span>].length)\\n  <span class=\\"hljs-keyword\\">let</span> res= aux.map(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">arr</span>)=&gt;</span>arr[<span class=\\"hljs-number\\">0</span>])\\n  res[<span class=\\"hljs-number\\">0</span>]=res[<span class=\\"hljs-number\\">0</span>][<span class=\\"hljs-number\\">0</span>].toUpperCase()+res[<span class=\\"hljs-number\\">0</span>].slice(<span class=\\"hljs-number\\">1</span>)\\n  <span class=\\"hljs-keyword\\">return</span> res.join(<span class=\\"hljs-string\\">\' \'</span>)\\n};\\n</code></pre>\\n"],"querySlug":"rearrange-words-in-a-sentence","created_at":"2020-05-17","timeArr":[2020,4,17,10,38,14,0],"hasThinking":false,"content":"<p>「句子」是一个用空格分隔单词的字符串。给你一个满足下述格式的句子 <code>text</code> :</p>\\n\\n<ul>\\n\\t<li>句子的首字母大写</li>\\n\\t<li><code>text</code> 中的每个单词都用单个空格分隔。</li>\\n</ul>\\n\\n<p>请你重新排列 <code>text</code> 中的单词，使所有单词按其长度的升序排列。如果两个单词的长度相同，则保留其在原句子中的相对顺序。</p>\\n\\n<p>请同样按上述格式返回新的句子。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>text = &quot;Leetcode is cool&quot;\\n<strong>输出：</strong>&quot;Is cool leetcode&quot;\\n<strong>解释：</strong>句子中共有 3 个单词，长度为 8 的 &quot;Leetcode&quot; ，长度为 2 的 &quot;is&quot; 以及长度为 4 的 &quot;cool&quot; 。\\n输出需要按单词的长度升序排列，新句子中的第一个单词首字母需要大写。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>text = &quot;Keep calm and code on&quot;\\n<strong>输出：</strong>&quot;On and keep calm code&quot;\\n<strong>解释：</strong>输出的排序情况如下：\\n&quot;On&quot; 2 个字母。\\n&quot;and&quot; 3 个字母。\\n&quot;keep&quot; 4 个字母，因为存在长度相同的其他单词，所以它们之间需要保留在原句子中的相对顺序。\\n&quot;calm&quot; 4 个字母。\\n&quot;code&quot; 4 个字母。\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>text = &quot;To be or not to be&quot;\\n<strong>输出：</strong>&quot;To be or to be not&quot;\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>text</code> 以大写字母开头，然后包含若干小写字母以及单词间的单个空格。</li>\\n\\t<li><code>1 &lt;= text.length &lt;= 10^5</code></li>\\n</ul>\\n","title":"1451. 重新排列句子中的单词","relatedTags":["字符串","排序"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1451","slug":"1451-Rearrange-Words-in-a-Sentence"}')}}]);