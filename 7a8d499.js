(window.webpackJsonp=window.webpackJsonp||[]).push([[114],{596:function(n){n.exports=JSON.parse('{"content":"<p>今天在LeetCode看到一篇非常有价值的讨论，列举了一系列列数组的<code>回溯算法</code>，自己动手一个个完成后，\\n感觉对理解回溯算法的原理有很大帮助。</p>\\n<p>就用一篇文章记录下解析过程。</p>\\n<p><a href=\\"https://leetcode.com/problems/combination-sum/discuss/16502/A-general-approach-to-backtracking-questions-in-Java-(Subsets-Permutations-Combination-Sum-Palindrome-Partitioning)\\">原文地址</a></p>\\n<p>其实回溯就是按顺序的一种穷举，但是它会设定<code>停止条件</code>和<code>达成条件</code></p>\\n<p>一旦符合<code>停止条件</code>，直接整体跳过，包括它后面的子集全部跳过</p>\\n<p>一旦符合<code>达成条件</code>，便是所需要的数据，添加到结果集合里</p>\\n<p>一个简单的例子：</p>\\n<pre><code><pre class=\\"hljs\\"><code>列举数组arr的所有的长度相同的组合，字符不重复\\n例如：[1,2,3]\\n输出：\\n[\\n  [1,2,3],\\n  [1,3,2],\\n  [2,1,3],\\n  [2,3,1],\\n  [3,1,2],\\n  [3,2,1]\\n]</code></pre></code></pre><p>代码：</p>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">subSet</span>(<span class=\\"hljs-params\\">nums</span>)</span>{\\n  <span class=\\"hljs-keyword\\">let</span> result=[],temp=[]\\n  backtrack(result,temp,nums)\\n  <span class=\\"hljs-keyword\\">return</span> result\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">backtrack</span>(<span class=\\"hljs-params\\">result,temp,nums</span>)</span>{\\n    <span class=\\"hljs-comment\\">// 达成条件</span>\\n    <span class=\\"hljs-keyword\\">if</span>(temp.length===nums.length)result.push(temp.slice())\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;nums.length;i++){\\n      <span class=\\"hljs-comment\\">// 停止条件</span>\\n      <span class=\\"hljs-keyword\\">if</span>(temp.includes(nums[i]))<span class=\\"hljs-keyword\\">continue</span>\\n      temp.push(nums[i])\\n      backtrack(result,temp,nums)\\n      temp.pop()\\n    }\\n  }\\n}</code></pre></code></pre>\\n<p>它的运行轨迹：</p>\\n<pre><code><pre class=\\"hljs\\"><code>1\\n1 1   ×\\n1 2\\n1 2 1 ×\\n1 2 2 ×\\n1 2 3 √\\n1 3\\n1 3 1 ×\\n1 3 2 √\\n1 3 3 ×\\n2\\n2 1\\n2 1 1 ×\\n2 1 2 ×\\n2 1 3 √\\n2 2   ×\\n2 3\\n2 3 1 √\\n2 3 2 ×\\n2 3 3 ×\\n3\\n3 1\\n3 1 1 ×\\n3 1 2 √\\n3 1 3 ×\\n3 2\\n3 2 1 √\\n3 2 2 ×\\n3 2 3 ×\\n3 3   ×</code></pre></code></pre><p>一旦父级达到<code>停止条件</code>，例如<code>2 2</code>，像后面的子集<code>2 2 1</code>，<code>2 2 2</code>都不会进行</p>\\n<p>当通过的<code>停止条件</code>并且符合<code>达成条件</code>的，就是结果。</p>\\n","toc":[],"relatedTags":null,"created_at":"2018-10-06","timeArr":[2018,9,6,0,0,0,0],"title":"关于回溯算法(backtrack)的模板解析","uuid":"362c875dc274eb593fe68c8afd58f51afebc57c9","summary":"<p>今天在LeetCode看到一篇非常有价值的讨论，列举了一系列列数组的<code>回溯算法</code>，自己动手一个个完成后，\\n感觉对理解回溯算法的原理有很大帮助。</p>\\n<p>就用一篇文章记录下解析过程。</p>\\n<p>[原文地址](https://leetcode.com/problems/combination-sum/discuss/16502/A-ge...</p>","slug":"guan-yu-hui-su-suan-fa-(backtrack)-de-mu-ban-jie-xi","sha":"8392ce085e533c1fff99ad21b3d8583449fec2d3"}')}}]);