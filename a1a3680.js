(window.webpackJsonp=window.webpackJsonp||[]).push([[916],{1714:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">n</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{string[][]}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> solveNQueens = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">n</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> usedLT2RD=<span class=\\"hljs-built_in\\">Array</span>(<span class=\\"hljs-number\\">2</span>*n).fill(<span class=\\"hljs-literal\\">false</span>),\\n      usedRT2LD=<span class=\\"hljs-built_in\\">Array</span>(<span class=\\"hljs-number\\">2</span>*n).fill(<span class=\\"hljs-literal\\">false</span>),\\n      usedCol=<span class=\\"hljs-built_in\\">Array</span>(n).fill(<span class=\\"hljs-literal\\">false</span>)\\n  <span class=\\"hljs-keyword\\">let</span> board=<span class=\\"hljs-built_in\\">Array</span>(n).fill().map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span>=&gt;</span><span class=\\"hljs-built_in\\">Array</span>(n).fill(<span class=\\"hljs-string\\">\'.\'</span>))\\n  <span class=\\"hljs-keyword\\">let</span> res=[]\\n  backtrack(board,<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">0</span>)\\n  <span class=\\"hljs-keyword\\">return</span> res\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">backtrack</span>(<span class=\\"hljs-params\\">board,setCount,rowId</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(setCount===n){\\n      <span class=\\"hljs-keyword\\">let</span> ans=[]\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;n;i++){\\n        ans.push(board[i].join(<span class=\\"hljs-string\\">\'\'</span>))\\n      }\\n      res.push(ans)\\n    }\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;n;j++){\\n      <span class=\\"hljs-keyword\\">let</span> lt2rd=j-rowId+n,rt2ld=j+rowId\\n      <span class=\\"hljs-comment\\">// 检查竖线，两斜线是否冲突</span>\\n      <span class=\\"hljs-keyword\\">if</span>(usedCol[j] || usedLT2RD[lt2rd] || usedRT2LD[rt2ld])<span class=\\"hljs-keyword\\">continue</span>\\n      usedCol[j]=<span class=\\"hljs-literal\\">true</span>\\n      usedLT2RD[lt2rd]=<span class=\\"hljs-literal\\">true</span>\\n      usedRT2LD[rt2ld]=<span class=\\"hljs-literal\\">true</span>\\n      board[rowId][j]=<span class=\\"hljs-string\\">\\"Q\\"</span>\\n      backtrack(board,setCount+<span class=\\"hljs-number\\">1</span>,rowId+<span class=\\"hljs-number\\">1</span>)\\n      board[rowId][j]=<span class=\\"hljs-string\\">\\".\\"</span>\\n      usedRT2LD[rt2ld]=<span class=\\"hljs-literal\\">false</span>\\n      usedLT2RD[lt2rd]=<span class=\\"hljs-literal\\">false</span>\\n      usedCol[j]=<span class=\\"hljs-literal\\">false</span>\\n    }\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"n-queens","created_at":"2019-04-18","timeArr":[2019,3,18,0,43,2,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>经典的回溯问题，主要思想就是不断尝试每一行每一个位置能否放置<code>Q</code>。</p>\\n<p>定义3个<code>hash</code>，用来保存已经放置的<code>Q</code>能攻击到的范围，分别是<code>col</code>，<code>dia1</code>，<code>dia2</code>(竖线和2对角线)</p>\\n<p>并且定义一个<code>board</code>来记录每个<code>Q</code>放置的位置，因为最终输出需要输出整个棋盘位置。</p>\\n<p>由于每一行最多只可能存在一个<code>Q</code>，那么如果第<code>i</code>行放置了，那么就继续第<code>i+1</code>行，检查是否有位置能放置。</p>\\n<p>检查的过程有一个高效的方法，<code>col</code>很简单，关键在两条斜线，可以思考这两条斜线的延长线最终到达第一行的位置。</p>\\n<p>左下到右上斜线<code>[i,j]</code>延长线最终能到达第一行的位置就是<code>[0,j+i]</code>，因此只需要保存<code>j+i</code>；</p>\\n<p>左上到右下的斜线<code>[i,j]</code>延长线最终能到达第一行的位置就是<code>[0,j-i]</code>，因此只需要保存<code>j-i</code>。</p>\\n","content":"<p><strong>n 皇后问题</strong> 研究的是如何将 <code>n</code> 个皇后放置在 <code>n×n</code> 的棋盘上，并且使皇后彼此之间不能相互攻击。</p>\\n\\n<p>给你一个整数 <code>n</code> ，返回所有不同的 <strong>n<em> </em>皇后问题</strong> 的解决方案。</p>\\n\\n<div class=\\"original__bRMd\\">\\n<div>\\n<p>每一种解法包含一个不同的 <strong>n 皇后问题</strong> 的棋子放置方案，该方案中 <code>\'Q\'</code> 和 <code>\'.\'</code> 分别代表了皇后和空位。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2020/11/13/queens.jpg\\" style=\\"width: 600px; height: 268px;\\" />\\n<pre>\\n<strong>输入：</strong>n = 4\\n<strong>输出：</strong>[[\\".Q..\\",\\"...Q\\",\\"Q...\\",\\"..Q.\\"],[\\"..Q.\\",\\"Q...\\",\\"...Q\\",\\".Q..\\"]]\\n<strong>解释：</strong>如上图所示，4 皇后问题存在两个不同的解法。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>n = 1\\n<strong>输出：</strong>[[\\"Q\\"]]\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= n <= 9</code></li>\\n\\t<li>皇后彼此不能相互攻击，也就是说：任何两个皇后都不能处于同一条横行、纵行或斜线上。</li>\\n</ul>\\n</div>\\n</div>\\n","title":"51. N 皇后","relatedTags":["数组","回溯"],"difficult":"Hard","lang":["javascript"],"uniqueID":"51","slug":"51-N-Queens"}')}}]);