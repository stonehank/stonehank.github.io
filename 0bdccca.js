(window.webpackJsonp=window.webpackJsonp||[]).push([[474],{1272:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">stoneValue</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{string}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> stoneGameIII = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">A</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> n = A.length\\n  <span class=\\"hljs-keyword\\">let</span> dp = <span class=\\"hljs-keyword\\">new</span> <span class=\\"hljs-built_in\\">Array</span>(n+<span class=\\"hljs-number\\">1</span>).fill(<span class=\\"hljs-number\\">0</span>);\\n  <span class=\\"hljs-keyword\\">for</span> (<span class=\\"hljs-keyword\\">let</span> i = n - <span class=\\"hljs-number\\">1</span>; i &gt;= <span class=\\"hljs-number\\">0</span>; --i) {\\n      dp[i] = -<span class=\\"hljs-literal\\">Infinity</span>\\n      <span class=\\"hljs-keyword\\">for</span> (<span class=\\"hljs-keyword\\">let</span> k = <span class=\\"hljs-number\\">0</span>, take = <span class=\\"hljs-number\\">0</span>; k &lt; <span class=\\"hljs-number\\">3</span> &amp;&amp; i + k &lt; n; ++k) {\\n          take += A[i + k];\\n          dp[i] = <span class=\\"hljs-built_in\\">Math</span>.max(dp[i], take - dp[i + k + <span class=\\"hljs-number\\">1</span>]);\\n      }\\n  }\\n  \\n  <span class=\\"hljs-keyword\\">if</span> (dp[<span class=\\"hljs-number\\">0</span>] &gt; <span class=\\"hljs-number\\">0</span>) <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-string\\">\\"Alice\\"</span>;\\n  <span class=\\"hljs-keyword\\">if</span> (dp[<span class=\\"hljs-number\\">0</span>] &lt; <span class=\\"hljs-number\\">0</span>) <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-string\\">\\"Bob\\"</span>;\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-string\\">\\"Tie\\"</span>;    \\n};\\n\\n</code></pre>\\n"],"querySlug":"stone-game-iii","created_at":"2020-04-05","timeArr":[2020,3,5,13,26,41,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p><code>dp[i]</code> 表示在第i个位置，某个人先走，能拿到的最大值</p>\\n<p>如果 <code>len&lt;=3</code>，例如<code>[1,2,3]</code></p>\\n<p>那么<code>dp</code>为<code>[6,5,3]</code></p>\\n<p>如果<code>len&gt;3</code>，例如<code>[7,1,2,3,7]</code></p>\\n<p>那么<code>dp</code>最后3位为<code>[?, ?,12,10,7]</code></p>\\n<p>当i=1时，<code>dp[i]</code>的值，需要计算 当取<code>k(1-3)</code>个时，能取到最大值减去<code>dp[i+k+1]</code>的值</p>\\n<p>当i=0时，当<code>k</code>只取1个值(7)时，能获得最大值，因为<code>7 - dp[i+1+1] = 8</code></p>\\n<p>因此最终dp为<code>[8,-1,12,10,7]</code></p>\\n","content":"<p>Alice 和 Bob 用几堆石子在做游戏。几堆石子排成一行，每堆石子都对应一个得分，由数组 <code>stoneValue</code> 给出。</p>\\n\\n<p>Alice 和 Bob 轮流取石子，<strong>Alice</strong> 总是先开始。在每个玩家的回合中，该玩家可以拿走剩下石子中的的前 <strong>1、2 或 3 堆石子</strong> 。比赛一直持续到所有石头都被拿走。</p>\\n\\n<p>每个玩家的最终得分为他所拿到的每堆石子的对应得分之和。每个玩家的初始分数都是 <strong>0</strong> 。比赛的目标是决出最高分，得分最高的选手将会赢得比赛，比赛也可能会出现平局。</p>\\n\\n<p>假设 Alice 和 Bob 都采取 <strong>最优策略</strong> 。如果 Alice 赢了就返回 <em>&quot;Alice&quot;</em> <em>，</em>Bob 赢了就返回<em> &quot;Bob&quot;，</em>平局（分数相同）返回 <em>&quot;Tie&quot;</em> 。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>values = [1,2,3,7]\\n<strong>输出：</strong>&quot;Bob&quot;\\n<strong>解释：</strong>Alice 总是会输，她的最佳选择是拿走前三堆，得分变成 6 。但是 Bob 的得分为 7，Bob 获胜。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>values = [1,2,3,-9]\\n<strong>输出：</strong>&quot;Alice&quot;\\n<strong>解释：</strong>Alice 要想获胜就必须在第一个回合拿走前三堆石子，给 Bob 留下负分。\\n如果 Alice 只拿走第一堆，那么她的得分为 1，接下来 Bob 拿走第二、三堆，得分为 5 。之后 Alice 只能拿到分数 -9 的石子堆，输掉比赛。\\n如果 Alice 拿走前两堆，那么她的得分为 3，接下来 Bob 拿走第三堆，得分为 3 。之后 Alice 只能拿到分数 -9 的石子堆，同样会输掉比赛。\\n注意，他们都应该采取 <strong>最优策略 </strong>，所以在这里 Alice 将选择能够使她获胜的方案。</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>values = [1,2,3,6]\\n<strong>输出：</strong>&quot;Tie&quot;\\n<strong>解释：</strong>Alice 无法赢得比赛。如果她决定选择前三堆，她可以以平局结束比赛，否则她就会输。\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre><strong>输入：</strong>values = [1,2,3,-1,-2,-3,7]\\n<strong>输出：</strong>&quot;Alice&quot;\\n</pre>\\n\\n<p><strong>示例 5：</strong></p>\\n\\n<pre><strong>输入：</strong>values = [-1,-2,-3]\\n<strong>输出：</strong>&quot;Tie&quot;\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= values.length &lt;= 50000</code></li>\\n\\t<li><code>-1000&nbsp;&lt;= values[i] &lt;= 1000</code></li>\\n</ul>\\n","title":"1406. 石子游戏 III","relatedTags":["数组","数学","动态规划","博弈"],"difficult":"Hard","lang":["javascript"],"uniqueID":"1406","slug":"1406-Stone-Game-III"}')}}]);