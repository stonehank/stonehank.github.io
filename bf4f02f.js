(window.webpackJsonp=window.webpackJsonp||[]).push([[1362],{2160:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{TreeNode}</span> <span class=\\"hljs-variable\\">root</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{string}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> smallestFromLeaf = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">root</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> acode=<span class=\\"hljs-string\\">\'a\'</span>.charCodeAt(<span class=\\"hljs-number\\">0</span>)\\n  <span class=\\"hljs-keyword\\">return</span> findSmall(root)\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">findSmall</span>(<span class=\\"hljs-params\\">root</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(!root)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-string\\">\'\'</span>\\n    <span class=\\"hljs-keyword\\">let</span> left=findSmall(root.left)\\n    <span class=\\"hljs-keyword\\">let</span> right=findSmall(root.right)\\n    <span class=\\"hljs-comment\\">// console.log(left,right)</span>\\n    <span class=\\"hljs-keyword\\">let</span> strLeft=<span class=\\"hljs-string\\">\'\'</span>,strRight=<span class=\\"hljs-string\\">\'\'</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;left.length;i++){\\n      strLeft+=left[i]\\n    }\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;right.length;i++){\\n      <span class=\\"hljs-comment\\">// strRight+=String.fromCharCode(+right[i] + acode)</span>\\n      strRight+=right[i]\\n    }\\n    <span class=\\"hljs-keyword\\">let</span> nodeStr=<span class=\\"hljs-built_in\\">String</span>.fromCharCode(+root.val + acode)\\n    <span class=\\"hljs-keyword\\">if</span>(strLeft===<span class=\\"hljs-string\\">\'\'</span> &amp;&amp; strRight===<span class=\\"hljs-string\\">\'\'</span>)<span class=\\"hljs-keyword\\">return</span> nodeStr\\n    <span class=\\"hljs-keyword\\">if</span>(strLeft===<span class=\\"hljs-string\\">\'\'</span>)<span class=\\"hljs-keyword\\">return</span> strRight+nodeStr\\n    <span class=\\"hljs-keyword\\">if</span>(strRight===<span class=\\"hljs-string\\">\'\'</span>)<span class=\\"hljs-keyword\\">return</span> strLeft+nodeStr\\n    <span class=\\"hljs-keyword\\">if</span>(strRight&lt;strLeft)<span class=\\"hljs-keyword\\">return</span> strRight+nodeStr\\n    <span class=\\"hljs-keyword\\">if</span>(strLeft&lt;strRight)<span class=\\"hljs-keyword\\">return</span> strLeft+nodeStr\\n    <span class=\\"hljs-keyword\\">return</span> strRight+nodeStr\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"smallest-string-starting-from-leaf","created_at":"2019-02-03","timeArr":[2019,1,3,10,48,16,0],"hasThinking":false,"content":"<p>给定一颗根结点为&nbsp;<code>root</code>&nbsp;的二叉树，树中的每一个结点都有一个从&nbsp;<code>0</code> 到&nbsp;<code>25</code>&nbsp;的值，分别代表字母&nbsp;<code>&#39;a&#39;</code> 到&nbsp;<code>&#39;z&#39;</code>：值&nbsp;<code>0</code> 代表&nbsp;<code>&#39;a&#39;</code>，值&nbsp;<code>1</code>&nbsp;代表&nbsp;<code>&#39;b&#39;</code>，依此类推。</p>\\n\\n<p>找出按字典序最小的字符串，该字符串从这棵树的一个叶结点开始，到根结点结束。</p>\\n\\n<p><em>（小贴士：字符串中任何较短的前缀在字典序上都是较小的：例如，在字典序上&nbsp;<code>&quot;ab&quot;</code> 比&nbsp;<code>&quot;aba&quot;</code>&nbsp;要小。叶结点是指没有子结点的结点。）</em></p>\\n\\n<p>&nbsp;</p>\\n\\n<ol>\\n</ol>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<p><strong><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/02/tree1.png\\" style=\\"height: 107px; width: 160px;\\"></strong></p>\\n\\n<pre><strong>输入：</strong>[0,1,2,3,4,3,4]\\n<strong>输出：</strong>&quot;dba&quot;\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<p><strong><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/02/tree2.png\\" style=\\"height: 107px; width: 160px;\\"></strong></p>\\n\\n<pre><strong>输入：</strong>[25,1,3,1,3,0,2]\\n<strong>输出：</strong>&quot;adz&quot;\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<p><strong><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/02/02/tree3.png\\" style=\\"height: 180px; width: 172px;\\"></strong></p>\\n\\n<pre><strong>输入：</strong>[2,2,1,null,1,0,null,0]\\n<strong>输出：</strong>&quot;abc&quot;\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ol>\\n\\t<li>给定树的结点数介于&nbsp;<code>1</code> 和&nbsp;<code>8500</code>&nbsp;之间。</li>\\n\\t<li>树中的每个结点都有一个介于&nbsp;<code>0</code>&nbsp;和&nbsp;<code>25</code>&nbsp;之间的值。</li>\\n</ol>\\n","title":"988. 从叶结点开始的最小字符串","relatedTags":["树","深度优先搜索","字符串","二叉树"],"difficult":"Middle","lang":["javascript"],"uniqueID":"988","slug":"988-Smallest-String-Starting-From-Leaf"}')}}]);