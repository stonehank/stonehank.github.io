(window.webpackJsonp=window.webpackJsonp||[]).push([[776],{1574:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{character[][]}</span> <span class=\\"hljs-variable\\">board</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{boolean}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> isValidSudoku = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">board</span>) </span>{\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">rowIsValid</span>(<span class=\\"hljs-params\\">id</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> hash={}\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;board[id].length;i++){\\n      <span class=\\"hljs-keyword\\">let</span> cur=board[id][i]\\n      <span class=\\"hljs-keyword\\">if</span>(hash[cur])<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n      <span class=\\"hljs-keyword\\">if</span>(cur!==<span class=\\"hljs-string\\">\'.\'</span>)hash[cur]=<span class=\\"hljs-literal\\">true</span>\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n  }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">colIsValid</span>(<span class=\\"hljs-params\\">id</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> hash={}\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;board.length;i++){\\n      <span class=\\"hljs-keyword\\">let</span> cur=board[i][id]\\n      <span class=\\"hljs-keyword\\">if</span>(hash[cur])<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n      <span class=\\"hljs-keyword\\">if</span>(cur!==<span class=\\"hljs-string\\">\'.\'</span>)hash[cur]=<span class=\\"hljs-literal\\">true</span>\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n  }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">boxIsValid</span>(<span class=\\"hljs-params\\">id</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> f=<span class=\\"hljs-built_in\\">Math</span>.floor(id/<span class=\\"hljs-number\\">3</span>),\\n        m=id % <span class=\\"hljs-number\\">3</span>\\n    <span class=\\"hljs-keyword\\">let</span> rs=f*<span class=\\"hljs-number\\">3</span>,re=f*<span class=\\"hljs-number\\">3</span>+<span class=\\"hljs-number\\">2</span>,\\n        cs=m*<span class=\\"hljs-number\\">3</span>,ce=m*<span class=\\"hljs-number\\">3</span>+<span class=\\"hljs-number\\">2</span>\\n    <span class=\\"hljs-keyword\\">let</span> hash={}\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=rs;i&lt;=re;i++){\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=cs;j&lt;=ce;j++){\\n        <span class=\\"hljs-keyword\\">let</span> cur=board[i][j]\\n        <span class=\\"hljs-keyword\\">if</span>(hash[cur])<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n        <span class=\\"hljs-keyword\\">if</span>(cur!==<span class=\\"hljs-string\\">\'.\'</span>)hash[cur]=<span class=\\"hljs-literal\\">true</span>\\n      }\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n  }\\n  \\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;<span class=\\"hljs-number\\">9</span>;i++){\\n    <span class=\\"hljs-keyword\\">if</span>(!rowIsValid(i) || !colIsValid(i) || !boxIsValid(i))<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n};\\n</code></pre>\\n"],"querySlug":"valid-sudoku","created_at":"2019-04-04","timeArr":[2019,3,4,15,58,49,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>因为存在<code>9</code>行，<code>9</code>列，<code>9</code>个<code>3*3</code>的格子，因此可以遍历<code>[0,9]</code>，分别检查对应索引的行，列和块。</p>\\n<p>具体检查步骤就是创建<code>hash</code>，如果内部存在相同的数字，则返回<code>false</code>。</p>\\n<p>行列检查都很简单，块需要将<code>id</code>转化为行开始的索引，行结束的索引，列开始的索引，列结束的索引。</p>\\n<p><code>[行开始，行结束]</code>为<code>[Math.floor(id/3)*3,Math.floor(id/3)*3+2]</code></p>\\n<p><code>[列开始，列结束]</code>为<code>[id%3*3,id%3*3+2]</code></p>\\n","content":"<p>请你判断一个 <code>9x9</code> 的数独是否有效。只需要<strong> 根据以下规则</strong> ，验证已经填入的数字是否有效即可。</p>\\n\\n<ol>\\n\\t<li>数字 <code>1-9</code> 在每一行只能出现一次。</li>\\n\\t<li>数字 <code>1-9</code> 在每一列只能出现一次。</li>\\n\\t<li>数字 <code>1-9</code> 在每一个以粗实线分隔的 <code>3x3</code> 宫内只能出现一次。（请参考示例图）</li>\\n</ol>\\n\\n<p>数独部分空格内已填入了数字，空白格用 <code>\'.\'</code> 表示。</p>\\n\\n<p><strong>注意：</strong></p>\\n\\n<ul>\\n\\t<li>一个有效的数独（部分已被填充）不一定是可解的。</li>\\n\\t<li>只需要根据以上规则，验证已经填入的数字是否有效即可。</li>\\n</ul>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n<img src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/04/12/250px-sudoku-by-l2g-20050714svg.png\\" style=\\"height:250px; width:250px\\" />\\n<pre>\\n<strong>输入：</strong>board = \\n[[\\"5\\",\\"3\\",\\".\\",\\".\\",\\"7\\",\\".\\",\\".\\",\\".\\",\\".\\"]\\n,[\\"6\\",\\".\\",\\".\\",\\"1\\",\\"9\\",\\"5\\",\\".\\",\\".\\",\\".\\"]\\n,[\\".\\",\\"9\\",\\"8\\",\\".\\",\\".\\",\\".\\",\\".\\",\\"6\\",\\".\\"]\\n,[\\"8\\",\\".\\",\\".\\",\\".\\",\\"6\\",\\".\\",\\".\\",\\".\\",\\"3\\"]\\n,[\\"4\\",\\".\\",\\".\\",\\"8\\",\\".\\",\\"3\\",\\".\\",\\".\\",\\"1\\"]\\n,[\\"7\\",\\".\\",\\".\\",\\".\\",\\"2\\",\\".\\",\\".\\",\\".\\",\\"6\\"]\\n,[\\".\\",\\"6\\",\\".\\",\\".\\",\\".\\",\\".\\",\\"2\\",\\"8\\",\\".\\"]\\n,[\\".\\",\\".\\",\\".\\",\\"4\\",\\"1\\",\\"9\\",\\".\\",\\".\\",\\"5\\"]\\n,[\\".\\",\\".\\",\\".\\",\\".\\",\\"8\\",\\".\\",\\".\\",\\"7\\",\\"9\\"]]\\n<strong>输出：</strong>true\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>board = \\n[[\\"8\\",\\"3\\",\\".\\",\\".\\",\\"7\\",\\".\\",\\".\\",\\".\\",\\".\\"]\\n,[\\"6\\",\\".\\",\\".\\",\\"1\\",\\"9\\",\\"5\\",\\".\\",\\".\\",\\".\\"]\\n,[\\".\\",\\"9\\",\\"8\\",\\".\\",\\".\\",\\".\\",\\".\\",\\"6\\",\\".\\"]\\n,[\\"8\\",\\".\\",\\".\\",\\".\\",\\"6\\",\\".\\",\\".\\",\\".\\",\\"3\\"]\\n,[\\"4\\",\\".\\",\\".\\",\\"8\\",\\".\\",\\"3\\",\\".\\",\\".\\",\\"1\\"]\\n,[\\"7\\",\\".\\",\\".\\",\\".\\",\\"2\\",\\".\\",\\".\\",\\".\\",\\"6\\"]\\n,[\\".\\",\\"6\\",\\".\\",\\".\\",\\".\\",\\".\\",\\"2\\",\\"8\\",\\".\\"]\\n,[\\".\\",\\".\\",\\".\\",\\"4\\",\\"1\\",\\"9\\",\\".\\",\\".\\",\\"5\\"]\\n,[\\".\\",\\".\\",\\".\\",\\".\\",\\"8\\",\\".\\",\\".\\",\\"7\\",\\"9\\"]]\\n<strong>输出：</strong>false\\n<strong>解释：</strong>除了第一行的第一个数字从<strong> 5</strong> 改为 <strong>8 </strong>以外，空格内其他数字均与 示例1 相同。 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>board.length == 9</code></li>\\n\\t<li><code>board[i].length == 9</code></li>\\n\\t<li><code>board[i][j]</code> 是一位数字或者 <code>\'.\'</code></li>\\n</ul>\\n","title":"36. 有效的数独","relatedTags":["数组","哈希表","矩阵"],"difficult":"Middle","lang":["javascript"],"uniqueID":"36","slug":"36-Valid-Sudoku"}')}}]);