(window.webpackJsonp=window.webpackJsonp||[]).push([[507],{1305:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">capacity</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> LRUCache = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">capacity</span>) </span>{\\n  <span class=\\"hljs-keyword\\">this</span>.map=<span class=\\"hljs-keyword\\">new</span> <span class=\\"hljs-built_in\\">Map</span>()\\n  <span class=\\"hljs-keyword\\">this</span>.capacity=capacity\\n};\\n\\n<span class=\\"hljs-comment\\">/** \\n * @param {number} key\\n * @return {number}\\n */</span>\\nLRUCache.prototype.get = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">key</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(!<span class=\\"hljs-keyword\\">this</span>.map.has(key))<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">-1</span>\\n  <span class=\\"hljs-keyword\\">let</span> val=<span class=\\"hljs-keyword\\">this</span>.map.get(key)\\n  <span class=\\"hljs-keyword\\">this</span>.map.delete(key)\\n  <span class=\\"hljs-keyword\\">this</span>.map.set(key,val)\\n  <span class=\\"hljs-keyword\\">return</span> val\\n};\\n\\n<span class=\\"hljs-comment\\">/** \\n * @param {number} key \\n * @param {number} value\\n * @return {void}\\n */</span>\\nLRUCache.prototype.put = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">key, value</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-keyword\\">this</span>.map.has(key)){\\n    <span class=\\"hljs-keyword\\">this</span>.map.delete(key)\\n  }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-keyword\\">this</span>.capacity===<span class=\\"hljs-keyword\\">this</span>.map.size){\\n    <span class=\\"hljs-keyword\\">let</span> firstKey=<span class=\\"hljs-keyword\\">this</span>.map.entries().next().value[<span class=\\"hljs-number\\">0</span>]\\n    <span class=\\"hljs-keyword\\">this</span>.map.delete(firstKey)\\n  }\\n  <span class=\\"hljs-keyword\\">this</span>.map.set(key,value)\\n};\\n\\n<span class=\\"hljs-comment\\">/** \\n * Your LRUCache object will be instantiated and called as such:\\n * var obj = Object.create(LRUCache).createNew(capacity)\\n * var param_1 = obj.get(key)\\n * obj.put(key,value)\\n */</span>\\n</code></pre>\\n"],"querySlug":"lru-cache","created_at":"2019-04-18","timeArr":[2019,3,18,22,49,35,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>2种方法可以实现，但只是工具不同，思想基本一致。</p>\\n<p>在<code>put</code>内部，先查找当前是否存在<code>key</code>，如果存在，则更新，这时候长度不会发生变化，只是需要将刚刚更新的<code>key-val</code>，放到最新的位置；</p>\\n<p>如果不存在，也不能立刻添加，先要查看当前是否满了，如果满了，需要将最早的那个删除。</p>\\n<p>最后再添加新的键值对。</p>\\n<p>在<code>get</code>内部，首先查找当前<code>key</code>是否存在，不存在返回<code>-1</code>，存在除了返回对应的<code>val</code>，还要更新位置，将当前<code>get</code>的键值对放到最新的位置。</p>\\n<p>这里要求<code>查找</code>，<code>增加</code>，<code>删除</code>都要是<code>O(1)</code>。</p>\\n<ol>\\n<li>使用<code>js</code>的<code>map</code>。</li>\\n</ol>\\n<p><code>map</code>本身是按照加入的顺序排序的，并且查找和增加删除都是<code>O(1)</code>。</p>\\n<p>在<code>put</code>，只需要找到对应的删除是<code>O(1)</code>，如果发现满了，需要删除最早的，那么需要用到<code>map.entries.next().value</code>，就是<code>map</code>的第一个键值对(最早加入的)。</p>\\n<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">capacity</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> LRUCache = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">capacity</span>) </span>{\\n  <span class=\\"hljs-keyword\\">this</span>.map=<span class=\\"hljs-keyword\\">new</span> <span class=\\"hljs-built_in\\">Map</span>()\\n  <span class=\\"hljs-keyword\\">this</span>.capacity=capacity\\n};\\n\\n<span class=\\"hljs-comment\\">/** \\n * @param {number} key\\n * @return {number}\\n */</span>\\nLRUCache.prototype.get = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">key</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(!<span class=\\"hljs-keyword\\">this</span>.map.has(key))<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">-1</span>\\n  <span class=\\"hljs-keyword\\">let</span> val=<span class=\\"hljs-keyword\\">this</span>.map.get(key)\\n  <span class=\\"hljs-keyword\\">this</span>.map.delete(key)\\n  <span class=\\"hljs-keyword\\">this</span>.map.set(key,val)\\n  <span class=\\"hljs-keyword\\">return</span> val\\n};\\n\\n<span class=\\"hljs-comment\\">/** \\n * @param {number} key \\n * @param {number} value\\n * @return {void}\\n */</span>\\nLRUCache.prototype.put = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">key, value</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-keyword\\">this</span>.map.has(key)){\\n    <span class=\\"hljs-keyword\\">this</span>.map.delete(key)\\n  }<span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(<span class=\\"hljs-keyword\\">this</span>.capacity===<span class=\\"hljs-keyword\\">this</span>.map.size){\\n    <span class=\\"hljs-keyword\\">let</span> firstKey=<span class=\\"hljs-keyword\\">this</span>.map.entries().next().value[<span class=\\"hljs-number\\">0</span>]\\n    <span class=\\"hljs-keyword\\">this</span>.map.delete(firstKey)\\n  }\\n  <span class=\\"hljs-keyword\\">this</span>.map.set(key,value)\\n};\\n\\n<span class=\\"hljs-comment\\">/** \\n * Your LRUCache object will be instantiated and called as such:\\n * var obj = Object.create(LRUCache).createNew(capacity)\\n * var param_1 = obj.get(key)\\n * obj.put(key,value)\\n */</span>\\n</code></pre>\\n<ol start=\\"2\\">\\n<li>使用<code>DoubleLink</code>，双向链表。</li>\\n</ol>\\n<p>双向链表的查找可以使用<code>hash</code>保存每一截链表的引用，键值就是<code>key</code>。</p>\\n<p>另外双向链表的<code>增加</code>和<code>删除</code>都是<code>O(1)</code>。</p>\\n","content":"<div class=\\"title__3Vvk\\">运用你所掌握的数据结构，设计和实现一个  <a href=\\"https://baike.baidu.com/item/LRU\\" target=\\"_blank\\">LRU (最近最少使用) 缓存机制</a> 。</div>\\n\\n<div class=\\"original__bRMd\\">\\n<div>\\n<p>实现 <code>LRUCache</code> 类：</p>\\n\\n<ul>\\n\\t<li><code>LRUCache(int capacity)</code> 以正整数作为容量 <code>capacity</code> 初始化 LRU 缓存</li>\\n\\t<li><code>int get(int key)</code> 如果关键字 <code>key</code> 存在于缓存中，则返回关键字的值，否则返回 <code>-1</code> 。</li>\\n\\t<li><code>void put(int key, int value)</code> 如果关键字已经存在，则变更其数据值；如果关键字不存在，则插入该组「关键字-值」。当缓存容量达到上限时，它应该在写入新数据之前删除最久未使用的数据值，从而为新的数据值留出空间。</li>\\n</ul>\\n\\n<p> </p>\\n</div>\\n</div>\\n\\n<p><strong>进阶</strong>：你是否可以在 <code>O(1)</code> 时间复杂度内完成这两种操作？</p>\\n\\n<p> </p>\\n\\n<p><strong>示例：</strong></p>\\n\\n<pre>\\n<strong>输入</strong>\\n[\\"LRUCache\\", \\"put\\", \\"put\\", \\"get\\", \\"put\\", \\"get\\", \\"put\\", \\"get\\", \\"get\\", \\"get\\"]\\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]\\n<strong>输出</strong>\\n[null, null, null, 1, null, -1, null, -1, 3, 4]\\n\\n<strong>解释</strong>\\nLRUCache lRUCache = new LRUCache(2);\\nlRUCache.put(1, 1); // 缓存是 {1=1}\\nlRUCache.put(2, 2); // 缓存是 {1=1, 2=2}\\nlRUCache.get(1);    // 返回 1\\nlRUCache.put(3, 3); // 该操作会使得关键字 2 作废，缓存是 {1=1, 3=3}\\nlRUCache.get(2);    // 返回 -1 (未找到)\\nlRUCache.put(4, 4); // 该操作会使得关键字 1 作废，缓存是 {4=4, 3=3}\\nlRUCache.get(1);    // 返回 -1 (未找到)\\nlRUCache.get(3);    // 返回 3\\nlRUCache.get(4);    // 返回 4\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 <= capacity <= 3000</code></li>\\n\\t<li><code>0 <= key <= 10000</code></li>\\n\\t<li><code>0 <= value <= 10<sup>5</sup></code></li>\\n\\t<li>最多调用 <code>2 * 10<sup>5</sup></code> 次 <code>get</code> 和 <code>put</code></li>\\n</ul>\\n","title":"146. LRU 缓存机制","relatedTags":["设计","哈希表","链表","双向链表"],"difficult":"Middle","lang":["javascript"],"uniqueID":"146","slug":"146-LRU-Cache"}')}}]);