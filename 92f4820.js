(window.webpackJsonp=window.webpackJsonp||[]).push([[311],{1109:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">target</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{string}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> alphabetBoardPath = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">target</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> board = [<span class=\\"hljs-string\\">\\"abcde\\"</span>, <span class=\\"hljs-string\\">\\"fghij\\"</span>, <span class=\\"hljs-string\\">\\"klmno\\"</span>, <span class=\\"hljs-string\\">\\"pqrst\\"</span>, <span class=\\"hljs-string\\">\\"uvwxy\\"</span>, <span class=\\"hljs-string\\">\\"z\\"</span>]\\n  <span class=\\"hljs-keyword\\">let</span> m=<span class=\\"hljs-number\\">6</span>,n=<span class=\\"hljs-number\\">5</span>\\n  <span class=\\"hljs-keyword\\">let</span> hash={}\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;board.length;i++){\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;board[i].length;j++){\\n      <span class=\\"hljs-keyword\\">let</span> l=board[i][j]\\n      hash[l]=[i,j]\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> start=[<span class=\\"hljs-number\\">0</span>,<span class=\\"hljs-number\\">0</span>]\\n  <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-string\\">\'\'</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;target.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> end=hash[target[i]]\\n    <span class=\\"hljs-keyword\\">let</span> [sy,sx]=start\\n    <span class=\\"hljs-keyword\\">let</span> [ey,ex]=end\\n    <span class=\\"hljs-keyword\\">let</span> dy=ey-sy\\n    <span class=\\"hljs-keyword\\">let</span> dx=ex-sx\\n    <span class=\\"hljs-keyword\\">let</span> needMove=dx!==<span class=\\"hljs-number\\">0</span> || dy!==<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">while</span>(needMove){\\n      <span class=\\"hljs-keyword\\">if</span>(dy&lt;<span class=\\"hljs-number\\">0</span>){\\n        <span class=\\"hljs-keyword\\">if</span>(U(sx,sy,ex,ey)){\\n          res+=<span class=\\"hljs-string\\">\'U\'</span>\\n          sy-=<span class=\\"hljs-number\\">1</span>\\n        }\\n      }\\n      <span class=\\"hljs-keyword\\">if</span>(dy&gt;<span class=\\"hljs-number\\">0</span>){\\n        <span class=\\"hljs-keyword\\">if</span>(D(sx,sy,ex,ey)){\\n          res+=<span class=\\"hljs-string\\">\\"D\\"</span>\\n          sy+=<span class=\\"hljs-number\\">1</span>\\n        }\\n      }\\n      <span class=\\"hljs-keyword\\">if</span>(dx&lt;<span class=\\"hljs-number\\">0</span>){\\n        <span class=\\"hljs-keyword\\">if</span>(L(sx,sy,ex,ey)){\\n          res+=<span class=\\"hljs-string\\">\'L\'</span>\\n          sx-=<span class=\\"hljs-number\\">1</span>\\n        }\\n      }\\n      <span class=\\"hljs-keyword\\">if</span>(dx&gt;<span class=\\"hljs-number\\">0</span>){\\n        <span class=\\"hljs-keyword\\">if</span>(R(sx,sy,ex,ey)){\\n          res+=<span class=\\"hljs-string\\">\'R\'</span>\\n          sx+=<span class=\\"hljs-number\\">1</span>\\n        }\\n      }\\n      dy=ey-sy\\n      dx=ex-sx\\n      needMove=dx!==<span class=\\"hljs-number\\">0</span> || dy!==<span class=\\"hljs-number\\">0</span>\\n    }\\n    res+=<span class=\\"hljs-string\\">\'!\'</span>\\n    <span class=\\"hljs-comment\\">// console.log(res)</span>\\n    start=end\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> res\\n\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">D</span>(<span class=\\"hljs-params\\">sx,sy,ex,ey</span>)</span>{\\n    <span class=\\"hljs-keyword\\">return</span> sy&lt;m<span class=\\"hljs-number\\">-1</span> &amp;&amp; sy!==m<span class=\\"hljs-number\\">-2</span> || (sy===m<span class=\\"hljs-number\\">-2</span> &amp;&amp; sx===<span class=\\"hljs-number\\">0</span>)\\n  }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">U</span>(<span class=\\"hljs-params\\">sx,sy,ex,ey</span>)</span>{\\n    <span class=\\"hljs-keyword\\">return</span> sy&gt;<span class=\\"hljs-number\\">0</span>\\n  }\\n\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">L</span>(<span class=\\"hljs-params\\">sx,sy,ex,ey</span>)</span>{\\n    <span class=\\"hljs-keyword\\">return</span> sx&gt;<span class=\\"hljs-number\\">0</span>\\n  }\\n\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">R</span>(<span class=\\"hljs-params\\">sx,sy,ex,ey</span>)</span>{\\n    <span class=\\"hljs-keyword\\">return</span> sx&gt;<span class=\\"hljs-number\\">0</span> &amp;&amp; sx&lt;n<span class=\\"hljs-number\\">-1</span> || (sx===<span class=\\"hljs-number\\">0</span> &amp;&amp; sy!==m<span class=\\"hljs-number\\">-1</span> )\\n  }\\n\\n};\\n\\n</code></pre>\\n"],"querySlug":"alphabet-board-path","created_at":"2019-07-28","timeArr":[2019,6,28,11,16,40,0],"hasThinking":false,"content":"<p>我们从一块字母板上的位置&nbsp;<code>(0, 0)</code>&nbsp;出发，该坐标对应的字符为&nbsp;<code>board[0][0]</code>。</p>\\n\\n<p>在本题里，字母板为<code>board = [&quot;abcde&quot;, &quot;fghij&quot;, &quot;klmno&quot;, &quot;pqrst&quot;, &quot;uvwxy&quot;, &quot;z&quot;]</code>，如下所示。</p>\\n\\n<p><img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2019/07/28/azboard.png\\" style=\\"width: 300px;\\"></p>\\n\\n<p>我们可以按下面的指令规则行动：</p>\\n\\n<ul>\\n\\t<li>如果方格存在，<code>&#39;U&#39;</code>&nbsp;意味着将我们的位置上移一行；</li>\\n\\t<li>如果方格存在，<code>&#39;D&#39;</code>&nbsp;意味着将我们的位置下移一行；</li>\\n\\t<li>如果方格存在，<code>&#39;L&#39;</code>&nbsp;意味着将我们的位置左移一列；</li>\\n\\t<li>如果方格存在，<code>&#39;R&#39;</code>&nbsp;意味着将我们的位置右移一列；</li>\\n\\t<li><code>&#39;!&#39;</code>&nbsp;会把在我们当前位置 <code>(r, c)</code> 的字符&nbsp;<code>board[r][c]</code>&nbsp;添加到答案中。</li>\\n</ul>\\n\\n<p>（注意，字母板上只存在有字母的位置。）</p>\\n\\n<p>返回指令序列，用最小的行动次数让答案和目标&nbsp;<code>target</code>&nbsp;相同。你可以返回任何达成目标的路径。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>target = &quot;leet&quot;\\n<strong>输出：</strong>&quot;DDR!UURRR!!DDD!&quot;\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>target = &quot;code&quot;\\n<strong>输出：</strong>&quot;RR!DDRR!UUL!R!&quot;\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= target.length &lt;= 100</code></li>\\n\\t<li><code>target</code>&nbsp;仅含有小写英文字母。</li>\\n</ul>\\n","title":"1138. 字母板上的路径","relatedTags":["哈希表","字符串"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1138","slug":"1138-Alphabet-Board-Path"}')}}]);