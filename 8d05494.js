(window.webpackJsonp=window.webpackJsonp||[]).push([[998],{1796:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">courses</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> scheduleCourse = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">courses</span>) </span>{\\n  courses.sort(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">a,b</span>)=&gt;</span>a[<span class=\\"hljs-number\\">1</span>]-b[<span class=\\"hljs-number\\">1</span>])\\n  <span class=\\"hljs-keyword\\">let</span> pq=[]\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">bsEnd</span>(<span class=\\"hljs-params\\">arr,n</span>)</span>{\\n   <span class=\\"hljs-keyword\\">let</span> lo=<span class=\\"hljs-number\\">0</span>,hi=arr.length<span class=\\"hljs-number\\">-1</span>\\n   <span class=\\"hljs-keyword\\">while</span>(lo&lt;hi){\\n     <span class=\\"hljs-keyword\\">let</span> mid=<span class=\\"hljs-built_in\\">Math</span>.floor((lo+hi)/<span class=\\"hljs-number\\">2</span>)\\n     <span class=\\"hljs-keyword\\">if</span>(arr[mid][<span class=\\"hljs-number\\">0</span>]&lt;n[<span class=\\"hljs-number\\">0</span>])lo=mid+<span class=\\"hljs-number\\">1</span>\\n     <span class=\\"hljs-keyword\\">else</span> hi=mid\\n   }\\n   <span class=\\"hljs-keyword\\">return</span> hi\\n  }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">insert</span>(<span class=\\"hljs-params\\">n</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(pq.length===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span> pq.push(n)\\n    <span class=\\"hljs-keyword\\">if</span>(pq[pq.length<span class=\\"hljs-number\\">-1</span>][<span class=\\"hljs-number\\">0</span>]&lt;=n[<span class=\\"hljs-number\\">0</span>])<span class=\\"hljs-keyword\\">return</span> pq.push(n)\\n    <span class=\\"hljs-keyword\\">let</span> idx=bsEnd(pq,n)\\n    pq.splice(idx,<span class=\\"hljs-number\\">0</span>,n)\\n  }\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">delMax</span>(<span class=\\"hljs-params\\"></span>)</span>{\\n    <span class=\\"hljs-keyword\\">return</span> pq.pop()\\n  }\\n\\n  <span class=\\"hljs-keyword\\">let</span> curTime=<span class=\\"hljs-number\\">0</span>, maxN=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;courses.length;i++){\\n    <span class=\\"hljs-keyword\\">let</span> [duration,endTime]=courses[i]\\n    insert(courses[i])\\n    curTime+=duration\\n    <span class=\\"hljs-keyword\\">if</span>(curTime&gt;endTime){\\n      <span class=\\"hljs-keyword\\">let</span> d=delMax()\\n      curTime-=d[<span class=\\"hljs-number\\">0</span>]\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> pq.length\\n};\\n</code></pre>\\n"],"querySlug":"course-schedule-iii","created_at":"2019-04-13","timeArr":[2019,3,13,22,46,21,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>首先确定一个规则，即学习完当前课程后的总消耗时间<code>curTime</code>，必须要不大于当前课程的结束时间<code>endTime</code>。</p>\\n<p>构建一个<code>Priority Queue</code>，<code>pq</code>用来存放当前学习的课程。</p>\\n<p>将<code>courses</code>按照<strong>结束时间</strong>升序，遍历<code>crourse</code>，将当前<code>crourse[i]</code>放入<code>pq</code>，因为结束时间越来越大，</p>\\n<p>如果第<code>i</code>个不能满足上面规则，但是第<code>i-1</code>个能满足，因此我们需要删掉一门课程，从<code>pq</code>内找出持续时间最大的那一个课程，将它删除，\\n也一定能满足<code>curTime&lt;=endTime</code>，并且一定是最紧凑的安排方式。</p>\\n","content":"<p>这里有 <code>n</code> 门不同的在线课程，他们按从 <code>1</code> 到 <code>n</code>&nbsp;编号。每一门课程有一定的持续上课时间（课程时间）<code>t</code> 以及关闭时间第 d<sub>&nbsp;</sub>天。一门课要持续学习 <code>t</code> 天直到第 d<span style=\\"font-size:10.5px\\"> </span>天时要完成，你将会从第 1 天开始。</p>\\n\\n<p>给出 <code>n</code> 个在线课程用 <code>(t, d)</code> 对表示。你的任务是找出最多可以修几门课。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例：</strong></p>\\n\\n<pre>\\n<strong>输入:</strong> [[100, 200], [200, 1300], [1000, 1250], [2000, 3200]]\\n<strong>输出:</strong> 3\\n<strong>解释:</strong> \\n这里一共有 4 门课程, 但是你最多可以修 3 门:\\n首先, 修第一门课时, 它要耗费 100 天，你会在第 100 天完成, 在第 101 天准备下门课。\\n第二, 修第三门课时, 它会耗费 1000 天，所以你将在第 1100 天的时候完成它, 以及在第 1101 天开始准备下门课程。\\n第三, 修第二门课时, 它会耗时 200 天，所以你将会在第 1300 天时完成它。\\n第四门课现在不能修，因为你将会在第 3300 天完成它，这已经超出了关闭日期。</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示:</strong></p>\\n\\n<ol>\\n\\t<li>整数 1 &lt;= d, t, n &lt;= 10,000 。</li>\\n\\t<li>你不能同时修两门课程。</li>\\n</ol>\\n\\n<p>&nbsp;</p>\\n","title":"630. 课程表 III","relatedTags":["贪心","数组","堆（优先队列）"],"difficult":"Hard","lang":["javascript"],"uniqueID":"630","slug":"630-Course-Schedule-III"}')}}]);