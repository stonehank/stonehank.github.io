(window.webpackJsonp=window.webpackJsonp||[]).push([[760],{1558:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{TreeNode}</span> <span class=\\"hljs-variable\\">root</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> rob = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">root</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(!root)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>\\n  root.stole=<span class=\\"hljs-number\\">0</span>\\n  root.notStole=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">if</span>(root.left)rob(root.left)\\n  <span class=\\"hljs-keyword\\">if</span>(root.right)rob(root.right)\\n  <span class=\\"hljs-keyword\\">if</span>(!root.left &amp;&amp; !root.right){\\n    root.stole=root.val\\n    root.notStole=<span class=\\"hljs-number\\">0</span>\\n  }<span class=\\"hljs-keyword\\">else</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(root.left){\\n      root.stole+=root.left.notStole\\n      root.notStole+=<span class=\\"hljs-built_in\\">Math</span>.max(root.left.stole,root.left.notStole)\\n    }\\n    <span class=\\"hljs-keyword\\">if</span>(root.right){\\n      root.stole+=root.right.notStole\\n      root.notStole+=<span class=\\"hljs-built_in\\">Math</span>.max(root.right.stole,root.right.notStole)\\n    }\\n    root.stole+=root.val\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-built_in\\">Math</span>.max(root.stole,root.notStole)\\n};\\n</code></pre>\\n"],"querySlug":"house-robber-iii","created_at":"2019-03-18","timeArr":[2019,2,18,23,7,46,0],"hasThinking":false,"content":"<p>在上次打劫完一条街道之后和一圈房屋后，小偷又发现了一个新的可行窃的地区。这个地区只有一个入口，我们称之为&ldquo;根&rdquo;。 除了&ldquo;根&rdquo;之外，每栋房子有且只有一个&ldquo;父&ldquo;房子与之相连。一番侦察之后，聪明的小偷意识到&ldquo;这个地方的所有房屋的排列类似于一棵二叉树&rdquo;。 如果两个直接相连的房子在同一天晚上被打劫，房屋将自动报警。</p>\\n\\n<p>计算在不触动警报的情况下，小偷一晚能够盗取的最高金额。</p>\\n\\n<p><strong>示例 1:</strong></p>\\n\\n<pre><strong>输入: </strong>[3,2,3,null,3,null,1]\\n\\n     <strong>3</strong>\\n    / \\\\\\n   2   3\\n    \\\\   \\\\ \\n     <strong>3</strong>   <strong>1</strong>\\n\\n<strong>输出:</strong> 7 \\n<strong>解释:</strong>&nbsp;小偷一晚能够盗取的最高金额 = 3 + 3 + 1 = <strong>7</strong>.</pre>\\n\\n<p><strong>示例 2:</strong></p>\\n\\n<pre><strong>输入: </strong>[3,4,5,1,3,null,1]\\n\\n&nbsp;    3\\n    / \\\\\\n   <strong>4</strong>   <strong>5</strong>\\n  / \\\\   \\\\ \\n 1   3   1\\n\\n<strong>输出:</strong> 9\\n<strong>解释:</strong>&nbsp;小偷一晚能够盗取的最高金额&nbsp;= <strong>4</strong> + <strong>5</strong> = <strong>9</strong>.\\n</pre>\\n","title":"337. 打家劫舍 III","relatedTags":["树","深度优先搜索","动态规划","二叉树"],"difficult":"Middle","lang":["javascript"],"uniqueID":"337","slug":"337-House-Robber-III"}')}}]);