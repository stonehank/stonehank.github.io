(window.webpackJsonp=window.webpackJsonp||[]).push([[659],{1457:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">n</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> countPrimes = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">n</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> notPrime = <span class=\\"hljs-keyword\\">new</span> <span class=\\"hljs-built_in\\">Array</span>(n);\\n  <span class=\\"hljs-keyword\\">let</span> count = <span class=\\"hljs-number\\">0</span>;\\n  notPrime[<span class=\\"hljs-number\\">0</span>] = <span class=\\"hljs-literal\\">true</span>;\\n  notPrime[<span class=\\"hljs-number\\">1</span>] = <span class=\\"hljs-literal\\">true</span>;\\n  <span class=\\"hljs-keyword\\">for</span> (<span class=\\"hljs-keyword\\">let</span> i = <span class=\\"hljs-number\\">1</span>; i &lt; n; i=i+<span class=\\"hljs-number\\">2</span>){\\n    <span class=\\"hljs-keyword\\">if</span> (!notPrime[i]){\\n      count++;\\n      <span class=\\"hljs-keyword\\">for</span> (<span class=\\"hljs-keyword\\">let</span> j = i*i; j &lt; n; j += i){\\n        notPrime[j] = <span class=\\"hljs-literal\\">true</span>;\\n      }\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> n&gt;<span class=\\"hljs-number\\">2</span>?count+<span class=\\"hljs-number\\">1</span>:count;\\n};\\n</code></pre>\\n"],"querySlug":"count-primes","created_at":"2019-03-29","timeArr":[2019,2,29,21,18,18,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>厄拉多塞筛法，比<code>Math.sqrt</code>+<code>for in primes</code>加起来还快。</p>\\n<p>它是定义一个数组<code>notPrime</code>，表示非质数的数，<code>0</code>和<code>1</code>不是质数。</p>\\n<p>接着<code>2</code>是第一个质数，然后把范围内所有2的倍数在<code>notPrime[2的倍数]=true</code>，</p>\\n<p>接着<code>3</code>不在<code>notPrime</code>范围内，因此是下一个质数，然后把3所有的倍数设置为<code>true</code></p>\\n<p>以此类推...</p>\\n","content":"<p>统计所有小于非负整数&nbsp;<em><code>n</code>&nbsp;</em>的质数的数量。</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre><strong>输入：</strong>n = 10\\n<strong>输出：</strong>4\\n<strong>解释：</strong>小于 10 的质数一共有 4 个, 它们是 2, 3, 5, 7 。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre><strong>输入：</strong>n = 0\\n<strong>输出：</strong>0\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>n = 1\\n<strong>输出</strong>：0\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>0 &lt;= n &lt;= 5 * 10<sup>6</sup></code></li>\\n</ul>\\n","title":"204. 计数质数","relatedTags":["数组","数学","枚举","数论"],"difficult":"Easy","lang":["javascript"],"uniqueID":"204","slug":"204-Count-Primes"}')}}]);