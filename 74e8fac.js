(window.webpackJsonp=window.webpackJsonp||[]).push([[198],{680:function(e){e.exports=JSON.parse('{"content":"<h2 id=\\"reselect-yuan-ma-liang-dian-jie-shao\\">reselect源码亮点介绍</h2>\\n<p><a href=\\"https://github.com/stonehank/sourcecode-analysis/blob/master/source-code.reselect/README.md\\">完整源码说明注释</a></p>\\n<p>导图：</p>\\n<p><img src=\\"/article/img/reselect.png\\" alt=\\"\\"></p>\\n<h3 id=\\"defaultmemoize\\">defaultMemoize</h3>\\n<p>一个缓存函数，其内部：</p>\\n<ol>\\n<li>通过闭包保存参数和结果</li>\\n<li>每次调用对参数进行浅比较</li>\\n<li>参数比较结果相同，返回缓存的结果</li>\\n</ol>\\n<hr>\\n<h3 id=\\"createselectorcreator-createselector\\">createSelectorCreator, createSelector</h3>\\n<p>reselect最主要函数</p>\\n<ol>\\n<li><p><code>createSelectorCreator</code>返回一个函数，称为<code>createSelector</code></p>\\n</li>\\n<li><p><code>createSelector</code>接受2类参数</p>\\n<p> <code>依赖数据函数</code>(可以有多个)</p>\\n<p> <code>数据处理函数</code>(必须放在参数的最后)：</p>\\n</li>\\n<li><p><code>createSelector</code>的内部操作</p>\\n<ol>\\n<li><p>对<code>依赖数据函数</code>和<code>数据处理函数</code>执行缓存函数</p>\\n</li>\\n<li><p>每次执行<code>createSelector</code>的时候，依次比较<code>依赖数据函数</code>和<code>数据处理函数</code>的缓存</p>\\n<p>这样处理就可以知道要想返回缓存的结果，必须要达到以下条件任一：</p>\\n<ol>\\n<li><code>依赖数据函数</code>的参数(一般为<code>store</code>)全等比较为true</li>\\n<li><code>依赖数据函数</code>的参数(一般为<code>store</code>)全等比较为false, <code>数据处理函数</code>的参数全等比较为true</li>\\n</ol>\\n</li>\\n</ol>\\n</li>\\n<li><p>返回<code>依赖数据函数</code></p>\\n<p> <a href=\\"https://codesandbox.io/s/jlpozpjprw\\">reselect使用例子</a></p>\\n</li>\\n</ol>\\n<hr>\\n<h3 id=\\"createstructuredselector\\">createStructuredSelector</h3>\\n<p>一个便利的函数，可以用于变更数据的key值，通过嵌套可以变更数据的结构</p>\\n<p>它的内部正是调用了<code>createSelector</code></p>\\n<ol>\\n<li><p>接受2个函数，分别为一个(参数1)对象，一个(参数2)<code>selectorCreator</code>(默认就是createSelector)</p>\\n</li>\\n<li><p>调用<code>createSelector</code>，将参数1(对象)的value值作为<code>依赖数据函数</code>，\\n其<code>数据处理函数</code>就是一个将参数1(对象)的key值和<code>依赖数据函数</code>的返回值组成一个新的对象的过程。</p>\\n<p> <a href=\\"https://codesandbox.io/s/53kvl30564\\">createStructuredSelector使用例子</a></p>\\n</li>\\n</ol>\\n<hr>\\n<p>注意点：</p>\\n<ol>\\n<li><p>缓存函数只能保存上一次缓存的值(单个)。</p>\\n</li>\\n<li><p>缓存函数是通过对比参数而进行判断的，因此必须保证所提供的<code>依赖数据函数</code>和<code>数据处理函数</code>都是纯函数，而且它只保存上一次函数。</p>\\n<p> <a href=\\"https://codesandbox.io/s/n6y126v2p\\">非纯函数例子</a></p>\\n</li>\\n<li><p>要想取消缓存，必须取消引用，包括<code>依赖数据函数</code>参数(store)的引用和内部<code>数据处理函数</code>的参数引用</p>\\n<p> <a href=\\"https://codesandbox.io/s/lx1kq3lj39\\">取消缓存例子</a></p>\\n</li>\\n</ol>\\n","toc":[{"anchor":"reselect-yuan-ma-liang-dian-jie-shao","level":2,"text":"reselect源码亮点介绍"},{"anchor":"defaultmemoize","level":3,"text":"defaultMemoize"},{"anchor":"createselectorcreator-createselector","level":3,"text":"createSelectorCreator, createSelector"},{"anchor":"createstructuredselector","level":3,"text":"createStructuredSelector"}],"relatedTags":null,"created_at":"2018-07-13","timeArr":[2018,6,13,0,0,0,0],"title":"源码阅读-reselect源码学习","uuid":"2cf2373f2fa9c28ce15661630048ac1848d2530f","summary":"<h4>reselect源码亮点介绍</h4>\\n<p><a href=\\"https://github.com/stonehank/sourcecode-analysis/blob/master/source-code.reselect/README.md\\">完整源码说明注释</a></p>\\n<p>导图：</p>\\n<p><img src=\\"/article/img/reselect.png\\" alt=\\"\\">\\n...</p>","slug":"yuan-ma-yue-du-reselect-yuan-ma-xue-xi","sha":"85d8aee7f13669499db1bd4d7c3233117665daea"}')}}]);