(window.webpackJsonp=window.webpackJsonp||[]).push([[413],{1211:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">n</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">connections</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> makeConnected = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">n, connections</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(connections.length&lt;n<span class=\\"hljs-number\\">-1</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">-1</span>\\n  <span class=\\"hljs-keyword\\">let</span> uf=<span class=\\"hljs-built_in\\">Array</span>(n).fill().map(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">e,i</span>)=&gt;</span>i)\\n  <span class=\\"hljs-keyword\\">let</span> weight=<span class=\\"hljs-built_in\\">Array</span>(n).fill(<span class=\\"hljs-number\\">1</span>)\\n  <span class=\\"hljs-keyword\\">let</span> group=n\\n  <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">let</span> exceed=<span class=\\"hljs-number\\">0</span>\\n\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">find</span>(<span class=\\"hljs-params\\">i</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(i!==uf[i]){\\n      uf[i]=find(uf[i])\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> uf[i]\\n  }\\n\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">union</span>(<span class=\\"hljs-params\\">a,b</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> i=find(a),\\n      j=find(b)\\n    <span class=\\"hljs-keyword\\">if</span>(i===j){\\n      exceed++\\n      <span class=\\"hljs-keyword\\">return</span>\\n    }\\n    <span class=\\"hljs-keyword\\">if</span>(weight[i]&lt;weight[j]){\\n      uf[i]=j\\n      weight[j]+=weight[i]\\n    }<span class=\\"hljs-keyword\\">else</span>{\\n      uf[j]=i\\n      weight[i]+=weight[j]\\n    }\\n    group--\\n  }\\n\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> [x,y] <span class=\\"hljs-keyword\\">of</span> connections){\\n    union(x,y)\\n  }\\n  <span class=\\"hljs-comment\\">// console.log(group,exceed)</span>\\n  <span class=\\"hljs-keyword\\">if</span>(group!==<span class=\\"hljs-number\\">1</span>){\\n    <span class=\\"hljs-keyword\\">return</span> exceed&gt;=group<span class=\\"hljs-number\\">-1</span> ? group<span class=\\"hljs-number\\">-1</span> : <span class=\\"hljs-number\\">-1</span>\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>\\n};\\n</code></pre>\\n"],"querySlug":"number-of-operations-to-make-network-connected","created_at":"2020-01-12","timeArr":[2020,0,12,10,54,2,0],"hasThinking":false,"content":"<p>用以太网线缆将&nbsp;<code>n</code>&nbsp;台计算机连接成一个网络，计算机的编号从&nbsp;<code>0</code>&nbsp;到&nbsp;<code>n-1</code>。线缆用&nbsp;<code>connections</code>&nbsp;表示，其中&nbsp;<code>connections[i] = [a, b]</code>&nbsp;连接了计算机&nbsp;<code>a</code>&nbsp;和&nbsp;<code>b</code>。</p>\\n\\n<p>网络中的任何一台计算机都可以通过网络直接或者间接访问同一个网络中其他任意一台计算机。</p>\\n\\n<p>给你这个计算机网络的初始布线&nbsp;<code>connections</code>，你可以拔开任意两台直连计算机之间的线缆，并用它连接一对未直连的计算机。请你计算并返回使所有计算机都连通所需的最少操作次数。如果不可能，则返回&nbsp;-1 。&nbsp;</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<p><strong><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/11/sample_1_1677.png\\" style=\\"height: 167px; width: 570px;\\"></strong></p>\\n\\n<pre><strong>输入：</strong>n = 4, connections = [[0,1],[0,2],[1,2]]\\n<strong>输出：</strong>1\\n<strong>解释：</strong>拔下计算机 1 和 2 之间的线缆，并将它插到计算机 1 和 3 上。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<p><strong><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/11/sample_2_1677.png\\" style=\\"height: 175px; width: 660px;\\"></strong></p>\\n\\n<pre><strong>输入：</strong>n = 6, connections = [[0,1],[0,2],[0,3],[1,2],[1,3]]\\n<strong>输出：</strong>2\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre><strong>输入：</strong>n = 6, connections = [[0,1],[0,2],[0,3],[1,2]]\\n<strong>输出：</strong>-1\\n<strong>解释：</strong>线缆数量不足。\\n</pre>\\n\\n<p><strong>示例 4：</strong></p>\\n\\n<pre><strong>输入：</strong>n = 5, connections = [[0,1],[0,2],[3,4],[2,3]]\\n<strong>输出：</strong>0\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= n &lt;= 10^5</code></li>\\n\\t<li><code>1 &lt;= connections.length &lt;= min(n*(n-1)/2, 10^5)</code></li>\\n\\t<li><code>connections[i].length == 2</code></li>\\n\\t<li><code>0 &lt;= connections[i][0], connections[i][1]&nbsp;&lt; n</code></li>\\n\\t<li><code>connections[i][0] != connections[i][1]</code></li>\\n\\t<li>没有重复的连接。</li>\\n\\t<li>两台计算机不会通过多条线缆连接。</li>\\n</ul>\\n","title":"1319. 连通网络的操作次数","relatedTags":["深度优先搜索","广度优先搜索","并查集","图"],"difficult":"Middle","lang":["javascript"],"uniqueID":"1319","slug":"1319-Number-of-Operations-to-Make-Network-Connected"}')}}]);