(window.webpackJsonp=window.webpackJsonp||[]).push([[84],{566:function(n){n.exports=JSON.parse('{"content":"<p><code>useCallback, useMemo, useRef, useImperativeMethods, useMutationEffect, useLayoutEffect</code></p>\\n<hr>\\n<ul>\\n<li><p>useCallback</p>\\n</li>\\n<li><p>useMemo</p>\\n</li>\\n</ul>\\n<p><code>useCallback(fn, inputs) is equivalent to useMemo(() =&gt; fn, inputs)</code></p>\\n<p>根据inputs的内容判断是否执行缓存。</p>\\n<p>待更新：</p>\\n<p>与<code>shouldComponentUpdate</code>搭配</p>\\n<ul>\\n<li>useRef</li>\\n</ul>\\n<ol>\\n<li><p>可以当成class中的ref属性使用，与<code>React.createRef()</code>类似，引用值放在<code>.current</code>属性下。</p>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code> <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">TextInputWithFocusButton</span>(<span class=\\"hljs-params\\"></span>) </span>{\\n   <span class=\\"hljs-keyword\\">const</span> inputEl = useRef(<span class=\\"hljs-literal\\">null</span>);\\n   <span class=\\"hljs-keyword\\">const</span> onButtonClick = <span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span> =&gt;</span> {\\n     <span class=\\"hljs-comment\\">// `current` points to the mounted text input element</span>\\n     inputEl.current.focus();\\n   };\\n   <span class=\\"hljs-keyword\\">return</span> (\\n     &lt;&gt;\\n       &lt;input ref={inputEl} type=\\"text\\" /&gt;\\n       &lt;button onClick={onButtonClick}&gt;Focus the input&lt;/button&gt;\\n     &lt;/&gt;\\n   );\\n }</code></pre></code></pre>\\n</li>\\n<li><p>可以当成<code>instance fields in class</code>使用，类似于<code>this.xxx</code>，保留任何变量。</p>\\n</li>\\n</ol>\\n<ul>\\n<li>useImperativeMethods</li>\\n</ul>\\n<p>自定义并且暴露一个<code>ref</code>实例的方法到父元素，一般搭配<code>forwardRef</code>使用。</p>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">FancyInput</span>(<span class=\\"hljs-params\\">props, ref</span>) </span>{\\n  <span class=\\"hljs-keyword\\">const</span> inputRef = useRef();\\n  useImperativeMethods(ref, () =&gt; ({\\n    <span class=\\"hljs-attr\\">focus</span>: <span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span> =&gt;</span> {\\n      inputRef.current.focus();\\n    }\\n  }));\\n  <span class=\\"hljs-keyword\\">return</span> &lt;input ref={inputRef} ... /&gt;;\\n}\\nFancyInput = forwardRef(FancyInput);</code></pre></code></pre>\\n<p>当父元素这么调用<code>&lt;FancyInput ref={fancyInputRef} /&gt;</code>，<code>fancyInputRef.current</code>就存在<code>focus</code>方法。</p>\\n<ul>\\n<li>useMutationEffect</li>\\n</ul>\\n<p>相当于<code>useEffect</code>在React执行DOM更新的时候同步调用。</p>\\n<ul>\\n<li>useLayoutEffect</li>\\n</ul>\\n<p>相当于<code>useEffect</code>在React执行DOM更新结束的时候同步调用。</p>\\n<p>有点像<code>componentDidUpdate</code></p>\\n","toc":[],"relatedTags":null,"created_at":"2018-10-31","timeArr":[2018,9,31,0,0,0,0],"title":"React v16.7 Hooks(2)","uuid":"98dd615567b3aca2beb98ad1d65b71331760149b","summary":"<p><code>useCallback, useMemo, useRef, useImperativeMethods, useMutationEffect, useLayoutEffect</code></p>","slug":"React-v16.7-Hooks(2)","sha":"4f37e4ca6137a17d6454b46239f1712d981ecdc7"}')}}]);