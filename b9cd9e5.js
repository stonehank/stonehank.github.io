(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{554:function(e){e.exports=JSON.parse('{"content":"<p>影响<code>Http</code>性能的几点：</p>\\n<ol>\\n<li><p>TCP 慢启动</p>\\n<p> 指的是TCP连接最初会被限制连接最大速度，只有当数据传送成功，才会逐步提高传输速度，这是为了防止因特网突然过载和拥塞。</p>\\n</li>\\n<li><p><code>Nagle</code>算法</p>\\n<p> 将大量TCP数据绑定在一起，避免大量的小数据的分组。但问题是，可能因为等待其他TCP数据产生延迟。</p>\\n<p> 开启<code>TCP_NODELAY</code>选项可以禁用<code>Nagle</code>算法，需要尽量确保发送大块数据。</p>\\n</li>\\n<li><p>TIME_WAIT</p>\\n<p> 指的是在关闭TCP连接时，会有一小段信息缓存最近关闭的IP地址和端口号，维持<code>2MSL</code>，这段时间内无法创建相同的IP地址和端口号。</p>\\n<blockquote>\\n<p>MSL：Maximum Segment Lifetime，规定是2分钟，实际也有30秒，1分钟。</p>\\n</blockquote>\\n<p> 之所以等待<code>2MSL</code>是为了保证客户端发送的最后一个ACK报文能够到达服务端。</p>\\n</li>\\n<li><p>串行事务处理</p>\\n<p> 如果每个事务都需要建立一条新的链接，那么连接时延和慢启动时延就会叠加起来。</p>\\n</li>\\n</ol>\\n<p>解决<code>Http</code>性能的几点：</p>\\n<ol>\\n<li><p>并行连接</p>\\n<p> 客户端打开多条连接，并行地执行多个HTTP事务，充分利用因特网的带宽，但还是受慢启动影响。</p>\\n</li>\\n<li><p>持久连接</p>\\n<p> 避免慢启动阶段和重复发送报文头部，但要注意避免累积大量空闲连接。</p>\\n<p> <code>keep-alive</code>首部发送请求，需要服务器返回<code>Connection:Keep-Alive</code>首部，否则客户端认为服务端不支持<code>keep-alive</code>。</p>\\n<p> 参数<code>timeout</code>，估计了服务器希望连接保持活跃的时间，并不是一个承诺值。</p>\\n<p> 参数<code>max</code>，估计了服务器希望为多少个事务保持连接活跃状态，并不是一个承诺值。</p>\\n<p> http1.0 使用<code>connection:keep-alive</code>开启持久连接。</p>\\n<p> http1.1默认开启持久连接，名为<code>persistent connection</code>,当需要关闭时，发送<code>connection:close</code>。</p>\\n</li>\\n<li><p>管道化连接</p>\\n<p> http1.1 在持久连接上可选择使用请求管道。</p>\\n<p> 使用管道化能在请求的同时，继续后续的请求，提高性能，但不应该使用有副作用的请求。</p>\\n</li>\\n</ol>\\n","toc":[],"relatedTags":null,"created_at":"2019-04-11","timeArr":[2019,3,11,0,0,0,0],"title":"《Http权威指南》http性能","uuid":"2d6cd16c42d4c8dc0c9ccfed027881544a800d15","summary":"<p>影响<code>Http</code>性能的几点：</p>\\n<ol>\\n<li>\\n<p>TCP 慢启动</p>\\n<p>指的是TCP连接最初会被限制连接最大速度，只有当数据传送成功，才会逐步提高传输速度，这是为了防止因特网突然过载和拥塞。</p>\\n</li>\\n<li>\\n<p><code>Nagle</code>算法</p>\\n<p>将大量TCP数据绑定在一起，避免大量的小数据的分组。但问题是，可能因为等待其他TCP数据产...</p>\\n</li>\\n</ol>","slug":"Http-quan-wei-zhi-nan-http-xing-neng","sha":"b037d4e8d3b90a0aa21d65b03af8e28caf013de4"}')}}]);