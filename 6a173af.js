(window.webpackJsonp=window.webpackJsonp||[]).push([[1280],{2078:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[][]}</span> <span class=\\"hljs-variable\\">graph</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> catMouseGame = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">graph</span>) </span>{\\n  <span class=\\"hljs-comment\\">// 猫到每一个洞相邻的点最远的最近距离x，老鼠到洞最近的距离y</span>\\n  <span class=\\"hljs-comment\\">/*\\n  if x&gt;=y m win\\n  if x&lt;y \\n    if 不存在4边以上的环 c win\\n    else\\n      老鼠到环上点的距离&lt;猫到此点的距离 draw\\n  */</span>\\n  <span class=\\"hljs-keyword\\">let</span> target=<span class=\\"hljs-number\\">0</span>\\n  <span class=\\"hljs-keyword\\">let</span> targetAdj=graph[<span class=\\"hljs-number\\">0</span>]\\n  <span class=\\"hljs-keyword\\">let</span> fobbid=targetAdj.filter(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">v</span>)=&gt;</span>graph[v].includes(<span class=\\"hljs-number\\">2</span>))\\n  <span class=\\"hljs-keyword\\">let</span> x=<span class=\\"hljs-number\\">-1</span>\\n  \\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;targetAdj.length;i++){\\n    x=<span class=\\"hljs-built_in\\">Math</span>.max(x,bfs(<span class=\\"hljs-number\\">2</span>,targetAdj[i],[]))\\n  }\\n  <span class=\\"hljs-keyword\\">let</span> y=bfs(<span class=\\"hljs-number\\">1</span>,<span class=\\"hljs-number\\">0</span>,[])\\n  <span class=\\"hljs-comment\\">// 老鼠无路可走，猫赢</span>\\n  <span class=\\"hljs-keyword\\">if</span>(y===<span class=\\"hljs-number\\">-1</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">2</span>\\n  <span class=\\"hljs-comment\\">// 老鼠能更快到洞，老鼠赢</span>\\n  <span class=\\"hljs-keyword\\">if</span>(x&gt;=y)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">1</span>\\n\\n  <span class=\\"hljs-keyword\\">let</span> cycles=hasCycle(graph)\\n  <span class=\\"hljs-comment\\">// 无环，猫赢</span>\\n  <span class=\\"hljs-keyword\\">if</span>(cycles.length===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">2</span>\\n  <span class=\\"hljs-comment\\">// 某个环的某个点，老鼠更快到达，打和</span>\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;cycles.length;i++){\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;cycles[i].length;j++){\\n      <span class=\\"hljs-keyword\\">if</span>(bfs(<span class=\\"hljs-number\\">1</span>,cycles[i][j],[]) &lt; bfs(<span class=\\"hljs-number\\">2</span>,cycles[i][j],[]))<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">2</span>\\n  \\n  \\n  <span class=\\"hljs-comment\\">// 找出所有的环</span>\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">hasCycle</span>(<span class=\\"hljs-params\\">graph</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> stack=[]\\n    <span class=\\"hljs-keyword\\">let</span> marked=[]\\n    <span class=\\"hljs-keyword\\">let</span> hasCycle=<span class=\\"hljs-literal\\">false</span>\\n    <span class=\\"hljs-keyword\\">let</span> cycles=[]\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">1</span>;i&lt;graph.length;i++){\\n      <span class=\\"hljs-keyword\\">if</span>(marked[i]==<span class=\\"hljs-literal\\">null</span>){\\n        stack=[]\\n        dfs(graph,i,i)\\n      }\\n    }\\n    cycles=cycles.filter(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">arr</span>)=&gt;</span>arr.length&gt;=<span class=\\"hljs-number\\">4</span>)\\n    <span class=\\"hljs-keyword\\">return</span> cycles\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">dfs</span>(<span class=\\"hljs-params\\">graph,v,u</span>)</span>{\\n      stack.push(v)\\n      <span class=\\"hljs-keyword\\">if</span>(hasCycle)<span class=\\"hljs-keyword\\">return</span>\\n      marked[v]=<span class=\\"hljs-literal\\">true</span>\\n      <span class=\\"hljs-keyword\\">let</span> adj=graph[v]\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;adj.length;i++){\\n        <span class=\\"hljs-keyword\\">if</span>(adj[i]===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">continue</span>\\n        <span class=\\"hljs-keyword\\">if</span>(marked[adj[i]]==<span class=\\"hljs-literal\\">null</span>) dfs(graph,adj[i],v)\\n        <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(adj[i]!==u){\\n          stack.push(adj[i])\\n          hasCycle=<span class=\\"hljs-literal\\">true</span>\\n          <span class=\\"hljs-keyword\\">let</span> cycle=[],hash={}\\n          <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;stack.length;i++){\\n            <span class=\\"hljs-keyword\\">if</span>(hash[stack[i]]==<span class=\\"hljs-literal\\">null</span>)hash[stack[i]]=i\\n            <span class=\\"hljs-keyword\\">else</span>{\\n              <span class=\\"hljs-keyword\\">return</span> cycles.push(stack.slice(hash[stack[i]],i))\\n            }\\n          }\\n        }\\n      }\\n      stack.pop()\\n    }\\n  }\\n\\n  <span class=\\"hljs-comment\\">// 求最短路径</span>\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">bfs</span>(<span class=\\"hljs-params\\">s,e,visited,isCat</span>)</span>{\\n    <span class=\\"hljs-keyword\\">let</span> arr=[s],steps=<span class=\\"hljs-number\\">0</span>\\n    visited[s]=<span class=\\"hljs-literal\\">true</span>\\n    <span class=\\"hljs-keyword\\">while</span>(arr.length&gt;<span class=\\"hljs-number\\">0</span>){\\n      <span class=\\"hljs-keyword\\">let</span> len=arr.length\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;len;i++){\\n        <span class=\\"hljs-keyword\\">let</span> v=arr.shift()\\n        <span class=\\"hljs-keyword\\">let</span> adj=graph[v]\\n        <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">0</span>;j&lt;adj.length;j++){\\n          <span class=\\"hljs-keyword\\">if</span>(adj[j]===e)<span class=\\"hljs-keyword\\">return</span> steps+<span class=\\"hljs-number\\">1</span>\\n          <span class=\\"hljs-comment\\">// 猫不能走进洞</span>\\n          <span class=\\"hljs-keyword\\">if</span>(isCat &amp;&amp; adj[j]===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">continue</span>\\n          <span class=\\"hljs-comment\\">// 老鼠不能走到猫的位置 并且 第一步不能走到猫隔壁的位置</span>\\n          <span class=\\"hljs-keyword\\">if</span>(!isCat &amp;&amp; (adj[j]===<span class=\\"hljs-number\\">2</span> || (fobbid.includes(adj[j]) &amp;&amp; steps===<span class=\\"hljs-number\\">0</span>)))<span class=\\"hljs-keyword\\">continue</span>\\n          <span class=\\"hljs-keyword\\">if</span>(visited[adj[j]])<span class=\\"hljs-keyword\\">continue</span>\\n          visited[adj[j]]=<span class=\\"hljs-literal\\">true</span>\\n          arr.push(adj[j])\\n        }\\n      }\\n      steps++\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">-1</span>\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"cat-and-mouse","created_at":"2019-04-16","timeArr":[2019,3,16,23,27,25,0],"hasThinking":false,"content":"<p>两个玩家分别扮演猫（Cat）和老鼠（Mouse）在<strong>无向</strong>图上进行游戏，他们轮流行动。</p>\\n\\n<p>该图按下述规则给出：<code>graph[a]</code>&nbsp;是所有结点 <code>b</code> 的列表，使得 <code>ab</code> 是图的一条边。</p>\\n\\n<p>老鼠从结点 1 开始并率先出发，猫从结点 2 开始且随后出发，在结点 0 处有一个洞。</p>\\n\\n<p>在每个玩家的回合中，他们<strong>必须</strong>沿着与他们所在位置相吻合的图的一条边移动。例如，如果老鼠位于结点 <code>1</code>，那么它只能移动到&nbsp;<code>graph[1]</code>&nbsp;中的（任何）结点去。</p>\\n\\n<p>此外，猫无法移动到洞（结点 0）里。</p>\\n\\n<p>然后，游戏在出现以下三种情形之一时结束：</p>\\n\\n<ul>\\n\\t<li>如果猫和老鼠占据相同的结点，猫获胜。</li>\\n\\t<li>如果老鼠躲入洞里，老鼠获胜。</li>\\n\\t<li>如果某一位置重复出现（即，玩家们的位置和移动顺序都与上一个回合相同），游戏平局。</li>\\n</ul>\\n\\n<p>给定&nbsp;<code>graph</code>，并假设两个玩家都以最佳状态参与游戏，如果老鼠获胜，则返回&nbsp;<code>1</code>；如果猫获胜，则返回 <code>2</code>；如果平局，则返回 <code>0</code>。</p>\\n\\n<p>&nbsp;</p>\\n\\n<ol>\\n</ol>\\n\\n<p><strong>示例：</strong></p>\\n\\n<pre><strong>输入：</strong>[[2,5],[3],[0,4,5],[1,4,5],[2,3],[0,2,3]]\\n<strong>输出：</strong>0\\n<strong>解释：</strong>\\n4---3---1\\n|&nbsp; &nbsp;|\\n2---5\\n&nbsp;\\\\&nbsp;/\\n&nbsp; 0\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ol>\\n\\t<li><code>3 &lt;= graph.length &lt;= 200</code></li>\\n\\t<li>保证 <code>graph[1]</code>&nbsp;非空。</li>\\n\\t<li>保证&nbsp;<code>graph[2]</code>&nbsp;包含非零元素。</li>\\n</ol>\\n","title":"913. 猫和老鼠","relatedTags":["广度优先搜索","图","记忆化搜索","数学","动态规划","博弈"],"difficult":"Hard","lang":["javascript"],"uniqueID":"913","slug":"913-Cat-and-Mouse"}')}}]);