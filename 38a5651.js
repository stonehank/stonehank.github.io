(window.webpackJsonp=window.webpackJsonp||[]).push([[865],{1663:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">nums</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{boolean}</span></span>\\n */</span>\\n<span class=\\"hljs-comment\\">// 3 2 5 0 4 59</span>\\n<span class=\\"hljs-comment\\">// 2 5 0</span>\\n\\n<span class=\\"hljs-keyword\\">var</span> find132pattern = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">nums</span>) </span>{\\n    <span class=\\"hljs-keyword\\">if</span>(nums.length&lt;<span class=\\"hljs-number\\">3</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n    <span class=\\"hljs-keyword\\">let</span> s3Stack=[]\\n    <span class=\\"hljs-keyword\\">let</span> s2=-<span class=\\"hljs-literal\\">Infinity</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=nums.length<span class=\\"hljs-number\\">-1</span>;i&gt;=<span class=\\"hljs-number\\">0</span>;i--){\\n        <span class=\\"hljs-keyword\\">if</span>(nums[i]&lt;s2)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n        <span class=\\"hljs-keyword\\">while</span>(s3Stack.length!==<span class=\\"hljs-number\\">0</span> &amp;&amp; nums[i]&gt;s3Stack[s3Stack.length<span class=\\"hljs-number\\">-1</span>]){\\n            s2=s3Stack.pop()\\n        }\\n        s3Stack.push(nums[i])\\n    }\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n};\\n</code></pre>\\n"],"querySlug":"132-pattern","created_at":"2021-03-24","timeArr":[2021,2,24,7,40,56,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>由于是<code>132</code>模式，我们倒序遍历，让<code>32</code>尽可能的大，然后一旦发现<code>1</code>&lt;<code>2</code>，则返回<code>true</code>。</p>\\n<p>倒序遍历时，通过<code>stack</code>存放<code>3</code>，如果<code>nums[i]&gt;stack[stack.length-1]</code>，说明存在更大的<code>3</code>，因此可以让<code>2</code>为当前<code>stack.pop</code>，\\n再将更大的<code>3</code>添加进<code>stack</code>。</p>\\n<p>遍历过程中，一旦发现<code>nums[i]&lt;2</code>，说明<code>nums[i]</code>可以作为<code>1</code>，返回<code>true</code>。</p>\\n","content":"<p>给你一个整数数组 <code>nums</code> ，数组中共有 <code>n</code> 个整数。<strong>132 模式的子序列</strong> 由三个整数 <code>nums[i]</code>、<code>nums[j]</code> 和 <code>nums[k]</code> 组成，并同时满足：<code>i < j < k</code> 和 <code>nums[i] < nums[k] < nums[j]</code> 。</p>\\n\\n<p>如果 <code>nums</code> 中存在 <strong>132 模式的子序列</strong> ，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [1,2,3,4]\\n<strong>输出：</strong>false\\n<strong>解释：</strong>序列中不存在 132 模式的子序列。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [3,1,4,2]\\n<strong>输出：</strong>true\\n<strong>解释：</strong>序列中有 1 个 132 模式的子序列： [1, 4, 2] 。\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<pre>\\n<strong>输入：</strong>nums = [-1,3,2,0]\\n<strong>输出：</strong>true\\n<strong>解释：</strong>序列中有 3 个 132 模式的的子序列：[-1, 3, 2]、[-1, 3, 0] 和 [-1, 2, 0] 。\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li><code>n == nums.length</code></li>\\n\\t<li><code>1 <= n <= 2 * 10<sup>5</sup></code></li>\\n\\t<li><code>-10<sup>9</sup> <= nums[i] <= 10<sup>9</sup></code></li>\\n</ul>\\n","title":"456. 132 模式","relatedTags":["栈","数组","二分查找","有序集合","单调栈"],"difficult":"Middle","lang":["javascript"],"uniqueID":"456","slug":"456-132-Pattern"}')}}]);