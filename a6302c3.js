(window.webpackJsonp=window.webpackJsonp||[]).push([[280],{1078:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">str1</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">str2</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{string}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> shortestCommonSupersequence = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">str1, str2</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> m=str1.length,n=str2.length\\n  <span class=\\"hljs-keyword\\">let</span> dp=<span class=\\"hljs-built_in\\">Array</span>(m+<span class=\\"hljs-number\\">1</span>).fill().map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span>=&gt;</span><span class=\\"hljs-built_in\\">Array</span>(n+<span class=\\"hljs-number\\">1</span>).fill(<span class=\\"hljs-string\\">\'\'</span>))\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">1</span>;i&lt;m+<span class=\\"hljs-number\\">1</span>;i++){\\n    dp[i][<span class=\\"hljs-number\\">0</span>]=dp[i<span class=\\"hljs-number\\">-1</span>][<span class=\\"hljs-number\\">0</span>]+str1[i<span class=\\"hljs-number\\">-1</span>]\\n  }\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">1</span>;i&lt;n+<span class=\\"hljs-number\\">1</span>;i++){\\n    dp[<span class=\\"hljs-number\\">0</span>][i]=dp[<span class=\\"hljs-number\\">0</span>][i<span class=\\"hljs-number\\">-1</span>]+str2[i<span class=\\"hljs-number\\">-1</span>]\\n  }\\n  <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">1</span>;i&lt;m+<span class=\\"hljs-number\\">1</span>;i++){\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> j=<span class=\\"hljs-number\\">1</span>;j&lt;n+<span class=\\"hljs-number\\">1</span>;j++){\\n      <span class=\\"hljs-keyword\\">let</span> a=str1[i<span class=\\"hljs-number\\">-1</span>],b=str2[j<span class=\\"hljs-number\\">-1</span>]\\n      <span class=\\"hljs-keyword\\">if</span>(a===b){\\n        dp[i][j]=dp[i<span class=\\"hljs-number\\">-1</span>][j<span class=\\"hljs-number\\">-1</span>]+a\\n      }<span class=\\"hljs-keyword\\">else</span>{\\n        <span class=\\"hljs-keyword\\">let</span> x=dp[i<span class=\\"hljs-number\\">-1</span>][j<span class=\\"hljs-number\\">-1</span>]+a+b,\\n            y=dp[i<span class=\\"hljs-number\\">-1</span>][j]+a,\\n            z=dp[i][j<span class=\\"hljs-number\\">-1</span>]+b\\n        <span class=\\"hljs-keyword\\">let</span> minLen=<span class=\\"hljs-built_in\\">Math</span>.min(x.length,y.length,z.length)\\n        <span class=\\"hljs-keyword\\">if</span>(minLen===x.length)dp[i][j]=x\\n        <span class=\\"hljs-keyword\\">else</span> <span class=\\"hljs-keyword\\">if</span>(minLen===y.length)dp[i][j]=y\\n        <span class=\\"hljs-keyword\\">else</span> dp[i][j]=z\\n      }\\n    }\\n  }\\n  <span class=\\"hljs-comment\\">// console.log(dp)</span>\\n  <span class=\\"hljs-keyword\\">return</span> dp[m][n]\\n};\\n</code></pre>\\n"],"querySlug":"shortest-common-supersequence","created_at":"2019-06-16","timeArr":[2019,5,16,11,23,22,0],"hasThinking":false,"content":"<p>给出两个字符串&nbsp;<code>str1</code> 和&nbsp;<code>str2</code>，返回同时以&nbsp;<code>str1</code>&nbsp;和&nbsp;<code>str2</code>&nbsp;作为子序列的最短字符串。如果答案不止一个，则可以返回满足条件的任意一个答案。</p>\\n\\n<p>（如果从字符串 T 中删除一些字符（也可能不删除，并且选出的这些字符可以位于 T 中的&nbsp;<strong>任意位置</strong>），可以得到字符串 S，那么&nbsp;S 就是&nbsp;T 的子序列）</p>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>示例：</strong></p>\\n\\n<pre><strong>输入：</strong>str1 = &quot;abac&quot;, str2 = &quot;cab&quot;\\n<strong>输出：</strong>&quot;cabac&quot;\\n<strong>解释：</strong>\\nstr1 = &quot;abac&quot; 是 &quot;cabac&quot; 的一个子串，因为我们可以删去 &quot;cabac&quot; 的第一个 &quot;c&quot;得到 &quot;abac&quot;。 \\nstr2 = &quot;cab&quot; 是 &quot;cabac&quot; 的一个子串，因为我们可以删去 &quot;cabac&quot; 末尾的 &quot;ac&quot; 得到 &quot;cab&quot;。\\n最终我们给出的答案是满足上述属性的最短字符串。\\n</pre>\\n\\n<p>&nbsp;</p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ol>\\n\\t<li><code>1 &lt;= str1.length, str2.length &lt;= 1000</code></li>\\n\\t<li><code>str1</code> 和&nbsp;<code>str2</code>&nbsp;都由小写英文字母组成。</li>\\n</ol>\\n","title":"1092. 最短公共超序列","relatedTags":["字符串","动态规划"],"difficult":"Hard","lang":["javascript"],"uniqueID":"1092","slug":"1092-Shortest-Common-Supersequence"}')}}]);