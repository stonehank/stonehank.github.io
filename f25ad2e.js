(window.webpackJsonp=window.webpackJsonp||[]).push([[755],{1553:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{string}</span> <span class=\\"hljs-variable\\">preorder</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{boolean}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> isValidSerialization = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">preorder</span>) </span>{\\n    <span class=\\"hljs-keyword\\">if</span>(preorder===<span class=\\"hljs-string\\">\'#\'</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">true</span>\\n    <span class=\\"hljs-keyword\\">let</span> stack=[]\\n    <span class=\\"hljs-keyword\\">let</span> arr=preorder.split(<span class=\\"hljs-string\\">\',\'</span>)\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=<span class=\\"hljs-number\\">0</span>;i&lt;arr.length;i++){\\n        <span class=\\"hljs-keyword\\">if</span>(i!==<span class=\\"hljs-number\\">0</span> &amp;&amp; stack.length===<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">false</span>\\n        <span class=\\"hljs-keyword\\">if</span>(arr[i]===<span class=\\"hljs-string\\">\'#\'</span>){\\n            <span class=\\"hljs-keyword\\">while</span>(stack.length&gt;<span class=\\"hljs-number\\">0</span> &amp;&amp; stack[stack.length<span class=\\"hljs-number\\">-1</span>]===<span class=\\"hljs-number\\">1</span>){\\n                stack.pop()\\n            }\\n            <span class=\\"hljs-keyword\\">if</span>(stack.length&gt;<span class=\\"hljs-number\\">0</span> &amp;&amp; stack[stack.length<span class=\\"hljs-number\\">-1</span>]===<span class=\\"hljs-number\\">0</span>){\\n                stack[stack.length<span class=\\"hljs-number\\">-1</span>]=<span class=\\"hljs-number\\">1</span>\\n            }\\n            \\n        }<span class=\\"hljs-keyword\\">else</span>{\\n            stack.push(<span class=\\"hljs-number\\">0</span>)\\n        }\\n        <span class=\\"hljs-comment\\">// console.log(stack)</span>\\n    }\\n            <span class=\\"hljs-comment\\">// console.log(stack)</span>\\n    <span class=\\"hljs-keyword\\">return</span> stack.length===<span class=\\"hljs-number\\">0</span>\\n};\\n</code></pre>\\n"],"querySlug":"verify-preorder-serialization-of-a-binary-tree","created_at":"2021-03-12","timeArr":[2021,2,12,7,40,30,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>因为给定的字符串是包含空节点的前序遍历，因此叶子节点必然含有<code>2</code>个空节点<code>#</code>。</p>\\n<p>确定这条规则后，就可以使用<code>stack</code>来解决，不断对每个节点元素压栈，直到栈最后<code>2</code>个都是<code>#</code>，并且倒数第三个不是<code>#</code>。</p>\\n<p>这是一个有效节点，因此可以出栈，并且用<code>#</code>来代替这个有效节点，继续判断是否存在下一个有效节点。</p>\\n<p>最后，栈的大小应该只有<code>1</code>，并且<code>stack[0]===\'#\'</code>。</p>\\n","content":"<p>序列化二叉树的一种方法是使用前序遍历。当我们遇到一个非空节点时，我们可以记录下这个节点的值。如果它是一个空节点，我们可以使用一个标记值记录，例如 <code>#</code>。</p>\\n\\n<pre>     _9_\\n    /   \\\\\\n   3     2\\n  / \\\\   / \\\\\\n 4   1  #  6\\n/ \\\\ / \\\\   / \\\\\\n# # # #   # #\\n</pre>\\n\\n<p>例如，上面的二叉树可以被序列化为字符串 <code>&quot;9,3,4,#,#,1,#,#,2,#,6,#,#&quot;</code>，其中 <code>#</code> 代表一个空节点。</p>\\n\\n<p>给定一串以逗号分隔的序列，验证它是否是正确的二叉树的前序序列化。编写一个在不重构树的条件下的可行算法。</p>\\n\\n<p>每个以逗号分隔的字符或为一个整数或为一个表示 <code>null</code> 指针的 <code>&#39;#&#39;</code> 。</p>\\n\\n<p>你可以认为输入格式总是有效的，例如它永远不会包含两个连续的逗号，比如&nbsp;<code>&quot;1,,3&quot;</code> 。</p>\\n\\n<p><strong>示例 1:</strong></p>\\n\\n<pre><strong>输入: </strong><code>&quot;9,3,4,#,#,1,#,#,2,#,6,#,#&quot;</code>\\n<strong>输出: </strong><code>true</code></pre>\\n\\n<p><strong>示例&nbsp;2:</strong></p>\\n\\n<pre><strong>输入: </strong><code>&quot;1,#&quot;</code>\\n<strong>输出: </strong><code>false</code>\\n</pre>\\n\\n<p><strong>示例 3:</strong></p>\\n\\n<pre><strong>输入: </strong><code>&quot;9,#,#,1&quot;</code>\\n<strong>输出: </strong><code>false</code></pre>\\n","title":"331. 验证二叉树的前序序列化","relatedTags":["栈","树","字符串","二叉树"],"difficult":"Middle","lang":["javascript"],"uniqueID":"331","slug":"331-Verify-Preorder-Serialization-of-a-Binary-Tree"}')}}]);