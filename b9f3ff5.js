(window.webpackJsonp=window.webpackJsonp||[]).push([[487],{1285:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for singly-linked list.\\n * function ListNode(val) {\\n *     this.val = val;\\n *     this.next = null;\\n * }\\n */</span>\\n\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{ListNode}</span> <span class=\\"hljs-variable\\">head</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{ListNode}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> detectCycle = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">head</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> fast=head,slow=head,cycleLen=<span class=\\"hljs-number\\">0</span>,hasCycle=<span class=\\"hljs-literal\\">false</span>\\n  <span class=\\"hljs-keyword\\">while</span>(fast &amp;&amp; fast.next){\\n    slow=slow.next\\n    fast=fast.next.next\\n    cycleLen++\\n    <span class=\\"hljs-keyword\\">if</span>(fast===slow){\\n      hasCycle=<span class=\\"hljs-literal\\">true</span>\\n      <span class=\\"hljs-keyword\\">break</span>\\n    }\\n  }\\n  <span class=\\"hljs-keyword\\">if</span>(!hasCycle)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">null</span>\\n  fast=head\\n  <span class=\\"hljs-keyword\\">while</span>(fast!==slow){\\n    fast=fast.next\\n    slow=slow.next\\n  }\\n  <span class=\\"hljs-keyword\\">return</span> fast\\n};\\n</code></pre>\\n"],"querySlug":"linked-list-cycle-ii","created_at":"2019-04-11","timeArr":[2019,3,11,16,28,29,0],"hasThinking":true,"thinking":"<hr>\\n<p>思路：</p>\\n<p>首先通过快慢<code>双指针</code>计算出是否存在环，和环的节点数。</p>\\n<p>知道了环的节点数，继续<code>双指针</code>一前一后相隔环的长度，当它们相遇的时候，必定在环的起点。</p>\\n","content":"<p>给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 <code>null</code>。</p>\\n\\n<p>为了表示给定链表中的环，我们使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。<strong>注意，<code>pos</code> 仅仅是用于标识环的情况，并不会作为参数传递到函数中。</strong></p>\\n\\n<p><strong>说明：</strong>不允许修改给定的链表。</p>\\n\\n<p><strong>进阶：</strong></p>\\n\\n<ul>\\n\\t<li>你是否可以使用 <code>O(1)</code> 空间解决此题？</li>\\n</ul>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n\\n<p><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist.png\\" style=\\"height: 97px; width: 300px;\\" /></p>\\n\\n<pre>\\n<strong>输入：</strong>head = [3,2,0,-4], pos = 1\\n<strong>输出：</strong>返回索引为 1 的链表节点\\n<strong>解释：</strong>链表中有一个环，其尾部连接到第二个节点。\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n\\n<p><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png\\" style=\\"height: 74px; width: 141px;\\" /></p>\\n\\n<pre>\\n<strong>输入：</strong>head = [1,2], pos = 0\\n<strong>输出：</strong>返回索引为 0 的链表节点\\n<strong>解释：</strong>链表中有一个环，其尾部连接到第一个节点。\\n</pre>\\n\\n<p><strong>示例 3：</strong></p>\\n\\n<p><img alt=\\"\\" src=\\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png\\" style=\\"height: 45px; width: 45px;\\" /></p>\\n\\n<pre>\\n<strong>输入：</strong>head = [1], pos = -1\\n<strong>输出：</strong>返回 null\\n<strong>解释：</strong>链表中没有环。\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li>链表中节点的数目范围在范围 <code>[0, 10<sup>4</sup>]</code> 内</li>\\n\\t<li><code>-10<sup>5</sup> <= Node.val <= 10<sup>5</sup></code></li>\\n\\t<li><code>pos</code> 的值为 <code>-1</code> 或者链表中的一个有效索引</li>\\n</ul>\\n","title":"142. 环形链表 II","relatedTags":["哈希表","链表","双指针"],"difficult":"Middle","lang":["javascript"],"uniqueID":"142","slug":"142-Linked-List-Cycle-II"}')}}]);