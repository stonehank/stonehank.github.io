(window.webpackJsonp=window.webpackJsonp||[]).push([[1261],{2059:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */</span>\\n<span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{TreeNode}</span> <span class=\\"hljs-variable\\">root</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{TreeNode}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> increasingBST = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">root</span>) </span>{\\n  <span class=\\"hljs-keyword\\">if</span>(!root)<span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-literal\\">null</span>\\n  <span class=\\"hljs-keyword\\">let</span> ans=<span class=\\"hljs-keyword\\">new</span> TreeNode(<span class=\\"hljs-number\\">-1</span>)\\n  <span class=\\"hljs-keyword\\">let</span> node=ans\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">dfs</span>(<span class=\\"hljs-params\\">root</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(root.left)dfs(root.left)\\n    node.right=<span class=\\"hljs-keyword\\">new</span> TreeNode(root.val)\\n    node=node.right\\n    <span class=\\"hljs-keyword\\">if</span>(root.right)dfs(root.right)\\n  }\\n  dfs(root)\\n  <span class=\\"hljs-keyword\\">return</span> ans.right\\n};\\n</code></pre>\\n"],"querySlug":"increasing-order-search-tree","created_at":"2021-04-25","timeArr":[2021,3,25,10,23,52,0],"hasThinking":false,"content":"<p>给你一棵二叉搜索树，请你 <strong>按中序遍历</strong> 将其重新排列为一棵递增顺序搜索树，使树中最左边的节点成为树的根节点，并且每个节点没有左子节点，只有一个右子节点。</p>\\n\\n<p> </p>\\n\\n<p><strong>示例 1：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2020/11/17/ex1.jpg\\" style=\\"width: 600px; height: 350px;\\" />\\n<pre>\\n<strong>输入：</strong>root = [5,3,6,2,4,null,8,1,null,null,null,7,9]\\n<strong>输出：</strong>[1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]\\n</pre>\\n\\n<p><strong>示例 2：</strong></p>\\n<img alt=\\"\\" src=\\"https://assets.leetcode.com/uploads/2020/11/17/ex2.jpg\\" style=\\"width: 300px; height: 114px;\\" />\\n<pre>\\n<strong>输入：</strong>root = [5,1,7]\\n<strong>输出：</strong>[1,null,5,null,7]\\n</pre>\\n\\n<p> </p>\\n\\n<p><strong>提示：</strong></p>\\n\\n<ul>\\n\\t<li>树中节点数的取值范围是 <code>[1, 100]</code></li>\\n\\t<li><code>0 <= Node.val <= 1000</code></li>\\n</ul>\\n","title":"897. 递增顺序搜索树","relatedTags":["栈","树","深度优先搜索","二叉搜索树","二叉树"],"difficult":"Easy","lang":["javascript"],"uniqueID":"897","slug":"897-Increasing-Order-Search-Tree"}')}}]);