(window.webpackJsonp=window.webpackJsonp||[]).push([[1169],{1967:function(n){n.exports=JSON.parse('{"code":["<pre class=\\"hljs\\"><code><span class=\\"hljs-comment\\">/**\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number[]}</span> <span class=\\"hljs-variable\\">A</span></span>\\n * <span class=\\"hljs-doctag\\">@param <span class=\\"hljs-type\\">{number}</span> <span class=\\"hljs-variable\\">K</span></span>\\n * <span class=\\"hljs-doctag\\">@return <span class=\\"hljs-type\\">{number}</span></span>\\n */</span>\\n<span class=\\"hljs-keyword\\">var</span> largestSumOfAverages = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">A, K</span>) </span>{\\n  <span class=\\"hljs-keyword\\">let</span> mem=<span class=\\"hljs-built_in\\">Array</span>(A.length).fill().map(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">()</span>=&gt;</span><span class=\\"hljs-built_in\\">Array</span>(K).fill(<span class=\\"hljs-literal\\">null</span>))\\n  <span class=\\"hljs-keyword\\">return</span> split(<span class=\\"hljs-number\\">0</span>,K<span class=\\"hljs-number\\">-1</span>)\\n  <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">split</span>(<span class=\\"hljs-params\\">start,k</span>)</span>{\\n    <span class=\\"hljs-keyword\\">if</span>(start===A.length &amp;&amp; k&gt;<span class=\\"hljs-number\\">0</span>)<span class=\\"hljs-keyword\\">return</span> -<span class=\\"hljs-literal\\">Infinity</span>\\n    <span class=\\"hljs-keyword\\">if</span>(k===<span class=\\"hljs-number\\">0</span>){\\n      <span class=\\"hljs-keyword\\">let</span> sum=<span class=\\"hljs-number\\">0</span>\\n      <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=start;i&lt;A.length;i++)sum+=A[i]\\n      <span class=\\"hljs-keyword\\">return</span> sum/(A.length-start)\\n    }\\n    <span class=\\"hljs-keyword\\">if</span>(mem[start][k]!=<span class=\\"hljs-literal\\">null</span>)<span class=\\"hljs-keyword\\">return</span> mem[start][k]\\n    <span class=\\"hljs-keyword\\">let</span> res=<span class=\\"hljs-number\\">0</span>, curSum=<span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">for</span>(<span class=\\"hljs-keyword\\">let</span> i=start;i&lt;A.length-k;i++){\\n      curSum+=A[i]\\n      res=<span class=\\"hljs-built_in\\">Math</span>.max(res,(curSum/(i-start+<span class=\\"hljs-number\\">1</span>))+split(i+<span class=\\"hljs-number\\">1</span>,k<span class=\\"hljs-number\\">-1</span>))\\n    }\\n    mem[start][k]=res\\n    <span class=\\"hljs-keyword\\">return</span> res\\n  }\\n};\\n</code></pre>\\n"],"querySlug":"largest-sum-of-averages","created_at":"2019-03-08","timeArr":[2019,2,8,12,38,50,0],"hasThinking":false,"content":"<p>我们将给定的数组&nbsp;<code>A</code>&nbsp;分成&nbsp;<code>K</code>&nbsp;个相邻的非空子数组 ，我们的分数由每个子数组内的平均值的总和构成。计算我们所能得到的最大分数是多少。</p>\\n\\n<p>注意我们必须使用 A 数组中的每一个数进行分组，并且分数不一定需要是整数。</p>\\n\\n<pre>\\n<strong>示例:</strong>\\n<strong>输入:</strong> \\nA = [9,1,2,3,9]\\nK = 3\\n<strong>输出:</strong> 20\\n<strong>解释:</strong> \\nA 的最优分组是[9], [1, 2, 3], [9]. 得到的分数是 9 + (1 + 2 + 3) / 3 + 9 = 20.\\n我们也可以把 A 分成[9, 1], [2], [3, 9].\\n这样的分组得到的分数为 5 + 2 + 6 = 13, 但不是最大值.\\n</pre>\\n\\n<p><strong>说明: </strong></p>\\n\\n<ul>\\n\\t<li><code>1 &lt;= A.length &lt;= 100</code>.</li>\\n\\t<li><code>1 &lt;= A[i] &lt;= 10000</code>.</li>\\n\\t<li><code>1 &lt;= K &lt;= A.length</code>.</li>\\n\\t<li>答案误差在&nbsp;<code>10^-6</code>&nbsp;内被视为是正确的。</li>\\n</ul>\\n","title":"813. 最大平均值和的分组","relatedTags":["数组","动态规划"],"difficult":"Middle","lang":["javascript"],"uniqueID":"813","slug":"813-Largest-Sum-of-Averages"}')}}]);