(window.webpackJsonp=window.webpackJsonp||[]).push([[99],{581:function(e){e.exports=JSON.parse('{"content":"<h2 id=\\"hui-gu\\">回顾</h2>\\n<p>在这一片文章中，我构建一个获取函数参数名的工具，是通过<code>esprima</code>去解析<code>AST</code>并对其进行分析判断。</p>\\n<p>通过对<code>AST</code>的分析，几乎能兼容所有函数和参数的写法，这是因为它是从语义上分析代码。</p>\\n<h2 id=\\"wen-ti\\">问题</h2>\\n<p>但使用的同时，也发现了3个问题，<strong>第1个是致命的</strong>。</p>\\n<ol>\\n<li><p>babel编译。</p>\\n<p> 当我们很爽的写着ES6函数的时候，<code>babel</code>会将你的参数格式彻底打乱。</p>\\n<p> 例如：</p>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code> <span class=\\"hljs-keyword\\">let</span> sum=<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">a=<span class=\\"hljs-number\\">2</span>,b=<span class=\\"hljs-number\\">3</span></span>)=&gt;</span>{\\n   <span class=\\"hljs-built_in\\">console</span>.log(a+b)\\n }</code></pre></code></pre>\\n<p> 编译后，没有参数了，工具彻底失效。</p>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code> <span class=\\"hljs-keyword\\">var</span> sum = <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span> <span class=\\"hljs-title\\">sum</span>(<span class=\\"hljs-params\\"></span>) </span>{\\n   <span class=\\"hljs-keyword\\">var</span> a = <span class=\\"hljs-built_in\\">arguments</span>.length &gt; <span class=\\"hljs-number\\">0</span> &amp;&amp; <span class=\\"hljs-built_in\\">arguments</span>[<span class=\\"hljs-number\\">0</span>] !== <span class=\\"hljs-literal\\">undefined</span> ? <span class=\\"hljs-built_in\\">arguments</span>[<span class=\\"hljs-number\\">0</span>] : <span class=\\"hljs-number\\">2</span>;\\n   <span class=\\"hljs-keyword\\">var</span> b = <span class=\\"hljs-built_in\\">arguments</span>.length &gt; <span class=\\"hljs-number\\">1</span> &amp;&amp; <span class=\\"hljs-built_in\\">arguments</span>[<span class=\\"hljs-number\\">1</span>] !== <span class=\\"hljs-literal\\">undefined</span> ? <span class=\\"hljs-built_in\\">arguments</span>[<span class=\\"hljs-number\\">1</span>] : <span class=\\"hljs-number\\">3</span>;\\n   <span class=\\"hljs-built_in\\">console</span>.log(a + b);\\n };</code></pre></code></pre>\\n</li>\\n<li><p>动态编译。</p>\\n<p> 必须要等到程序开始运行后才能工作，这意味着要将整个<code>esprima</code>库放入到项目中，除非你的项目中已经有依赖\\n <code>esprima</code>，否则为这个功能会带来额外的体积开销。</p>\\n</li>\\n<li><p>性能。</p>\\n<p> 由于是运行时才开始执行分析<code>AST</code>树，这意味着你的首屏时间又双叒叕增加了...</p>\\n</li>\\n</ol>\\n<h2 id=\\"jie-jue-fang-an\\">解决方案</h2>\\n<p>当前最需要解决的就是如果适应babel编译。</p>\\n<p>很显然，那就是要抢在babel编译之前，这就请出今天的主角，<strong>babel插件</strong>。</p>\\n<p>首先简要说明一下，babel是怎么编译你的代码的，<code>AST</code>树。</p>\\n<p>例如上面的函数</p>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-keyword\\">let</span> sum=<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">a=<span class=\\"hljs-number\\">2</span>,b=<span class=\\"hljs-number\\">3</span></span>)=&gt;</span>{\\n  <span class=\\"hljs-built_in\\">console</span>.log(a+b)\\n}</code></pre></code></pre>\\n<p>babel会检测到是一个<code>ArrowFunctionExpression(箭头函数表达式)</code>，然后继续检测，\\n发现参数是<code>ExpressionStatement(表达式语句)</code>，符合修改的要求，于是构造出这两句的<code>AST</code>树</p>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-keyword\\">var</span> a = <span class=\\"hljs-built_in\\">arguments</span>.length &gt; <span class=\\"hljs-number\\">0</span> &amp;&amp; <span class=\\"hljs-built_in\\">arguments</span>[<span class=\\"hljs-number\\">0</span>] !== <span class=\\"hljs-literal\\">undefined</span> ? <span class=\\"hljs-built_in\\">arguments</span>[<span class=\\"hljs-number\\">0</span>] : <span class=\\"hljs-number\\">2</span>;\\n<span class=\\"hljs-keyword\\">var</span> b = <span class=\\"hljs-built_in\\">arguments</span>.length &gt; <span class=\\"hljs-number\\">1</span> &amp;&amp; <span class=\\"hljs-built_in\\">arguments</span>[<span class=\\"hljs-number\\">1</span>] !== <span class=\\"hljs-literal\\">undefined</span> ? <span class=\\"hljs-built_in\\">arguments</span>[<span class=\\"hljs-number\\">1</span>] : <span class=\\"hljs-number\\">3</span>;</code></pre></code></pre>\\n<p>其中一条<code>var a=...</code>的<code>AST</code>如下，具体可以这里尝试，<a href=\\"https://astexplorer.net/\\">https://astexplorer.net/</a></p>\\n<p><img src=\\"/article/img/AST-sample.png\\" alt=\\"./img/AST-sample.png\\"></p>\\n<p>并将其插入到当前的<code>BlockStatement(大括号作用域内)</code></p>\\n<p>检测和构造，就是babel，也是babel插件的核心。</p>\\n<h2 id=\\"ast-jie-dian-xiu-gai\\">AST节点修改</h2>\\n<p>正式开始，先从一个简单的结构看起，一个官方插件<code>@babel/plugin-transform-object-assign</code>，作用是将<code>Object.assign</code>\\n转换成<code>_extends</code>，这个<code>_extends</code>是一个预定义的方法。</p>\\n<pre><code class=\\"language-js\\"><pre class=\\"hljs\\"><code><span class=\\"hljs-keyword\\">import</span> { declare } <span class=\\"hljs-keyword\\">from</span> <span class=\\"hljs-string\\">\\"@babel/helper-plugin-utils\\"</span>;\\n<span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">default</span> declare(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">api</span> =&gt;</span> {\\n  api.assertVersion(<span class=\\"hljs-number\\">7</span>);\\n<span class=\\"hljs-comment\\">/*----------以上是确认版本判断功能是否存在---------*/</span>\\n  <span class=\\"hljs-keyword\\">return</span> {\\n    <span class=\\"hljs-attr\\">visitor</span>: {\\n      <span class=\\"hljs-attr\\">CallExpression</span>: <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\">path, file</span>) </span>{\\n        <span class=\\"hljs-keyword\\">if</span> (path.get(<span class=\\"hljs-string\\">\\"callee\\"</span>).matchesPattern(<span class=\\"hljs-string\\">\\"Object.assign\\"</span>)) {\\n          path.node.callee = file.addHelper(<span class=\\"hljs-string\\">\\"extends\\"</span>);\\n        }\\n      },\\n    },\\n  };\\n});</code></pre></code></pre>\\n<p>从第6行开始</p>\\n<ul>\\n<li><p><code>visitor</code>指的是访问者模式，简单来说就是我们遍历<code>AST</code>树，每次遍历一个节点，都会进入visitor执行我们的代码。</p>\\n</li>\\n<li><p><code>CallExpression</code>说明我们要找的相关语义是<code>调用表达式</code>，它是一个函数，有2个参数<code>path</code>和<code>file</code>，</p>\\n</li>\\n<li><p><code>file</code>这里调用了addHelper方法，用的比较少，暂时搁着。</p>\\n</li>\\n<li><p><code>path</code>相当是一个连接对象，它里面的属性可以连接到各个我们需要的对象，例如如果我们要找到<code>CallExpression</code>对象本身，\\n那么就是进入<code>path.node</code>，如果要找它的父节点，进入<code>path.parent</code>等等</p>\\n<blockquote>\\n<p>个人理解：要尽快进入<code>path.node</code>，而不要在<code>path</code>上做过多判断甚至是遍历，\\n  因为它是一个包含了所有节点的path的对象，它的作用就是让我们快速到达想要找的节点，\\n  如果在<code>path</code>上面一层层寻找(我就这么干了！)，身心俱疲...</p>\\n</blockquote>\\n</li>\\n</ul>\\n<p>继续回到例子</p>\\n<ul>\\n<li><p><code>path.get(&quot;callee&quot;)</code>，因为这是一个<code>CallExpression</code>，它一定有一个<code>callee</code>属性，\\n  通过<code>.get</code>可以快速查找，相当于<code>path.node.callee</code>。</p>\\n</li>\\n<li><p><code>.matchesPattern(&quot;Object.assign&quot;)</code>字面意思，匹配到<code>Object.assign</code>这个字样。</p>\\n</li>\\n<li><p><code>path.node.callee = file.addHelper(&quot;extends&quot;)</code>就是将<code>callee</code>属性重新设置成<code>_extend</code>，\\n这里的<code>file.addHelper(&quot;extends&quot;)</code>返回的也是一个<code>AST</code>对象，<code>Identifier{type:&quot;Identifier &quot;,name:&quot;_extend&quot;}</code>，\\n这是一个标识符，像变量，参数，属性的名称等都是标识符。</p>\\n<p>  记住，要在<code>AST</code>树上插入的内容一定也要是<code>AST</code>对象。</p>\\n</li>\\n</ul>\\n<p>看到吗，就这么多，很好理解吧，因为这里只是修改了一个属性，并没有增加。</p>\\n<h2 id=\\"ast-jie-dian-zeng-jia\\">AST节点增加</h2>\\n<p>在这一块，我被困扰了好几个小时，主要还是概念太过缺失，现在总结起来。</p>\\n<ol>\\n<li><p>每一个AST节点都是一个对象，这个对象内部有必须的属性(type是必须的)，也有非必须的属性，例如：</p>\\n<p> <code>ArrayExpression(数组表达式)</code>，也就是数组，必须的属性只有1个，<code>elements</code>，它的元素</p>\\n<p> 那么就可以想象一下，它的最简单<code>AST</code>树结构就是</p>\\n<pre><code><pre class=\\"hljs\\"><code> {\\n   type:&quot;ArrayExpression&quot;,\\n   elements:[]\\n }</code></pre></code></pre><p> 但查找时会发现，默认的树还有其他许多属性，例如<code>start</code>,<code>loc</code>等等，这些我们在创建的时候，可以不必理会。</p>\\n</li>\\n<li><p>创建方式有多种，分为2类，使用工具创建和不使用工具创建。</p>\\n<p> 当然，最开始我是不使用工具的，当时写一个对象结构里面的<code>key</code>属性是字符串，<code>value</code>属性是数组(并且有的有可能多层嵌套)，\\n 然后开始一个个节点对象创建，递归，遍历，写啊写，写完执行，失败，好吧，一层一层的剥开调试...这就是写bug的正确方式。</p>\\n<p> 好吧，<code>ctrl+a -&gt; del</code>，这里只讲我使用的方式。</p>\\n<p> 安装<code>@babel/core</code>，引入<code>import {template,types as t} from &quot;@babel/core&quot;</code></p>\\n<ul>\\n<li><p><code>template</code></p>\\n<p>用来创建模板的，能少写很多东西，例如：<code>template(&quot;let x=SOMEVALUE&quot;)</code>\\n这里只需要在后面传入<code>SOMEVALUE(要大写)</code>的值，就会自动创建出<code>let x=xxxx</code>这个表达式的<code>AST</code>对象。</p>\\n</li>\\n<li><p><code>types</code></p>\\n<p>用来创建单个节点对象的。\\n或许我只想简单创建一个字符串，那么就是<code>t.stringLiteral(&quot;这里是要创建的字符串&quot;)</code>，</p>\\n<p>创建一个数组，那么是<code>t.arrayExpression(elements)</code>，</p>\\n<p>也就是使用<code>t</code>的节点名称方法，传入这个节点必须的属性就可以了，你只需要了解你的代码对应的语义，\\n最后拼接，例如 一个有3个字符串作为元素的数组：</p>\\n<p><code>t.arrayExpression([t.stringLiteral(&quot;a&quot;),t.stringLiteral(&quot;b&quot;),t.stringLiteral(&quot;c&quot;)])</code></p>\\n<p>简洁高效。</p>\\n</li>\\n</ul>\\n</li>\\n</ol>\\n<h2 id=\\"zong-jie\\">总结</h2>\\n<p>关于AST的操作还有很多，例如删除，替换...具体可以看<code>bable-handbook</code>，这篇文章说的修改和增加，内容不深，主要是让我们对AST\\n的结构，并且是如何通过它去创建babel插件能有一个概念，接下来的更多发掘就靠自己的探索了。</p>\\n","toc":[{"anchor":"hui-gu","level":2,"text":"回顾"},{"anchor":"wen-ti","level":2,"text":"问题"},{"anchor":"jie-jue-fang-an","level":2,"text":"解决方案"},{"anchor":"ast-jie-dian-xiu-gai","level":2,"text":"AST节点修改"},{"anchor":"ast-jie-dian-zeng-jia","level":2,"text":"AST节点增加"},{"anchor":"zong-jie","level":2,"text":"总结"}],"relatedTags":null,"created_at":"2018-09-20","timeArr":[2018,8,20,0,0,0,0],"title":"从零开始构建babel插件","uuid":"1fe9476aee8ec9e615a5ea77d64b322605aa28f8","summary":"<h4>回顾</h4>\\n<p>在这一片文章中，我构建一个获取函数参数名的工具，是通过<code>esprima</code>去解析<code>AST</code>并对其进行分析判断。</p>\\n<p>通过对<code>AST</code>的分析，几乎能兼容所有函数和参数的写法，这是因为它是从语义上分析代码。</p>\\n<h4>问题</h4>\\n<p>但使用的同时，也发现了3个问题，<strong>第1个是致命的</strong>。</p>\\n<ol>\\n<li>babel编译。</li>\\n</ol>\\n<p>...</p>","slug":"cong-ling-kai-shi-gou-jian-babel-cha-jian","sha":"c6aabf028612373f374ca39935fa4a385595f224"}')}}]);